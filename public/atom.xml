<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jake Trent]]></title>
  <link href="http://jaketrent.com/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2013-06-25T08:19:50-06:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[When to Use Curlies in Angular Directives]]></title>
    <link href="http://jaketrent.com/post/when-to-use-curlies-in-angular-directives/"/>
    <updated>2013-06-24T17:03:00-06:00</updated>
    <id>http://jaketrent.com/post/when-to-use-curlies-in-angular-directives</id>
    <content type="html"><![CDATA[<p>Angularjs has some sweet built-in directives.  Sometimes it can be confusing when to use the curly braces around expressions in directive attributes and when not to.  Here are a couple rules.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="Angular directive curlies" /></p>

<!--more-->


<h2>Curlies</h2>

<p>By &#8220;curlies&#8221;, I mean curly braces.  The difference of when to use or not use them looks like the following.</p>

<p>Use them:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;element</span> <span class="na">ng-attribute=</span><span class="s">&quot;{{valWithCurlies}}&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or despise them:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;element</span> <span class="na">ng-attribute=</span><span class="s">&quot;valWithNone&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Two Rules of Thumb</h2>

<p>Here are two rules that will serve you well when deciding whether or not to use curlies.</p>

<ol>
<li>Assume no curlies in Angular directive attribute values.  Most directives don&#8217;t use them.</li>
<li>If you would conceivably want to mix strings with Javascript code in the attribute, use curlies.</li>
</ol>


<h2>Two Examples with Curlies</h2>

<p>There are only a few examples of directives using curlies in their attributes.  These examples are both relating to pathing.  Apparently that&#8217;s a common use case for mixing strings with JavaScript-borne values.</p>

<h3>ngSrc</h3>

<p>As in the source of an image, such as:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">ng-src=</span><span class="s">&quot;/images/{{tool.icon_name}}.png&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ngHref</h3>

<p>As in a link to an html page, such as:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">ng-href=</span><span class="s">&quot;http://google.com?q={{query}}&quot;</span><span class="nt">&gt;</span>See Google Results<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Something more Precise?</h2>

<p>Is there something more precise than these two rules of thumb?  Why does Angular make an exception for these two cases, thus causing us to try to remember our rules of thumb?</p>

<p>As I surmised above, I can only guess that because the pathing use case often wants to mix strings with JavaScript values, the exception was made.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remove Mobile Safari Click Delay]]></title>
    <link href="http://jaketrent.com/post/remove-mobile-safari-click-delay/"/>
    <updated>2013-06-24T08:04:00-06:00</updated>
    <id>http://jaketrent.com/post/remove-mobile-safari-click-delay</id>
    <content type="html"><![CDATA[<p>Did you know that Mobile Safari and other mobile browsers are delaying your click events?  If you&#8217;ve been testing your mobile site, and it feels sluggish in Mobile Safari, this could be one of the reasons.  Disable the click delay and rejoice at a bit more snappy response.</p>

<p><img src="http://i.imgur.com/PH8Zosr.png" alt="mobile browser delay" /></p>

<!--more-->


<h2>Sandbagging?</h2>

<p>Why would a browser vendor build in this &#8220;functionality&#8221;?  Are they purposefully sandbagging their web experience so consumers will be more drawn to a device-specific app instead?  As if that could ever happen.</p>

<p>Google, as with most things, has an answer.  From a <a href="https://developers.google.com/mobile/articles/fast_buttons?hl=de-DE.">Google Developer article</a>:</p>

<blockquote><p>The reason for [the 300ms delay] is that the browser is waiting to see if you are actually performing a double tap.</p></blockquote>

<p>As with the apps Google was developing, the buttons that we&#8217;re designing don&#8217;t really need this check for double taps.  We really just want fast buttons.</p>

<h2>FastClick</h2>

<p>Really, most of the work for this problem is figuring out where the slowness is coming from.  I spent days and days trying to optimize a single-page web app that had a bunch of buttons with click events that seemed slow for some reason.  I came up with all sorts of theories and wasted a lot of time.</p>

<p>Now that you know what your problem is, just download and use a library to solve it.  Of the most fantastic, <a href="https://github.com/ftlabs/fastclick">FastClick</a>.  It&#8217;s easy to use.</p>

<p><strong>Step 1</strong>
Include the script in the <code>head</code> tag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;fastclick.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Step 2</strong>
Attach FastClick to all links on the page (or subset if you wish):</p>

<figure class='code'><figcaption><span>a-whole-new-world.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span> <span class="s">&#39;load&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">FastClick</span><span class="p">.</span><span class="nx">attach</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span>
</span><span class='line'><span class="p">,</span> <span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just like that, you&#8217;ll see marked improvements.  Thank you Apple.  Thank you FastClick.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ngStyle Background]]></title>
    <link href="http://jaketrent.com/post/ngstyle-background/"/>
    <updated>2013-06-19T07:08:00-06:00</updated>
    <id>http://jaketrent.com/post/ngstyle-background</id>
    <content type="html"><![CDATA[<p><code>ngStyle</code> is the directive used to set inline style attributes with AngularJs.  Most of the time, it&#8217;s straightforward to use.  <code>background</code> css attributes can be just slightly trickier.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="AngularJs" /></p>

<!--more-->


<h2>ngStyle Objects</h2>

<p>The <code>ngStyle</code> directive requires an object for input.  The object key is the css attribute name.  The resultant value for the key is the value of the css attribute.</p>

<p><code>ngStyle</code> is obviously used to set dynamic styles, because static styles are more easily and efficient set using the standard html <code>style</code> attribute.</p>

<h2>A Dynamic Style Example</h2>

<p>So let&#8217;s setup a controller that sets a dynamic color based on something as useful as the time.  Useful, right?</p>

<figure class='code'><figcaption><span>colorCtrl.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;colorly&#39;</span><span class="p">).</span><span class="nx">controller</span> <span class="s">&#39;colorCtrl&#39;</span><span class="p">,</span> <span class="nf">($scope) -&gt;</span>
</span><span class='line'>  <span class="nv">$scope.getColor = </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">is</span> <span class="mi">0</span> <span class="k">then</span> <span class="s">&quot;red&quot;</span> <span class="k">else</span> <span class="s">&quot;blue&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could use this <code>getColor</code> function in our app:</p>

<figure class='code'><figcaption><span>app.jade</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'>html(ng-app=&quot;colorly&quot;)
</span><span class='line'>  head
</span><span class='line'>    <span class="c">//- ... include Angular, etc</span>
</span><span class='line'>  body(ng-controller=&quot;colorly&quot;)
</span><span class='line'>    p(ng-style=&quot;{ color: getColor() }&quot;)
</span><span class='line'>      | The text will be one of two colors
</span></code></pre></td></tr></table></div></figure>


<h2>A Background Example</h2>

<p>If we have a dynamic value that needs to go in a css <code>background</code> or <code>background-image</code> attribute, it can be just a bit more tricky to specify.</p>

<p>Let&#8217;s say we have a <code>getImage()</code> function in our controller.  This function returns a string formatted similar to this: <code>url(icons/pen.png)</code>.  If we do, the <code>ngStyle</code> declaration is specified the exact same way as before:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'>ng-style=&quot;{ &#39;background-image&#39;: getImage() }&quot;
</span></code></pre></td></tr></table></div></figure>


<p>Make sure to put quotes around the <code>background-image</code> key name.  Remember, this must be formatted as a valid Javascript object key.</p>

<h2>Another Background Example</h2>

<p>That example was easy.  Often, however, you don&#8217;t have data stored in your models that&#8217;s formatted like <code>url(icons/pen.png)</code>.  Instead you often have a field that represents the image path only.  In this case, you must do some JavaScript inside your <code>ngStyle</code> declaration:</p>

<figure class='code'><figcaption><span>colorCtrl.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;colorly&#39;</span><span class="p">).</span><span class="nx">controller</span> <span class="s">&#39;colorCtrl&#39;</span><span class="p">,</span> <span class="nf">($scope) -&gt;</span>
</span><span class='line'>  <span class="nv">$scope.tool =</span>
</span><span class='line'>    <span class="nv">name: </span><span class="s">&#39;Pen&#39;</span>
</span><span class='line'>    <span class="nv">icon: </span><span class="s">&#39;icons/pen.png&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'>ng-style=&quot;{ &#39;background-image&#39;: &#39;url(&#39; + tool.icon + &#39;)&#39; }&quot;
</span></code></pre></td></tr></table></div></figure>


<p>Remember that it&#8217;s just Javascript, and you&#8217;ll setup the string concatenation to work just fine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mongoose Population]]></title>
    <link href="http://jaketrent.com/post/mongoose-population/"/>
    <updated>2013-06-18T07:39:00-06:00</updated>
    <id>http://jaketrent.com/post/mongoose-population</id>
    <content type="html"><![CDATA[<p><a href="http://mongoosejs.com">Mongoose</a> is an object modeler for <a href="http://mongodb.org">MongoDb</a>.  It has a particularly great feature, called <a href="http://mongoosejs.com/docs/populate.html">population</a>.  Population allows you to include other objects in a specified object.  It makes the process a lot easier and more automatic.</p>

<p><img src="http://i.imgur.com/pezEyw7.jpg" alt="Mongoose" /></p>

<!--more-->


<h2>Document Design</h2>

<p>Document databases provide a lot of flexibility in how data is modeled.  Just as the name suggests, data will often mimic real-world documents.  MongoDb isn&#8217;t a document database per se, but it has enough flexibility to be treated as one.  Mongoose population can help.</p>

<p>A document is often optimized for reads.  All the data is included, such as it would be on a real-world piece of paper.</p>

<p>In Mongo, data is divided into collections.  Mongoose helps define discrete schemas for data in each.  This separates and makes data fields explicit.  This helps with data organization, storage, and writing.  Population helps bring data from different collections back together again easily.  From the <a href="http://mongoosejs.com/docs/populate.html">docs</a>:</p>

<blockquote><p>Population is the process of automatically replacing the specified paths in the document with document(s) from other collection(s).</p></blockquote>

<p>So, let&#8217;s try it out with a couple examples.</p>

<h2>Data Definition</h2>

<p>Mongo will add a primary surrogate key to each object, called <a href="http://docs.mongodb.org/manual/reference/object-id/">ObjectId</a>, referenced as <code>_id</code> in the data.  This will be the key used to refer to objects in other collections.  If I wanted to model players in leagues &#8211; foosball leagues of course &#8211;  I might create schemas like this:</p>

<figure class='code'><figcaption><span>player.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">mongoose = </span><span class="nx">require</span> <span class="s">&#39;mongoose&#39;</span>
</span><span class='line'><span class="nv">Schema = </span><span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span>
</span><span class='line'>
</span><span class='line'><span class="nv">playerSchema = </span><span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span>
</span><span class='line'>  <span class="nv">display_name: </span><span class="nb">String</span>
</span><span class='line'>  <span class="nv">leagues: </span><span class="p">[</span>
</span><span class='line'>    <span class="nv">type: </span><span class="nx">Schema</span><span class="p">.</span><span class="nx">Types</span><span class="p">.</span><span class="nx">ObjectId</span>
</span><span class='line'>    <span class="nv">ref: </span><span class="s">&#39;League&#39;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Player = </span><span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span> <span class="s">&#39;Player&#39;</span><span class="p">,</span> <span class="nx">playerSchema</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>league.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">mongoose = </span><span class="nx">require</span> <span class="s">&#39;mongoose&#39;</span>
</span><span class='line'><span class="nv">Schema = </span><span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span>
</span><span class='line'>
</span><span class='line'><span class="nv">leagueSchema = </span><span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span>
</span><span class='line'>  <span class="nv">display_name: </span><span class="nb">String</span>
</span><span class='line'>  <span class="nv">created_by:</span>
</span><span class='line'>    <span class="nv">type: </span><span class="nx">Schema</span><span class="p">.</span><span class="nx">Types</span><span class="p">.</span><span class="nx">ObjectId</span>
</span><span class='line'>    <span class="nv">ref: </span><span class="s">&#39;Player&#39;</span>
</span><span class='line'>  <span class="nv">players: </span><span class="p">[</span>
</span><span class='line'>    <span class="nv">type: </span><span class="nx">Schema</span><span class="p">.</span><span class="nx">Types</span><span class="p">.</span><span class="nx">ObjectId</span>
</span><span class='line'>    <span class="nv">ref: </span><span class="s">&#39;Player&#39;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nv">League = </span><span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span> <span class="s">&#39;League&#39;</span><span class="p">,</span> <span class="nx">leagueSchema</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few points of interest:</p>

<ul>
<li>Since we are using <code>_id</code> to refer to other objects, we use the <code>ObjectId</code> type in the Mongoose definition.  You can use other fields.  Just make sure the type matches.</li>
<li>The <code>ref</code> attribute must match <em>exactly</em> the model name in your model definition.  Otherwise you&#8217;ll get something like this little beauty: <code>MissingSchemaError: Schema hasn't been registered for model "Player".</code>.</li>
<li>Note that <code>League.players</code> is an array.  Just surround the field definition in square brackets to get this functionality.</li>
</ul>


<h2>Data Read</h2>

<p>Reading data is where Mongoose population really shines.  This is the magic that makes reads of documents very straightforward, easy, and fast.  The magic is in the <code>populate()</code> function.</p>

<h3>Populate One Field</h3>

<p>If I want to populate a single field in the query for an object, I specify the name of that field in a string to the <code>populate</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">Player</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">findOne</span><span class="p">({</span> <span class="nv">_id: </span><span class="s">&#39;abc123&#39;</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">populate</span><span class="p">(</span><span class="s">&#39;leagues&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">exec</span> <span class="nf">(err, player) -&gt;</span> <span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>leagues</code> will be populated with an array of full <code>League</code> objects when the resulting json returned, just like magic.</p>

<h3>Populate Multiple Fields</h3>

<p>Populating multiple referenced objects is similarly easy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">League</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">find</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">populate</span><span class="p">(</span><span class="s">&#39;created_by players&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">exec</span> <span class="nf">(err, league) -&gt;</span> <span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just separate the field names in your <code>populate</code> parameter with spaces.  This query will return an array of <code>League</code> with the <code>created_by</code> and <code>player</code> fields populated with the associated <code>Player</code> objects.</p>

<h3>Populate Partial Objects</h3>

<p>Populating objects like this can quickly bloat your payload size.  To limit included objects to only a subset of fields, you can specify exactly what parts you want populated.  For instance, if my client UI only needed to show a list of leagues that a player belongs to, I could ask for just the <code>display_name</code> of the included <code>League</code> object by using a 2nd parameter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">Player</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">findOne</span><span class="p">({</span> <span class="nv">_id: </span><span class="s">&#39;abc123&#39;</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">populate</span><span class="p">(</span><span class="s">&#39;leagues&#39;</span><span class="p">,</span> <span class="s">&#39;display_name&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">exec</span> <span class="nf">(err, player) -&gt;</span> <span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>


<p>For listing multiple parts, separate the attribute names with spaces.</p>

<h3>Forget to Populate</h3>

<p>You might get so used to having objects populated for some of your queries that you might wonder why they&#8217;re not populated in your latest query.  You probably just forgot to call <code>populate()</code> in your query.  You must do this explicitly to get the inclusions you desire.  Otherwise, you the data you query will just include the <code>_id</code> values.</p>

<h3>Explicitly Exclude Field</h3>

<p>It might not be that you forgot to populate, but that on some queries you don&#8217;t want to populate.  In these cases, you might not want to be sending around unneeded <code>_id</code> values, especially if they make up a large portion of your data size.  You can explicitly exclude such fields.  For instance, if you wanted all <code>Player</code> models but weren&#8217;t going to populate <code>leagues</code>, you might query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">Player</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">find</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s">&#39;-leagues&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">exect</span> <span class="nf">(err, players) -&gt;</span> <span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the <code>-</code> sign in the <code>select</code> clause.  This removes the field from the results.</p>

<h2>Data Write</h2>

<p>When you go to read the data, it&#8217;s quick, easy, and automatic.  But that&#8217;s because some work was done previously to reference the correct objects and make sure these references are saved.  Therefore, the naturally more work-intensive part of the population story is the data writing.</p>

<p>When we write to our example models, we need to save the proper references.  For instance, when a new <code>League</code> is created, let&#8217;s say it automatically needs a <code>created_by</code> <code>Player</code> reference saved and the creating <code>Player</code> will automatically join the league:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">league =</span>
</span><span class='line'>  <span class="nv">display_name: </span><span class="nx">myLeagueName</span>
</span><span class='line'>  <span class="nv">created_by: </span><span class="nx">currentPlayer</span><span class="p">.</span><span class="nx">_id</span>
</span><span class='line'>
</span><span class='line'><span class="nx">League</span><span class="p">.</span><span class="nx">create</span> <span class="nx">league</span><span class="p">,</span> <span class="nf">(err, league) -&gt;</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span><span class="o">?</span>
</span><span class='line'>    <span class="c1"># ... do smart things that are never shown in a tutorial</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">Player</span><span class="p">.</span><span class="nx">update</span> <span class="p">{</span> <span class="nv">_id: </span><span class="nx">currentPlayer</span><span class="p">.</span><span class="nx">_id</span> <span class="p">},</span>
</span><span class='line'>      <span class="nv">$push:</span>
</span><span class='line'>        <span class="nv">leagues: </span><span class="nx">league</span><span class="p">.</span><span class="nx">_id</span>
</span><span class='line'>    <span class="p">,</span> <span class="nf">(err, numberAffected, raw) -&gt;</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span><span class="o">?</span>
</span><span class='line'>        <span class="c1"># you know...</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">json</span> <span class="nx">league</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few points of interest:</p>

<ul>
<li>Lowercase <code>league</code> is just the json to populate a <code>League</code> model.  <code>league</code> is also the shadowed variable name in the <code>League.create</code> callback.</li>
<li><code>currentPlayer</code> is just an imagined <code>Player</code> reference that has an <code>_id</code> that you will use to associate <code>Player</code> to this <code>League</code>.</li>
<li><a href="http://docs.mongodb.org/manual/reference/operator/push/"><code>$push</code></a> is a special <code>update</code> attribute that appends new elements to a model&#8217;s array.</li>
</ul>


<p>Depending on how complex your model relationships become, you may opt for a difference code strategy besides nesting callbacks.  Don&#8217;t like your pyramid of doom?  Try the awesome <a href="https://github.com/caolan/async">async.js</a>.</p>

<p>I don&#8217;t know if Mongoose population is going to change your life, but I was very happy when I found this feature.  I had been doing junk like this manually.  What are some other great use cases that you&#8217;ve found?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn to Procrastinate]]></title>
    <link href="http://jaketrent.com/post/learn-to-procrastinate/"/>
    <updated>2013-06-10T06:57:00-06:00</updated>
    <id>http://jaketrent.com/post/learn-to-procrastinate</id>
    <content type="html"><![CDATA[<p>When making software, sometimes we want everything we can imagine at once.  We want the software to be perfect &#8211; then we&#8217;ll ship it.  Learn to procrastintate.  You might ship more, and you might like the the eventual outcome better.</p>

<p><img src="http://i.imgur.com/cXx17co.png" alt="Focus on shipping" /></p>

<!--more-->


<h2>Worthless Software</h2>

<p>Software that sits inside of your git repo, unreleased, is worthless software.  You&#8217;re not going to get paid for it.  You&#8217;re not going to make someone&#8217;s life better.  You&#8217;re not going to attract any new business.  It provides no utility.</p>

<p>When does software return any value?  At the very soonest, software provides value when it ships &#8211; when it&#8217;s released to the public or your customers.</p>

<p>So why do we wait so long to ship?</p>

<h2>Excuses for Not Shipping</h2>

<h3>It Must Do More</h3>

<p>Software has a fair bit of built-in or essential complexity.  Making software is challenging.  Sometimes we make it worse and introduce our own accidental complexity.  How?  We don&#8217;t ship.</p>

<p>We iterate on unreleased software, expand it, and pretend to fully understand what we&#8217;re trying to solve.  The software gets bigger and more complex.  We want our (unshipped) software to somehow solve even <em>more</em> problems before it&#8217;s solved any.  And any problem we attempt to solve without actually testing it (in production), is still just a guess at how to solve it.</p>

<h3>It&#8217;s Not Awesome Yet</h3>

<p>Sometimes in an attempt to create a (hopefully) great initial impression, we wait to release anything.  This makes sense to some degree, but it can easily be taken to a less useful extreme.  Once we have a feature set that we judge is sufficiently awesome to blow a potential client&#8217;s socks off, we&#8217;ll release it in a big bang.  Boom!  Now the world can see my software in all the glory I have bequeathed it.</p>

<p>Just as we have been guessing as to how may problems the software will solve, we have been guessing as to how warm people will be to the idea of actually using what we&#8217;ve created.</p>

<h2>What to Procrastinate</h2>

<p>So obviously there are problems with procrastinating.  There are definitely things that you <em>don&#8217;t</em> want to procrastintate: working, shipping, asking for payment.  What <em>should</em> you procrastinate?</p>

<h3>Little Things that are Hard</h3>

<p>At first glance, this just looks like a cop out.  You <em>should</em> do the important things that are hard.  Even the small things can add a nice touch.  But in an effort to ship, these are often the little things that don&#8217;t add too much but take an inordinate amount of time to figure out or complete.  Skip these things and come back to them later to add the polish.</p>

<h3>Things that are not Core Functionality</h3>

<p>You&#8217;re trying to ship a small, cohesive feature set as fast as you can.  There will be many features on the perephery that you&#8217;ll be tempted to work in as well.  Fight the temptation.  Get used to cutting out good features in order to ship the ones you <em>need</em>.  In this way, you&#8217;ll help ensure that all of your valuable time is used creating the most value for your customers.</p>

<h3>Things that Create Little Tech Debt</h3>

<p>When you start skipping things, this can create problems for you later.  This can be technical debt.  If you want your product to evolve and grow over time, you can&#8217;t afford large amounts of technical debt.  But watch out!  You can use very large lengths of time doing things that add little value in the name of avoiding technical debt.  Be willing to take on some tech debt.  Do this on a case-by-case basis, because this trade-off requires thinking.</p>

<h2>Why You&#8217;ll Like Procrastinating</h2>

<p>Your satisfaction will sky-rocket when you feel like shipping is within reach.  Break down the barriers to getting there.</p>

<p>Focus on the most valuable features, and you&#8217;ll feel like you add maximum value every day &#8211; because you are!</p>

<p>You&#8217;ll be able to move faster because you aren&#8217;t getting bogged down in munitia.  By not taking tangents, your flow time will increase.  You won&#8217;t need to context switch to solve small, hard problems.  You can focus on the important, hard problems for contiguous lengths of time.</p>

<p>You&#8217;ll have something to show a lot faster.  You&#8217;ll have a vertical of working features that are fun to use and are useful &#8211; when shipped, that is.</p>

<h2>Different Paths Converge at Shipping</h2>

<p>Of course there are as many different ways to make software as there are types of software and types of software teams.  That&#8217;s one of the things that makes software creation insanely fun and rewarding.  Find what works for you, and ship lots and lots of awesome software.</p>

<p>In the end, shipping should be a common goal, and we shouldn&#8217;t procrastinate that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Vertical Height of Text]]></title>
    <link href="http://jaketrent.com/post/css-text-vertical-height/"/>
    <updated>2013-06-03T07:36:00-06:00</updated>
    <id>http://jaketrent.com/post/css-text-vertical-height</id>
    <content type="html"><![CDATA[<p>Setting text elements on a page to be a specific height is usually straight forward.  Here are the specs for a couple textual situations you&#8217;ll encounter.</p>

<p><img src="http://i.imgur.com/hxw13Yp.png" alt="CSS height" /></p>

<!--more-->


<p><strong>Note:</strong> Experiments were done in Chrome 27, but this should be pretty consistent over browsers</p>

<h2>Text in a Div</h2>

<p>Text is likely most common just plastered across your site.  Lucky for us all, this is the most straightforward way to calculate and guarantee a vertical height.</p>

<p><img src="http://i.imgur.com/cy3HTWW.png" alt="Text height css" /></p>

<p>The formula is simple.  Here, vertical height is calculated by:</p>

<blockquote><p>vertical height = margin + border + padding + (line-height || height)</p></blockquote>

<p><code>line-height</code> or <code>height</code> will determine the height of the main body of the text container, such as a <code>div</code>.  Either one will do.</p>

<p>I will guess that most of the time you&#8217;ll want your text centered vertically in the container.  But for those times you want it hugging the top or bottom, add a line-height that&#8217;s either smaller or larger than the height, respectively, to move the text vertically within the container.</p>

<h2>Text in an Input</h2>

<p>Text appearing within an input field is much more tricky and has a quite a few more caveats.  There are two main different modes that vertical height will be determined by: without a <code>height</code> or with a <code>height</code> specified:</p>

<p><img src="http://i.imgur.com/4UdHhF4.png" alt="Input height css" /></p>

<h3>No Height Specified</h3>

<p>If the <code>height</code> is not set, traditional attributes, combined, create the total vertical height.  This formula becomes:</p>

<blockquote><p>height = margin + border + padding + (line-height || font-size)</p></blockquote>

<p>Some observations and caveats:</p>

<ul>
<li><code>font-size</code> only affects vertical height as it approaches or exceeds the <code>line-height</code>.</li>
<li><code>padding</code>, <code>border</code>, and <code>margin</code> always affect the vertical height, no matter their value.</li>
<li>If <code>font-size</code> is small enough to not affect <code>line-height</code>, <code>line-height</code> can be used for an exact vertical height sum.</li>
<li>If <code>font-size</code>, instead of <code>line-height</code> is affecting the vertical height, the px value of the <code>font-size</code> will not be usable to guarantee height.  Each font has different heights.  A per-font calculation will have to be made.</li>
</ul>


<h3>Height Specified</h3>

<p>If <code>height</code> is set, the input&#8217;s vertical height formula will always</p>

<blockquote><p>vertical height = height + margin</p></blockquote>

<p>Some observations and caveats:</p>

<ul>
<li>If <code>margin</code>, <code>border</code>, and <code>padding</code> add up to be greater than <code>height</code>, then that becomes new height.</li>
<li><code>line-height</code> and <code>font-size</code> don&#8217;t contribute the vertical height, no matter the <code>height</code> attribute.</li>
<li><code>margin</code>, <code>border</code>, and <code>padding</code> attributes don&#8217;t contribute at all to the vertical height if their sum height is less than the actual <code>height</code> attribute.</li>
<li>Once <code>line-height</code> exceeds <code>height</code>, the text in the input moves vertically downward, eventually becoming hidden.</li>
<li>As <code>font-size</code> approaches <code>height</code>, the text will eventually become hidden.</li>
<li><code>border</code> will not affect vertical height, but it will still affect horizontal width.</li>
<li><code>vertical-align</code>, as in most things, does nothing.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember Parent Templates]]></title>
    <link href="http://jaketrent.com/post/ember-parent-templates/"/>
    <updated>2013-05-29T07:02:00-06:00</updated>
    <id>http://jaketrent.com/post/ember-parent-templates</id>
    <content type="html"><![CDATA[<p><a href="http://emberjs.com">Ember</a>&#8217;s convention of template hierarchy is very specific.  Learn it once, and you&#8217;ll know it every time.</p>

<p><img src="http://i.imgur.com/x5HT4FN.jpg" alt="Ember and Handlebars" /></p>

<!--more-->


<p><strong>Note:</strong> Code examples use <a href="http://emblemjs.com/">Emblem</a> templates and <a href="http://coffeescript.org">CoffeeScript</a>.  Vanilla Handlebars and JavaScript would work just as well.</p>

<h2>Outlets</h2>

<p>Ember templates make use of a special helper called <code>outlet</code>.  You can have one main, unnamed outlet or many named outlets.  The main thing to remember is that a child template will always render inside its parent&#8217;s outlet &#8211; so always put outlets in templates that have children.</p>

<h2>Application Template</h2>

<p>There is a top-most template that all of your templates will render inside of.  This is called the application template.  It is specified in one of two ways.  If you are including your templates as script tags, simply create a script tag that doesn&#8217;t have a <code>data-template-name</code> or <code>id</code> attribute, a la:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;x-emblem&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nx">h1</span> <span class="nx">My</span> <span class="nx">Application</span>
</span><span class='line'>  <span class="o">==</span> <span class="nx">outlet</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are <a href="http://jaketrent.com/post/precompile-ember-templates">precompiling your Ember templates</a>, which you should, you have a directory for templates.  You will put your file, called <code>application.emblem</code> in the root of that directory.  The contents of <code>templates/application.emblem</code> would be the same:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">h1</span> My Application
</span><span class='line'><span class="err">== </span><span class="nt">outlet</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Route Templates</h2>

<p>If you have a top-level route, it will have a top-level template.  Your route&#8217;s template will have only the application template as its parent.  So, your about route:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">map</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">@route</span> <span class="s">&#39;about&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Will have an about template at <code>templates/about.emblem</code> and you could define a route as <code>AboutRoute</code>.  It will render inside of <code>application.emblem</code>&#8217;s outlet.</p>

<h2>Resource Templates</h2>

<p>Resources are interesting because you can nest other routes inside them.  Nesting routes will also result in nesting templates.  If I defined a <code>league</code> resource with a nested route for creating new leagues, it might look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">map</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">@resouce</span> <span class="s">&#39;league&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">@route</span> <span class="s">&#39;new&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are two leaf routes (and thus templates) that are created here:</p>

<ul>
<li><code>LeagueIndexRoute</code>, which uses <code>templates/league/index.emblem</code></li>
<li><code>LeagueNewRoute</code>, which uses <code>templates/league/new.emblem</code></li>
</ul>


<p>Note that you create a <code>league</code> directory inside your <code>templates</code> directory for nesting these templates.  Precompiled templates will be created at:</p>

<ul>
<li><code>Ember.TEMPLATES["league/index"]</code></li>
<li><code>Ember.TEMPLATES["league/new"]</code></li>
</ul>


<p>If you wanted to use the <code>linkTo</code> helper in a template to link to these routes, you would use this syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">linkTo</span> &#39;league.index&#39; | List Leagues
</span><span class='line'><span class="nt">linkTo</span> &#39;league.new&#39; | New League
</span></code></pre></td></tr></table></div></figure>


<p>And now as far as templates, there is <em>one more</em> that we&#8217;re missing.  There is a root league template that these two league leaf templates render inside of.  It should live at <code>templates/league.emblem</code>.  This template would be useful for showing UI elements that are common to all league resource things.  In the case where there is no such need, this template will probably only contain a single outlet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="err">== </span><span class="nt">outlet</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the final template hierarchy for <code>league.new</code>, for example, is <code>application.emblem &gt; league.emblem &gt; league/new.emblem</code>.</p>

<p>There is a bit of a chatter on the Githubs about whether the root resource template is good form or not.  As in, why would you create a file that contains nothing but an empty outlet?  Couldn&#8217;t the framework infer that if it was missing?</p>

<h2>Children Need All Parents</h2>

<p>Create all parents in your template chain, from the application template to the leaves.  The worst thing that can happen if you don&#8217;t is that nothing will render at all, and no error messages will be displayed (pretty bad and unhelpful).</p>

<p>Most of the time, Ember will try to be helpful and give you a console warning:</p>

<blockquote><p>WARNING: The immediate parent route (&#8216;a&#8217;) did not render into the main outlet and the default &#8216;into&#8217; option (&#8216;p&#8217;) may not be expected</p></blockquote>

<p>In other words: You&#8217;re trying to render a child template that either doesn&#8217;t have a parent template it needs or the parent template does not specify a main outlet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Precompile Ember Templates]]></title>
    <link href="http://jaketrent.com/post/precompile-ember-templates/"/>
    <updated>2013-05-21T07:54:00-06:00</updated>
    <id>http://jaketrent.com/post/precompile-ember-templates</id>
    <content type="html"><![CDATA[<p><a href="http://emberjs.com">Ember</a> makes use of the wonderful <a href="http://handlebarsjs.com">Handlebars</a> templates.  These templates, in order to be performant, must be precompiled.  Based on the Ember docs, it&#8217;s not abundantly clear how this is to happen.  Here&#8217;s a solution that works well.</p>

<p><img src="http://i.imgur.com/x5HT4FN.jpg" alt="Ember and Handlebars" /></p>

<!--more-->


<h2>Ember Docs for Precompilation</h2>

<p>Every official Ember doc will put templates in a <code>script</code> tag with the <code>type="text/x-handlebars"</code>.  But this is never how you&#8217;d write any serious (-ly awesome) app in production.  <a href="http://emberjs.com/guides/templates/handlebars-basics/">The docs</a> say:</p>

<blockquote><p>&#8220;If you are using build tools to manage your application&#8217;s assets, most will know how to precompile Handlebars templates and make them available to Ember.js.&#8221;</p></blockquote>

<p>Which tools?  Why would I want to precompile?  How <em>are</em> they made available to Ember?  Read, Ember journeyman, read on&#8230;</p>

<h2>Grunt</h2>

<p>We&#8217;d love for this precompilation to happen previous to the running of your app.  Again, this is in hopes of increased performance.  <a href="http://gruntjs.com">Grunt</a> is a great little Nodejs-based tool for build-level tasks.</p>

<h2>Emblem</h2>

<p>Grunt comes with a variety of plugins.  We&#8217;re going to use one called <a href="https://github.com/wordofchristian/grunt-emblem/">grunt-emblem</a>.  <a href="http://emblemjs.com/">Emblem</a> is a fantastic templating syntax layered on top of Handlebars (still a dependency).  Its syntax looks very similar to Haml or Ruby Slim or Jade.  It may well be the most flexible of all of them, and it simplifies some Ember helper syntax very nicely.</p>

<h2>Versions Matching</h2>

<p>As I&#8217;ve said before, <a href="http://jaketrent.com/post/match-ember-handlebars-version/">matching Ember dependency version can be a pain</a>.  With precompilation, you have one more dependency to match.  Now not only do you care about the version of Handlebars that Ember uses at runtime, but you care about the version of Handlebars that is used to precompile your templates.  If the precompile Handlebars version doesn&#8217;t match the runtime Handlebars version, your app will die at runtime.  <code>grunt-emblem</code> helps immensely with this.</p>

<h2>grunt-emblem</h2>

<p>I haven&#8217;t found another Handlebars precompile plugin that helps as much as <code>grunt-emblem</code>.  It solves the precompile version problem by letting you utilize the actual runtime Handlebars as the precompile Handlebars script.</p>

<p>It is also nice in that it puts the precompiled templates into the collection that Ember expects to find templates in, namely <code>Ember.TEMPLATES</code>.  As you can find on the <a href="https://github.com/wordofchristian/grunt-emblem/"><code>grunt-emblem</code> Github page</a>, your grunt config will look something like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">matchdep = </span><span class="nx">require</span> <span class="s">&#39;matchdep&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">module.exports = </span><span class="nf">(grunt) -&gt;</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">watch:</span>
</span><span class='line'>      <span class="nv">ember_templates:</span>
</span><span class='line'>        <span class="nv">files: </span><span class="p">[</span><span class="s">&#39;app/views/templates/**/*.emblem&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="nv">tasks: </span><span class="p">[</span><span class="s">&#39;emblem&#39;</span><span class="p">,</span> <span class="s">&#39;livereload&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">emblem:</span>
</span><span class='line'>      <span class="nv">compile:</span>
</span><span class='line'>        <span class="nv">files:</span>
</span><span class='line'>          <span class="s">&quot;app/static/templates/ember_templates.js&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s">&quot;app/views/templates/**/*.emblem&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="nv">options:</span>
</span><span class='line'>          <span class="nv">root: </span><span class="s">&quot;app/views/templates/&quot;</span>
</span><span class='line'>          <span class="nv">dependencies:</span>
</span><span class='line'>            <span class="nv">jquery: </span><span class="s">&quot;app/static/js/components/jquery/jquery.js&quot;</span>
</span><span class='line'>            <span class="nv">ember: </span><span class="s">&quot;app/static/js/components/ember/ember.js&quot;</span>
</span><span class='line'>            <span class="nv">emblem: </span><span class="s">&quot;app/static/js/components/emblem/dist/emblem.js&quot;</span>
</span><span class='line'>            <span class="nv">handlebars: </span><span class="s">&quot;app/static/js/components/handlebars/handlebars.js&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">matchdep</span><span class="p">.</span><span class="nx">filterDev</span><span class="p">(</span><span class="s">&#39;grunt-*&#39;</span><span class="p">).</span><span class="nx">forEach</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">renameTask</span> <span class="s">&#39;regarde&#39;</span><span class="p">,</span> <span class="s">&#39;watch&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span> <span class="s">&#39;dev&#39;</span><span class="p">,</span> <span class="p">[</span> <span class="s">&#39;livereload-start&#39;</span><span class="p">,</span> <span class="s">&#39;watch&#39;</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This particular config has a couple other niceties.  Let me enumerate the awesome:</p>

<ul>
<li>Line 6 - Not only can we precompile the templates, but we&#8217;ll precompile on the fly, whenever <code>.emblem</code> files are change in the specified directories.</li>
<li>Line 8 and 14 - We&#8217;re precompiling <code>.emblem</code> templates, but this plugin can do regular Handlebars syntax as well</li>
<li>Line 16 - <code>root</code> is the substring that will be stripped out of your template name.  For instance, you don&#8217;t want your template to be called <code>app/views/templates/home</code>.  Your home route in Ember will want your template called <code>home</code>.  <code>root</code> to the rescue &#8211; bam!</li>
<li>Line 17 - These <code>dependencies</code> are the libraries that you use at runtime and that Handlebars needs at compile time.  As I said, this plugin simply rocks because of the ability to specify your own Handlebars script.</li>
<li>Line 23 - Remember how you used to have a whole list of npm tasks registered.  This little beaut will load all <code>grunt-*</code> dependencies.</li>
<li>Line 25 - <code>regarde</code> is a cool name, but I understand what <code>watch</code> means a bit better. Rename it.</li>
</ul>


<p>This setup requires the following dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">matchdep</span> <span class="nx">grunt</span> <span class="nx">grunt</span><span class="o">-</span><span class="nx">regarde</span> <span class="nx">grunt</span><span class="o">-</span><span class="nx">contrib</span><span class="o">-</span><span class="nx">livereload</span> <span class="nx">grunt</span><span class="o">-</span><span class="nx">emblem</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">dev</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now, seriously, go write some Emblem templates.  So fun, so precompiled.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Match Ember and Handlebars Versions]]></title>
    <link href="http://jaketrent.com/post/match-ember-handlebars-version/"/>
    <updated>2013-05-21T07:38:00-06:00</updated>
    <id>http://jaketrent.com/post/match-ember-handlebars-version</id>
    <content type="html"><![CDATA[<p><a href="http://emberjs.com">Ember</a> is very specific about what version of <a href="http://handlebarsjs.com">Handlebars</a> it requires.  This is probably good, but it&#8217;s also a pain to work with as different versions of the two libraries are released independently.  There are a few good tools to help us out.</p>

<p><img src="http://i.imgur.com/x5HT4FN.jpg" alt="Ember and Handlebars" /></p>

<!--more-->


<h2>Released Independently</h2>

<p>In a prime example, recently there was a new version of Handlebars released: <code>1.0.0-rc.4</code>.  Ember happens to be on version <code>1.0.0-rc.3</code>.  That version has a hard dependency on Handlebars <code>1.0.0-rc.3</code>.  In other words, the latest Ember code relies on an older version of Handlebars.</p>

<h2>Bower</h2>

<p>If you include these 3rd party libraries in your source code under a <code>lib</code> directory or something of that nature, you <em>always</em> have plenty of work to do.  Naturally, you just copy in the exact versions of the scripts that are needed.</p>

<p>Hopefully you&#8217;re trying to make use of a mostly awesome tool, <a href="http://bower.io">Bower</a>.  It helps you manage these 3rd party libraries in a way similar to npm.  You provide a descriptor of your project&#8217;s dependencies, <code>component.json</code>.  And you install things similarly via the <code>bower</code> cli.</p>

<h2>Specify a Bower Version</h2>

<p>If I run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bower install handlebars --save</span></code></pre></td></tr></table></div></figure>


<p>It saves a dependency in my <code>components.json</code> for Handlebars for the latest version it could find.  This won&#8217;t do for us.  We need to specify the versions.</p>

<p>Our strategy will be: take the latest version of Ember and then specifically match the Handlbars version.  Finally, we should type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bower install ember --save
</span><span class='line'>bower install handlebars#1.0.0-rc.3</span></code></pre></td></tr></table></div></figure>


<p>As of this writing, that is the version of handlebars that is required.  Bower will recognize any semver git tag name or branch name after the hash <code>#</code> sign.</p>

<p>I like our version strategy for a project that is under active development in that it keeps us on the latest Ember.  But, if you&#8217;re on a project that&#8217;s been built to an Ember version and not deployed for a long time, you may want to make a very specific dependency out of Ember as well, so the two are guaranteed in sync for future deploys.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UtahJS Conf 2013 Review]]></title>
    <link href="http://jaketrent.com/post/utahjs-conf-2013-review/"/>
    <updated>2013-05-20T06:59:00-06:00</updated>
    <id>http://jaketrent.com/post/utahjs-conf-2013-review</id>
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/G3BBShC.png" alt="UtahJS" /></p>

<!--more-->


<h2>The Schedule</h2>

<p>The conference covered a single day.  Keynote in the morning by Tom Dale, co-creator of Emberjs.  3 tracks thereafter with 5 talks each.  There was a specialized track, all focused on Angular, which was nice for anyone that wanted to focus on that framework.  There was less Node focus overall compared to last year, which was disappointing.  There were 3 talks focused on testing.  We need more good testing talks.</p>

<p>My impression on the talks overall was that they were well done and that the speakers were generally engaging.  The topics focused a little much on browser-side MV* frameworks, but I guess that&#8217;s hot right now.  Every talk I went to was meant for beginners at a very introductory level.  That was disappointing.  Of the topics presented, I found myself surprisingly most interested in Emberjs.  I have been tinkering with it since then and need to build something with it.</p>

<h2>The Food</h2>

<p>There was a plentitude of simple carbohydrates ready to serve to all learners at all times.  That was awesome.  Pastries appeared for breakfast, un-advertised.  They didn&#8217;t do a boxed lunch this year.  Some didn&#8217;t cry.  I almost did.  But I was pointed to a great gryo at a nearby Greek eatery instead.  Apparently the host venue, the Salt Lake City Public Library, didn&#8217;t approve of serving food.  This, I don&#8217;t understand, given that there was plenty of food floating around.  Apparenly pastries are ok, and sandwiches are not.</p>

<h2>The People</h2>

<p>Always a fun flavor to a conference, the attendees were great to mingle with.  The JavaScript community is a fun group to be with.  In Utah, we&#8217;re a fairly small, tight group.  It was fun to have Tom Dale show up.  It was even said by some that the Ember folks were &#8220;actually nice&#8221; as opposed to what was thought to be observed by some on Twitter.  Haha.  I smiled quite a bit when I heard that.</p>

<h2>The Afterparty</h2>

<p>The party was put on by O.C. Tanner and Domo.  O.C. Tanner is my current home base.  We were in charge of prepping the space.  It was like a classic text adventure trying to guide party-comers through the labyrinth of the O.C. Tanner building to the eventual pot of gold that was the party.</p>

<p>The food never stopped coming, even after my stomach had taken on its full capacity.  Marvelous Catering (gotta love that name) provided a delicious &#8220;luau pork dinner&#8221;.  I heard &#8220;luau&#8221; and assumed pineapple, of which there was none, which disappointed me just a little.  The owner of Fongo Bongo, a local game shop supplied a great collection of board and card games.  We had a couple Xboxen humming whilst TVs blasted fighting games to which I knew no combos.  We had a great time.</p>

<h2>Next Year</h2>

<p>I&#8217;m glad that this event has shown some perpetuity.  I hope it continues next year.  I think they have a good formula.  The price, the locale, the speaker lineup, and the associated activities make for a good one-day experience each Spring.  I would focus on improving one bit next year: the website.  It was the least well-done part of the conference.  I find that extremely ironic given the target market for the event.</p>

<p>So next Spring, come to Utah and attend the JsConf.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test setTimeout with Jasmine]]></title>
    <link href="http://jaketrent.com/post/test-settimeout-with-jasmine/"/>
    <updated>2013-05-15T07:08:00-06:00</updated>
    <id>http://jaketrent.com/post/test-settimeout-with-jasmine</id>
    <content type="html"><![CDATA[<p>Code that utilizes <code>setTimeout</code> or <code>setInterval</code> becomes asynchronous.  Jasmine has some nice helpers to make your test synchronous again.</p>

<p><img src="http://i.imgur.com/Ks3wt01.jpg" alt="Jasmine" /></p>

<!--more-->


<h2>Code Using setTimeout</h2>

<p>Any Javascript code that wants to delay certain actions or give intervals between actions will use <code>setTimeout</code> or <code>setInterval</code> respectively.  There are also libraries that create some niceties for working in these situations, notably <a href="http://underscorejs.org">underscore</a>&#8217;s <code>_.throttle</code> and <code>_.debounce</code> functions.  Underneath all of these higher-level functions, they&#8217;re using the native <code>setTimeout</code> construct, so the same strategies will apply.  In your source, you end up with something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="kc">on</span> <span class="s">&#39;keyup&#39;</span><span class="p">,</span> <span class="s">&#39;.autocomplete-field&#39;</span><span class="p">,</span> <span class="nx">_</span><span class="p">.</span><span class="nx">debounce</span><span class="p">(</span><span class="nx">autocomplete</span><span class="p">,</span> <span class="mi">500</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code binds a keyup event listener on a contrived <code>.autocomplete-field</code>.  Of course, we don&#8217;t want to do an expensive <code>autocomplete</code> lookup on every keypress.  So, we&#8217;ll slow it down a bit with <code>_.debounce</code>.</p>

<h2>Testing Asynchronous Code in Jasmine</h2>

<p>Now we go to test it in Jasmine (failing):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nx">describe</span> <span class="s">&#39;Autocomplete Field&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span> <span class="s">&#39;calls autocomplete when typing&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nv">called = </span><span class="kc">false</span>
</span><span class='line'>      <span class="nv">autocomplete = </span><span class="o">-&gt;</span>
</span><span class='line'>        <span class="nv">called = </span><span class="kc">true</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">keyup = </span><span class="nx">$</span><span class="p">.</span><span class="nx">Event</span><span class="p">(</span><span class="s">&#39;keyup&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s">&#39;.autocomplete-field&#39;</span><span class="p">).</span><span class="nx">trigger</span> <span class="nx">keyup</span>
</span><span class='line'>      <span class="nx">called</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this test, or <code>autocomplete</code> spy will never be called, thus <code>called</code> will never be true.  There are a few ways to fix this.</p>

<h2>Mocking the Jasmine Clock</h2>

<p>One way to fix the test is to remove <code>_.debounce</code> from our source code.  That would make the test pass.  The other is to setup our Jasmine to handle the <code>setTimeout</code> used in <code>_.debounce</code>.  Let&#8217;s do the latter, and raise our fists to the sky in triumph over our testing foe (winning):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nx">describe</span> <span class="s">&#39;Autocomplete Field&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">beforeEach</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nx">jasmine</span><span class="p">.</span><span class="nx">Clock</span><span class="p">.</span><span class="nx">useMock</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span> <span class="s">&#39;calls autocomplete when typing&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nv">called = </span><span class="kc">false</span>
</span><span class='line'>      <span class="nv">autocomplete = </span><span class="o">-&gt;</span>
</span><span class='line'>        <span class="nv">called = </span><span class="kc">true</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">keyup = </span><span class="nx">$</span><span class="p">.</span><span class="nx">Event</span><span class="p">(</span><span class="s">&#39;keyup&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s">&#39;.autocomplete-field&#39;</span><span class="p">).</span><span class="nx">trigger</span> <span class="nx">keyup</span>
</span><span class='line'>      <span class="nx">jasmine</span><span class="p">.</span><span class="nx">Clock</span><span class="p">.</span><span class="nx">tick</span> <span class="mi">501</span>
</span><span class='line'>      <span class="nx">called</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>The needed code is simple to add.  Use <code>jasmine.Clock.useMock()</code> to setup the fake ticker.  Then call <code>tick()</code> on it whenever you want your test to simulate time massage.</p>

<p>The cool thing is that this does not slow down your tests.  You could set the clock tick to be 50100000 or some crazy number, and it will still execute as fast as your single JavaScript thread will let you.</p>

<p>Boom.  Another testing hurdle cleared.  Sometimes it&#8217;s harder to write the test than the code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LiveReload for NodeJs]]></title>
    <link href="http://jaketrent.com/post/livereload-for-nodejs/"/>
    <updated>2013-04-23T16:44:00-06:00</updated>
    <id>http://jaketrent.com/post/livereload-for-nodejs</id>
    <content type="html"><![CDATA[<p>LiveReload is a wonderful tool/strategy for being able to develop websites more quickly.  You can make a change and see it immediately shown in the browser without requiring you to manually refresh.  To do this in NodeJs with Express, you&#8217;ll need just a few packages.</p>

<p><img src="http://i.imgur.com/4773D.jpg" alt="grunt" /></p>

<!--more-->


<h2>LiveReload Express</h2>

<p>If you&#8217;re doing a website on Nodejs these days, you&#8217;re probably using Express.  Express uses the Connect library for its middleware scheme.  Just grab one more middleware to handle the LiveReload.  It will add a little snippet of JavaScript to each of the html responses that is requested through this middleware.  First, install:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install connect-livereload --save-dev</span></code></pre></td></tr></table></div></figure>


<p>Next, import:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">configure</span> <span class="s">&#39;development&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span> <span class="nx">require</span><span class="p">(</span><span class="s">&#39;connect-livereload&#39;</span><span class="p">)</span> <span class="mi">35729</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that we only want to import and use the middleware when in development.  This matches the fact that we are only declaring this package as in <code>devDependencies</code>.</p>

<h2>LiveReload Grunt</h2>

<p>Now you need to something to start a livereload server, watch files for changes, and broadcast their availability.  The rest of this will be done via Grunt.</p>

<p>First, install:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install grunt-cli -g
</span><span class='line'>npm install grunt grunt-regarde grunt-contrib-livereload --save-dev</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>grunt-cli</code> will allow you to run the <code>grunt</code> command in the terminal.  Global puts the bin in your path.</li>
<li><code>grunt-regarde</code> is a file watcher.  It senses changes to the filesystem.</li>
<li><code>grunt-contrib-reload</code> will handle the pushing of new code to the browser.</li>
</ul>


<p>Next setup the <code>Gruntfile.coffee</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">module.exports = </span><span class="nf">(grunt) -&gt;</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">regarde:</span>
</span><span class='line'>      <span class="nv">style:</span>
</span><span class='line'>        <span class="nv">files: </span><span class="p">[</span><span class="s">&#39;app/static/css/*.css&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="nv">tasks: </span><span class="p">[</span><span class="s">&#39;livereload&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span> <span class="s">&#39;grunt-contrib-livereload&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span> <span class="s">&#39;be-lively&#39;</span><span class="p">,</span> <span class="p">[</span> <span class="s">&#39;livereload-start&#39;</span><span class="p">,</span> <span class="s">&#39;regarde&#39;</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when you run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grunt be-lively</span></code></pre></td></tr></table></div></figure>


<p>A livereload server is going to be setup.  Then we watch for filesystem changes.  The only things we&#8217;re watching are css files in our app.  You could expand the <code>files</code> array to watch more if you wish.</p>

<p>Yay!</p>

<h2>LiveReload all the Things</h2>

<p>There are many ways to make this happen.  There are numerous Node libraries, Grunt plugins, and browser plugins.  Do what works for you.  Just make it happen fast and tend it well from the beginning to the end of your project.  Almost every solution I&#8217;ve found is somewhat high maintenance.  This one has proven to be the same.  What have you found to be your favorite LiveReload solution, and in what environment?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Access NodeJs App on Xip.io]]></title>
    <link href="http://jaketrent.com/post/nodejs-app-on-xipio/"/>
    <updated>2013-04-23T07:22:00-06:00</updated>
    <id>http://jaketrent.com/post/nodejs-app-on-xipio</id>
    <content type="html"><![CDATA[<p>Xip.io is a DNS wildcard domain that was initially created for use on Ruby projects.  But its application is desirable across platforms.  Recently, I wanted to use Xip.io on a NodeJs project.  It was easy to make happen.</p>

<p><img src="http://i.imgur.com/PJTnZmM.jpg" alt="xip.io" /></p>

<!--more-->


<h2>Update: Proxying is Built Into Pow</h2>

<p>After having a handful of problems with these home-grown proxies, my search eventually led me to know that Pow 0.4.0+ includes proxying as a built-in feature.  So, you don&#8217;t need your own <code>config.ru</code> any more.  Once you install pow, choose the port that your app will run on and at what pow address you want to access your app, and run one command in your terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo 3000 &gt; ~/.pow/myapp</span></code></pre></td></tr></table></div></figure>


<p>Then you&#8217;ll access your app, running in the background on port 3000 via the web browser at <code>http://myapp.dev</code>.  Way better.  Skip the rest of this article.</p>

<h2>Install Pow and Powder</h2>

<p>Pow is a development server that uses Xip.io.  Powder is a cli that makes working with Pow even easier.  To start, make sure that <a href="http://www.ruby-lang.org/en/downloads/">Ruby</a> is setup with <a href="http://rubygems.org">Rubygems</a> in your environment.  Then install Pow.  They have a short little install script you can run, as <a href="http://pow.cx/">referenced on the Pow site</a>.</p>

<p>Then install Powder:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install powder</span></code></pre></td></tr></table></div></figure>


<h2>Proxy your NodeJs app</h2>

<p>Pow only knows how to handle Rack apps, so we have to create one to be loaded into Pow.  Since we&#8217;re writing the guts of our app on another platform &#8211; in this case, Node &#8211; we&#8217;ll just create a proxy Rack app.</p>

<p>I found a bit of <a href="https://github.com/linjunpop/node-with-pow">proxy app code</a>, which you should save in your project root as <code>config.ru</code>, and which I paste here:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;net/http&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ProxyApp</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="n">request</span> <span class="o">=</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Request</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>      <span class="n">headers</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>      <span class="n">env</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">key</span> <span class="o">=~</span> <span class="sr">/^http_(.*)/i</span>
</span><span class='line'>          <span class="n">headers</span><span class="o">[</span><span class="vg">$1</span><span class="o">]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">http</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">3000</span><span class="p">)</span>
</span><span class='line'>      <span class="n">http</span><span class="o">.</span><span class="n">start</span> <span class="k">do</span> <span class="o">|</span><span class="n">http</span><span class="o">|</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">send_request</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">request_method</span><span class="p">,</span> <span class="n">request</span><span class="o">.</span><span class="n">fullpath</span><span class="p">,</span> <span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">read</span><span class="p">,</span> <span class="n">headers</span><span class="p">)</span>
</span><span class='line'>        <span class="o">[</span><span class="n">response</span><span class="o">.</span><span class="n">code</span><span class="p">,</span> <span class="n">response</span><span class="o">.</span><span class="n">to_hash</span><span class="p">,</span> <span class="o">[</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="o">]]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ECONNREFUSED</span>
</span><span class='line'>      <span class="o">[</span><span class="mi">500</span><span class="p">,</span> <span class="p">{},</span> <span class="o">[</span><span class="s2">&quot;Server is down, try $npm start&quot;</span><span class="o">]]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">run</span> <span class="no">ProxyApp</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only change you might have to make is the port number for your app (line 13).  In this case, I&#8217;m using port 3000 for my NodeJs app.</p>

<h2>Link Your App</h2>

<p>Now all we have to do is link our app to Pow.  Powder helps us do this easily.  Go to your project root directory and type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>powder link &lt;project_name&gt;</span></code></pre></td></tr></table></div></figure>


<p>Now run your app with whatever command starts NodeJs.  It&#8217;s probably something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>node app.js</span></code></pre></td></tr></table></div></figure>


<p>Now you should be able to access your app via your web browser at <code>http://&lt;project_name&gt;.dev</code>.  One of the great things about Xip.io is that it makes running your local app <a href="http://jaketrent.com/post/run-pow-server-on-vm/">extremely easy from a local Virtual machine</a> as well.  To get the address of your app to use in your VM, type this from your native terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>powder open --xip</span></code></pre></td></tr></table></div></figure>


<p>And copy the resulting URL into your VM web browser.</p>

<p>Ah, the fusion of Node and Ruby is pretty sweet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Yeoman App on Heroku]]></title>
    <link href="http://jaketrent.com/post/yeoman-app-on-heroku/"/>
    <updated>2013-04-23T07:12:00-06:00</updated>
    <id>http://jaketrent.com/post/yeoman-app-on-heroku</id>
    <content type="html"><![CDATA[<p>Yeoman is great developer tool that will help you generate a project format that is easy to get up and running quickly.  Out of the box, Yeoman only generates static sites.  But, with a few small tweaks, you can get it running on an app server, Nodejs, and up on Heroku.</p>

<p><img src="http://i.imgur.com/1Mc2kXh.jpg" alt="Yeoman" /></p>

<!--more-->


<h2>New Project With Yeoman</h2>

<p>To install Yeoman, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g yo</span></code></pre></td></tr></table></div></figure>


<p>Now navigate to your new project directory and generate the scaffolding by running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yo webapp</span></code></pre></td></tr></table></div></figure>


<p>There are other generators, specifically for angularjs or a handful of other frameworks.  To see more options, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yo --help</span></code></pre></td></tr></table></div></figure>


<h2>Add Node for Heroku</h2>

<p>Since Yeoman creates a static site, it should be read to serve out of any old web server.  But Heroku specifically wants an app server.  Node is one of the options, and it&#8217;s a great option for a lightweight app server.</p>

<p>To get the node dependencies you need, create a <code>package.json</code> via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm init</span></code></pre></td></tr></table></div></figure>


<p>Then pull down the dependencies you&#8217;ll need:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install gzippo express coffee-script --save</span></code></pre></td></tr></table></div></figure>


<p>Now create your app server, <code>web.coffee</code>.  It&#8217;s about as light as they come:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">gzippo = </span><span class="nx">require</span> <span class="s">&#39;gzippo&#39;</span>
</span><span class='line'><span class="nv">express = </span><span class="nx">require</span> <span class="s">&#39;express&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">app = </span><span class="nx">express</span><span class="p">()</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span> <span class="nx">express</span><span class="p">.</span><span class="nx">logger</span> <span class="s">&#39;dev&#39;</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span> <span class="nx">gzippo</span><span class="p">.</span><span class="nx">staticGzip</span> <span class="s">&quot;</span><span class="si">#{</span><span class="nx">__dirname</span><span class="si">}</span><span class="s">/dist&quot;</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">5000</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s going to be serving the static resources that you build w/ Yeoman/Grunt that end up in the <code>dist</code> directory.  In order for code to get to Heroku, it needs to be commited to your git repo.  Thus, you need to remove the &#8220;dist&#8221; line from your <code>.gitignore</code> file, and don&#8217;t forget to add and commit the files to git as you build them.  You may also have to add more tasks to the <code>Gruntfile.js</code> to copy over any other assets to <code>dist</code> that your app needs to run.</p>

<p>Finally create a <code>Procfile</code> file for Heroku in the root of your project that points to the <code>web.coffee</code> server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>web: coffee web.coffee</span></code></pre></td></tr></table></div></figure>


<p>Now it&#8217;s time to push to Heroku.  You should have the Heroku Toolbelt installed and create a heroku url by running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>heroku create &lt;my_project&gt;</span></code></pre></td></tr></table></div></figure>


<p>To test your yeoman app as it will be run in production, first build it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grunt build</span></code></pre></td></tr></table></div></figure>


<p>Then run the grunt server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grunt server:dist</span></code></pre></td></tr></table></div></figure>


<p>Or if you have foreman and want to run the app using your <code>Procfile</code>, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>foreman start</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s time.  Commit your code, especially that <code>dist</code> directory, and&#8230; deploy!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push heroku master</span></code></pre></td></tr></table></div></figure>


<p>There are quite a few steps there.  What did we miss?  Or what needs more explanation?  Perhaps we just need a <code>yo heroku</code> target.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mountain West Ruby Conf 2013 Review]]></title>
    <link href="http://jaketrent.com/post/mountain-west-ruby-conf-2013-review/"/>
    <updated>2013-04-05T15:23:00-06:00</updated>
    <id>http://jaketrent.com/post/mountain-west-ruby-conf-2013-review</id>
    <content type="html"><![CDATA[<p>I recently attended the Mountain West Ruby Conference.  It was my first time going.  I was pleasantly surprised by the quality of the conference.  I would recommend it.</p>

<p><img src="http://i.imgur.com/ABNr5MC.jpg" alt="Mountain West Ruby Conf" /></p>

<!--more-->


<h2>Peeps</h2>

<p>I&#8217;m new to the Ruby community.  I get to use it more in my current job than I ever have before.  Whenever entering a new community, it&#8217;s good to find some friends.  I was pleased to notice that everyone I encountered at the conference was very friendly and welcoming.</p>

<p>About the coolest thing about the community is one of the slogans: MINSWAN, which means &#8220;Matz is nice, so we are nice.&#8221;  How cool is that?  Matz is the Ruby creator.  Wait, who am I kidding.  You already know that.</p>

<p>I was very impressed with the blatant lack of trolling other communities.  This even with the live stream video cameras rolling (people can tend to do weird things when put on camera).</p>

<p>The conference attracted speakers and attendees from as far away as Australia.</p>

<h2>Speakers</h2>

<p>I didn&#8217;t look too closely at the schedule previous to attending.  Once I got there, I was surprised at the caliber of those people and companies who were represented.  These were big names in the tech community, such as Matz, himself, Github, Heroku, and others.</p>

<p>The conference is single track, so that meant I got to see everyone speak.  I mostly like that but kind of hate that.  I believe it also meant fewer speaking slots, so everyone was pretty top notch.</p>

<p>I was impressed with the stage presence of most speakers.  A few were pretty droning, but in general everyone was very polished, had good slide decks, and shared engaging and useful content.</p>

<p>Devops was the stated subject matter of an entire day of the conference.  This was cool.  We can use that kind of focus on the subject.  But then it bled into the next days as well.  I want some pure code, pure Ruby&#8217;ness.  I got some of that, but not as much as I would like.  I paid my devops dues the first day.  I was ready to not hear any more of it on days 2 and 3.</p>

<h2>Venue</h2>

<p>It was in my back yard!  I loved the lack of a hotel requirement!  Apparently some visitors even camped in the wilderness, Nacho style.</p>

<p>The Salt Lake City Public Library is a great downtown location for a small conference.  In this case, with the conference being single track, the single largest room, the amphitheatre, was the only room required for all attendees.  It featured plenty of seating &#8211; at the cost of no leg room.</p>

<p>The wifi also held up better than it has for similar gatherings in this space.  It was announced that &#8220;the city and Xmission are working feverishly&#8221; to maintain connectivity several times over the 3 days.  It still didn&#8217;t stay up.  This is a common tech conf occurrence.</p>

<p>I was sorely disappointed with the lack of sugary confections meant to encourage the jollyness and attentiveness of the conference-goers.  At one point, it was necessary to slip out and find a good bakery downtown.  I was not disappointed.  I was happy to see at least the vendors&#8217; vinyl stickers come out on the last day.  We need more of that!</p>

<p>In all, it was a good use of my couple days.  It wasn&#8217;t too pricey, but then, I wasn&#8217;t paying.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make Jsonp Requests with AngularJs]]></title>
    <link href="http://jaketrent.com/post/make-jsonp-requests-with-angularjs/"/>
    <updated>2013-03-20T07:08:00-06:00</updated>
    <id>http://jaketrent.com/post/make-jsonp-requests-with-angularjs</id>
    <content type="html"><![CDATA[<p>There are a couple ways to make cross domain requests from a client browser.  One method is called Jsonp or Json with padding.  The AngularJs library makes this really simple.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="AngularJs Jsonp" /></p>

<!--more-->


<h2>Web Server Support</h2>

<p>First of all, your Jsonp request will be worth nothing if the server you&#8217;re requesting data from does not support it.  Jsonp requests require explicit support on the server side.  This is because the data that&#8217;s returned is formatted differently.  The &#8216;p&#8217; in Jsonp stands for padding.</p>

<p>But that&#8217;s kind of a weird name.  Maybe Jsonf would be more analogous to reality.  This is because the Json data that you seek is really wrapped in a Javascript function.  This function is then evaluated as a script, passing the data into a callback to be saved by your client program.</p>

<p>This essentially is a browser hack to get around the security constraint of browsers not being able to request non-script items from different domains.  But since we request Javascript this way all the time, we&#8217;ll just make our data look like Javascript.</p>

<h2>Angular Jsonp</h2>

<p>You&#8217;re probably already used to using the <code>$http</code> service.  It provides the normal <code>get</code>, <code>post</code> and other functions mapped to http methods.  It also provides the function that we&#8217;ll need: <code>jsonp</code>.</p>

<p>The client script also requires that we specify the callback to send data to.  AngularJs has its own callback pattern, so it would follow that it has a pattern to handle Jsonp callbacks.  It does.  The callback is always called <code>JSON_CALLBACK</code>.  What parameter that it&#8217;s assigned to in the query string depends on the design of the web service you&#8217;re calling.  Take a look at the documentation on what&#8217;s required there.</p>

<p>All that jibber jabber for this simple example of a script asking for <a href="http://colorwheelie.tumblr.com">Tumblr</a> data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$http</span><span class="p">.</span><span class="nx">jsonp</span> <span class="s">&#39;http://api.tumblr.com/v2/blog/colorwheelie.tumblr.com/posts/photo?api_key=&lt;mykey&gt;&amp;callback=JSON_CALLBACK&#39;</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">success</span> <span class="nf">(data) -&gt;</span>
</span><span class='line'>     <span class="nv">$scope.colorwheelies = </span><span class="nx">data</span><span class="p">.</span><span class="nx">response</span><span class="p">.</span><span class="nx">posts</span><span class="p">;</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">error</span> <span class="nf">(data) -&gt;</span>
</span><span class='line'>     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s">&#39;ERROR&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The interesting line is line one.  We call the <code>jsonp</code> function.  We assign our callback like this: <code>callback=JSON_CALLBACK</code>.  And in our success callback, we can consume our data variable like it was pure Json.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Have More Fun]]></title>
    <link href="http://jaketrent.com/post/have-more-fun/"/>
    <updated>2013-03-19T07:18:00-06:00</updated>
    <id>http://jaketrent.com/post/have-more-fun</id>
    <content type="html"><![CDATA[<p>You enjoy your work more when you&#8217;re having fun, right?  I wouuld think that much would be obvious to us all.  And yet, we need reminded now and again what really makes us tick.  Whether our endeavor is serious or purely for entertainment;  Whether the cause means a lot to us or we are just trying to pay the bills;  We will do better and be happier in every case if we inject a whole lot of fun into our work.</p>

<p><img src="http://i.imgur.com/YdZuWS2.jpg" alt="I love to laugh" /></p>

<!--more-->


<h2>Serious</h2>

<p>Serious work still needs a bit of a lilt to really work well.  This is especially true in creative work.  How many of us can be creative on demand?  It just seems to turn off the juice.  The motivation to continue doing something will come from a certain enjoyment and mental reward.</p>

<h2>Entertainment</h2>

<p>Even if the work you do is meant for others to consume purely as entertainment, it can easily be less than entertaining for those working on it.  It has to be enjoyable for you too.  There are so many types and tastes of entertainment; find something that is personally appealing.  Your personal engagement will be much higher.</p>

<h2>A Cause</h2>

<p>Working on a cause for which you have great feeling is probably one of the easiest things to find great inner motivation in doing.  But you can even burn out there.  Most of our jobs are done day after day.  There is a nature of monotony even in the best work simply because of repetition.  What can help counteract the daily march of work?  A bit of fun and excitement!  It&#8217;ll mean you&#8217;re simply jazzed to do what you feel is worthy of your time and effort.</p>

<h2>Pay Bills</h2>

<p>In the end, many work simply to pay the bills that never cease to appear.  This is in itself and worthy reason for working hard.  It is essential.  However, just the focus on and stress over bill payment is probably enough to poison your joy for work.  Two things will help.  Live well within your means so the bills don&#8217;t loom so large.  And hone your skills and do so well that you find the joy of work.</p>

<p>Simply put, work will consume a large portion of your life.  Would it not be better to smile and have fun during all that time?  Gratefully I&#8217;ve had both fantastic opportunities for work and the will to have fun.  Each of us have the opportunity to make it so.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Https Redirect for Node on Heroku]]></title>
    <link href="http://jaketrent.com/post/https-redirect-node-heroku/"/>
    <updated>2013-02-26T07:33:00-07:00</updated>
    <id>http://jaketrent.com/post/https-redirect-node-heroku</id>
    <content type="html"><![CDATA[<p>When your app requires users to be using the <code>https</code> protocol to make requests and get responses, it&#8217;s helpful to have an automatic redirect so the user is always in the right place.  Here&#8217;s how to do that for a Node Express app on Heroku.</p>

<p><img src="http://i.imgur.com/5rZ8H.png" alt="NodeJs Https Redirect" /></p>

<!--more-->


<h2>Secure Express Requests</h2>

<p>The <a href="http://expressjs.com">Express</a> request object has a bunch of great information.  One of its attributes is <code>secure</code>.  It&#8217;s a boolean.  Usually, <code>secure == true</code> will mean that you&#8217;re on <code>https</code>.  When that is not true, you&#8217;re ready for a redirect.</p>

<p>Unfortunately for apps hosted on Heroku, <code>request.secure</code> will always be false.  The way that Heroku routing works, it will just never be set.</p>

<h2>Heroku Https Header</h2>

<p>Instead, Heroku forwards an http header that allows us to do the same &#8220;is secure&#8221; test.  On Heroku, <code>request.header('x-forwarded-proto')</code> will contain the actual protocol string (eg, &#8216;http&#8217; or &#8216;https&#8217;).</p>

<h2>Express Middleware SSL Redirect</h2>

<p>If you&#8217;re using the Express framework on Node, then you have it easy.  There&#8217;s already a great middleware mechanism for you to send any or all requests through.  If you set your Express app (v3) up like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">app = </span><span class="nx">express</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you can use the <code>app.use</code> functionality to specify a middleware.  Since I only have certificates and want the redirect to happen in the production environment, I will likewise wrap this middleware inside <code>app.configure</code> for prod (it inspects <code>NODE_ENV</code> for you).  This redirect will be pretty rudimentary, but it&#8217;s just that simple, so here it goes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">configure</span> <span class="s">&#39;production&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span> <span class="nx">forceSsl</span><span class="nf">(req, res, next) -&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">req</span><span class="p">.</span><span class="nx">header</span> <span class="s">&#39;x-forwarded-proto&#39;</span> <span class="o">!=</span> <span class="s">&#39;https&#39;</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span> <span class="s">&quot;https://</span><span class="si">#{</span><span class="nx">req</span><span class="p">.</span><span class="nx">header</span> <span class="s">&#39;host&#39;</span><span class="si">}#{</span><span class="nx">req</span><span class="p">.</span><span class="nx">url</span><span class="si">}</span><span class="s">&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nx">next</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>If it&#8217;s not <code>https</code> already, redirect the same url on <code>https</code>.  If it is, that&#8217;s what I want, and you can pass on through my middleware function.  Note that this middleware will protect <em>all</em> urls on the site with an <code>https</code> redirect.  Your middleware could be more selective.  You could even create this as a stacked middleware per route if you wanted.  We could even enhance our middleware to use inspect both the http header <em>and</em> the <code>secure</code> flag.</p>

<p>Heroku threw us a for a minor, unexpected loop, but it was nothing that we couldn&#8217;t easily code for.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serve Json from Sinatra]]></title>
    <link href="http://jaketrent.com/post/serve-json-from-sinatra/"/>
    <updated>2013-02-26T07:18:00-07:00</updated>
    <id>http://jaketrent.com/post/serve-json-from-sinatra</id>
    <content type="html"><![CDATA[<p>By default, Sinatra knows how to serve up a rendered html page.  With a slight tweak, we can make it spit out Json too!</p>

<p><img src="http://i.imgur.com/ZyCgi56.jpg" alt="JSON on Sinatra" /></p>

<!--more-->


<h2>Data Format of the Web</h2>

<p>Json is my favorite data format for web applications.  Really, who wouldn&#8217;t want their webservice to expose Json?  It&#8217;s mucho useful.</p>

<p>First, add a line to the <code>Gemfile</code> that makes a Json helper method available to Sinatra:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;sinatra-contrib&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, all you need to do is query the data that you want to return and actually return it, as in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;sinatra/json&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s2">&quot;/my-models&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">json</span> <span class="no">MyModel</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>json</code> helper will then serialize your objects into Json, much to the delight of your clients!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pass Values From the Page to AngularJs]]></title>
    <link href="http://jaketrent.com/post/pass-values-from-page-to-angular/"/>
    <updated>2013-02-22T07:10:00-07:00</updated>
    <id>http://jaketrent.com/post/pass-values-from-page-to-angular</id>
    <content type="html"><![CDATA[<p>There are simple mechanisms for passing data from your web page to AngularJs.  One directive is called <code>ngInit</code>.  You may well need it.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="Angular data passing" /></p>

<!--more-->


<h2>The Use Cases</h2>

<p>The use cases don&#8217;t make a ton of sense without a concrete example.  There are several ways to implement even the most simple example.  If the solution doesn&#8217;t seem to fit the problem, try another way.</p>

<p>For our purposes, let&#8217;s say that we&#8217;re displaying a list of comments on the screen.</p>

<h4>Angular Requests Data</h4>

<p>It&#8217;s easy to put data into scope for AngularJs to use if Angular is the one to request the data initially.  This often will look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;/comments&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="nf">(comments) -&gt;</span>
</span><span class='line'>    <span class="nv">$scope.comments = </span><span class="nx">comments</span>
</span><span class='line'>  <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then your template will automatically have the data in scope.  And the template (<a href="http://slim-lang.org">Slim</a> syntax used below) can look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h1</span> <span class="no">Comments</span>
</span><span class='line'><span class="n">ul</span>
</span><span class='line'>  <span class="n">li</span> <span class="n">ng</span><span class="o">-</span><span class="n">repeat</span><span class="o">=</span><span class="s2">&quot;comment in comments&quot;</span>
</span><span class='line'>    <span class="o">|</span> <span class="p">{{</span> <span class="n">comment</span> <span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when we add a new comment via Ajax, we can push it right into the comment collection, and the page is updated by Angular with the appropriate data.  Or if we want to perform an operation on a pre-existing comment, it&#8217;s easy to do via an AJAX operation and display the result.</p>

<h4>Server Renders Data Initially</h4>

<p>Sometimes it&#8217;ll make sense for the server to render the data.  Often this kind of data will be the main content on the page.  When the client receives the page, we want the data display to be immediate.  We don&#8217;t want them to load a page with a spinner for the main content, then wait and watch it spin while the real content is requested secondarily.</p>

<p>If the server was to initially print the comments, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h1</span> <span class="no">Comments</span>
</span><span class='line'><span class="n">ul</span>
</span><span class='line'>  <span class="o">-</span> <span class="n">comments</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">comment</span><span class="o">|</span>
</span><span class='line'>    <span class="n">li</span>
</span><span class='line'>      <span class="o">=</span> <span class="n">comment</span>
</span></code></pre></td></tr></table></div></figure>


<p>We still might want to do AJAX&#8217;y things with a comment, such as like it.  When I like it, I don&#8217;t want the browser to have to refresh, so I want to make Angular do this for me.</p>

<h2>ngInit Passes Angular Server Data</h2>

<p>Angular provides a nice directive, <code>ngInit</code> for passing Angular data.  It&#8217;s a mechanism by which you can bootstrap your scripts with the data they need to function.  A mixture of server rendering and client-side AJAX requests on the same data will probably mean that you&#8217;re going to use this directive.</p>

<p>From the <code>ngInit</code> docs:</p>

<blockquote><p> The ngInit directive specifies initialization tasks to be executed before the template enters execution mode during bootstrap.</p></blockquote>

<p>Our server/client mixture code might look something like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h1</span> <span class="no">Comments</span>
</span><span class='line'><span class="n">ul</span>
</span><span class='line'>  <span class="o">-</span> <span class="n">comments</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">comment</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">li</span> <span class="n">ng</span><span class="o">-</span><span class="n">init</span><span class="o">=</span><span class="s2">&quot;commentLikeCount[i]=</span><span class="si">#{</span><span class="n">comment</span><span class="o">.</span><span class="n">likeCount</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="o">=</span> <span class="n">comment</span>
</span><span class='line'>      <span class="o">|</span> <span class="no">Likes</span> <span class="k">for</span> <span class="n">this</span> <span class="n">comment</span><span class="p">:</span> <span class="p">{{</span><span class="n">commentLikeCount</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">}}</span>
</span><span class='line'>      <span class="n">a</span> <span class="n">ng</span><span class="o">-</span><span class="n">click</span><span class="o">=</span><span class="s2">&quot;like(commentLikeCount[i])&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s important to realize where data is coming from in this example.  The syntax <code>=</code> as in <code>= comment</code> and <code>#{}</code> as in <code>#{comment.likeCount}</code> are server-rendered bits.  As you know, the curlies and the ng attribute syntax is for Angular&#8217;s client side rendering.</p>

<p>So how has this mixture bought us anything?</p>

<ol>
<li>The server renders the comments initially.  This makes the display immediate when the browser loads the page.</li>
<li>We init the value of <code>commentLikeCount</code>, making it available for Angular to display once the client compiles the template.</li>
<li>Since Angular has a count of the likes, it can easily update it and redisplay without a page reload after calling <code>like()</code> to increment the count.</li>
</ol>


<p>Frankly, the mixture feels a little bit odd to me.  I&#8217;ve seen it work.  I know there are different ways to get this done.  I think there are probably better ways.  What has worked well for you in similar use cases?</p>
]]></content>
  </entry>
  
</feed>
