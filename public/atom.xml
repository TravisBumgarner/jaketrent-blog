<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jake Trent]]></title>
  <link href="http://jaketrent.com/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2016-12-14T14:23:12-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Stub Dependencies in Node Without Proxyquire]]></title>
    <link href="http://jaketrent.com/post/stub-dependencies-node-without-proxyquire/"/>
    <updated>2016-09-29T06:30:00-06:00</updated>
    <id>http://jaketrent.com/post/stub-dependencies-node-without-proxyquire</id>
    <content type="html"><![CDATA[<p>When testing a unit, often you&#8217;ll want to stub out that unit&#8217;s dependencies.  Some libraries will help you do this.  But you can do it with plain JavaScript, and it works quite well.</p>

<p><img src="http://i.imgur.com/1arT8Ho.jpg" alt="nodejs testing" /></p>

<!--more-->


<h2>Stubbing Dependencies</h2>

<p>We&#8217;re unit testing a module in Node.  That unit has dependencies on some other sub-unit.  For our example, these units are modules. The subject under test is <code>prep-for-fight.js</code>.  It has a dependency on <code>eat-corn.js</code>.  We want to eventually stub out <code>eat-corn.js</code> within our unit test for <code>prep-for-fight.js</code>.</p>

<figure class='code'><figcaption><span>prep-for-fight.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">eatCorn</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./eat-corn&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">prepForFight</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">nutrients</span> <span class="o">=</span> <span class="nx">eatCorn</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">nutrients</span> <span class="o">&gt;</span> <span class="nx">NUTRIENT_LEVELS</span><span class="p">.</span><span class="nx">EAGLE_EMPOWERMENT</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nx">hasCape</span><span class="o">:</span> <span class="nx">donHomemadeCape</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A <a href="http://jaketrent.com/post/sinon-spies-vs-stubs/">stub</a> is a testing fake that you create in place of the real thing.  While testing our module <code>prepForFight</code>, we&#8217;ll stub out the sub-unit module <code>eatCorn</code>.  That module is tested elsewhere in another unit test.  We don&#8217;t want to conflate the two tests, coupling them strongly together.  This is because if the sub-unit&#8217;s implementation changes, we don&#8217;t want to have to change our current unit&#8217;s test.</p>

<p>The tradeoff is that we are going to couple our <code>prepForFight</code> unit test to the implementation of that module.  This is generally known as white box testing, where we care about the internal implementation of our source code within our tests.  If we did the opposite, and treated <code>prepForFight</code> as a black box and just tested its final output, there really is no need to stub anything or ever care about implementation as long as <code>prepForFight</code> continues to do its job.  For today&#8217;s example, we&#8217;ll choose to stub so that we can have a more isolated unit and focused test, drawing our unit boundaries strictly around code that exists in <code>prepForFight</code> proper.</p>

<h2>Stubbing Libraries</h2>

<p>There are libraries that help us stub.  Since we have a <code>require</code>d module for <code>eat-corn.js</code>, there is one in particular that would do well for us called <a href="https://github.com/thlorenz/proxyquire">proxyquire</a>.  It allows targeting the <code>./eat-corn.js</code> import path and replacing it with your own module at test runtime.  With a couple caveats, it usually works quite well.  We&#8217;re going to <em>not</em> use it and see how we fare.</p>

<h2>Stub by Passing the Dependency</h2>

<p>An easy way to get a dependency into <code>prepForFight</code> is to pass it as a function argument.  The rewrite might look like this:</p>

<figure class='code'><figcaption><span>prep-for-fight.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">prepForFight</span><span class="p">(</span><span class="nx">eatCorn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">nutrients</span> <span class="o">=</span> <span class="nx">eatCorn</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">nutrients</span> <span class="o">&gt;</span> <span class="nx">NUTRIENT_LEVELS</span><span class="p">.</span><span class="nx">EAGLE_EMPOWERMENT</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nx">hasCape</span><span class="o">:</span> <span class="nx">donHomemadeCape</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have no <code>require</code> statement, and <code>prepForFight</code> gets the dependency it needs.  Given this implementation, we can exercise our two code paths in our test:</p>

<figure class='code'><figcaption><span>prep-for-fight.spec.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">test</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ava&#39;</span><span class="p">)</span> <span class="c1">// or whatevs</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">subject</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./prep-for-fight&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;many nutrients dons cape&#39;</span><span class="p">,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">eatCornStub</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">NUTRIENT_LEVELS</span><span class="p">.</span><span class="nx">EAGLE_EMPOWERMENT</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">truthy</span><span class="p">(</span><span class="nx">subject</span><span class="p">(</span><span class="nx">eatCornStub</span><span class="p">).</span><span class="nx">hasCape</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;fewer nutrients remains cape-less&#39;</span><span class="p">,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">eatCornStub</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">NUTRIENT_LEVELS</span><span class="p">.</span><span class="nx">EAGLE_EMPOWERMENT</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">falsy</span><span class="p">(</span><span class="nx">subject</span><span class="p">(</span><span class="nx">eatCornStub</span><span class="p">).</span><span class="nx">hasCape</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>By passing in our stub directly, we control the branching inside the function.</p>

<h2>Leaking Dependencies</h2>

<p>By exposing <code>eatCorn</code> as a function parameter, we&#8217;re telling all consumers that we rely on <code>eatCorn</code>.  We&#8217;ve leaked our dependency, lessening our encapsulation.  For the function to work as written, it always needs the consumer to send it the <code>eatCorn</code> argument when <code>prepForFight</code> is called.  Let&#8217;s give it a default, and make the consumer code care about our dependencies a bit less.  The default will be our original <code>require</code>d module.</p>

<figure class='code'><figcaption><span>prep-for-fight.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">defaultEatCorn</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./eat-corn&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">prepForFight</span><span class="p">(</span><span class="nx">eatCorn</span> <span class="o">=</span> <span class="nx">defaultEatCorn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">nutrients</span> <span class="o">=</span> <span class="nx">eatCorn</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">nutrients</span> <span class="o">&gt;</span> <span class="nx">NUTRIENT_LEVELS</span><span class="p">.</span><span class="nx">EAGLE_EMPOWERMENT</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nx">hasCape</span><span class="o">:</span> <span class="nx">donHomemadeCape</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if <code>eatCorn</code> is <em>passed</em> as an argument, it will be used.  Otherwise, <code>defaultEatCorn</code>, which is the normal imported dependency, will be used.  This is great because now consumers don&#8217;t necessarily have to care about the dependency, except to override, which for now is just a thing our test wants to be able to do.</p>

<h2>Stub Without Changing Your Signature</h2>

<p>If putting <code>eatCorn</code> in your function parameter list bothers you, here&#8217;s another potential solution.</p>

<figure class='code'><figcaption><span>prep-for-fight.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">eatCorn</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./eat-corn&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">prepForFight</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">prepForFight</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">nutrients</span> <span class="o">=</span> <span class="nx">eatCorn</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">nutrients</span> <span class="o">&gt;</span> <span class="nx">NUTRIENT_LEVELS</span><span class="p">.</span><span class="nx">EAGLE_EMPOWERMENT</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nx">hasCape</span><span class="o">:</span> <span class="nx">donHomemadeCape</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">withEatCornForTest</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">withEatCornForTest</span><span class="p">(</span><span class="nx">eatCornOverride</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">eatCorn</span> <span class="o">=</span> <span class="nx">eatCornOverride</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can call <code>withEatCornForTest</code> before you exercise your subject under test:</p>

<figure class='code'><figcaption><span>prep-for-fight.spec.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">test</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ava&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">subject</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./prep-for-fight&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;many nutrients dons cape&#39;</span><span class="p">,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">eatCornStub</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">NUTRIENT_LEVELS</span><span class="p">.</span><span class="nx">EAGLE_EMPOWERMENT</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">subject</span><span class="p">.</span><span class="nx">withEatCornForTest</span><span class="p">(</span><span class="nx">eatCornStub</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">truthy</span><span class="p">(</span><span class="nx">subject</span><span class="p">.</span><span class="nx">prepForFight</span><span class="p">().</span><span class="nx">hasCape</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>This overrides the imported <code>eatCorn</code> module much like proxyquire does.  This is nice because your <code>prepForFight</code> function remains untouched, but I think there are a few drawbacks.</p>

<ul>
<li>We had to change our single export module to a multiple named export module in order to add the extra API for setting the dependency.</li>
<li>We have code in our src that is there specifically for testing.  The <code>*ForTest</code> suffix is a particularly clear flag of that.  But if we remove the <code>*ForTest</code> suffix, we simply cloud that fact and make something still test-specific look like it&#8217;s for general use.</li>
<li>We have made our <code>prepForFight</code> function impure, because now its output can change depending on when or if we call the <code>withEatCornForTest</code>, creating a module-global side effect.</li>
<li><code>withEatCornForTest</code> is further away from the <code>eatCorn</code> usage inside of <code>prepForFight</code>.  Thus, we could read <code>prepForFight</code> and never know that it&#8217;s possible for the <code>eatCorn</code> implementation to be switched out from under us without examination of more code outside that function.</li>
</ul>


<h2>Decouple Function Parameter Order</h2>

<p>Previous to reading Sandi Metz&#8217; <a href="http://www.poodr.com/">POODR</a> book, I hadn&#8217;t considered this, but she posits that a parameter list has coupling because of the order of the parameters.  To lessen the coupling, she proposes changing the function signature to take an argument hash instead.  This has the benefits of not requiring a specific order, letting consumers name the arguments, creating clarity on the consuming side, and having the consistency of a single argument for most/if not all functions that take input.</p>

<p>We can take advantage of these attributes and realize one of our own in our <code>prepForFight</code> function.  If we have multiple dependencies, we can put these dependencies and their defaults inside the argument hash, and no consumer has to know anything about it.  There&#8217;s no ordering problem.  There&#8217;s no null arugment passing.  We just specify the keys that we care to specify and have defaults for the rest.  A minor refactor might yield some destructuring of a single object sent to the function:</p>

<figure class='code'><figcaption><span>prep-for-fight.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">defaultEatCorn</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./eat-corn&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">prepForFight</span><span class="p">({</span> <span class="nx">eatCorn</span> <span class="o">=</span> <span class="nx">defaultEatCorn</span> <span class="cm">/*, more... */</span> <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">nutrients</span> <span class="o">=</span> <span class="nx">eatCorn</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">nutrients</span> <span class="o">&gt;</span> <span class="nx">NUTRIENT_LEVELS</span><span class="p">.</span><span class="nx">EAGLE_EMPOWERMENT</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nx">hasCape</span><span class="o">:</span> <span class="nx">donHomemadeCape</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think that&#8217;s probably our final refactor for now.  What could we do to make this better?  What are other stubbing methods that you&#8217;ve gotten a lot of mileage out of?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notify NewRelic of Error on UncaughtException]]></title>
    <link href="http://jaketrent.com/post/notify-error-to-newrelic-on-uncaughtexception/"/>
    <updated>2016-09-27T09:50:00-06:00</updated>
    <id>http://jaketrent.com/post/notify-error-to-newrelic-on-uncaughtexception</id>
    <content type="html"><![CDATA[<p>NewRelic is a monitoring vendor that has good support for Node.js apps.  When your Node app goes down, you&#8217;ll want to tell NewRelic about it.  It&#8217;s surprisingly easy.</p>

<p><img src="http://i.imgur.com/ApNvY7f.jpg" alt="newrelic" /></p>

<!--more-->


<h2><code>newrelic</code> npm Package</h2>

<p>The <code>newrelic</code> npm package is super easy to integrate with.  First install:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install newrelic</span></code></pre></td></tr></table></div></figure>


<p>Call it from early in your program (before errors can start to occur).  NewRelic docs say on the first line of your program.  I load config first.  Everything is fine.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;newrelic&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then in order to let NewRelic have the data that it needs to run, you&#8217;ll need to setup the config file.  The lib gives you a seed file to start from.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">cd</span> <span class="o">&lt;</span><span class="nx">proj_root</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">cp</span> <span class="nx">node_modules</span><span class="o">/</span><span class="nx">newrelic</span><span class="o">/</span><span class="nx">newrelic</span><span class="p">.</span><span class="nx">js</span> <span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make sure to edit it with your changes.  With that file, you&#8217;ll want to set your app name, your license key, and any other <a href="https://github.com/newrelic/node-newrelic/blob/master/lib/config.default.js">options you desire</a>.</p>

<h2>Calling NewRelic on <code>uncaughtException</code></h2>

<p>When your Node app goes down, you have <a href="post/handle-errors-node-app/">one final moment</a> to send out your SOS signal &#8211; this is in the <code>uncaughtException</code> handler.</p>

<p>Usually NewRelic will detect errors automatically, such as those that you return as HTTP responses to your clients of status 500 with some error json.  But in this case, we&#8217;ll need to send the error manually.  The <code>newrelic</code> lib gives us a way to do this with the <code>notifyError</code> function.  It takes the error object and optionally some custom parameters.</p>

<p>So, at first glace, we&#8217;d do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">newrelic</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;newrelic&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">process</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;uncaughtException&#39;</span><span class="p">,</span> <span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">fatal</span><span class="p">({</span> <span class="nx">err</span> <span class="p">},</span> <span class="s1">&#39;unhandled error&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">newrelic</span><span class="p">.</span><span class="nx">noticeError</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>But this doesn&#8217;t deterministically give NewRelic time enough to send the error off to their server.  The lib apparently sends errors on some sort of &#8220;harvest&#8221; cadence.  <code>process.nextTick</code> doesn&#8217;t seem to provide enough time either.  But NewRelic does give another API that should help.  The <code>shutdown</code> function cleans up the agent.  It also allows to flush all the pending notifications via <code>collectPendingData</code> option previous to shutdown, which is what we want.</p>

<p>So to make this reliable, we change to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">process</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;uncaughtException&#39;</span><span class="p">,</span> <span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">fatal</span><span class="p">({</span> <span class="nx">err</span> <span class="p">},</span> <span class="s1">&#39;unhandled error&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">newrelic</span><span class="p">.</span><span class="nx">noticeError</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">newrelic</span><span class="p">.</span><span class="nx">shutdown</span><span class="p">({</span> <span class="nx">collectPendingData</span><span class="o">:</span> <span class="kc">true</span> <span class="p">},</span> <span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">log</span><span class="p">.</span><span class="nx">error</span><span class="p">({</span> <span class="nx">err</span> <span class="p">},</span> <span class="s1">&#39;error shutting down newrelic agent&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">proc</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it works like a charm.  Any additional data that you send to monitoring when your app crashes?  Any ways that you know to make this more reliable?  Have fun logging those crashes!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Strange Loop and Elm Conf 2016 Review]]></title>
    <link href="http://jaketrent.com/post/strange-loop-elm-conf-2016-review/"/>
    <updated>2016-09-20T11:38:00-06:00</updated>
    <id>http://jaketrent.com/post/strange-loop-elm-conf-2016-review</id>
    <content type="html"><![CDATA[<p>Here&#8217;s a quick conference review and some highlight bullets from some of my favorite parts.  It was my first time going to Strange Loop.  It was also host to the first Elm Conf ever.  I was excited to go to both.  I was looking for new, eclectic content to consider.  I was not disappointed.</p>

<p><img src="http://i.imgur.com/SusCISQ.jpg" alt="strange loop and elm-conf" /></p>

<!--more-->


<h2>Venue</h2>

<p>The city was awesome.  I got to hang out and explore St. Louis quite a bit.  I hadn&#8217;t been there since I was a small child.  There&#8217;s a great, historic downtown area.  The stonework is inescapable and very impressive.  Great craftsmanship on display from a fun era of architecture.  Highlights were the many elegant cathedrals and churches, including the <a href="https://en.wikipedia.org/wiki/Cathedral_Basilica_of_Saint_Louis_(St._Louis">Cathedral Basilica</a>).</p>

<p><img src="http://i.imgur.com/6RHY7b6l.jpg" alt="cathedral bascillica" /></p>

<p>I had a good time visiting Forest Park, which is host to some great parks and a cool art museum which houses a wide variety of impressive paintings, sculpture, pottery, artifacts, etc.</p>

<p><img src="http://i.imgur.com/nIufoSal.jpg" alt="cool art representing america, wish I captured the info plaque better" /></p>

<p>Union Station was the site of Elm Conf and the hotel for the conference.  It&#8217;s built in a historic train station.  Parking was under the open rafters of the apparent train yard.  The lobby is in the grand hall of the main station where they do light shows on the ceiling on the hour after 6pm.</p>

<p><img src="http://i.imgur.com/lT2TcbTl.jpg" alt="union station hotel" /></p>

<p>The Peabody Opera House was the site of all sessions for Strange Loop proper.  It&#8217;s also an impressive venue, with an especially beautiful stage and impressive hall.  I could actually fit in the theatre seats too, so I was impressed.</p>

<p><img src="http://i.imgur.com/5uo4devl.jpg" alt="peabody opera house stage" /></p>

<h2>Content</h2>

<p>The content was interesting and engaging.  The speakers were all quite good.  As with any conf, there are low points, but the average here was high and the lows few.  The talks were mostly technical, some deep, a few shallower.  There were a couple good soft and thought talks as well.  What I was going for, I got, which was <em>variety</em>.  I feel like my exposure at this conference was broad.</p>

<p>Language themes emerged around Elm, Clojure, Scala, and I think I was getting a general Java vibe there as well.  As a top tech, distributed commit logs in the form of Kafka and Kinesis were mentioned multiple times.</p>

<h2>Hosting</h2>

<h4>Food</h4>

<p>Elm-conf had coffee and a few small snacks provided.  It didn&#8217;t provide meals.  Somehow this was unclear to me.  Apparently there was a way to tack this on to your experience at registration that I missed.  In the end, I enjoyed going out to the city and finding something good with new friends, but that wasn&#8217;t my initial expectation.  At Strange Loop, the Peabody Opera House provided breakfast, lunch, and snacks.  They were all solid and good.  In the end, I was made more solid and good.  Best food in the city I had was the day before the conf, when we visited Blues City Deli, and I ordered the Aporkalypse, a drippingly-delicious sandwhich of pork and more pork in the form of bacon.  Mmmm!, so good.</p>

<p><img src="http://i.imgur.com/AAdpY4Dl.jpg" alt="blues city deli" /></p>

<h4>Swag</h4>

<p>There was eventually a conference T-shirt.  Black.  With a coolish logo on it, that I had to ask about.  I&#8217;m still one of three people in the country who have not seen Stranger Things.  Apparently the logo was based on that show&#8217;s logo.  There were a few vendors.  I got lucky with one of the contests.  That was awesome.  But holy cow, where were the stickers?  Apparently that&#8217;s not a strong part of this conference&#8217;s culture.  I got one cool sticker from Netflix &#8211; Chaos Monkey :D.</p>

<h4>Party</h4>

<p>The conference party was at the singular City Museum.  It&#8217;s not really a museum?  It&#8217;s more like an anything-goes, go explore this, based on psychonauts concept art, adult playground.  I say adult because no where are predictable, little tikes-sized, plastic-covered platforms and slides.  Everything&#8217;s made out of exposed rebar, inconvenient, twisted, gnarly, mixed with random art installments, and generally evoking of my laughter.  If you go to St. Louis, you just need to experience it.</p>

<p><img src="http://i.imgur.com/55iusyGl.jpg" alt="city museum st louis" /></p>

<p>In addition to the general review, here are some learnings that stood out to me:</p>

<h2>Some Favorite Talks</h2>

<h4><a href="https://youtu.be/DSjbTC-hvqQ">&#8220;Code is the Easy Part&#8221;</a> - Evan C - NoRedInk</h4>

<ul>
<li>Alternatives make each community stronger - we can gravitate around things we thing are good, beautiful, and we don&#8217;t have to partake in what we don&#8217;t like.  We don&#8217;t have to rain on those parades either.</li>
<li>Are bigger teams better? &#8220;Not really&#8221; Some things that are great about Elm haven&#8217;t really been matched over even long time periods and with many resources.  (eg, great error messages, fast rendering)  Can have great products from small teams.</li>
<li>Most people would judge a great open source project by those that get issues and resolve them immediately, keeping open issues at 0.  But Evan batches issues, letting them pile up, then designing around trends to maximize value and consider good design.</li>
<li>Upcoming versions of Elm will focus on: debugger, code swapping, server render, packages improvements</li>
</ul>


<h4><a href="https://youtu.be/IcgmSRJHu_8?list=PLglJM3BYAMPH2zuz1nbKHQyeawE4SN0Cd">&#8220;Making Impossible States Impossible&#8221;</a> - Richard Feldman - NoRedInk</h4>

<ul>
<li>Less to test is good. Nothing to test is better because it&#8217;s impossible.</li>
<li>Expose functions to access data - can control data access, structure for upgrades and refactor</li>
<li>Make new types as combos of new fields are added to a data structure</li>
<li>Spend time to design data structures and types to only allow valid states</li>
</ul>


<p>Strange Loop and Elm Conf both did a great job hiring some solid videographers who did good video capture work and had it up incredibly fast.  I was browsing videos on Youtube at lunch that were just presented in the morning!</p>

<ul>
<li><a href="https://www.youtube.com/channel/UC_QIfHvN9auy2CoOdSfMWDw/videos">Strange Loop on YouTube</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLglJM3BYAMPH2zuz1nbKHQyeawE4SN0Cd">Elm Conf on YouTube</a></li>
</ul>


<h2>Some Cool Ideas</h2>

<ul>
<li>NoRedInk - Hiring after Elm adoption expanded greatly - &#8220;python paradox&#8221; - no programmers, but easier to hire/find a team because of tech interest and niche. (segment from <a href="https://www.youtube.com/watch?v=LCNs92YQjhw&amp;feature=youtu.be&amp;t=7m55s">&#8220;Elm conf Q&amp;A panel&#8221;</a> by Evan Czaplicki and Richard Feldman)</li>
<li>In elm, most things not be a component, but a &#8220;triplet&#8221; - model view update - (segment from <a href="https://www.youtube.com/watch?v=LCNs92YQjhw&amp;feature=youtu.be&amp;t=21m09s">&#8220;Elm conf Q&amp;A panel&#8221;</a> by Ossi)</li>
<li>Local concision is nice - I don&#8217;t have to visit tons of files to make a change (eg, EJB) (somewhere in <a href="https://www.youtube.com/watch?v=VNTQ-M_uSo8&amp;feature=youtu.be">&#8220;Agility and Robustness: Clojure spec&#8221;</a> by Stuart Holloway)</li>
<li>Clojure spec attempts to find a best-of-both world approach, being a thing kind of like typings and kind of like example testing.  Maintains generalized systems, dynamic types of clojure.  But allows for specificity, such as data shape definitions where desired.  Seems like it could be really cool.  A bit of a mind blow.  (segment from <a href="https://www.youtube.com/watch?v=VNTQ-M_uSo8&amp;feature=youtu.be&amp;t=9m09s">&#8220;Agility and Robustness: Clojure spec&#8221;</a> by Stuart Holloway)</li>
<li>Some well-loved tools (eg, React, Gemfile, and Git) are loved by us because they use pure functions leading to better mental models.  Obvious looking back, but was non-obvious to start.  We should build more tools this way. (<a href="https://mobile.twitter.com/garybernhardt/status/777901423220490240">tweet</a> about &#8220;Reproducability&#8221; by Gary Bernhardt)</li>
<li>Parable of pumpkin carver (segment from <a href="https://www.youtube.com/watch?v=_1rh_s1WmRA&amp;feature=youtu.be&amp;t=22m25s">&#8220;A Frontend Server, Front to Back&#8221;</a> by Zach Tellman)</li>
<li>Nice to have abstractions, but it might be too much work to build a &#8220;big tower of abstraction&#8221; with a bunch of new terms and concepts just for 300 lines of well-factored code. (somewhere in <a href="https://www.youtube.com/watch?v=_1rh_s1WmRA&amp;feature=youtu.be">&#8220;A Frontend Server, Front to Back&#8221;</a> by Zach Tellman)</li>
</ul>


<h2>Some Cool Projects</h2>

<ul>
<li><a href="https://github.com/sporto/hop">hop</a> - elm router</li>
<li><a href="https://github.com/mdgriffith/elm-style-animation">elm-style-animation</a> - tweeing values for animation</li>
<li><a href="https://github.com/abadi199/elm-horizon">elm-horizon</a> - serverless realtime frontend experiment</li>
<li><a href="https://www.atomist.com/">atomist</a> - yet-to-be-released  project for elm code gen <a href="https://youtu.be/jJ4e6cIBgYM">demo talk</a></li>
<li><a href="http://petstore.swagger.io/#/">swagger.io</a> - API documentation</li>
<li><a href="http://johnny-five.io/">johnny-five</a> - write nodejs on top of arduinos</li>
<li><a href="https://ravichugh.github.io/sketch-n-sketch/">sketch-n-sketch</a> - prototype tool for syncing code and direct manipulation tools for making vector art <a href="https://www.youtube.com/watch?v=YuGVC8VqXz0">demo talk</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handle Errors in a Node App]]></title>
    <link href="http://jaketrent.com/post/handle-errors-node-app/"/>
    <updated>2016-08-23T16:34:00-06:00</updated>
    <id>http://jaketrent.com/post/handle-errors-node-app</id>
    <content type="html"><![CDATA[<p>As with any software, here you can expect the unexpected.  Node apps experience errors as well.  Let&#8217;s say that an error crops in our Node API &#8211; what should we do about it?</p>

<p><img src="http://i.imgur.com/1arT8Ho.jpg" alt="nodejs" /></p>

<!--more-->


<p>Errors can be handled in a lot of different ways.  &#8220;Handling&#8221; in this article will essentially mean error response messaging.</p>

<h4>Specific Messages are Best</h4>

<p>When handling errors, we should do so as specifically and quickly as possible.  As an example, if we can respond to a request that causes an error with a more specific error message, this would be better than responding with a generic, catch-all message.  This first message:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ errors: [{ title: 'Title field missing', source: '/data/attributes/title' }] }</span></code></pre></td></tr></table></div></figure>


<p>is better than this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ errors: [{ title: 'Bad request' }] }</span></code></pre></td></tr></table></div></figure>


<p>But <em>some</em> error messaging is better than nothing.</p>

<p>So, starting with the most specific handling cases and going to the most generic.</p>

<h2>Handle Specific Business Errors</h2>

<p>Let&#8217;s say that we have an endpoint that creates a new book in our books database, requested at <code>POST /books</code>.  It validates the request body data shape to ensure sufficient and correct data is entered for new books.  Let&#8217;s say that a user submits a new book without the required title field.  It would be great to have specific response that tells the client what exactly is wrong.  The controller code, in part, might look like this in <a href="https://expressjs.com/">Express</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/books&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">errors</span> <span class="o">=</span> <span class="nx">validate</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">errors</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">saveBook</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">newBook</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">201</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="nx">data</span><span class="o">:</span> <span class="nx">newBook</span> <span class="p">})</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="nx">errors</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>That last line is the error response with specific error messages.  These messages are presumeably generated by the <code>validate</code> function.  We can provide a specific <code>bad request</code> response status code with a <code>400</code>.  We can provide the specific error response body, which would look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span> <span class="nx">errors</span><span class="o">:</span> <span class="p">[{</span> <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Title field missing&#39;</span><span class="p">,</span> <span class="nx">source</span><span class="o">:</span> <span class="s1">&#39;/data/attributes/title&#39;</span> <span class="p">}]</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Catch All Other Errors*</h2>

<p>Now there are other errors that might occur that we either haven&#8217;t, don&#8217;t want, or will never be able to anticipate enough to provide specific handling for.  In these cases, we still want to handle the error, but we&#8217;ll only be able to provide minimal value and insight into the nature of the error to clients in the responses.</p>

<p>Let&#8217;s adjust our controller code to handle potentially errors that might happen in the book saving process.  What could happen?  Anything&#8230; like database issues with connections, constraints, locks or just something bad in our code.  In our callback, let&#8217;s do something with that potential error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/books&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">errors</span> <span class="o">=</span> <span class="nx">validate</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">errors</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">saveBook</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">newBook</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="k">return</span> <span class="nx">next</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="c1">// new line</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">201</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="nx">data</span><span class="o">:</span> <span class="nx">newBook</span> <span class="p">})</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="nx">errors</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Required Error Contract</h4>

<p>The <code>err</code> that comes back should be an <code>Error</code> or a subtype that at least follows the error contract and has the 3 required fields of <code>name</code> to identify the type of error, <code>message</code> for the human readable main issue of the error, and <code>stack</code> a string of the accurate location and stack trace of the error.</p>

<h4>Express&#8217; <code>next</code> for Errors</h4>

<p>The <code>next</code> function in <a href="https://expressjs.com/">Express</a> will advance to the next middleware.  In the case of passing a non-null value to <code>next</code>, remaining normal middleware will be skipped and the first error middleware will be executed.  Error middleware functions have an arity of 4 parameters instead of the usual 3, where <code>err</code> is the first parameter.  Here&#8217;s a basic catch-all error handler:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">500</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span><span class="nx">serializeError</span><span class="p">(</span><span class="nx">err</span><span class="p">))</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>serializeError</code> is just going to take that and transform it into something to push across the network in the response.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">serializeError</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">errors</span><span class="o">:</span> <span class="p">[{</span> <span class="nx">status</span><span class="o">:</span> <span class="mi">500</span><span class="p">,</span> <span class="nx">title</span><span class="o">:</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">,</span> <span class="nx">stack</span><span class="o">:</span> <span class="nx">err</span><span class="p">.</span><span class="nx">stack</span> <span class="p">}]</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Don&#8217;t Leak Stacktraces</h4>

<p>Let&#8217;s add a little something else here.  We probably don&#8217;t want to leak the stack trace to our users in production, so let&#8217;s protect it by detecting <code>NODE_ENV</code> and update it to be something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">serializeError</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">status</span><span class="o">:</span> <span class="mi">500</span><span class="p">,</span> <span class="nx">title</span><span class="o">:</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">!==</span> <span class="s1">&#39;production&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">body</span><span class="p">.</span><span class="nx">stack</span> <span class="o">=</span> <span class="nx">err</span><span class="p">.</span><span class="nx">stack</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">errors</span><span class="o">:</span> <span class="p">[</span><span class="nx">payload</span><span class="p">]</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Even better.  Generic errors handled.</p>

<h2>Crash On the Rest</h2>

<p>Now note the asterisk on the previous section.  We aren&#8217;t actually able to catch <em>all</em> errors in that generic &#8220;catch-all&#8221; error handler.  To illustrate, let&#8217;s create two new routes.  The first is a route that does nothing but throw a new <code>Error</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/debug/error&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Test explosion&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above route, if requested at <code>GET /debug/error</code>, would throw a new Error and it would be caught by the generic error handler of the previous section.  This is because <code>throw</code> delivers that new <code>Error</code> synchronously.  It stays in the context of the current call stack of the request through Express middleware.  And Express can catch the <code>Error</code> and call your first error-handling middleware.</p>

<h4>Out-of-Context Errors</h4>

<p>But we can easily break out of this context and bypass the catch-all handler entirely.  All we have to do is use a <code>setTimeout</code>.  Calling <code>setTimeout</code> will queue a new message for the event loop to, at some later tick of the clock, run the enclosed function.  Within that function, we&#8217;ll throw another <code>Error</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/debug/crash&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">_</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Error outside request context&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Let the Process Die</h4>

<p>And now there&#8217;s really nothing that Express can do to help us.  The <code>Error</code> will instead bubble up to the Node process running our app.  That process gives us one final opportunity to know about the occurrence of such a fatal error.  Once we know about it, we can log it.  Perhaps we can get off a call to our monitoring service.  After that, we should assume our process is compromised, potentially unstable, and just crash.  Then use a tool like <a href="https://github.com/foreverjs/forever">forever</a> to detect the downed process and restart it.  Such a crash handler might look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">process</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;uncaughtException&#39;</span><span class="p">,</span> <span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">log</span><span class="p">.</span><span class="nx">fatal</span><span class="p">({</span> <span class="nx">err</span> <span class="p">},</span> <span class="s1">&#39;uncaught exception&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">process</span><span class="p">.</span><span class="nx">nextTick</span><span class="p">(</span><span class="nx">_</span> <span class="o">=&gt;</span> <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The call to <code>process.nextTick</code> is meant to give some leeway for just enough processing time to finish those last ditch logging/monitoring efforts.</p>

<p>Now we have caught all the errors, in hopefully the best and most helpful way possible.</p>

<p>What other things have you done in your app to make Node error handling better?</p>

<h5>Great Resources</h5>

<ul>
<li><a href="https://www.joyent.com/node-js/production/design/errors">Joyent Production Practices</a> for all-around design practices</li>
<li><a href="https://expressjs.com/en/guide/error-handling.html">Express Error Handling</a> for framework-specific understanding</li>
<li><a href="http://jsonapi.org/format/#error-objects">JSON-API Error Objects</a> for sensible info to include in an error response</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop">MDN Event Loop</a> for basics on the message queue in the event loop</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Return an Array in GraphQL]]></title>
    <link href="http://jaketrent.com/post/return-array-graphql/"/>
    <updated>2016-08-16T10:15:00-06:00</updated>
    <id>http://jaketrent.com/post/return-array-graphql</id>
    <content type="html"><![CDATA[<p><a href="http://graphql.org/">GraphQL</a> provides a query language to define the shape of data you&#8217;d like returned from an HTTP API on a server and a library to help make it happen.  It&#8217;s easy to return a single item or multiple items.</p>

<p><img src="http://i.imgur.com/RitF21I.jpg" alt="graphql" /></p>

<!--more-->


<h1>Query Many Items</h1>

<p>To <a href="http://graphql.org/docs/queries/">query in graphql</a>, you setup what looks like a json payload without the values.  For example, to get the <code>id</code> and <code>title</code> fields of <em>all</em> books in your API, you might write:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  books {
</span><span class='line'>    id,
</span><span class='line'>    title
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h1>Query a Single Item</h1>

<p>To query a single item, filtered by a unique id, you&#8217;d add a predicate to the books query:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  books(id: 123) {
</span><span class='line'>    id,
</span><span class='line'>    title
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Otherwise, everything remains the same.</p>

<p>The sameness or similarity with the single item query feels good from someone coming from a REST API, where resources similar to the above would be queried from URIs something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/books          # single
</span><span class='line'>/books/123      # multiple</span></code></pre></td></tr></table></div></figure>


<p>But keeping the same query field, <code>books</code>, for both queries will provide a challenge because we will have to support both the single and multiple query from the same place.</p>

<h1>Define a Schema</h1>

<p>On the server, you need to define a schema for possible supported shapes of data you can query.  We currently have one field that we can query &#8211; <code>books</code>.  In the case where we provide no filter (known as args in a schema), we want to return all books.  If there is a filter, we want to use it, and return a single book.  The schema might look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="p">{</span> <span class="nx">GraphQLID</span><span class="p">,</span> <span class="nx">GraphQLList</span><span class="p">,</span> <span class="nx">GraphQLObjectType</span><span class="p">,</span> <span class="nx">GraphQLSchema</span><span class="p">,</span> <span class="nx">GraphQLString</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;graphql&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">bookType</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GraphQLObjectType</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;book&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">fields</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="nx">GraphQLID</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">title</span><span class="o">:</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="nx">GraphQLString</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">schema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GraphQLSchema</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;root&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">fields</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">books</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="k">new</span> <span class="nx">GraphQLList</span><span class="p">(</span><span class="nx">bookType</span><span class="p">),</span> <span class="c1">// &lt;-- note type</span>
</span><span class='line'>      <span class="nx">args</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">id</span><span class="o">:</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="nx">GraphQLID</span> <span class="p">}</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">resolve</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// &lt;-- the interesting part</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">args</span><span class="p">.</span><span class="nx">id</span>
</span><span class='line'>          <span class="o">?</span> <span class="nx">repo</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
</span><span class='line'>          <span class="o">:</span> <span class="nx">repo</span><span class="p">.</span><span class="nx">findAll</span><span class="p">()</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The decision to return a single item or multiple items happens in the <code>resolve</code> function for <code>books</code>.  And the <code>books</code> field config shows that the return type will always be a <code>GraphQLList</code> of <code>bookType</code>.  This means that whether a single item or multiple items, an array will always be returned.  This doesn&#8217;t feel to terrible &#8211; even familiar when comparing to things like JSON-API.  More importantly, it&#8217;s <em>required</em> for this return type to work.</p>

<p>At one point, I attempted to use <a href="http://graphql.org/docs/api-reference-type-system/#graphqluniontype"><code>GraphQLUnionType</code></a> to have two potential return types, but I got an error like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">books</span> <span class="nx">may</span> <span class="nx">only</span> <span class="nx">contain</span> <span class="nb">Object</span> <span class="nx">types</span><span class="p">,</span> <span class="nx">it</span> <span class="nx">cannot</span> <span class="nx">contain</span> <span class="p">[</span><span class="nx">the</span> <span class="nx">array</span> <span class="nx">type</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#8230;meaning that I couldn&#8217;t mix a single object type with an array type in the unioned return type.</p>

<p>So in our chosen, working solution above where we always return an array, any consuming client will query with the<code>books</code> field.  An array of one or many items will be returned.  In the case of returning an array of a single item, the deserialization code will probably want to unwrap the item from the array and expose it as a single object, but obviously this is up to your preference.</p>

<p>There it is.  Have you learned how to do this in a better or more elegant way?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing es2015 Riot Tags]]></title>
    <link href="http://jaketrent.com/post/testing-es2015-riot-tags/"/>
    <updated>2016-07-28T09:45:00-06:00</updated>
    <id>http://jaketrent.com/post/testing-es2015-riot-tags</id>
    <content type="html"><![CDATA[<p>Getting riot.js setup for development isn&#8217;t too bad.  But the combo of language features, testing tools, and riot templates made setting up the test environment a bit trickier than I expected.  Here are some of the details.</p>

<p><img src="http://i.imgur.com/EF2IK3G.png" alt="riot tag testing" /></p>

<!--more-->


<h2>Es2015 in Src</h2>

<p>For this project, I am using <a href="http://riotjs.com/">riotjs</a>, which is a React-like library for writing UI components.  The library is designed to look for Riot components in <code>.tag</code> files.  These files look like HTML fragments, like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div&gt;
</span><span class='line'>  &lt;!-- my component markup... --&gt;
</span><span class='line'>&lt;/div&gt;
</span><span class='line'>
</span><span class='line'>&lt;script&gt;
</span><span class='line'>  // my component scripts...
</span><span class='line'>&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p>I am using <a href="https://babeljs.io/">Babel</a> to transpile the es2015 code in my project.  I also want es2015 available in the tags.  So, instead of just using the <code>babel-preset-es2015</code> preset, I&#8217;m using <a href="https://github.com/riot/babel-preset-es2015-riot"><code>babel-preset-es2015-riot</code></a>.  I also want default module export support, so I&#8217;m using <code>babel-plugin-add-module-exports</code>.  The <code>.babelrc</code> file looks like:</p>

<figure class='code'><figcaption><span>.babelrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;presets&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;es2015-riot&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;stage-1&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="s2">&quot;plugins&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;add-module-exports&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For in-browser module support, I&#8217;m using webpack.  So, for <code>.js</code>, I&#8217;m using <code>babel-loader</code>.  For <code>.tag</code> riot files, I&#8217;m using <code>babel-loader</code> <em>plus</em> <code>riotjs-loader</code>.  The useful snippet for the loaders is here:</p>

<figure class='code'><figcaption><span>webpack.config.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="nx">module</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">loaders</span><span class="o">:</span> <span class="p">[{</span>
</span><span class='line'>      <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.js$/</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">loaders</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;babel&#39;</span><span class="p">],</span>
</span><span class='line'>      <span class="nx">excludes</span><span class="o">:</span> <span class="sr">/node_modules/</span>
</span><span class='line'>    <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.tag$/</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">loaders</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;babel&#39;</span><span class="p">,</span> <span class="s1">&#39;riotjs?type=babel&#39;</span><span class="p">],</span>
</span><span class='line'>      <span class="nx">exclude</span><span class="o">:</span> <span class="sr">/node_modules/</span>
</span><span class='line'>    <span class="p">}]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the riotjs plugin takes a query parameter for determining what type of code lives in the <code>&lt;script/&gt;</code> section of the <code>.tag</code> files.</p>

<p>Now a simple app might look like this:</p>

<figure class='code'><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">riot</span> <span class="nx">from</span> <span class="s1">&#39;riot&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="s1">&#39;./app.tag&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">riot</span><span class="p">.</span><span class="nx">mount</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s importing the top-most riot component for the app, called <code>app.tag</code>:</p>

<figure class='code'><figcaption><span>app.tag</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>import &#39;./header.tag&#39;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;app&gt;</span>
</span><span class='line'>  <span class="nt">&lt;header&gt;&lt;/header&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- more app stuff --&gt;</span>
</span><span class='line'><span class="nt">&lt;/app&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>header.tag</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;header&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>Wow<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;/header&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the tag file imports other tag files.  To me, this seems to be the right place to do this, since the parent tag has dependencies on children tags.  But it presents a problem that requires extra configuration in the test environment.</p>

<h2>Es2015 in Test</h2>

<p>In test land, we are using <a href="https://github.com/avajs/ava">ava</a> as our test runner.  We configure it in the <code>package.json</code> file:</p>

<figure class='code'><figcaption><span>package.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;ava&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;babel&quot;</span><span class="p">:</span> <span class="s2">&quot;inherit&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;files&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;src/**/*.spec.js&quot;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;require&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;babel-register&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;./test/utils/node-extensions&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;./test/utils/dom&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few explanations about the test setup above&#8230;</p>

<p>Ava supports es2015 out of the box.  But it also allows you to specify your own <code>.babelrc</code> configuration using the &#8216;inherit&#8217; value.</p>

<p>With <code>files</code>, we are telling ava to find all the specs in the <code>src/</code> subdir that have the <code>.spec.js</code> filename suffix.</p>

<p>The <code>require</code> section is used to specify what code needs loaded before the specs run:</p>

<ul>
<li><code>babel-register</code> - so we can use es2015 in test setup code.</li>
<li><code>./test/utils/node-extensions</code> - so we can tell node (running ava) how to load the <code>.tag</code> files that it encounters (remember, we don&#8217;t have webpack in this test environment).</li>
<li><code>./test/utils/dom</code> - sets up a jsdom for doing our UI test</li>
</ul>


<p>The <code>node-extensions.js</code> file is pretty interesting.  It is providing node a new function for how to handle the <code>.tag</code> files.  For these files, we&#8217;ll compile using the riot compiler and then compile that output using babel.  In the end, we should have ready code.  You&#8217;ll also notice that this custom file loader requires that we load up our <code>.babelrc</code> file manually because we&#8217;re acting outside of ava at this point.</p>

<figure class='code'><figcaption><span>test/utils/node-extensions.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">babel</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;babel-core&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">riot</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;riot&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Add riot to node env so compilation works - per https://github.com/riot/riot/issues/895</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nx">riot</span> <span class="o">=</span> <span class="nx">riot</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">getBabelRc</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">contents</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;..&#39;</span><span class="p">,</span> <span class="s1">&#39;..&#39;</span><span class="p">,</span> <span class="s1">&#39;.babelrc&#39;</span><span class="p">),</span> <span class="s1">&#39;utf8&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">contents</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Error loading .babelrc&#39;</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// override behavior for riot tag import - per https://github.com/mochajs/mocha/issues/1458</span>
</span><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">extensions</span><span class="p">[</span><span class="s1">&#39;.tag&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">module</span><span class="p">,</span> <span class="nx">filename</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">content</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">riotCompiled</span> <span class="o">=</span> <span class="nx">riot</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">content</span><span class="p">,</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;babel&#39;</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">babelCompiled</span> <span class="o">=</span> <span class="nx">babel</span><span class="p">.</span><span class="nx">transform</span><span class="p">(</span><span class="nx">riotCompiled</span><span class="p">,</span> <span class="nx">getBabelRc</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">module</span><span class="p">.</span><span class="nx">_compile</span><span class="p">(</span><span class="nx">babelCompiled</span><span class="p">.</span><span class="nx">code</span><span class="p">,</span> <span class="nx">filename</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we have our dom setup, which is pretty straightforward jsdom:</p>

<figure class='code'><figcaption><span>test/utils/dom.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">jsdom</span> <span class="nx">from</span> <span class="s1">&#39;jsdom&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">.</span><span class="nx">jsdom</span><span class="p">(</span><span class="s1">&#39;&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">win</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">defaultView</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nb">document</span> <span class="o">=</span> <span class="nx">doc</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nb">window</span> <span class="o">=</span> <span class="nx">win</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nx">navigator</span> <span class="o">=</span> <span class="nx">win</span><span class="p">.</span><span class="nx">navigator</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nx">history</span> <span class="o">=</span> <span class="nx">win</span><span class="p">.</span><span class="nx">history</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have a dom with a body tag we can render into, so let&#8217;s try to test out our <code>app.js</code> render code &#8211; finally, the test:</p>

<figure class='code'><figcaption><span>app.spec.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">test</span> <span class="nx">from</span> <span class="s1">&#39;ava&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">subject</span> <span class="nx">from</span> <span class="s1">&#39;../app&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">.</span><span class="nx">before</span><span class="p">(</span><span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">.</span><span class="nx">after</span><span class="p">.</span><span class="nx">always</span><span class="p">(</span><span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="nx">body</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">body</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">body</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;#render displays a header&#39;</span><span class="p">,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">subject</span><span class="p">.</span><span class="nx">render</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">truthy</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">===</span> <span class="s1">&#39;Wow&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>So much work for such a benign test. :)</p>

<p>It&#8217;s a cool combo of technologies.  But it takes a fair bit of wrangling and that interesting bit of <code>node-extensions.js</code> code to get it working.</p>

<p>Have you used this combo of tech before or something similar?  Any better setups that you&#8217;ve found?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Depending on a Shared Lib]]></title>
    <link href="http://jaketrent.com/post/depending-on-shared-lib/"/>
    <updated>2016-05-04T09:49:00-06:00</updated>
    <id>http://jaketrent.com/post/depending-on-shared-lib</id>
    <content type="html"><![CDATA[<p>You build a product.  Someone else builds a shared lib.  You want to use the shared lib in your app for its apparent utility.  There come <em>new</em> features that the product team wants to adjust and add to your product.  The shared lib provides utility that is <em>related</em> to these new features but does not provide these new features per se.</p>

<p><img src="http://i.imgur.com/6TDbI7O.png" alt="a shared lib" /></p>

<!--more-->


<h2>Wishing the Shared Lib Did More</h2>

<p>You think to yourself, &#8220;I wish this shared lib did this for me too.&#8221;</p>

<p>You might even go further to start adjusting your expectations and timeline around the shared lib. &#8220;I might just <em>wait</em> until the shared lib does this for me.  It&#8217;s already doing stuff in this area.  It should do it the related stuff too.&#8221;</p>

<p>After all, you have a lot of other stuff you&#8217;d rather do.</p>

<h2>The Feature I Need</h2>

<p>If you wait, you may get lucky and get what you want.  Or, by the nature of the lib being shared, other constituents of the shared lib may have their own sway on it, pushing it in a direction that doesn&#8217;t match the feature you need.   Or, the designer of the shared lib might not <em>want</em> to add in the new features that are expedient for your product, thinking them ill-fitting of the shared lib.</p>

<h2>Independence to Move</h2>

<p>You&#8217;re already waiting, and you say, &#8220;Let&#8217;s give the shared lib <em>more</em> to do.&#8221;  This seems like an equation for waiting more and shipping less.  You&#8217;re putting your product in the hands of someone else.  That someone else may mean well, and you may trust him to eventually deliver on what you want in your product.  But you are reducing your independence by simply relying on the shared lib and its author.</p>

<p>You&#8217;re already waiting.  There&#8217;s probably a reason for that.  What makes you think that if you continue <em>or increase</em> reliance on this lib that you&#8217;ll be waiting <em>less</em> in the future?  In practice, many shared libs have simply less manpower than full product teams.</p>

<p>Is it possible for you to affect the development timeline by your own effort and contribution to the shared lib?  If you&#8217;re willing and have time to contribute to the shared lib, why not use that time and effort to further the needs of your specific product?  If you&#8217;re not willing, then you really shouldn&#8217;t be picky about what you get and when you get it, right?</p>

<h2>Owning Your Product</h2>

<p>In the end you own and ship a product.  End users don&#8217;t care if you use this shared lib.  You can get the job done many ways.  A shared lib that solves some of your problems isn&#8217;t on the hook to solve all your future problems.  It&#8217;s <em>your</em> project.  Owning it is a mindset:  &#8220;I&#8217;m going to ship this thing as well and as quickly as I can.  I&#8217;ll do what I can to gather helpful resources, such shared libs, and ask for help in order to make this happen.  But in the end, I&#8217;ll make it work one way or another.&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[react-dnd With Text Drag Preview]]></title>
    <link href="http://jaketrent.com/post/react-dnd-text-drag-preview/"/>
    <updated>2016-04-21T08:04:00-06:00</updated>
    <id>http://jaketrent.com/post/react-dnd-text-drag-preview</id>
    <content type="html"><![CDATA[<p><a href="http://gaearon.github.io/react-dnd/">react-dnd</a> is a fantastic library for implementing drag and drop features in a React application.  In browsers, you have the ability to specify a drag preview for the thing your dragging.  Images are easy.  Text takes more work &#8211; because you need to generate an image.</p>

<p><img src="http://i.imgur.com/E5NwBek.png" alt="react-dnd text drag previews" /></p>

<!--more-->


<p>I love the abstractions in react-dnd.  They seem very elegant.  We&#8217;re going to need another abstraction here, because there&#8217;s a short list of things that we need to do in order to get a text-based drag preview showing up in our app.  These things are required because drag previews in browsers only support images.  Thus we will need to take source text from our app code and convert it into an image in order to hand it off to the drag and drop api.</p>

<h2>Drag Text from a Canvas</h2>

<p>To convert text to an image, we must:</p>

<ol>
<li>Create a canvas element</li>
<li>Fit the canvas to our text</li>
<li>Style the canvas</li>
<li>Create a new image element with the canvas data as src</li>
</ol>


<h4>Create a Canvas Element</h4>

<p>We choose a canvas element because we can write text onto it and eventually export its bytes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;canvas&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s1">&#39;2d&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Fit Canvas to the Text</h4>

<p>We want the drag preview to be dynamically sized.  This is because the text can change in length.   The key to our success is available on the <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/measureText">Canvas 2D context as <code>measureText</code></a>.  This function is available in IE9+.  In case you don&#8217;t have access to this function, you can attempt a crude fallback.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">getTextWidth</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">fontSize</span><span class="p">,</span> <span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">measureText</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">measureText</span><span class="p">(</span><span class="nx">text</span><span class="p">).</span><span class="nx">width</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">perCharWidth</span> <span class="o">=</span> <span class="nx">fontSize</span> <span class="o">/</span> <span class="mf">1.7</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span> <span class="o">*</span> <span class="nx">perCharWidth</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Style the Canvas</h4>

<p>Once you know how big to make your drag preview, draw a rectangle upon which you can then draw your text.</p>

<p>In addition to drawing the main content, there are also other stylistic adjustments that you can make via <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D">attributes on <code>CanvasRenderingContext2D</code></a>.  Attributes like <code>fillStyle</code>, <code>strokeStyle</code>, and <code>font</code> are available.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">ctx</span><span class="p">.</span><span class="nx">rect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">rectWidth</span><span class="p">,</span> <span class="nx">rectHeight</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ctx</span><span class="p">.</span><span class="nx">save</span><span class="p">()</span>
</span><span class='line'><span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="nx">backgroundColor</span>
</span><span class='line'><span class="nx">ctx</span><span class="p">.</span><span class="nx">strokeStyle</span> <span class="o">=</span> <span class="nx">borderColor</span>
</span><span class='line'><span class="nx">ctx</span><span class="p">.</span><span class="nx">fill</span><span class="p">()</span>
</span><span class='line'><span class="nx">ctx</span><span class="p">.</span><span class="nx">stroke</span><span class="p">()</span>
</span><span class='line'><span class="nx">ctx</span><span class="p">.</span><span class="nx">restore</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Create a new Image Element</h4>

<p>Remember, drag preview requires an image to render when the user is dragging.  Set the <code>src</code> of the image to the data from the canvas.  This will transfer everything you just created in the canvas into an image.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">img</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Image</span><span class="p">()</span>
</span><span class='line'><span class="nx">img</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">toDataURL</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This image should be ready to use in react-dnd&#8217;s <a href="http://gaearon.github.io/react-dnd/docs-drag-source-connector.html"><code>connect#dragPreview</code></a>.</p>

<h2>A Library to Help</h2>

<p>When making a React drag and drop app, I usually don&#8217;t look forward to using the sometimes-arcane API of the <code>canvas</code> element.  So, I wrapped it up so I wouldn&#8217;t have to look at it as often.</p>

<p>If you think this might help you, take a look at <a href="http://npm.im/react-dnd-text-dragpreview">react-dnd-text-dragpreview</a>.</p>

<p><a href="http://npm.im/react-dnd-text-dragpreview"><img src="http://i.imgur.com/glegZVc.gif" /></a></p>

<p>How do you go about doing text-based drag previews?  Any other good tips?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make Your Project Fun]]></title>
    <link href="http://jaketrent.com/post/make-your-project-fun/"/>
    <updated>2016-04-06T07:16:00-06:00</updated>
    <id>http://jaketrent.com/post/make-your-project-fun</id>
    <content type="html"><![CDATA[<p>You work every day.  It&#8217;s a part of life.  It&#8217;s a good part of life, and you have the power to make it better.  Ever since you were  young child, you knew what the magic ingredient was: fun!</p>

<p><img src="http://i.imgur.com/ACkhQQK.jpg" alt="Fun" /></p>

<!--more-->


<p>Making software is a creative endeavor.  It allows situations for lots of free thinking.  It comes with the satisfaction of creating something from nothing.  It allows stretching of your cognitive ability.  This is all made more enjoyable by having a mental affinity for fun.</p>

<p>Fun people create fun work.  Fun people are fun to work with.  It&#8217;s fun to look at fun people&#8217;s work.  Fun, fun, fun.  [We can&#8217;t keep doing this, Bob.]</p>

<p>So look for ways to make your project fun.  Here are a few ideas.</p>

<h2>404 Page</h2>

<p>I love the creative outlet that 404 pages have become.  There are blogs of the &#8220;Top 25 Funniest 404 Pages&#8221; and the like.  It is now common to have companies try to make the most uncommon of &#8220;page not found&#8221; pages.  You look up to the sites that take the time to make a witty 404 page.  Make one yourself.  If your brand isn&#8217;t funny (maybe it should be!), at least flirt with funny and push the envelope on happy as much as you can &#8211; and then one step more.</p>

<p>Here&#8217;s a 404 page that our team made before the designers had come to a conclusion on a recent project.  It&#8217;s still there.  It&#8217;s one of my favorite additions to the site.</p>

<p><img src="http://i.imgur.com/HobT77O.png" alt="Doge 404" /></p>

<p>You&#8217;ll find that fun projects also present opportunities to do things that you wouldn&#8217;t usually otherwise do.  For instance, I spent half an hour drawing vectorized Doge &#8211; again, a favorite experience in my memory.</p>

<h2>Animate Things</h2>

<p>I am drawn to almost any page that includes some sort of data visualization.  I love making those pages.  Part of the reason is that there&#8217;s always room to add a bit of your own flair to the thing.  Designers rarely get to the point where they start defining animations, and I love animations, so I get to experiment with what I like and fill that in later.  And animation is usually impressive to users later, so the payoff is nice.</p>

<p>Here is a fun animation of a gauge that I made for a project that was meant to evoke a car engine revving at startup:</p>

<p data-height="279" data-theme-id="1749" data-slug-hash="eloGk" data-default-tab="result" data-user="jaketrent" data-preview="true" class="codepen">See the Pen <a href="http://codepen.io/jaketrent/pen/eloGk/">D3 Gauge</a> by Jake Trent (<a href="http://codepen.io/jaketrent">@jaketrent</a>) on <a href="http://codepen.io">CodePen</a>.</p>


<script async src="http://jaketrent.com//assets.codepen.io/assets/embed/ei.js"></script>


<h2>Don&#8217;t Use the Prebuilt</h2>

<p>At this point in the UI design timeline, there are many, many prebuilt widgets for today&#8217;s current look that you can just slap on the page.  You might get done early, but it won&#8217;t look original.  Your site will just look like many, many other sites.  In my opinion, this is an unwelcome trend in web and mobile app design today &#8211; everything seems to be converging.  But this just makes original designs all the more special and appreciated.</p>

<p>In a recent project, I could have thrown in any of a host of prebuilt loading spinners, but I wanted to do something different and quirky.  We had charts that relied on async data coming from a server, so we had the UI show a chart loading state.  Here&#8217;s what I came up with for the line chart:</p>

<p><img src="http://i.imgur.com/5gCGnzk.gif" alt="Line chart loading" /></p>

<p>It&#8217;s meant to evoke a heart monitor.  And for the bar chart:</p>

<p><img src="http://i.imgur.com/7WetiZ8.gif" alt="Bar chart loading" /></p>

<p>I was going to speed it up to make it more equalizer-ish, but then slowed it down so-as to be less busy.  Feel free to <a href="https://github.com/jaketrent/react-chart-loading">download and use it</a> yourself.</p>

<h2>Have Some Fun Team Spirit</h2>

<p>I&#8217;ve previously already mentioned my love for team and project <a href="http://jaketrent.com/post/in-favor-codenames/">codenames</a>.  You should get one, and it should come from a universe of thought that&#8217;s original or exciting and fun to you.  This is to please you and your team, not anyone else.  Make T-shirts.  I&#8217;ve thought about this often, but have never produced my own, so this suggestion is for me.  For one of my teams, I even picked a <a href="https://www.youtube.com/watch?v=0gC7bmIDQjY">theme song, Moliendo café,</a> to go with our team code name, Ranchero.  Those are happy memories of good times.</p>

<p>Make a logo.  Choose something that will be fun.  Imagine it as a sticker on the back of a laptop lid.  Will in be awesome there?  When measured in logos, the coolest frontend web framework available today is <a href="http://emberjs.com/">Ember</a>:</p>

<p><img src="http://i.imgur.com/dwho9tp.png" alt="Ember logo" /></p>

<p>When measured in logos, the coolest tech conference of the past year was <a href="http://www.reactrally.com/">React Rally</a>:</p>

<p><img src="https://d13yacurqjgara.cloudfront.net/users/700730/screenshots/2171778/evilsquid_1x.png" alt="React Rally logo" /></p>

<p>Who doesn&#8217;t think a bespectacled (Tom) hamster or a nuclear-powered squid aren&#8217;t the funnest logos one could plaster on his laptop?  We need more mascots.</p>

<p>In short, have fun.  Don&#8217;t wait for your project to become fun.  Make it fun.  Make your project fun.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Change Default NPM License]]></title>
    <link href="http://jaketrent.com/post/change-default-npm-license/"/>
    <updated>2016-03-24T15:45:00-06:00</updated>
    <id>http://jaketrent.com/post/change-default-npm-license</id>
    <content type="html"><![CDATA[<p>Npm has a fantastic init tool for creating the descriptor for your project.  It will gladly provide defaults for you.  These are sometimes helpful.  Wouldn&#8217;t it be more better to define your own defaults?</p>

<p><img src="http://i.imgur.com/P34k4L5.png" alt="NPM" /></p>

<!--more-->


<h2>Npm Init</h2>

<p>If you&#8217;re doing any JavaScript development, NPM is likely a helpful tool for your toolbox.  To add a descriptor with meta information, including things like 3rd-party project dependencies, you need a <code>package.json</code> for your project.  To get this file, you can edit it by hand or have one generated for you.  To generate it, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm init</span></code></pre></td></tr></table></div></figure>


<p>You will then be prompted to answer a series of relevant questions, such as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>name: (hello-riot)
</span><span class='line'>version: (1.0.0)
</span><span class='line'>description:
</span><span class='line'>entry point: (index.js)
</span><span class='line'>test command:
</span><span class='line'>git repository:
</span><span class='line'>keywords:
</span><span class='line'>author:
</span><span class='line'>license: (ISC)
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>The values in parenthesis are the defaults.  Defaults are determined from things like the directory you&#8217;re in, the git repository you&#8217;re in, etc.</p>

<h2>Set Npm Init Defaults</h2>

<p>Some defaults are just the NPM-provided conventions.  They don&#8217;t know much more to provide.  But you can provide your own defaults for your system by editing <code>~/.npmrc</code>.  Or you can use the cli to add to this file from the terminal.  For instance, the two I like to change are my author name and the license:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm config set init-author-name "jaketrent"
</span><span class='line'>npm config set init-license "MIT"</span></code></pre></td></tr></table></div></figure>


<p>Now, you can init and just take the defaults without pressing enter to answer the question with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm -y</span></code></pre></td></tr></table></div></figure>


<p>And what you get are the defaults you&#8217;ve already decided you like.</p>

<p>To know what other things you can change as defaults, use <code>npm help 7 config</code> and grep for <code>init-</code>-prefixed values.  Happy npm&#8217;ing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selecting a Directory in Electron]]></title>
    <link href="http://jaketrent.com/post/select-directory-in-electron/"/>
    <updated>2016-03-21T10:12:00-06:00</updated>
    <id>http://jaketrent.com/post/select-directory-in-electron</id>
    <content type="html"><![CDATA[<p>Electron will help you make some sweet native desktop apps using web tech.  Now that you&#8217;re on the desktop, one of the cool things you can do is access the filesystem.  There are a couple ways to access the filesystem via the file open dialog using user input events.</p>

<p><img src="http://i.imgur.com/Vp8Zuix.jpg" alt="Electron" /></p>

<!--more-->


<h2>From HTML</h2>

<p>In Electron, you use HTML for your views.  Thus, if you want the user to select a directory from the UI, you can use a <code>&lt;input type="file" /&gt;</code>, just like in a normal web app.</p>

<h4>Select Only Directories</h4>

<p>To select only directories, there is an attribute you can add to the <code>input</code> tag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;file&quot;</span>
</span><span class='line'>       <span class="na">webkitdirectory</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This wouldn&#8217;t be reliable in a cross-browser environment.  But since, on Electron, you&#8217;re only targeting Chrome, you&#8217;re golden with whatever Chrome has available to you.</p>

<h4>Bonus: Programmatically click on <code>input[type="file"]</code></h4>

<p>As a bonus, Electron doesn&#8217;t have the sandbox security restrictions that you would have in a standalone browser like Chrome.  In browsers, sometimes the file open dialog will fail if anything triggers the dialog besides the user clicking with their own mouse on the file input field.  Sometimes getting at the contents of the file will fail.  I&#8217;m too lazy to test which browsers do what at this point, but sad past experience has determined that this is unreliable.</p>

<p>But in Electron, you are again liberated.  For instance, <code>input[type="file"]</code> is ugly and sometimes hard to style into exactly what you want.  So, it&#8217;s often that you&#8217;ll want to create a custom widget, that when <em>it&#8217;s</em> clicked, the <code>input[type="file"]</code> is clicked and the file open dialog is popped.</p>

<p>Given:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&quot;party&quot;</span> <span class="na">class=</span><span class="s">&quot;very-sweet-looking&quot;</span><span class="nt">&gt;</span>Open<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;business&quot;</span> <span class="na">type=</span><span class="s">&quot;file&quot;</span> <span class="na">style=</span><span class="s">&quot;display: none&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This totally works:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;party&#39;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">_</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;business&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">()</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>From Electron API</h2>

<p>In the main process, you have access to an Electron API, <code>dialog</code>.  <a href="http://electron.atom.io/docs/v0.37.2/api/dialog/#dialogshowopendialogbrowserwindow-options-callback"><code>dialog#showOpenDialog</code></a> is a programmatic API that allows you to open the same open file dialog that you&#8217;re used to in the browser.  What&#8217;s even better is that here you can set that only directories should be openable rather easily:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// mainWindow is your instance of BrowserWindow</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">electron</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;electron&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">dialog</span> <span class="o">=</span> <span class="nx">electrong</span><span class="p">.</span><span class="nx">dialog</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">selectDirectory</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">dialog</span><span class="p">.</span><span class="nx">showOpenDialog</span><span class="p">(</span><span class="nx">mainWindow</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">properties</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;openDirectory&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to integrate this main process code with user interaction, we need to do a few things.</p>

<p>First, export the code from your main process module:</p>

<figure class='code'><figcaption><span>main.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">selectDirectory</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// dialog.showOpenDialog as before</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then in the renderer process, capture user events as before and call the main process function, <code>selectDirectory</code>:</p>

<figure class='code'><figcaption><span>renderer.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">electron</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;electron&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">remote</span> <span class="o">=</span> <span class="nx">electron</span><span class="p">.</span><span class="nx">remote</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">mainProcess</span> <span class="o">=</span> <span class="nx">remote</span><span class="p">.</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./main&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;party&#39;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">_</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">mainProcess</span><span class="p">.</span><span class="nx">selectDirectory</span><span class="p">()</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Works pretty nicely, but feels weird that you have to go back to the main process to access a view-related API (as of Electron 0.37).</p>

<p>So, if there are two ways to do this, there has to be another, right?  What are you doing to select a directory in Electron?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Determining the Health of Your Culture]]></title>
    <link href="http://jaketrent.com/post/determine-health-of-culture/"/>
    <updated>2016-03-21T08:59:00-06:00</updated>
    <id>http://jaketrent.com/post/determine-health-of-culture</id>
    <content type="html"><![CDATA[<p>Culture will emerge after a group of people attempt to solve problems again and again in a certain way.  This &#8220;way&#8221; becomes the culture.  If you are deliberate in your choices on how to solve problems, you will be deliberate in creating a culture.  Once you have a culture in mind and are working toward it or trying to maintain it, how do you determine how healthy it is?  Clay Christensen has a simple question you can ask yourself.</p>

<p><img src="http://i.imgur.com/Y1WvMlu.jpg" alt="Healthy culture" /></p>

<!--more-->


<h2>How Will You Measure Your Life?</h2>

<p>Clay Christensen wrote a book called <a href="http://amzn.to/1RgjFWA">&#8220;How Will You Measure Your Life?&#8221;</a>.  The book applies some of Christensen&#8217;s theories that might have originally pertained to business to one&#8217;s life and family.  It is a thought-provoking book.</p>

<p>In it, he talks about how to check and see if your culture &#8211; whether in family or business &#8211; is what you hope it might be.  He writes:</p>

<blockquote><p>You can tell the health of a company&#8217;s culture by ask, &#8220;When faced with a choice on how to do something, <strong>did employees make the decision that the culture &#8216;wanted&#8217; them to make?</strong>  And was the <strong>feedback they receive consistent with that?</strong>&#8221;  If these elements aren&#8217;t actively managed, then a single wrong decision or wrong outcome can quite easily send a firm&#8217;s culture down entirely the wrong path.</p></blockquote>

<h2>Two Good Questions</h2>

<p>There are only two questions, and they&#8217;re easy to remember.  The first question assumes that were you or other culture leaders and exemplars to look at a decision, you&#8217;d make a certain choice.  Between each other, you likely wouldn&#8217;t make the exact same choice, but you&#8217;d favor certain types of responses.  You would hope people at your company would respond in a similar way.  You&#8217;ve thought about it.  You care.  You do things deliberately.  There definitely will be a diversity of opinion and approaches in your company.  But in the major, defining areas that you and your company care deeply about, you hope for a certain type of response and would like to avoid others.</p>

<p>The second question assumes that you&#8217;re actively managing the culture at your company.  It means that you are engaged in the company.  You see decisions being made.  You make and you see other people making decisions.  You don&#8217;t make decisions for them, but you are nearby, and you care.  You talk to your people.  You ponder what you have observed.  You help people fall into the pit of success, guided by the culture.  You talk up the culture in theory, stating your values, and in practice, giving specific feedback to people.</p>

<h2>A Mental Survey</h2>

<p>So how is your culture?  Thinking into the recent past or anticipating the future, are your teammates making the decisions the culture &#8216;wanted&#8217; them to make?  Is your feedback reinforcing the values of the culture?</p>

<p>Here are a few situations you might ponder:</p>

<ul>
<li>How was a system-wide architectural decision recently made?</li>
<li>How was an expenditure recently discussed with a team member?</li>
<li>How were lunch breaks recently discussed and treated?</li>
<li>How was a potential candidate recently treated in the hiring pipeline?</li>
<li>How was somebody treated when recently fired?</li>
<li>How was work quality recently measured and discussed?</li>
<li>How did a product team decide on what features to build next?</li>
<li>How was a goal recently defined for a team or team member?</li>
</ul>


<p>In these situations, where decisions were made, think about who was involved, how they acted, what was communicated and enforced &#8211; especially relating to your own involvement.  Compare what you remember and have considered with what you think about the culture.  Is the stated company culture reinforced by recent events at the company?  Are recent events and decisions at odds with what most everyone is <em>saying</em> the culture is?  How might you be able to close the gap?</p>

<p>Be willing to admit the truth where you find it.  No culture is perfect.  No team member is perfect.  Be ready with some humility and a growth mindset.  Appreciate what your culture can add to your company and to your personal happiness enough to ask the questions and improve your approach.  Be willing to ask for forgiveness where you have deviated from your stated cultural values.</p>

<p>What have you found to be helpful in determining the health of your own company or team&#8217;s culture?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bring Your Listeners With You]]></title>
    <link href="http://jaketrent.com/post/bring-your-listeners-with-you/"/>
    <updated>2016-03-20T09:03:00-06:00</updated>
    <id>http://jaketrent.com/post/bring-your-listeners-with-you</id>
    <content type="html"><![CDATA[<p>Remember that last time that you spoke at a conference and really felt like you had connected with your audience?  You were able to keep them with you for the length of your journey.  You felt like they grew and were enlightened with you.  There&#8217;s a certain magic to that, and there&#8217;s also some deliberate thought you can give the experience that will help it happen more often.</p>

<p><img src="http://i.imgur.com/keI6970.jpg" alt="Speaking" /></p>

<!--more-->


<h2>Set Expectations</h2>

<p>Start settings expectations in the abstract for your talk.  If you set accurate expectations, you&#8217;ll be more likely to get the right audience.  I&#8217;m all for fun descriptions.  Also make sure it is very clear what the subject is, the format of the talk, and the desired outcome.  Use keywords that will be tipoffs, such as &#8220;with code&#8221;, &#8220;high-level concepts&#8221;, &#8220;preview of pre-release tech&#8221;, or &#8220;soft skill&#8221;.</p>

<p>Set expectations at the beginning of the talk.  This will help focus the learners on what is to be accomplished.  Even if your talk wasn&#8217;t what they had originally imagined, they will be able to adjust to a mindset more aligned with the topics that you are to cover.  They&#8217;ll setup a mental bin for the new information to go in.  They&#8217;ll create mental hooks that they can connect the new information you&#8217;re sharing to their previous experience.</p>

<p>Set expectations in the topic or activity transitions.  When you change gears, state that you&#8217;re doing so.  By doing this, you&#8217;ll be less likely to lose learners along the way.  Just as in the beginning, you&#8217;ll set up a context for what&#8217;s coming.</p>

<h2>Clear Definitions</h2>

<p>The ground that you&#8217;re about to cover in your talk will be very alien to some.  They may have no background in your topic.  The broad spectrum of learner backgrounds is a challenge in any talk.  If you want to bring as many learners as possible into unknown territory, be willing to take a moment and establish clear definitions.  You don&#8217;t have to teach advanced topics from the ground up every time.  Again, expectations in your talk&#8217;s abstract will help with this.  But if you want to allow new learners the opportunity to file away as much useful information as possible, give some basic definitions to serve as a mental foundation.</p>

<p>Even though it may be repetitive for the advanced learner, it may still be useful for them as a reminder or showing some nuance in your own perspective that they didn&#8217;t have before.  Once you establish the definitions and use that language consistently as you glob on new concepts in your talk, it will be easier to listeners to keep up and associate concepts more easily.</p>

<h2>Show Variety</h2>

<p>You will need to be able to keep attention in addition to just sharing pure information.  If people aren&#8217;t willing to put down their twitter stream and pay attention, the information you are speaking into the air will go straight to /dev/null.</p>

<p>There is an entertainment value that can increase the total effectiveness of your talk.  It shouldn&#8217;t usually be the core of your talk or main reason for people to come hear you, but it can help.  Be light-hearted.  Help people laugh.  Smiling, laughing people learn better.  Vary your voice in volume, speed, and expression to recapture attention.  Spend time on engaging visual aids (the good ones really do take a fair amount of time to produce).</p>

<h2>Let Them Go</h2>

<p>Your learners must trust you to come with you to the conceptual place that you&#8217;re going.  Be worthy of that trust.  Get to assigned room and start on time.  When the session time is over, end.  This is the respectful thing to do.  Prepare for the eventuality of bad timing estimates or technical difficulties or venue problems.  Have your material available online for later.</p>

<p>It is good to say, &#8220;I&#8217;m over time.  We have just a little more to cover.  You can get up and leave if you&#8217;d like.  It&#8217;ll be ok.  I&#8217;m going to go quickly.&#8221;  It&#8217;s better to say, &#8220;We&#8217;re at time.  The material is available at jaketrent.com/blogPost.  Please talk to me afterward and on Twitter @jaketrent.  Thank you for coming.&#8221;  When time is up, wrap it up and end.</p>

<p>Being able to take listeners with you on a mutual teaching and learning experience is a great privilege.  It takes preparation, work, and a bit of jit magic.  These are a few ideas.  What other ideas do you have for helping learners come along with you in that experience?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fluent Conf Review]]></title>
    <link href="http://jaketrent.com/post/fluent-conf-review/"/>
    <updated>2016-03-15T06:37:00-06:00</updated>
    <id>http://jaketrent.com/post/fluent-conf-review</id>
    <content type="html"><![CDATA[<p>I went to my first <a href="http://conferences.oreilly.com/fluent/javascript-html-us">Fluent conf</a> this year.  It was a generally good experience.  I enjoyed the company and the topics.  Maybe I&#8217;ll go again.</p>

<p><img src="http://i.imgur.com/aG1CC3U.jpg" alt="Fluent Conf" /></p>

<!--more-->


<h2>Training</h2>

<p>I went to the one-day training before the conference, where there were half and quarter day sessions around a single topic.  I went to an awesome &#8220;Building a desktop app with Electron&#8221; training, where the content was great, the teacher, Steve Kinney, was exceptional, and I felt accomplished as we learned new things and got to create something together with my own typing fingers.  It went very quickly and probably could have been a bit more solid with even a full day of training.</p>

<p>I did two other trainings that weren&#8217;t nearly as good.  The people were smart, imparting what obviously took some brains to figure out, but they weren&#8217;t engaging as teachers and couldn&#8217;t capture my attention well enough to make me feel like I was along for the ride.  Pre-conference prep material suggested that we&#8217;d be producing something together in these sessions as in the Electron session.  That would have been awesome.  I am a kinetic learner.  Unfortunately, there was no attempt to build upon pre-session work, and both other sessions felt dull in comparison to the morning&#8217;s ride.</p>

<h2>Keynotes</h2>

<p>The mix of keynotes was great at the conference.  There were some heavy hitters: Brendan Eich and Doug Crockford.  There were some new, refreshing faces and topics from the likes of Laurie Voss and Alex Russell.  The keynotes were shorter than others I&#8217;ve seen &#8211; shorter than even the other sessions.  They felt almost like lightning talks, but from big web tech personalities.  The content was varied.  The delivery was all very good.  These were high points in the conference.</p>

<h2>Sessions</h2>

<p>The sessions were mostly good.  I have a general like-dislike relationship with conference talks.  I have to remember that the point is not to be permanently changed at the end of the talk or to have immediately picked up some great new skill.  The probable best place that I can be at the end of a session is inspired, pointed in a new, interesting direction, with enough information to know what I don&#8217;t know and go figure it out.</p>

<p>There was a ton of content, with 6 tracks most hours.  Some of the highlight talks that I went to were: &#8220;This talk is not available offline&#8221;, by Alex Rickabaugh, talking about &#8220;Progressive Web Apps&#8221;, Service Workers, and how to create a more native-like web experience; &#8220;How to write a worthwhile test&#8221;, by Justin Searls, which was chock full of valuable insight for test creation and tooling; and &#8220;Building our reactive future&#8221;, by Matthew Podwysocki, talking about Rx.js and how Observables are expressive coding constructs &#8211; he was hilarious too.  I&#8217;m sure I missed some other great ones.  Should I have bought that expensive &#8220;watch the recorded videos later&#8221; package?</p>

<p>I did attend a few less-than-stellar sessions, during which I read all the docs on <a href="http://cycle.js.org/">Cycle.js</a> and worked through all the examples.  It&#8217;s a super interesting framework and fit in with a large tech theme from the conference, <a href="http://reactivex.io/documentation/observable.html">Observables</a>.</p>

<h2>Venue</h2>

<p>San Fransisco is a fun city.  I love walking around the city.  It was unfortunately unusually overcast and drizzly weather while we were there.  We had less rain than was forecast, so that was good, and we were able to get out into the city at night.  Perhaps because of all the cloud cover, it seemed like it was always super late by the time we got out.</p>

<p>The conference was all held inside the Marriot Marquee.  It was held in the basement.  There were no windows.  Thankfully, they had good HVAC to mostly evacuate all the nerd smell.  It was funny going in the first time, because you go down about 3 flights of escalators, making it feel like you&#8217;re on your way to the subway.  I don&#8217;t know how many 1000+ attendees there were, but it was amazing that the hotel had that much space.  The basement must have extended underground underneath the adjoining plaza.  The Marriot was nice.  The staff were very friendly.  There was the strict policing of badge checking at most entrances &#8211; that was annoying.</p>

<p>Getting to and from San Fransisco proved laborious with a hefty layover on the way in and a hefty delay getting out, due to weather.  This task alone made me consider just buying the virtual conference option next time.  It was fun to meet a bunch of people from all over the globe though.  Perhaps they could all come visit me in the Rocky Mountains next time, and we could party here.</p>

<h2>Food</h2>

<p>Lunches were good.  The food was good and interesting.  The lines went quickly, especially on day 2, where it seemed that they had 12 independent lines for lunch.  That was awesome.  Apparently I just got lucky the first day.  There were enough people that a proper dinner and after party didn&#8217;t happen.  There was a reception the first night, which consisted of an hour of other people drinking alcohol.  I had a water.  Water from Norway never tasted so good.</p>

<h2>Swag</h2>

<p>The conference gave out water bottles.  They were on a shelf in the hall.  Oh, and they gave out name tags.  Beyond that, there was an exhibition hall with vendors giving out the usual &#8211; stickers, t-shirts, and trinkets.  I love a good sticker and found quite a few.  Github had the best.  Codeschool had some awesome ones too, such as 80s neon &#8220;Staying Sharp with Angular&#8221;.  So good.  I also replenished my summer wardrobe of T-shirts.  Heroku did go beyond T-shirts, which is a trend we should encourage, and now I have some rockin&#8217; purple socks.</p>

<h2>Going Again</h2>

<p>Fluent was a great experience and a highlight web conference for the year.  I&#8217;ve heard it has been even better in years past.  It&#8217;s probable that I&#8217;d go again to try it out again and hope for an even better experience.  Thanks, Fluent, and I&#8217;ll see you next time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Console.log Deep Objects]]></title>
    <link href="http://jaketrent.com/post/console-log-deep-objects/"/>
    <updated>2016-03-14T15:13:00-06:00</updated>
    <id>http://jaketrent.com/post/console-log-deep-objects</id>
    <content type="html"><![CDATA[<p>With deep object structures, <code>console.log</code> can leave you wondering what&#8217;s down in the depths of the objects you&#8217;re printing out.  Here&#8217;s a quick help from Node stdlib.</p>

<p><img src="http://i.imgur.com/00WAox4.jpg" alt="console.log deep objects" /></p>

<!--more-->


<p>You can usually see the objects that you&#8217;re <code>console.log</code>ing, and life is good:</p>

<p>Given:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">stickers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">are</span><span class="o">:</span> <span class="s1">&#39;fun&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;stickers&#39;</span><span class="p">,</span> <span class="nx">stickers</span><span class="p">)</span>
</span><span class='line'><span class="c1">// Outputs: stickers { are: &#39;fun&#39; }</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can see the whole object, and we&#8217;re happy.  We can even do objects up to a depth of 3 sub objects, and it works great:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">stickers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">are</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">even</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">more</span><span class="o">:</span> <span class="s1">&#39;fun&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;stickers&#39;</span><span class="p">,</span> <span class="nx">stickers</span><span class="p">)</span>
</span><span class='line'><span class="c1">// Outputs: stickers { are: { even: { more: &#39;fun&#39; } } }</span>
</span></code></pre></td></tr></table></div></figure>


<p>If, however, we have a potentially deeply-nested object, we&#8217;ll get some of our data truncated:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">stickers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">are</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">even</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">more</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">than</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">outrageously</span><span class="o">:</span> <span class="s1">&#39;fun&#39;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;stickers&#39;</span><span class="p">,</span> <span class="nx">stickers</span><span class="p">)</span>
</span><span class='line'><span class="c1">// Outputs: stickers { are: { even: { more: [Object] } } }</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>[Object]</code>s are cool and all, but not very informative.</p>

<p>To get at this information, use <a href="https://nodejs.org/api/util.html#util_util_inspect_object_options"><code>util.inspect</code></a> from the <a href="https://nodejs.org/api/util.html#util_util_inspect_object_options">stdlib</a>.  Here, you can set a depth option to be higher, letting you peer into those deep objects in the console:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">util</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;util&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">stickers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">are</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">even</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">more</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">than</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">outrageously</span><span class="o">:</span> <span class="s1">&#39;fun&#39;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;stickers&#39;</span><span class="p">,</span> <span class="nx">util</span><span class="p">.</span><span class="nx">inspect</span><span class="p">(</span><span class="nx">stickers</span><span class="p">,</span> <span class="p">{</span> <span class="nx">depth</span><span class="o">:</span> <span class="mi">4</span> <span class="p">}))</span>
</span><span class='line'><span class="c1">// Outputs: stickers { are: { even: { more: { than: { outrageously: &#39;fun&#39; } } } } }</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your data is yours again!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitignore System Files]]></title>
    <link href="http://jaketrent.com/post/gitignore-system-files/"/>
    <updated>2016-03-14T14:43:00-06:00</updated>
    <id>http://jaketrent.com/post/gitignore-system-files</id>
    <content type="html"><![CDATA[<p>There are many files that you don&#8217;t want to store in your project&#8217;s Git repo.  Some of these are even specific to the project.  Some are definitely not.  How do you ignore these that aren&#8217;t related to the project?</p>

<p><img src="http://i.imgur.com/ZYiky6R.png" alt="Git ignore" /></p>

<!--more-->


<h2>.gitignore For the Project</h2>

<p>In your project directory, you likely have a <code>.gitignore</code> file.  Here, you keep things that might show up in that directory out of the project&#8217;s version-controlled source tree.  There&#8217;s not much to it.  On each line of the file, list the file names, directory names, or partial patterns that you don&#8217;t want Git to track or even know about.</p>

<p>For instance, if you&#8217;re doing a Node.js project, you probably want to track all your own <code>.js</code> files, found in <code>src/</code>.  But you don&#8217;t want to track all those 3rd-party modules in <code>node_modules</code>.  You probably don&#8217;t want to track your code compiled for distribution either.  So, your project&#8217;s <code>.gitignore</code> file might look like this:</p>

<figure class='code'><figcaption><span>project/.gitignore</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>node_modules
</span><span class='line'>dist
</span></code></pre></td></tr></table></div></figure>


<h2>.gitignore For Your System</h2>

<p>Everything that goes in the project&#8217;s <code>.gitignore</code> file should relate to the project.  And it should relate to everyone.</p>

<p>There are many people and systems interacting with your project.  For instance, some developers might be on Mac OSX and get those nasty Finder thumbnail files, <code>.DS_Store</code> that end up popping up all over the place.  Others on the project might use the venerable Jetbrains editors which drop an <code>.idea/</code> directory in every project they edit.  These facts should be transparent to your project.  Every time someone picks up a new editor or switches an OS, the project shouldn&#8217;t have another commit updating the <code>.gitignore</code> with yet another thing.</p>

<p>You can make Git ignore files that appear on your system but are unrelated to the project.</p>

<p>Edit your top-level <code>~/.gitgnore</code>.  Add all your system-related things there.  It might end up look like:</p>

<figure class='code'><figcaption><span>~/.gitignore</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>.DS_Store
</span><span class='line'>.idea
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working More Might Not Help Our Team]]></title>
    <link href="http://jaketrent.com/post/work-more-might-not-help/"/>
    <updated>2016-02-18T16:50:00-07:00</updated>
    <id>http://jaketrent.com/post/work-more-might-not-help</id>
    <content type="html"><![CDATA[<p>Some have surmised that working more will help their team.  It may.  It may not.  It depends.  Here&#8217;s just one collection of thoughts on how working significantly <em>more</em> than the <em>rest</em> of our team might not help and may actually hinder.</p>

<p><img src="http://i.imgur.com/xRlumnh.jpg" alt="Rise together as a team" /></p>

<!--more-->


<h2>What is &#8220;More&#8221;?</h2>

<p>Working &#8220;more&#8221; than the team may mean many things.  Perhaps it means <em>more time</em> &#8211; more time in the office, more time in certain worthy activities.  Perhaps it means <em>more skill</em> &#8211; more productive, better at the things I care about.  Perhaps it means <em>more quality</em> &#8211; produce better work at better rates.  Perhaps it means <em>more commitment</em> &#8211; more focus, more sense of purpose, more of an innate sense of urgency.</p>

<p>&#8220;More&#8221;, for purposes of these thoughts also means <em>unevenly</em> more &#8211; as in one person or subset of the team doing significantly more than the rest of the team.  I won&#8217;t address it further here, but I think that generally if the whole team can do <em>more together</em>, within their capabilities, teams will get more better [sic].</p>

<h2>Carrying the Burden of the Team</h2>

<p>When we work significantly more than others, it can be easy to feel like we&#8217;re carrying the brunt of the workload of the team.  The team has work to do, and we&#8217;re doing the most of it.  We come in first.  We leave last.  Others on the team come and go in between.</p>

<p>If we were to work similar hours to the reset of the team, we&#8217;d be less likely to feel that we were unduly burdened.  If we looked less at when people were in their seats, we&#8217;d feel less like a bean-counting manager.  We&#8217;d allow others to make their own time management choices.  We&#8217;d allow ourselves to focus more on our purpose for being on the team.</p>

<h4>What Can We Do?</h4>

<p>Each situation likely requires thought and consideration of the team and those involved.  But here are some ideas on how we might overcome issues of uneven team contribution.</p>

<ul>
<li>If we must count, count hours less, count contribution more.  Hard.</li>
<li>Focus on ourselves.  Put expectations on ourselves.  We can control those things.</li>
<li>Life&#8217;s never fair.  Sometimes we <em>do</em> carry more burden.  Sometimes we are carried.</li>
<li>Share what we&#8217;re doing on the team.  Transparency may help dispel myth.</li>
</ul>


<h2>Rise Together</h2>

<p>Part of our purpose for being on the team is to help the <em>entire</em> team be better.  If the team completes the work together and we need every person on the team, sometimes we need to specifically focus on helping our team grow in capability, focus, happiness, quality, output, or whatever it is that we feel the team is lacking.</p>

<p>We may not really be addressing the issue that needs addressed &#8211; whether a real challenge of the team or something we have conjured in our mind &#8211; by just hammering out more work.  If we take this course of just pressing on with greater speed, time commitment, and effort, we may actually make the problem worse, encouraging ourselves to believe more deeply that we are carrying the weight of the team.</p>

<h4>What Can We Do?</h4>

<ul>
<li>Consider how we might lift the total capability of the team.</li>
<li>Be constructive and helpful to others.  In order to get here, we need to stop feeling sorry for ourselves.</li>
<li>Sometimes we might slow down and invest in the team itself.</li>
</ul>


<h2>False Heroism</h2>

<p>Once we are working significantly more than the rest of the team, we can come to believe that the team relies on us above all others.  We may attract praise and be singled out.  This may lead us to do more of the thing &#8211; the potentially unhealthy thing &#8211; that we&#8217;re doing in order to attract more praise.</p>

<p>Soon, to keep up this pattern of addictive praise incoming, we may begin to create more situations where we can swoop in, do significantly more than others and hopefully be held up as an example of adoration for others to aspire to.  This is a cycle that makes things worse.</p>

<p>Lifting ourselves above our teammates leads to rampant comparison.  We cultivate pride in ourselves.  We start to feel like we need to prove our continuing contribution.  We speak up about what we individually have done to save and push forward our projects.  We use a lot of &#8220;I&#8230;&#8221;-subject phrases.  We are quick to point out after-hours or extended contributions.  The focus becomes me instead of the team.  The product becomes my own personal activities instead of the team output.</p>

<h4>What Can We Do?</h4>

<ul>
<li>Make comparisons for the purpose of helping and filling the deficit of others.</li>
<li>See our strengths as opportunities to help others weak in those areas, not a chance to shine above them.</li>
<li>Be judicious in public praise.  We get more of the thing we praise.  Praise can have side effects.</li>
</ul>


<h2>Stories We Tell Ourselves</h2>

<p>When we&#8217;re so focused on ourselves, it&#8217;s easy to be very out of touch with others.  We&#8217;re often uncomfortable in approaching others about our shared contribution because, of course, we believe that we&#8217;re doing so much than the rest of the group and are likely upset in some ways with the team.</p>

<p>So we&#8217;re left to ourselves.  We tell ourselves stories about why the rest of the team just can&#8217;t or won&#8217;t keep up.  We create reasons in our mind to explain the source of their lesser commitment.  Some of it actually might be true, but the story is left to us to tell, and it&#8217;s likely embellished and unfair.</p>

<h4>What Can We Do?</h4>

<ul>
<li>Notice when we&#8217;re telling ourselves things in our mind that we don&#8217;t actually know are true.  Practice distinguishing actual fact from yet-unproved fact.</li>
<li>Give people the benefit of the doubt.  Trust in usually-good intentions.</li>
<li>Talk with others.  Tell them our concerns.  Hear their perspective.  We&#8217;ll probably be surprised with new appreciation.</li>
</ul>


<h2>It is a &#8220;We&#8221; Problem</h2>

<p>I use &#8220;we&#8221; in this article because I believe we all can suffer at different times and degrees from this malady.  We value what we bring to the table, and we should.  It&#8217;s the comparison with our teammates that&#8217;s the problem.  Pride is universal.</p>

<p>I also use &#8220;we&#8221; because this problem and its children problems are issues that we, <em>as a team</em>, need to help one another overcome.  I also believe that every one of us has the ability, hopefully with the help of help of our concerned teammates, to overcome this and other problems that keep us from being better teams.</p>

<h2>Great Teams Aren&#8217;t Perfect</h2>

<p>I hope everyone has some number of opportunities to work with great teams.  It&#8217;s an awesome feeling to feel united in a purpose.  It&#8217;s awesome to feel supported by others around us.  It&#8217;s awesome to see our efforts magnified in a greater whole.</p>

<p>Even great teams have troubles.  It&#8217;s never going to be perfect.  Don&#8217;t lose heart.  Great teams will be able to have patience, see each other as human beings doing their best, and find a way to make it work and work well.</p>

<p>I think some of this has felt familiar as we&#8217;ve read through it together.  We are all still growing on our teams.  What have you done to make your teams work better together and not make any one person feel overburdened?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Smart and Dumb Components in React]]></title>
    <link href="http://jaketrent.com/post/smart-dumb-components-react/"/>
    <updated>2016-02-17T08:55:00-07:00</updated>
    <id>http://jaketrent.com/post/smart-dumb-components-react</id>
    <content type="html"><![CDATA[<p>Dan Abramov coined the terms <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0">Smart and Dumb components</a>.  Later, he called them Container and Presentational components.  I still call them Smart and Dumb.  It&#8217;s shorter and sits in my mind easier.  How do you identify them?  Why would you want a separation?  What might that separation look like?  Here are a few ideas.</p>

<p><img src="http://i.imgur.com/9VKyXtu.png" alt="Smart and Dumb React components" /></p>

<!--more-->


<h2>Smart vs Dumb Components</h2>

<p>So what sets these components apart?  Smart means &#8220;container&#8221; or &#8220;app-level&#8221;.  Some have compared it to the &#8220;C&#8221; in MVC.  Dumb means &#8220;presentational&#8221; or &#8220;ui only&#8221;, possibly comparable to the &#8220;V&#8221; in MVC.  Here&#8217;s a breakdown of a few key characteristics:</p>

<h3>Smart Component Characteristics</h3>

<ul>
<li>Describe <em>how things work</em></li>
<li>Provide no DOM markup or styles</li>
<li>Provide application data, do data fetching</li>
<li>Call Flux actions</li>
<li>Named *Container by convention</li>
</ul>


<h3>Dumb Component Characteristics</h3>

<ul>
<li>Describe <em>how things look</em></li>
<li>Have no app dependencies</li>
<li>Receive only props, providing data and callbacks</li>
<li>Rarely have own state, when they do, it&#8217;s just UI state</li>
<li>Named anything that&#8217;s a UI noun</li>
</ul>


<p>Apparently you need each class of components because obviously your app has to smart to be interesting.  But if it&#8217;s more dumb, it&#8217;s more simple.  So split it.  You need both.</p>

<p>If you separate concerns, your app will be easier to reason about, complexity will be mostly localized around the Smart components, and you should be left with more simple components.  UI components will be more reusable.</p>

<h2>Where to Split Smart and Dumb Components?</h2>

<p>If you keep all Smart characteristics on one side and the Dumb characteristics on the other, you will have made the separation and be following the guiding principles.</p>

<p>But how should you make that split?  Here are a couple ideas.  These are observations of how I&#8217;ve found myself making the split and what it ends up looking like.</p>

<h3>Deep Split</h3>

<p>&#8220;Deep&#8221; describes what I usually observe when I split components this way.  There&#8217;s one Smart component that splits to one Dumb component.  There&#8217;s a 1:1 relationship.  This seems simple, and it is in a way.  It probably works better if the components are small, because many of the smarts from the Smart component end up getting passed down to the Dumb component.  This makes for a lot of props on the Dumb component.</p>

<p>If the Dumb component does anything interesting, it usually will fan out at that point and start farming <code>props</code> off to the child components that actually need them.  Thus, the hierarchy deepens before it actually ends up doing work.</p>

<p><img src="http://i.imgur.com/scfodt6.png" alt="Deep component split" /></p>

<h3>Broad Split</h3>

<p>&#8220;Broad&#8221; describes the transition from Smart to Dumb happening sooner.  There is one Smart component that has many Dumb component children.  There aren&#8217;t necessarily fewer interesting things here or props to pass, but they&#8217;re scattered out, going straighter to the components that need them instead of going through some Monolith Proxy Dumb component (all the bad words together).</p>

<p><img src="http://i.imgur.com/hxusLJ2.png" alt="Broad component split" /></p>

<p>A highlight advantage here is that there is much readier access to the Smart component&#8217;s smarts &#8211; store data, event handlers, and actions.  You don&#8217;t feel like you&#8217;re passing props <em>through</em> components only to get them to the components that really use them.</p>

<p>A golden quote from Dan Abramov that highlights this is:</p>

<blockquote><p>When you notice that some components don’t use the props they receive but merely forward them down and you have to rewire all those intermediate components any time the children need more data, it’s a good time to introduce some container components.</p></blockquote>

<h2>Nodes as props</h2>

<p>In his quote, Dan recognizes the time to introduce container components.  In my mind, &#8220;container&#8221; means Smart.  Here, I don&#8217;t think we necessarily require a Smart Container, because we usually like to get as Dumb as we can as fast as we can.  So, how about a Dumb component that just provides <em>containment</em>?</p>

<p>We can provide DOM markup, component grouping, layout, or other UI abstractions with components that take <code>props.children</code>.  These children are usually components, of type <code>React.PropTypes.node</code>.  Doubtless we&#8217;ve all realized by now that there&#8217;s just one <code>props.children</code>.  But component can only wrap one thing, right?  Well, this is in the syntax of markup/JSX, but this isn&#8217;t true <em>inside</em> the Component.  We could have more attributes that pass <code>PropTypes.node</code> arguments.  This allows for <em>containing more</em> nodes and having convenient handles on them within components.</p>

<p>This thought was revelatory at the time it occurred to me.  Looking back, it seems obvious.  But for some reason, probably because I still think of it as HTML sometimes, it feels funny to write something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">Dumb</span> <span class="nx">aProp</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">AnotherDumb</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then inside the Dumb component, we can display those attributes directly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Dumb</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">css</span><span class="p">.</span><span class="nx">awesomeLayout</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">aProp</span><span class="p">}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>What to Pass as Props?</h2>

<p>If we have a split we like, now we have to decide what <code>props</code> to send from the parent to the child components.</p>

<h3>Send Them All</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">Dumb</span> <span class="p">{...</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, you could just send all the parent&#8217;s props to the child.  I would do this when the parent feels just like a wrapper.  It&#8217;s a passthrough.  Perhaps it adds something small and targeted.  It&#8217;s a higher-order component.</p>

<h3>Pass the Reducer/Selector</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">Dumb</span> <span class="nx">reducerName</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">reducer</span><span class="p">}</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can pass the whole nested reducer state, sure.  Almost every time I feel myself wanting to do this, I think it&#8217;s motivated by laziness.  It has a potential downside of tying the reducer format to the view in more places than required.  Of course, if you have custom selectors for everything anyway, you make your break from reducer format coupling there.</p>

<h3>Pass New Variables</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">Dumb</span> <span class="nx">newVar</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="kd">var</span><span class="p">}</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is most commonly what passing variables to children components looks like.  These values are usually primitives, but they can you can send down entire new object structures as well.  It has the advantages of being explicit and traceable.  It also avoids the coupling of passing entire nested reducers.</p>

<h2>Rule of Thumb</h2>

<p>In all design decisions, it&#8217;s good to have some quick guidelines in mind when making decision.  So relative to splitting Smart and Dumb components, here&#8217;s a rule of thumb.</p>

<p>On many of my projects recently, I use two decorators that help identify Smart and Dumb components:</p>

<p>For Smart, the <a href="https://www.npmjs.com/package/redux-react-connect-by-name">redux-react-connect-by-name</a> component facilitates data fetching from the redux store.  This is equivalent to using redux&#8217;s vanilla <code>connect</code> with some built-in niceties.</p>

<p>For Dumb, the <a href="http://npmjs.com/react-styleable">react-styleable</a> component allows passing CSS modules into React components.  This is how I like to give my components styling information.</p>

<p>If one is for Smart and the other for Dumb, then I can usually identify a potential split if I ever see them <em>together</em>.  For example, this is what that antipattern might look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">connect</span> <span class="nx">from</span> <span class="s1">&#39;redux-react-connect-by-name&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">styleable</span> <span class="nx">from</span> <span class="s1">&#39;react-styleable&#39;</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="nx">connect</span><span class="p">([</span><span class="nx">someSelector</span><span class="p">])</span>
</span><span class='line'><span class="err">@</span><span class="nx">styleable</span><span class="p">(</span><span class="nx">someCss</span><span class="p">)</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">MyComponent</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Split that up!</p>

<h2>This Isn&#8217;t Dogma</h2>

<p>The idea of Smart vs. Dumb components is, itself, just a guideline &#8211; a Pirates&#8217; Code-level of guideline.  Keep it and use it where it helps your project.  This is an art form.  No one has the best answer for how to organize your React views.  Do the best you can.  Then, next week, when you find a better way, advance to that.</p>

<p>What are some other observations that you&#8217;ve made when splitting your views into Smart and Dumb components?</p>

<p><em>Adapted from a meetup talk:</em></p>

<script async class="speakerdeck-embed" data-id="26cce4743e5540b48188a35f49de3c4d" data-ratio="1.33333333333333" src="http://jaketrent.com//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Node Skills to Explore]]></title>
    <link href="http://jaketrent.com/post/node-skills-explore/"/>
    <updated>2016-01-26T10:00:00-07:00</updated>
    <id>http://jaketrent.com/post/node-skills-explore</id>
    <content type="html"><![CDATA[<p>We are hiring a bunch of Node.js developers at the moment.  You may be as well.  I&#8217;m sure you have a good list of skills that you&#8217;re looking for in developers that join your posse.  Here are a few <em>technical</em> things I think about when getting the opportunity  to sit down with a Node developer.</p>

<p><img src="http://i.imgur.com/9WglUIw.jpg" alt="Exploring Node Skills" /></p>

<!--more-->


<p>What might you add to the list?</p>

<h2>Async Programming</h2>

<ul>
<li>What are options for async flow control?  Favorites?  Least?  Pros?  Cons?</li>
<li>Node event loop &#8211; How does it work?  What applications does it fit?</li>
</ul>


<h2>Error Handling</h2>

<ul>
<li>Limitations/advantages in handling async errors?</li>
<li>Handle errors in Promises?</li>
<li>Handle errors in callbacks?</li>
<li>What errors should be thrown?</li>
</ul>


<h2>Functional</h2>

<ul>
<li>What is immutability?  Why want it?</li>
<li>Basic Array.prototype methods?</li>
<li>What does shared state give you?</li>
<li>Advantages to pure functions?</li>
<li>Applications of higher-order functions?</li>
</ul>


<h2>API</h2>

<ul>
<li>Specifically, how does CORS work?</li>
<li>Familiar with which request and response formats?  Favorite?  Worst?  Why?</li>
<li>How does middleware work?  When do you like to use it?</li>
</ul>


<h2>Ops</h2>

<ul>
<li>How can you use all CPUs on a server?</li>
<li>How to associate logs together with a single request path?</li>
<li>How to recover from fatal errors?</li>
<li>How do you load per-environment configuration?</li>
<li>How do you handle versioning of your apps and libs?</li>
</ul>


<h2>Modules</h2>

<ul>
<li>Why use modules?</li>
<li>How do you organize your API apps&#8217; modules?</li>
<li>Flavors of exports?  When do use each?</li>
</ul>


<h2>ES Next</h2>

<ul>
<li>Which new features have you used?  Like, not like?</li>
<li>async/await - Used instead of what?</li>
<li>Object literal extensions - How used?</li>
<li>Spread operator - Helpful usecases?</li>
<li>Arrow functions - What do they help with?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test APIs Failing from Client]]></title>
    <link href="http://jaketrent.com/post/test-apis-failing-from-client/"/>
    <updated>2016-01-25T13:54:00-07:00</updated>
    <id>http://jaketrent.com/post/test-apis-failing-from-client</id>
    <content type="html"><![CDATA[<p>In the case where you can&#8217;t edit a local version of your APIs in order to cause them to fail, you need to be able to edit your client so that it <em>looks</em> like the API request fails.  Here&#8217;s a quick code change that should make this easy for you.</p>

<p><img src="http://i.imgur.com/8Fm1cn2.jpg" alt="We have a problem" /></p>

<!--more-->


<p>This is one of many possible manual testing techniques.  This allow you to see the change in your running app as you work through it.  For instance, I like to use this as I&#8217;m testing through the error alerting features that are common in an app when an API request fails.</p>

<p>Go to the point in your app where your bits touch the network.  This is usually the place where you use your HTTP wrapper or, if you&#8217;re a free spirit, call some XHR goodness yourself.  These days, I like using the venerable <a href="https://github.com/mzabriskie/axios">axios</a> library.  Axios is promise based, so that means that we can use async/await as well, which is like a fine chocolate next to a warm fire in winter (which is good).</p>

<p>So, all my http code might look in essence like this:</p>

<figure class='code'><figcaption><span>api.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">axios</span> <span class="nx">from</span> <span class="s1">&#39;axios&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kr">const</span> <span class="nx">fetch</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// deserialize, etc ...</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">axios</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;get&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">url</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, this <code>request</code> function returns a Promise.  The logic around the request might look like:</p>

<figure class='code'><figcaption><span>actions.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">api</span> <span class="nx">from</span> <span class="s1">&#39;./api&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">async</span> <span class="kd">function</span> <span class="nx">fetchWater</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="p">{</span> <span class="nx">request</span><span class="p">}</span> <span class="o">=</span> <span class="nx">api</span><span class="p">.</span><span class="nx">fetch</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">request</span><span class="p">(</span><span class="s1">&#39;/my/own/home&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// ... handle success response</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ... handle error response, where failure code should execute (what we want to TEST!)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To make this request fail, we need only make the Promise fail, rejecting it like a mouthful of stewed tomatoes.  So, just change <code>api.js</code>:</p>

<figure class='code'><figcaption><span>api.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">axios</span> <span class="nx">from</span> <span class="s1">&#39;axios&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kr">const</span> <span class="nx">fetch</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">reject</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">status</span><span class="o">:</span> <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">errors</span><span class="o">:</span> <span class="p">[{</span> <span class="nx">detail</span><span class="o">:</span> <span class="s1">&#39;Shere Khan is back!&#39;</span> <span class="p">}]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now note that you must be aware of what your format HTTP library, in this case axios, uses in its responses.  What you <code>reject</code> manually must be exactly the same format that usually is returned in an error situation (eg, <code>status</code> and <code>data</code>).  You must also know what your server is designed to return as an error response (eg, <code>errors</code>).  The above application code is using the <a href="http://jsonapi.org/format/#error-objects">JSON API</a> format.</p>

<p>What other little tricks do you find useful in getting APIs to fail?</p>
]]></content>
  </entry>
  
</feed>
