<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jake Trent]]></title>
  <link href="http://jaketrent.com/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2016-03-14T15:03:04-06:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gitignore System Files]]></title>
    <link href="http://jaketrent.com/post/gitignore-system-files/"/>
    <updated>2016-03-14T14:43:00-06:00</updated>
    <id>http://jaketrent.com/post/gitignore-system-files</id>
    <content type="html"><![CDATA[<p>There are many files that you don&#8217;t want to store in your project&#8217;s Git repo.  Some of these are even specific to the project.  Some are definitely not.  How do you ignore these that aren&#8217;t related to the project?</p>

<p><img src="http://i.imgur.com/ZYiky6R.png" alt="Git ignore" /></p>

<!--more-->


<h2>.gitignore For the Project</h2>

<p>In your project directory, you likely have a <code>.gitignore</code> file.  Here, you keep things that might show up in that directory out of the project&#8217;s version-controlled source tree.  There&#8217;s not much to it.  On each line of the file, list the file names, directory names, or partial patterns that you don&#8217;t want Git to track or even know about.</p>

<p>For instance, if you&#8217;re doing a Node.js project, you probably want to track all your own <code>.js</code> files, found in <code>src/</code>.  But you don&#8217;t want to track all those 3rd-party modules in <code>node_modules</code>.  You probably don&#8217;t want to track your code compiled for distribution either.  So, your project&#8217;s <code>.gitignore</code> file might look like this:</p>

<figure class='code'><figcaption><span>project/.gitignore</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>node_modules
</span><span class='line'>dist
</span></code></pre></td></tr></table></div></figure>


<h2>.gitignore For Your System</h2>

<p>Everything that goes in the project&#8217;s <code>.gitignore</code> file should relate to the project.  And it should relate to everyone.</p>

<p>There are many people and systems interacting with your project.  For instance, some developers might be on Mac OSX and get those nasty Finder thumbnail files, <code>.DS_Store</code> that end up popping up all over the place.  Others on the project might use the venerable Jetbrains editors which drop an <code>.idea/</code> directory in every project they edit.  These facts should be transparent to your project.  Every time someone picks up a new editor or switches an OS, the project shouldn&#8217;t have another commit updating the <code>.gitignore</code> with yet another thing.</p>

<p>You can make Git ignore files that appear on your system but are unrelated to the project.</p>

<p>Edit your top-level <code>~/.gitgnore</code>.  Add all your system-related things there.  It might end up look like:</p>

<figure class='code'><figcaption><span>~/.gitignore</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>.DS_Store
</span><span class='line'>.idea
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working More Might Not Help Our Team]]></title>
    <link href="http://jaketrent.com/post/work-more-might-not-help/"/>
    <updated>2016-02-18T16:50:00-07:00</updated>
    <id>http://jaketrent.com/post/work-more-might-not-help</id>
    <content type="html"><![CDATA[<p>Some have surmised that working more will help their team.  It may.  It may not.  It depends.  Here&#8217;s just one collection of thoughts on how working significantly <em>more</em> than the <em>rest</em> of our team might not help and may actually hinder.</p>

<p><img src="http://i.imgur.com/xRlumnh.jpg" alt="Rise together as a team" /></p>

<!--more-->


<h2>What is &#8220;More&#8221;?</h2>

<p>Working &#8220;more&#8221; than the team may mean many things.  Perhaps it means <em>more time</em> &#8211; more time in the office, more time in certain worthy activities.  Perhaps it means <em>more skill</em> &#8211; more productive, better at the things I care about.  Perhaps it means <em>more quality</em> &#8211; produce better work at better rates.  Perhaps it means <em>more commitment</em> &#8211; more focus, more sense of purpose, more of an innate sense of urgency.</p>

<p>&#8220;More&#8221;, for purposes of these thoughts also means <em>unevenly</em> more &#8211; as in one person or subset of the team doing significantly more than the rest of the team.  I won&#8217;t address it further here, but I think that generally if the whole team can do <em>more together</em>, within their capabilities, teams will get more better [sic].</p>

<h2>Carrying the Burden of the Team</h2>

<p>When we work significantly more than others, it can be easy to feel like we&#8217;re carrying the brunt of the workload of the team.  The team has work to do, and we&#8217;re doing the most of it.  We come in first.  We leave last.  Others on the team come and go in between.</p>

<p>If we were to work similar hours to the reset of the team, we&#8217;d be less likely to feel that we were unduly burdened.  If we looked less at when people were in their seats, we&#8217;d feel less like a bean-counting manager.  We&#8217;d allow others to make their own time management choices.  We&#8217;d allow ourselves to focus more on our purpose for being on the team.</p>

<h4>What Can We Do?</h4>

<p>Each situation likely requires thought and consideration of the team and those involved.  But here are some ideas on how we might overcome issues of uneven team contribution.</p>

<ul>
<li>If we must count, count hours less, count contribution more.  Hard.</li>
<li>Focus on ourselves.  Put expectations on ourselves.  We can control those things.</li>
<li>Life&#8217;s never fair.  Sometimes we <em>do</em> carry more burden.  Sometimes we are carried.</li>
<li>Share what we&#8217;re doing on the team.  Transparency may help dispel myth.</li>
</ul>


<h2>Rise Together</h2>

<p>Part of our purpose for being on the team is to help the <em>entire</em> team be better.  If the team completes the work together and we need every person on the team, sometimes we need to specifically focus on helping our team grow in capability, focus, happiness, quality, output, or whatever it is that we feel the team is lacking.</p>

<p>We may not really be addressing the issue that needs addressed &#8211; whether a real challenge of the team or something we have conjured in our mind &#8211; by just hammering out more work.  If we take this course of just pressing on with greater speed, time commitment, and effort, we may actually make the problem worse, encouraging ourselves to believe more deeply that we are carrying the weight of the team.</p>

<h4>What Can We Do?</h4>

<ul>
<li>Consider how we might lift the total capability of the team.</li>
<li>Be constructive and helpful to others.  In order to get here, we need to stop feeling sorry for ourselves.</li>
<li>Sometimes we might slow down and invest in the team itself.</li>
</ul>


<h2>False Heroism</h2>

<p>Once we are working significantly more than the rest of the team, we can come to believe that the team relies on us above all others.  We may attract praise and be singled out.  This may lead us to do more of the thing &#8211; the potentially unhealthy thing &#8211; that we&#8217;re doing in order to attract more praise.</p>

<p>Soon, to keep up this pattern of addictive praise incoming, we may begin to create more situations where we can swoop in, do significantly more than others and hopefully be held up as an example of adoration for others to aspire to.  This is a cycle that makes things worse.</p>

<p>Lifting ourselves above our teammates leads to rampant comparison.  We cultivate pride in ourselves.  We start to feel like we need to prove our continuing contribution.  We speak up about what we individually have done to save and push forward our projects.  We use a lot of &#8220;I&#8230;&#8221;-subject phrases.  We are quick to point out after-hours or extended contributions.  The focus becomes me instead of the team.  The product becomes my own personal activities instead of the team output.</p>

<h4>What Can We Do?</h4>

<ul>
<li>Make comparisons for the purpose of helping and filling the deficit of others.</li>
<li>See our strengths as opportunities to help others weak in those areas, not a chance to shine above them.</li>
<li>Be judicious in public praise.  We get more of the thing we praise.  Praise can have side effects.</li>
</ul>


<h2>Stories We Tell Ourselves</h2>

<p>When we&#8217;re so focused on ourselves, it&#8217;s easy to be very out of touch with others.  We&#8217;re often uncomfortable in approaching others about our shared contribution because, of course, we believe that we&#8217;re doing so much than the rest of the group and are likely upset in some ways with the team.</p>

<p>So we&#8217;re left to ourselves.  We tell ourselves stories about why the rest of the team just can&#8217;t or won&#8217;t keep up.  We create reasons in our mind to explain the source of their lesser commitment.  Some of it actually might be true, but the story is left to us to tell, and it&#8217;s likely embellished and unfair.</p>

<h4>What Can We Do?</h4>

<ul>
<li>Notice when we&#8217;re telling ourselves things in our mind that we don&#8217;t actually know are true.  Practice distinguishing actual fact from yet-unproved fact.</li>
<li>Give people the benefit of the doubt.  Trust in usually-good intentions.</li>
<li>Talk with others.  Tell them our concerns.  Hear their perspective.  We&#8217;ll probably be surprised with new appreciation.</li>
</ul>


<h2>It is a &#8220;We&#8221; Problem</h2>

<p>I use &#8220;we&#8221; in this article because I believe we all can suffer at different times and degrees from this malady.  We value what we bring to the table, and we should.  It&#8217;s the comparison with our teammates that&#8217;s the problem.  Pride is universal.</p>

<p>I also use &#8220;we&#8221; because this problem and its children problems are issues that we, <em>as a team</em>, need to help one another overcome.  I also believe that every one of us has the ability, hopefully with the help of help of our concerned teammates, to overcome this and other problems that keep us from being better teams.</p>

<h2>Great Teams Aren&#8217;t Perfect</h2>

<p>I hope everyone has some number of opportunities to work with great teams.  It&#8217;s an awesome feeling to feel united in a purpose.  It&#8217;s awesome to feel supported by others around us.  It&#8217;s awesome to see our efforts magnified in a greater whole.</p>

<p>Even great teams have troubles.  It&#8217;s never going to be perfect.  Don&#8217;t lose heart.  Great teams will be able to have patience, see each other as human beings doing their best, and find a way to make it work and work well.</p>

<p>I think some of this has felt familiar as we&#8217;ve read through it together.  We are all still growing on our teams.  What have you done to make your teams work better together and not make any one person feel overburdened?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Smart and Dumb Components in React]]></title>
    <link href="http://jaketrent.com/post/smart-dumb-components-react/"/>
    <updated>2016-02-17T08:55:00-07:00</updated>
    <id>http://jaketrent.com/post/smart-dumb-components-react</id>
    <content type="html"><![CDATA[<p>Dan Abramov coined the terms <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0">Smart and Dumb components</a>.  Later, he called them Container and Presentational components.  I still call them Smart and Dumb.  It&#8217;s shorter and sits in my mind easier.  How do you identify them?  Why would you want a separation?  What might that separation look like?  Here are a few ideas.</p>

<p><img src="http://i.imgur.com/9VKyXtu.png" alt="Smart and Dumb React components" /></p>

<!--more-->


<h2>Smart vs Dumb Components</h2>

<p>So what sets these components apart?  Smart means &#8220;container&#8221; or &#8220;app-level&#8221;.  Some have compared it to the &#8220;C&#8221; in MVC.  Dumb means &#8220;presentational&#8221; or &#8220;ui only&#8221;, possibly comparable to the &#8220;V&#8221; in MVC.  Here&#8217;s a breakdown of a few key characteristics:</p>

<h3>Smart Component Characteristics</h3>

<ul>
<li>Describe <em>how things work</em></li>
<li>Provide no DOM markup or styles</li>
<li>Provide application data, do data fetching</li>
<li>Call Flux actions</li>
<li>Named *Container by convention</li>
</ul>


<h3>Dumb Component Characteristics</h3>

<ul>
<li>Describe <em>how things look</em></li>
<li>Have no app dependencies</li>
<li>Receive only props, providing data and callbacks</li>
<li>Rarely have own state, when they do, it&#8217;s just UI state</li>
<li>Named anything that&#8217;s a UI noun</li>
</ul>


<p>Apparently you need each class of components because obviously your app has to smart to be interesting.  But if it&#8217;s more dumb, it&#8217;s more simple.  So split it.  You need both.</p>

<p>If you separate concerns, your app will be easier to reason about, complexity will be mostly localized around the Smart components, and you should be left with more simple components.  UI components will be more reusable.</p>

<h2>Where to Split Smart and Dumb Components?</h2>

<p>If you keep all Smart characteristics on one side and the Dumb characteristics on the other, you will have made the separation and be following the guiding principles.</p>

<p>But how should you make that split?  Here are a couple ideas.  These are observations of how I&#8217;ve found myself making the split and what it ends up looking like.</p>

<h3>Deep Split</h3>

<p>&#8220;Deep&#8221; describes what I usually observe when I split components this way.  There&#8217;s one Smart component that splits to one Dumb component.  There&#8217;s a 1:1 relationship.  This seems simple, and it is in a way.  It probably works better if the components are small, because many of the smarts from the Smart component end up getting passed down to the Dumb component.  This makes for a lot of props on the Dumb component.</p>

<p>If the Dumb component does anything interesting, it usually will fan out at that point and start farming <code>props</code> off to the child components that actually need them.  Thus, the hierarchy deepens before it actually ends up doing work.</p>

<p><img src="http://i.imgur.com/scfodt6.png" alt="Deep component split" /></p>

<h3>Broad Split</h3>

<p>&#8220;Broad&#8221; describes the transition from Smart to Dumb happening sooner.  There is one Smart component that has many Dumb component children.  There aren&#8217;t necessarily fewer interesting things here or props to pass, but they&#8217;re scattered out, going straighter to the components that need them instead of going through some Monolith Proxy Dumb component (all the bad words together).</p>

<p><img src="http://i.imgur.com/hxusLJ2.png" alt="Broad component split" /></p>

<p>A highlight advantage here is that there is much readier access to the Smart component&#8217;s smarts &#8211; store data, event handlers, and actions.  You don&#8217;t feel like you&#8217;re passing props <em>through</em> components only to get them to the components that really use them.</p>

<p>A golden quote from Dan Abramov that highlights this is:</p>

<blockquote><p>When you notice that some components don’t use the props they receive but merely forward them down and you have to rewire all those intermediate components any time the children need more data, it’s a good time to introduce some container components.</p></blockquote>

<h2>Nodes as props</h2>

<p>In his quote, Dan recognizes the time to introduce container components.  In my mind, &#8220;container&#8221; means Smart.  Here, I don&#8217;t think we necessarily require a Smart Container, because we usually like to get as Dumb as we can as fast as we can.  So, how about a Dumb component that just provides <em>containment</em>?</p>

<p>We can provide DOM markup, component grouping, layout, or other UI abstractions with components that take <code>props.children</code>.  These children are usually components, of type <code>React.PropTypes.node</code>.  Doubtless we&#8217;ve all realized by now that there&#8217;s just one <code>props.children</code>.  But component can only wrap one thing, right?  Well, this is in the syntax of markup/JSX, but this isn&#8217;t true <em>inside</em> the Component.  We could have more attributes that pass <code>PropTypes.node</code> arguments.  This allows for <em>containing more</em> nodes and having convenient handles on them within components.</p>

<p>This thought was revelatory at the time it occurred to me.  Looking back, it seems obvious.  But for some reason, probably because I still think of it as HTML sometimes, it feels funny to write something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">Dumb</span> <span class="nx">aProp</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">AnotherDumb</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then inside the Dumb component, we can display those attributes directly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Dumb</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">css</span><span class="p">.</span><span class="nx">awesomeLayout</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">aProp</span><span class="p">}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>What to Pass as Props?</h2>

<p>If we have a split we like, now we have to decide what <code>props</code> to send from the parent to the child components.</p>

<h3>Send Them All</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">Dumb</span> <span class="p">{...</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, you could just send all the parent&#8217;s props to the child.  I would do this when the parent feels just like a wrapper.  It&#8217;s a passthrough.  Perhaps it adds something small and targeted.  It&#8217;s a higher-order component.</p>

<h3>Pass the Reducer/Selector</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">Dumb</span> <span class="nx">reducerName</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">reducer</span><span class="p">}</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can pass the whole nested reducer state, sure.  Almost every time I feel myself wanting to do this, I think it&#8217;s motivated by laziness.  It has a potential downside of tying the reducer format to the view in more places than required.  Of course, if you have custom selectors for everything anyway, you make your break from reducer format coupling there.</p>

<h3>Pass New Variables</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">Dumb</span> <span class="nx">newVar</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="kd">var</span><span class="p">}</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is most commonly what passing variables to children components looks like.  These values are usually primitives, but they can you can send down entire new object structures as well.  It has the advantages of being explicit and traceable.  It also avoids the coupling of passing entire nested reducers.</p>

<h2>Rule of Thumb</h2>

<p>In all design decisions, it&#8217;s good to have some quick guidelines in mind when making decision.  So relative to splitting Smart and Dumb components, here&#8217;s a rule of thumb.</p>

<p>On many of my projects recently, I use two decorators that help identify Smart and Dumb components:</p>

<p>For Smart, the <a href="https://www.npmjs.com/package/redux-react-connect-by-name">redux-react-connect-by-name</a> component facilitates data fetching from the redux store.  This is equivalent to using redux&#8217;s vanilla <code>connect</code> with some built-in niceties.</p>

<p>For Dumb, the <a href="http://npmjs.com/react-styleable">react-styleable</a> component allows passing CSS modules into React components.  This is how I like to give my components styling information.</p>

<p>If one is for Smart and the other for Dumb, then I can usually identify a potential split if I ever see them <em>together</em>.  For example, this is what that antipattern might look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">connect</span> <span class="nx">from</span> <span class="s1">&#39;redux-react-connect-by-name&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">styleable</span> <span class="nx">from</span> <span class="s1">&#39;react-styleable&#39;</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="nx">connect</span><span class="p">([</span><span class="nx">someSelector</span><span class="p">])</span>
</span><span class='line'><span class="err">@</span><span class="nx">styleable</span><span class="p">(</span><span class="nx">someCss</span><span class="p">)</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">MyComponent</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Split that up!</p>

<h2>This Isn&#8217;t Dogma</h2>

<p>The idea of Smart vs. Dumb components is, itself, just a guideline &#8211; a Pirates&#8217; Code-level of guideline.  Keep it and use it where it helps your project.  This is an art form.  No one has the best answer for how to organize your React views.  Do the best you can.  Then, next week, when you find a better way, advance to that.</p>

<p>What are some other observations that you&#8217;ve made when splitting your views into Smart and Dumb components?</p>

<p><em>Adapted from a meetup talk:</em></p>

<script async class="speakerdeck-embed" data-id="26cce4743e5540b48188a35f49de3c4d" data-ratio="1.33333333333333" src="http://jaketrent.com//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Node Skills to Explore]]></title>
    <link href="http://jaketrent.com/post/node-skills-explore/"/>
    <updated>2016-01-26T10:00:00-07:00</updated>
    <id>http://jaketrent.com/post/node-skills-explore</id>
    <content type="html"><![CDATA[<p>We are hiring a bunch of Node.js developers at the moment.  You may be as well.  I&#8217;m sure you have a good list of skills that you&#8217;re looking for in developers that join your posse.  Here are a few <em>technical</em> things I think about when getting the opportunity  to sit down with a Node developer.</p>

<p><img src="http://i.imgur.com/9WglUIw.jpg" alt="Exploring Node Skills" /></p>

<!--more-->


<p>What might you add to the list?</p>

<h2>Async Programming</h2>

<ul>
<li>What are options for async flow control?  Favorites?  Least?  Pros?  Cons?</li>
<li>Node event loop &#8211; How does it work?  What applications does it fit?</li>
</ul>


<h2>Error Handling</h2>

<ul>
<li>Limitations/advantages in handling async errors?</li>
<li>Handle errors in Promises?</li>
<li>Handle errors in callbacks?</li>
<li>What errors should be thrown?</li>
</ul>


<h2>Functional</h2>

<ul>
<li>What is immutability?  Why want it?</li>
<li>Basic Array.prototype methods?</li>
<li>What does shared state give you?</li>
<li>Advantages to pure functions?</li>
<li>Applications of higher-order functions?</li>
</ul>


<h2>API</h2>

<ul>
<li>Specifically, how does CORS work?</li>
<li>Familiar with which request and response formats?  Favorite?  Worst?  Why?</li>
<li>How does middleware work?  When do you like to use it?</li>
</ul>


<h2>Ops</h2>

<ul>
<li>How can you use all CPUs on a server?</li>
<li>How to associate logs together with a single request path?</li>
<li>How to recover from fatal errors?</li>
<li>How do you load per-environment configuration?</li>
<li>How do you handle versioning of your apps and libs?</li>
</ul>


<h2>Modules</h2>

<ul>
<li>Why use modules?</li>
<li>How do you organize your API apps&#8217; modules?</li>
<li>Flavors of exports?  When do use each?</li>
</ul>


<h2>ES Next</h2>

<ul>
<li>Which new features have you used?  Like, not like?</li>
<li>async/await - Used instead of what?</li>
<li>Object literal extensions - How used?</li>
<li>Spread operator - Helpful usecases?</li>
<li>Arrow functions - What do they help with?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test APIs Failing from Client]]></title>
    <link href="http://jaketrent.com/post/test-apis-failing-from-client/"/>
    <updated>2016-01-25T13:54:00-07:00</updated>
    <id>http://jaketrent.com/post/test-apis-failing-from-client</id>
    <content type="html"><![CDATA[<p>In the case where you can&#8217;t edit a local version of your APIs in order to cause them to fail, you need to be able to edit your client so that it <em>looks</em> like the API request fails.  Here&#8217;s a quick code change that should make this easy for you.</p>

<p><img src="http://i.imgur.com/8Fm1cn2.jpg" alt="We have a problem" /></p>

<!--more-->


<p>This is one of many possible manual testing techniques.  This allow you to see the change in your running app as you work through it.  For instance, I like to use this as I&#8217;m testing through the error alerting features that are common in an app when an API request fails.</p>

<p>Go to the point in your app where your bits touch the network.  This is usually the place where you use your HTTP wrapper or, if you&#8217;re a free spirit, call some XHR goodness yourself.  These days, I like using the venerable <a href="https://github.com/mzabriskie/axios">axios</a> library.  Axios is promise based, so that means that we can use async/await as well, which is like a fine chocolate next to a warm fire in winter (which is good).</p>

<p>So, all my http code might look in essence like this:</p>

<figure class='code'><figcaption><span>api.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">axios</span> <span class="nx">from</span> <span class="s1">&#39;axios&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kr">const</span> <span class="nx">fetch</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// deserialize, etc ...</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">axios</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;get&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">url</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, this <code>request</code> function returns a Promise.  The logic around the request might look like:</p>

<figure class='code'><figcaption><span>actions.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">api</span> <span class="nx">from</span> <span class="s1">&#39;./api&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">async</span> <span class="kd">function</span> <span class="nx">fetchWater</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="p">{</span> <span class="nx">request</span><span class="p">}</span> <span class="o">=</span> <span class="nx">api</span><span class="p">.</span><span class="nx">fetch</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">request</span><span class="p">(</span><span class="s1">&#39;/my/own/home&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// ... handle success response</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ... handle error response, where failure code should execute (what we want to TEST!)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To make this request fail, we need only make the Promise fail, rejecting it like a mouthful of stewed tomatoes.  So, just change <code>api.js</code>:</p>

<figure class='code'><figcaption><span>api.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">axios</span> <span class="nx">from</span> <span class="s1">&#39;axios&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kr">const</span> <span class="nx">fetch</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">reject</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">status</span><span class="o">:</span> <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">errors</span><span class="o">:</span> <span class="p">[{</span> <span class="nx">detail</span><span class="o">:</span> <span class="s1">&#39;Shere Khan is back!&#39;</span> <span class="p">}]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now note that you must be aware of what your format HTTP library, in this case axios, uses in its responses.  What you <code>reject</code> manually must be exactly the same format that usually is returned in an error situation (eg, <code>status</code> and <code>data</code>).  You must also know what your server is designed to return as an error response (eg, <code>errors</code>).  The above application code is using the <a href="http://jsonapi.org/format/#error-objects">JSON API</a> format.</p>

<p>What other little tricks do you find useful in getting APIs to fail?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What React Stateless Components are Missing]]></title>
    <link href="http://jaketrent.com/post/react-stateless-components-missing/"/>
    <updated>2016-01-04T12:59:00-07:00</updated>
    <id>http://jaketrent.com/post/react-stateless-components-missing</id>
    <content type="html"><![CDATA[<p>Stateless React components got a new syntax in React 0.14.  It&#8217;s much simpler.  It&#8217;s just a function call.  Besides it just looking simpler, there are some major differences in what is available in a stateless component written this way.  There are some things missing &#8211; purposefully not included &#8211; that you may be used to.  Let&#8217;s look at a few things.</p>

<p><img src="http://i.imgur.com/DXuSNbw.png" alt="http://i.imgur.com/DXuSNbw.png" /></p>

<!--more-->


<p>Stateless components are now specifically not just components where you don&#8217;t use <code>this.state</code>.  They&#8217;re componets that are written in the form of a function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Chips</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">In</span> <span class="nx">the</span> <span class="nx">secret</span> <span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">place</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The observations made in this article will not apply to components that are created using the <code>class Chips extends React.Component</code> or <code>React.createClass</code> syntax, whether they use state or not.</p>

<h2>No Backing Instance</h2>

<p>A React component&#8217;s backing instance is the object in memory that represents the node in the view.  This backing instance is the place where state is usually stored (using React&#8217;s <code>this.state</code>).  Well now there&#8217;s no <code>this</code> in stateless components.  Thus, there&#8217;s not going to be a place for <code>this.state</code>.  Stateless, remember?  Data just passes through the pure function and into the resulting view.</p>

<h2>No Lifecycle Methods</h2>

<p>Because there&#8217;s no backing instance as a place to put hooks for your code in the component lifecycle, you can not use any of the lifecycle methods from <code>React.Component</code>.  Methods such as <code>componentDidMount</code> and <code>componentWillReceiveProps</code> are out.  And since the stateless component is a pure function that just reproduces its view state on <code>props</code> change, why would you need lifecycle methods anyway?</p>

<h2>No Reference to the Component</h2>

<p>Often when testing, it&#8217;s useful to get a reference to the component itself.  In the case of stateless components, they&#8217;re just fired and forgotten, rendered into the view without the ability to get a handle on them.  They&#8217;re just UI at this point, just in the DOM.  You can go to the DOM to do your testing.</p>

<p>Depending on your test environment setup, you may want to wrap your stateless components in a <code>class</code>-based component you <em>can</em> get a reference to.</p>

<p>Note that for stateless components, <code>ReactDOM.render</code> and <code>TestUtils.renderIntoDocument</code> will return <code>null</code>.</p>

<h2>No refs</h2>

<p>Stateless components can&#8217;t be the target of a <code>ref</code>.  There&#8217;s no backing instance.  You can&#8217;t have <code>refs</code> internally to children either.  Remember, <code>this</code> and <code>this.refs</code> aren&#8217;t around.  If your stateless component has a child that is a <code>class</code>-based component, <em>it</em> may have <code>refs</code>.  <a href="https://facebook.github.io/react/docs/more-about-refs.html">The docs</a> are another good reference on <code>refs</code>.</p>

<h2>No null Returns</h2>

<p>A <code>class</code>-based component may return <code>null</code> as its value in the view.  But a stateless component may not.  To get around this, return <code>&lt;noscript&gt;&lt;/noscript&gt;</code>.  This will be fully invisible in the view.</p>

<p>So what else have you found that is unavailable in stateless functions?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug Locally in Elm]]></title>
    <link href="http://jaketrent.com/post/debug-locally-elm/"/>
    <updated>2015-11-28T14:39:00-07:00</updated>
    <id>http://jaketrent.com/post/debug-locally-elm</id>
    <content type="html"><![CDATA[<p>Debugging in Elm is easy once you know where to look.  You need an in-browser tool to help you.  It&#8217;s almost as simple as just calling <code>console.log</code>, but you can&#8217;t just put your logging statement anywhere.</p>

<p><img src="http://i.imgur.com/1c6FH0f.png" alt="elm debug locally" /></p>

<!--more-->


<h2>The Online Option</h2>

<p>There&#8217;s a debugger available online as a part of the elm-lang site at <a href="http://debug.elm-lang.org/">debug.elm-lang.org</a>.  This page explains the principles behind why the debugger works and has the properties it does.  The <a href="http://debug.elm-lang.org/try">debugger is found</a> via clicking the &#8220;Debug&#8221; button in the top-right corner.</p>

<p>But you don&#8217;t want to paste your code into the Try Elm page in order to walk through your Elm code.  You need a local option.</p>

<h2>Debugging Locally</h2>

<p>Thankfully you already have the tools to debug locally after you&#8217;ve <a href="http://elm-lang.org/install">installed Elm</a> on your machine.   It comes with <code>elm-reactor</code>.</p>

<p>In order to run your Elm code, go to your shell, <code>cd</code> into your project directory, and type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ elm reactor</span></code></pre></td></tr></table></div></figure>


<p>This will serve up your project directory at <code>http://localhost:8000</code> by default.</p>

<p><img src="http://i.imgur.com/yE93W9g.png" alt="screenshot of elm reactor" /></p>

<p>You will be able to see the project files listed.  There are two links for each Elm program.  Unfortunately, the debug mode link is pretty subtle, looked over by me as just a bullet in the UI.</p>

<ol>
<li>Click the file name, get the run mode</li>
<li>Click the wrench to the left of the file name, get the debug mode</li>
</ol>


<p>Alternately, type your own <code>?debug</code> at the end of any Reactor url to enter debug mode for that file.</p>

<p>Once in debug mode, you should see your code in action in the browser as usual, now with a sidebar for the debugger overlayed on your UI.</p>

<h2>Setting up Watches</h2>

<p>Poor man&#8217;s debugging has traditionally been logging. When variables are in scope, interrogate them and print the value on the screen.  Elm&#8217;s debugging story feels about like that, with some cool bells and whistles around it &#8211; like <em>time-traveling</em> debugging, oh my.</p>

<p>In time-travel mode, your debug method of choice will probably be <code>Debug.watch</code>.  In the <a href="http://package.elm-lang.org/packages/elm-lang/core/2.0.1/Debug#watch">docs</a>, it is shown to take 2 arguments:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>watch : String -&gt; a -&gt; a</span></code></pre></td></tr></table></div></figure>


<p>The first argument is the label for the watched data in the debugger.  The second argument is the actual data value.  If I wanted to watch a dimensions tuple, I could write:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Debug.watch "myDimensions" (w, h)</span></code></pre></td></tr></table></div></figure>


<p>Also note that you have to make your debug expression compile wherever you end up writing it.  I find that the easiest place to put a debug statement into my already-working code is in a <code>let</code> expression.  (Well, &#8220;already-working&#8221; is used loosely here &#8211; we&#8217;re debugging after all.)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let
</span><span class='line'>  log = Debug.watch "myDimensions" (w, h)
</span><span class='line'>in
</span><span class='line'>  doStuff myDimensions</span></code></pre></td></tr></table></div></figure>


<p>Now the watched value will show up in the debugger sidebar.</p>

<p><img src="http://i.imgur.com/PlI83Kq.png" alt="screenshot of elm watched code" /></p>

<p>If you pause the debugger and step backward, you can see the value as it has changed over time.  It&#8217;s pretty neat, and now you&#8217;re debugging Elm on your own box!</p>

<p>What other Elm debug tips do you have?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update Body Class in React]]></title>
    <link href="http://jaketrent.com/post/update-body-class-react/"/>
    <updated>2015-09-23T15:31:00-06:00</updated>
    <id>http://jaketrent.com/post/update-body-class-react</id>
    <content type="html"><![CDATA[<p>React gives us a great component abstraction.  Each of these components represents a node in the DOM.  Each component is self contained, doesn&#8217;t talk up the component hierarchy directly and passes explicit data and code down the hierarchy.  But what about when you have a React app that wants to reach out and modify something it doesn&#8217;t control?</p>

<p><img src="http://i.imgur.com/DXuSNbw.png" alt="react modify body tag" /></p>

<!--more-->


<h2>A Couple Use Cases</h2>

<p>There are potentially a few use cases for this.  For instance, modals that need to render outside your application&#8217;s potentially <code>position: relative</code> containers.  Or, as we&#8217;ll see below, your app wants to modify the <code>body</code> tag in your html document.</p>

<p>The most common reason I&#8217;ve found for messing with the body tag is to provide some style attribute.  It&#8217;s not uncommon to have full-page style differences between pages in our apps.  If you have a &#8220;single page&#8221; js app in the browser, you need to be able to modify the body tag in code.</p>

<p>Let&#8217;s use an example where on some pages in your app, the theme is &#8220;dark&#8221;, where the body background color should be black.  On other pages, the entire body background color should be the default white.  We&#8217;ll make a component that lives high in the hierarchy and takes an <code>isDark</code> property to determine if the rendered page is dark or light.</p>

<h2>Body is Outside Your React App</h2>

<p>You can&#8217;t mount your React app directly on <code>document.body</code>, at least without warnings.  This is considered bad practice, because other scripts or browser plugins often modify the document body directly.  So you&#8217;ll have to reach <em>out</em> of your React app and modify the body directly.</p>

<h2>Tie Into the React Lifecycle</h2>

<p>First, you just need a point in time in your app&#8217;s lifecycle where you know you want to modify the <code>body</code> class.  React has a bunch of <a href="https://facebook.github.io/react/docs/component-specs.html">lifecycle hooks</a> that will come in handy.  A great early-lifecycle hook for modifying the DOM is <code>componentDidMount</code>.  Usually, we would be accessing DOM nodes that are children of our Component.  Again, in this case, we&#8217;re reaching out beyond where a React component usually should.  The usual <code>React.findDOMNode</code> functions will not be needed, because React isn&#8217;t managing the body node.  Instead, we&#8217;ll just use the <code>document.body</code> api directly.</p>

<h2>Use JavaScript to Modify the Class</h2>

<p>If you have some utility for modifying class names, use it.  If not, it&#8217;s small and simple enough in <a href="http://jaketrent.com/post/addremove-classes-raw-javascript/">plain old JavaScript</a>.</p>

<p>With these two bits in hand, you have the pieces necessary for your body-modifying component:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">BodyColor</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">static</span> <span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">isDark</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">bool</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kr">static</span> <span class="nx">defaultProps</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">isDark</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">toggle</span><span class="p">(</span><span class="s1">&#39;darkClass&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">isDark</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">componentWillReceiveProps</span><span class="p">(</span><span class="nx">nextProps</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">toggle</span><span class="p">(</span><span class="s1">&#39;darkClass&#39;</span><span class="p">,</span> <span class="nx">nextProps</span><span class="p">.</span><span class="nx">isDark</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">componentWillUnmount</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="s1">&#39;darkClass&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use, pass an <code>isDark</code> attribute to activate the <code>darkClass</code> class on the body tag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;BodyColor</span> <span class="na">isDark=</span><span class="s">{true}</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>A Very Dark App<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;/BodyColor&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Are there any other ways you&#8217;ve found to reach out of React and modify the DOM directly.  What have been your use cases?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In Favor of Codenames]]></title>
    <link href="http://jaketrent.com/post/in-favor-codenames/"/>
    <updated>2015-09-03T09:29:00-06:00</updated>
    <id>http://jaketrent.com/post/in-favor-codenames</id>
    <content type="html"><![CDATA[<p>It seems to be a recurring discussion in the companies I have worked for: should we use a codename for this project or not?  These are software projects.  The codenames are used on things as basic as the repository name or slack channel.  Later, they might be used in many other project-related things like the build server configuration.  The alternative for a codename is calling the thing exactly what it is.  Where&#8217;s the fun in that?</p>

<p><img src="http://i.imgur.com/gpqydff.jpg" alt="project codenames" /></p>

<!--more-->


<h2>The Argument Against Codenames</h2>

<p>The argument is that if you call the project what it is, people will know what you&#8217;re referring to when you talk about it or when you see it in your version control or on the build server or hear about it at lunch.</p>

<h2>It&#8217;s Fun</h2>

<p>I think codenames are fun.  They add identity and character to your project.  They contribute to team spirit.  You have marketing options in a codename via logos, mascots, and themes.  Most things you can do to increase the cohesiveness of a team around a shared identity, sense of belonging, and to increase their enthusiasm will be worth it.  Why not let codenames help you with this?</p>

<p>An environment where codenames are enjoyed is one that is <em>not</em> sterile and colorless.  There are people and product markets that specifically enjoy things and places that are not organized in clean, labelled boxes.  Bring some color to your environment, learn to stop worrying, and love having fun together.</p>

<h2>They Encourage Learning</h2>

<p>When you hear a codename for the first time, you might not know what it means.  Is that an unusual or bad thing?  Not knowing what it means should encourage you to ask what it means or look it up.</p>

<p>After you do, you&#8217;ll then have learned it.  You&#8217;ll have connected with people that know about it.  You&#8217;ll have found the documentation detailing what it <em>really</em> is, not just what you can fit into a name.  I like the idea of each project having a root readme file that describes the core &#8216;What&#8217; and &#8216;Why&#8217; of the project.</p>

<h2>They&#8217;re Short</h2>

<p>Codenames are usually shorter than any presumably more descriptive name.  This is great because we usually are talking about our projects or teams <em>all</em> the time.  Thus something long and descriptive, like a bloated government agency name, is likely to be shortened into an acronym instead (which is just a codename constrained by odd letter combinations).  Worse still, as people tire of saying the longer name, they start making up their own easier-to-get-out versions which will not be consistent.</p>

<h2>We Speak a Specialized Language With Each Other</h2>

<p>Codenames are great for the usually-specialized teams that end up working together.  These teams speak a common language that they learn because of the domain they all work in together.  It&#8217;s a specialized language.  This is common for other technical and specialized groups: For example, air traffic controllers speaking to pilots on the radio will use terse, specific terms that others outside the domain don&#8217;t necessarily recognize but which the two parties have learned to use together.  If your teams are cross-functional, you should learn the lingo common to your domain.</p>

<h2>They Need Discoverability Help</h2>

<p>Codenames do not help with discoverability.  In the age of search, however, this point is lessened.  We often put important domain-related keywords next to content.  I&#8217;m all for including bylines next to codenames as a one-line explanation of what it is.  Using a combo like this when it makes sense will give you the best of both words: exact consistency via the codename and some discoverable verbiage via an accompanying byline.</p>

<h2>They&#8217;re New Words</h2>

<p>A codename a variable name.  It&#8217;s an abstraction.  It represents a project, team, codebase, or something else.  It hides the internals.  It will outlive your company&#8217;s pivot from the original project scope and meaning so you can keep your codename even as your mission changes.  It usually doesn&#8217;t leak the internal implementation details.</p>

<p>Codenames are singletons within the universe of your company.  No one else will have the same team name, repo name, or slack channel.  Codenames are the keys in the dictionary of values.</p>

<p>After you learn a codename once, when it&#8217;s mentioned, you&#8217;ll know what it is.  Nbd.</p>

<h2>They&#8217;re All Around Us</h2>

<p>Codenames are all around us, thankfully.  Who really wants to call Kleenex, &#8220;facial tissue&#8221;, anyway?</p>

<p>You&#8217;ve heard of Python, React, maybe even <a href="https://github.com/Netflix/SimianArmy/wiki/Chaos-Monkey">Chaos Monkey</a> (and check it out, they even have a &#8216;What&#8217; and &#8216;Why&#8217; in their readme!).  You&#8217;ve probably also heard of Microsoft SQL Server.  Blegh.  Doesn&#8217;t that fill your soul with the emptiness of corporate sterility.  Though, there are codenames in their too, right?  &#8220;Microsoft&#8221;.  &#8220;SQL&#8221; (one of those weird descriptive-things-turned-acronym).</p>

<p>So, embrace codenames.  You use them anyway.  It&#8217;ll be more fun for most.  It&#8217;ll bring color to your world.  It&#8217;ll bring life and character to your team identity and the discussions you have about what you do.</p>

<p>What are some of your favorite codenames, and what are some of your favorite reasons for using them?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Rally Review]]></title>
    <link href="http://jaketrent.com/post/react-rally-review/"/>
    <updated>2015-08-27T09:03:00-06:00</updated>
    <id>http://jaketrent.com/post/react-rally-review</id>
    <content type="html"><![CDATA[<p>React Rally is a developer conference created around the library of <a href="http://facebook.github.io/react/">React.js</a> and the community that uses it.  It was the first of its name.  It was the first React-centric conference in Salt Lake City.  I had a great time.  Here are a few of reasons I liked it.</p>

<p><img src="http://i.imgur.com/B8fFS4J.jpg" alt="react rally" /></p>

<!--more-->


<h2>People Breakouts</h2>

<p>It was a happy conference.  A great mood was set by <a href="https://twitter.com/jergason">Jamison</a> on stage, who MC&#8217;ed most of the conference.  He&#8217;s a fun, quirky guy who&#8217;s not self-important and who did a great job putting speakers and the audience at ease.  There were a ton of participants and attendees at the conference that also fit this (good!) description.  This led to great conversation between sessions.  There were plenty of breaks, some 30 or 60 minutes at a time.  They were well-spaced, allowing plenty of time.  There was a pleasant <a href="http://rangle.io/">Rangle.io</a>-sponsored lounge to gather in.</p>

<p>There were no on-stage questions and answers portions at the end of the talks.  I wondered how I&#8217;d like this, since who doesn&#8217;t like answer to their questions, right?  It turned out to be refreshing.  Speakers finished their talks at the appointed time.  No one had to wait around uncomfortably wondering when either the speaker or the audience would let everyone else off the hook.  No embarrassing questions.  It was nice.  All the speakers were great anyway, but I think this feature also helped prime the conversations that were expected to happen after the talks in the breakouts, giving extra motivation for everyone to be available and approachable.</p>

<h2>The Spoken Word</h2>

<p>I was excited going into the conference because of the solid lineup of speakers.  Not all the talks were the best I had heard or the best treatment of every subject.  There were some highlights thought, and on the whole it was really, really good.  Each of the speakers had obviously prepared a great deal and had taken their time on stage seriously (or not seriously in the case of <a href="https://twitter.com/djsmith42">Dave Smith</a>, whose talk was memorable and awesome as well, btw).</p>

<p>The conference wasn&#8217;t wholly about React.  There&#8217;s just so much <em>around</em> React that is exciting.  The community is pushing boundaries all over the place.  (And <em>still</em> all the content in the conference was appropriate, yay! :)  For instance, there were a great many mentions of <a href="http://elm-lang.org/">Elm</a>.  For my part, I spent much of the conference tinkering with that very thing.</p>

<h2>Fun Design</h2>

<p>It&#8217;ll reveal how much art does for me, but when I first learned about the conference, one of the things that excited me the most was the <a href="http://www.reactrally.com/">website</a>.  It had a fun design!  There were illustrations, interesting colors, and it looked like a fun theme.  (Of course, at the time there was literally nothing else to be excited about outside the mailing list input box.)</p>

<p>We need more illustrations.  We need more mascots.  A menacing purple squid with a React symbol on its forehead?  Yes, please!  My previously bare brushed metal laptop lid is now bestickered with the sweetest conference stickers I have.  So fun!</p>

<p>I&#8217;m still not sure what the theme was intended to be.  My interpretation was Creatures of the Black Lagoon in Space.  Right?!</p>

<h2>Feels Like the First Time</h2>

<p>The organizers did a great job.  The preparation was obvious.  They assured me they were putting out fires for the duration of the two days.  That was not apparent.  The thing went off without a hitch.  I can only poke at the annoying AV glitch of a blinky project screen in some talks.</p>

<p>Everything seemed in its place.  The conference was small, about 250 participants, and it seemed like a large house party most of the time.  The venue was prepped very well.  I&#8217;m glad they opened up the downstairs lounge.  The food was great.  The breakfast trucks were a wonderful touch, especially <a href="http://saturdayswaffle.com/">Saturdays Waffles</a> day.  Mmmmm, waffles.  The gift card for lunch was a thoughtful touch.  <a href="http://www.yelp.com/biz/atlantic-caf%C3%A9-and-market-salt-lake-city-4">Atlantic Cafe</a> provided my delicious cevapi sausage on the 2nd day.</p>

<p>I have many thanks for the great speakers, the effort of the organizers, and everyone in between that made the 2 days great.  I felt inspired.  I left more informed.  I met a group of fantastic people.  It&#8217;s been my favorite conference in Salt Lake City so far.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Love CSS Modules]]></title>
    <link href="http://jaketrent.com/post/i-love-css-modules/"/>
    <updated>2015-08-25T11:03:00-06:00</updated>
    <id>http://jaketrent.com/post/i-love-css-modules</id>
    <content type="html"><![CDATA[<p>I heard a fantastic yesterday by <a href="https://twitter.com/glenmaddern">Glen Maddern</a> where Interoperable CSS was well-illustrated as the fantastic CSS language advancement that it is.  I was happy to hear hushed ooo&#8217;s and ahh&#8217;s from the audience as they realized the power of what they were seeing.  I have been enjoying the benefits of CSS modules myself and my team and would share some of my favorite features in hopes that others will be inclined to use this feature as well.  Cleanse the world of global stylesheets!</p>

<p><img src="http://i.imgur.com/MtjAduk.jpg" alt="i love css modules" /></p>

<!--more-->


<h2>Local Variables</h2>

<p>With CSS modules, your selector names are truly local.  They are FRD local variables!  They won&#8217;t clash with any var names outside your module.  For You don&#8217;t have to invent a giant namespace.  There&#8217;s no BEM-style naming to describe a hierarchy.  There&#8217;s no repetition in those names.  You can name it something much more simple, just related to what the component is.</p>

<p>For instance, if you&#8217;re creating <code>Link</code> component, you&#8217;d previously have something like <code>.nav__item__link</code> selectors to apply style.  Knowledge of global markup structure would seep into your component through this selector and its name.  Now with a combination of encapsulated components and css modules,  you don&#8217;t have to worry about the outside world.</p>

<p>Now, what would you call your <code>Link</code> component&#8217;s outer-most <code>a</code> tag?  Well, maybe <code>.link</code> or <code>.root</code>&#8230;  Nothing fancy.  Just what it is.  You aren&#8217;t required to think about the global stylesheet.  You can focus your mind on just the component stylesheet at hand.  The naming game, which can already be challenging, is made much easier.</p>

<h2>Explicit Dependencies</h2>

<p>Now that all the CSS you write is, by default, local to the module you write it in, you have to explicitly pull in dependencies.  You have to explicitly import the stylesheet you are writing where you&#8217;ll eventually want to use it.  You can write styles without fear that it might influence something else &#8211; until you explicitly ask it to!</p>

<h2>Still CSS</h2>

<p>I&#8217;ve tried some of the inlining styling techniques and libraries that are being made popular in the React community.  <a href="https://github.com/FormidableLabs/radium">Radium</a> is my favorite there.  What makes me happy about CSS modules is that they&#8217;re still CSS.  It&#8217;s a language that was invented in order to create declarative styles.  It&#8217;s not wonderful in many ways, but it&#8217;s still the best tool available for this.</p>

<p>You can use all the selectors, strategies, and css abilities you&#8217;re used to.  Pseudo selectors are all available.  Media queries work as expected.  Keyframe animations are easy to declare.  There is also a great ecosystem of CSS enhancements and transforms available from the PostCSS community.  No one should ever write a vendor prefix again with <a href="https://github.com/postcss/autoprefixer">autoprefixer</a>.</p>

<h2>Consistency for Components</h2>

<p>Another thing I&#8217;d like to see in the web component community, specifically React for now, is a pattern around how to override CSS in reusable components.  This pattern would be well-used by component developers and well-known by component consumers.  This would help components be more immediately useful &#8211; default styles could be included with components and custom styles would be easily applied.</p>

<p>My favorite solution to this so far is <a href="https://github.com/pluralsight/react-styleable">react-styleable</a> &#8211; full disclosure, I helped write it.  (Anything like this that gains steam, has broad appeal, and is used by many will make me happy.)  I love that CSS modules enable this and provide a foundation for this consistency.  I&#8217;ll likely write more about this in the future.</p>

<p>CSS modules have changed the styling game for me.  It makes it so, so much better.  Who knows, maybe it&#8217;ll change the world.</p>

<p>So, how have CSS modules changed your life?  What do you love?  What could still be better?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make Software in the Estuary]]></title>
    <link href="http://jaketrent.com/post/make-software-in-the-estuary/"/>
    <updated>2015-08-20T10:06:00-06:00</updated>
    <id>http://jaketrent.com/post/make-software-in-the-estuary</id>
    <content type="html"><![CDATA[<p>An estuary is where the sea meets the river.  Here, there is a mix of fresh water and salt water, sediment from the rivers and marine life from the sea.  The effects of both sea and river are seen in many ways.  It&#8217;s a swirl &#8211; there&#8217;s no upstream or downstream.  It&#8217;s considered to be one of the most nutrient-rich, productive ecosystems on the planet.  So really, who <em>wouldn&#8217;t</em> want to make software in an estuary?</p>

<p><img src="http://i.imgur.com/3XrFyZS.jpg" alt="the software estuary" /></p>

<!--more-->


<h2>The Traditional Production Flow</h2>

<p>Here&#8217;s a software production flow with disciplines and responsibilities represented:</p>

<ol>
<li>Company leadership - develops a strategy and business model</li>
<li>Product management - identifies customers and products that could realize the business model</li>
<li>Design - visualizes information, interfaces, and flows for the product</li>
<li>Project management - manages a team in execution of production</li>
<li>Engineering - implements the design for the product</li>
<li>Quality assurance - verifies the correctness of the implementation</li>
<li>Operations - release and maintains the finished product</li>
</ol>


<p>This is a simplified, constricted view &#8211; a bit on purpose.  More or less, the traditional production flow is there.  It&#8217;s very structured.  It feels like a factory assembly line.  I can imagine a lot of wall-throwing.  There are lots silos.  There&#8217;s a lot of specialization.  The streams do not cross.  It does not feel like an estuary.</p>

<h2>No More Strangers, Upstream and Downstream</h2>

<p>In the traditional production flow, there are specific orders and directions.  Arrows flow between neat boxes.  It might feel like a spotless production facility, clean and robotic.  It may even be really efficient.  But you likely have some uneasiness considering such a creative endeavor as software production being made in such an environment.</p>

<p>I think we should not think of ourselves as being in an upstream or downstream position, sitting somewhere in this traditional flow.  Rather, we are a full participant at any and all points.  We shouldn&#8217;t think of our contributions in terms of our titles.  We should think of what we can offer of substance and then offer it.  In the estuary, things are messy, and we like it because of what we trust will be a better experience in the end.</p>

<p>It might be worth asking yourself if you really believe in the power of collaboration.  As in, are you really ready to participate in such a mix of people, ideas, and varied contributions?  It might be worth considering:</p>

<h4>When previously downstream&#8230;</h4>

<ul>
<li>Did it ever feel like you were expected to just do what you were told, completing your well-defined job on the assembly line?</li>
<li>Did you ever lack an understanding of why you were making what you were being asked to make?</li>
</ul>


<h4>When downstream comes to the estuary&#8230;</h4>

<ul>
<li>Do you feel comfortable deviating from and adjusting the plan?</li>
<li>Are you ready to feel uncomfortable and contribute outside your wheelhouse?</li>
<li>Are you ready to have your work critiqued and changed?</li>
</ul>


<h4>When previously upstream&#8230;</h4>

<ul>
<li>Did you ever feel like you were the one mainly responsible for the thinking on the project?</li>
<li>Did you ever feel like those downstream from you weren&#8217;t being responsive enough to your ideas or instructions?</li>
<li>Did you ever feel like you were in command and control mode all the time?</li>
</ul>


<h4>When upstream comes to the estuary&#8230;</h4>

<ul>
<li>Are you ready for others to contribute to or push back on ideas that you create?</li>
<li>Are you ready to relinquish some control on &#8220;your ideas&#8221;?</li>
<li>Are you ready to stay engaged for the entirety of the project and care about the production experience end-to-end?</li>
</ul>


<h2>Good People Required</h2>

<p>Collaboration in the estuary isn&#8217;t easy.  Work done here is done at a different level than work done on a pristine factory production floor.  It&#8217;s more engaging, creative, demanding, evolving, and innovative.</p>

<p>Good people are required.  Self esteem from all is required.  Courage to potentially look stupid is required when you ask fundamental questions, question why, or challenge the status quo.  Courage to get something wrong means that you&#8217;re contributing even if there&#8217;s someone who might be &#8220;better&#8221; at a particular activity than you most of the time.  Humility is required to allow space for others to influence your work and defer to those who don&#8217;t share your title or field of expertise.  Trust is required when others want to take part in something that you see as very important.</p>

<h2>The Medici Effect</h2>

<p>The Medici Effect is named for the family living in Italy in the 14th century who had a great effect on the area and history.  They invited many experts from diverse disciplines and had the effect of making Florence, Italy a center of advancement and innovation, catapulting forward the Italian Renaissance.  The same effect of new and more ideas can be seen by us as we bring many disciplines together in a common cause.  What can we do to encourage our cross-functional teams really cross functions?</p>

<p>People have different tastes and exposures.  Associative thinking is making connections between different ideas.  Naturally, people of different backgrounds and trainings will be more able to make more and varied associations.  New, fun, and unusual combinations will result.</p>

<p>Steve Jobs often expressed that his passions lived at the intersection of the arts and technology.  That sounds like a cool estuary.  Now think of the intersection of the passions, knowledge, and abilities of entire teams really working together.</p>

<p>So swim in the estuary.  It&#8217;s a great way to make software.  Don&#8217;t think of your roles in terms of upstream and downstream disciplines.  You can have a rich, productive team and a better product by truly working together, not just being on the same team in name, location, or project.  Pay the price of the messiness of collaboration.  It&#8217;s challenging, of course.  But who doesn&#8217;t want to do great work with people of courage, humility, and trust?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Isn't Your Magnum Opus]]></title>
    <link href="http://jaketrent.com/post/this-isnt-your-magnum-opus/"/>
    <updated>2015-08-15T15:46:00-06:00</updated>
    <id>http://jaketrent.com/post/this-isnt-your-magnum-opus</id>
    <content type="html"><![CDATA[<p>Sometimes it seems like we feel everything we produce must be our magnum opus &#8211; not just great work, but <em>the</em> great work of our career.  Somehow we end up thinking that this thing we&#8217;re working on is the final act, the thing that will dwarf all our previous work.  The thing that won&#8217;t &#8211; in fact, shouldn&#8217;t &#8211; be toppable.  We tell ourselves that we&#8217;ll forever be judged by this one artifact.  Is that the case?  Probably not.</p>

<p><img src="http://i.imgur.com/4yimUZ1.jpg" alt="a magnum opus in the making" /></p>

<!--more-->


<p>Of course we should do great work.  But sometimes our view of how great it needs to be, in a real way, gets in the way of its actual greatness.  We are slow to start.  We are intimidated by the blank page.  We shy away from production because we already don&#8217;t know how to measure up to the expectation we&#8217;ve given ourselves in our head.  Stop expecting, and start doing.</p>

<h2>Why you should start now</h2>

<p>You&#8217;re probably just wasting time on stuff you don&#8217;t care about while you stew about how to complete this great work by which you&#8217;ll be forever judged.  Mustn&#8217;t mess up now, musn&#8217;t we?  Of course, you&#8217;re probably snoozin&#8217; in front of Netflix right now in order to escape what you&#8217;re putting off.</p>

<p>Life is filled with opportunities.  Opportunities don&#8217;t sit still.  Time moves on.  There are windows to when things are possible or more likely.  Life will pass us by one way or the other.  Will we be involved in it in the ways we want?</p>

<p>There is something to be said for producing in high volumes.  I read in a C.S. Lewis biography once that Lewis&#8217; friend J.R.R. Tolkien, who worked in detail at a snail&#8217;s pace, thought his friend sloppy and not as careful an author as himself (17 years of production for the 3 Lord of the Rings books vs. 7 years of production for the 7 Chronicles of Narnia books).  Yet C.S. Lewis authored <a href="https://en.wikipedia.org/wiki/C._S._Lewis_bibliography"><em>many</em> great works</a> that have touched many people.  (J.R.R. Tolkien&#8217;s works have spread to an even wider acclaim, btw.)  The more of your actualized ideas that appear in the wild, the more people will be touched in ways that you care about.  The more brains of your consumers that are activated by what you produce, the more ripple effect you&#8217;re likely to have.  You may find a diamond in the rough eventually.  You&#8217;re more likely to find diamonds if there are many scattered around for the finding.</p>

<h2>The Road to Perfection</h2>

<p>The only constant is change &#8211;right?!  So why do you expect things to be <em>just so</em>, now?  This year&#8217;s car model has somehow managed to look better than last year&#8217;s.  But they shipped one last year anyway.  It may have even had something to do with with year&#8217;s being as good as it was.</p>

<p>Iterate!  There will be time to repair or even replace. Often our ideas get better over time.  Often we do too much in the beginning.  We clutter the palette and crowd out great with good.  &#8220;Half baked&#8221; is just a comment with a negative connotation that means we still have work to do.  Of course we do.  When don&#8217;t we?</p>

<h2>Those Marketing Events</h2>

<p>Ah, those marketing events.  You know the ones.  The company is turning over new leaves and wants to make a big splash.  They want to use all that ad budget to great effect and capture all the headlines in all the outlets.</p>

<p>We might build something new and shiny from the ground up.  We stack as much pizzazz into the new product as we can.  We cringe that one of our favorite new features won&#8217;t make it.  We endless tweak to get things just as we imagine &#8220;right&#8221; is for the big reveal.  We want it all, and it must be grand, fresh, and unified from the moment of the big press conference.</p>

<p>These are big events.  Sometimes they work out.  They&#8217;re easy to get wrong.  They&#8217;re very easy to be disappointed by.  Have you heard advice like, &#8220;Don&#8217;t make 20 new New Year&#8217;s resolutions.  You&#8217;ll drown in them.  Focus on <a href="http://jaketrent.com/post/vision-questing/">1 or 3 most important things</a> at a time.&#8221;?  You&#8217;ll be more likely to hit the mark you&#8217;re aiming for.  And then after those first 3 months of 1 or 3 big things, your life will better in those 1 or 3 big ways.  Your product might benefit from the same focus.  And your customers will appreciate some benefits that you could provide in their lives before the appointed marketing hour.</p>

<p>These marketing events are kind of cool in a way.  Who doesn&#8217;t like a fireworks display?  (Hehe, but if you&#8217;re like me, you&#8217;re thinking about the cost per firework at the same time.)  But who likes waiting for things these days either?  Do you remember the days (not far distant) where web browser releases were tied to infrequent OS releases?  Was it fun to wait a year to be able to use that new browser feature?  Thankfully, browsers are released a lot more frequently now.  Small, online patches are common.</p>

<p>I&#8217;ve never really enjoyed working toward these marketing events either.  Usually unrealistic timelines mixed with a sense of responsibility and urgency create additional stress.  Ironically, product quality and pride often suffer <em>anyway</em>, even after waiting until the big day.  The date usually moves anyway.  It&#8217;s a potentially risky business move to wait on value so long, giving scrappier competitors a way to get in before you.  Things you thought would be done don&#8217;t get done and you are left to create accommodations around legacy and next-gen systems existing simultaneously.  If you would have embraced iteration and expected a constant messiness, at least you would have been able to plan for this from the beginning.</p>

<h2>Peer in the Future</h2>

<p>Of course you want to achieve your product vision.  You are genuinely excited by the prospects of that future that you behold.  You still can.  But if you don&#8217;t release now (or at least sooner than you&#8217;re comfortable), it&#8217;s likely you&#8217;ll never bring yourself to release, being stalled, scared of judgement, in the grips of analysis paralysis, not wanting to blow it.  Then eventually, at the end of the long and winding road, you will release what you <em>thought</em> was your vision, often missing the mark anyway.  You&#8217;re more likely to hit 5 free throws than you are to hit 1 full-court shot.  And if you miss one free throw, you have another 80% of your opportunities in front of you to adjust for and get right.</p>

<p>It has been said that the best way to predict the future is to invent it.  A lot can change in months, days, and years.  Help guide the future one day at a time, continuously.  The best way to test your invention is to release it and let people try it.  The best time to release is as soon as possible.</p>

<p>Don&#8217;t worry about this product being your magnum opus.  Maybe it will, maybe it won&#8217;t.  Let other decide that after you&#8217;re dead and all your works are done.  Make the world a better place as best you can as soon as you can, and make some opuses!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Vision Questing We Will Go]]></title>
    <link href="http://jaketrent.com/post/vision-questing/"/>
    <updated>2015-08-10T20:34:00-06:00</updated>
    <id>http://jaketrent.com/post/vision-questing</id>
    <content type="html"><![CDATA[<p>Do you ever get home and not remember what you did for the whole day at work?  You were always on the move.  You were always doing something for someone.  Obviously you were a much-valued member of the team to have so much required of you.  So then why can&#8217;t you remember what you actually did?  And if you can&#8217;t remember that, surely you can&#8217;t remember <em>why</em> you were doing it!</p>

<p><img src="http://i.imgur.com/kEjGTZc.jpg" alt="the vision quest" /></p>

<!--more-->


<h2>My Last Job</h2>

<p>I have been privileged to work with some fantastic teams at great companies.  I am so grateful to say that each has been a great experience and opportunity for me that I wouldn&#8217;t exchange for a different past.  My current job is no different.</p>

<p>I usually make it a point to be open to new opportunities, including new jobs.  Thus, when I was approached about a new opportunity, even though I was very engaged in my current employment, I said I was willing to see what the opportunity was, to meet new people, and talk stuff through.</p>

<p>As I began to chat about the new opportunity, my sights were raised a little higher than they had been.  I had been involved in the daily work of making a new, awesome product &#8211; one that I was and am proud of.  But I must have been lost in the daily grind of cranking this thing out because I found the chats about a new opportunity refreshing.  But still I had such a great gig going, and I was really torn between two solid places to work.</p>

<p>As I tried to work things out, I was super distracted for a few days while trying to do my daily work.  I finally just took a day off.  I knew I had to figure things out so I could decide what I was going to do and go forward.  I woke up that day and wrote about the situation.  I had breakfast with my family.  I played soccer with my kids in the backyard.  I went on a walk.  I wrote some more.  I thought a lot about life, about my vision for the future.  I talked with my wife.  It was an awesome day.</p>

<p>In the end, I decided to make a job change.  I took the new job, leaving what was also a great job.  As I left, I couldn&#8217;t help but feel that if I had done more to create more clarity for myself around my previous job, I may have made better changes to my work, focusing on what was important to me, potentially <em>without</em> changing jobs.  I resolved to do more thinking about these kinds of things in the future.  This not in an effort to avoid new jobs and opportunities, but rather to always be focused on what <em>I</em> really care about within <em>each</em> great job that I have the pleasure to be a part of.</p>

<h2>Vision Quest</h2>

<p>Thus the Vision Quest was born.  Why &#8220;Vision Quest&#8221;?  Well, it sounds awesome, sounds epic, is something that looks good capitalized, and it&#8217;s fun to say.  It also alludes to what it actually means (So it&#8217;s not from the same naming book as most tech startups).  I also have some vague memory of an illustrated children&#8217;s book I read as a child about this <a href="https://en.wikipedia.org/wiki/Vision_quest">Native American tradition</a>.</p>

<p>Liz Wiseman, in her book Rookie Smarts, talks about a Think Day.  I love that idea too.  This is similar.  But where she encourages that day to be mostly focused on innovation, I believe the focus of the Vision Quest day is mostly on one&#8217;s broad vision and most important work.</p>

<h2>A Questing We Will Go</h2>

<p>Ah, questing.  So invigorating.  A Vision Quest can take the shape that best suits you and the needs that you have.  For what it&#8217;s worth, this is what I do &#8211; at least until the point where I figure out how to do my questing in the Caribbean for a full week.</p>

<p>I take the whole day off from work.  I use it as a PTO day.  It definitely is a personal day, but in reality, it&#8217;s usually some serious investment in one&#8217;s work.  Your employer would rather you took a day off for this than started thinking about it anyway in terms of finding a new job.  I think the best employers already encourage this kind of behavior.</p>

<p>I try to find different places and paces to think.  I go outside.  I see my children at times of day that I usually don&#8217;t.  I go to the library.  I turn off social media.  I turn off most music.  I spend a lot of time alone.  And I write.  I write a lot in order to organize my thoughts.  I mostly just let it flow.  I spend most of the day, usually an hour at a time, writing.  I don&#8217;t worry about format, punctuation, and that sort of thing (which cries against my OCD).  I just try to get thoughts out.  Toward the end of the day, I try to summarize what I&#8217;m thinking.  I discuss it with my wife.  I adjust per her insights and feedback.  Then I relax with the family and let it simmer.</p>

<p>I wanted to take my Vision Quest regularly.  It feels to me like it needs to be recurring, spaced far enough apart to be a long-term thing but not so far apart as to forget about it, have large changes in priorities, or feel it an irrelevant exercise.  The cost is really quite low for the added clarity, happiness, and impact on the work you value the most.  I came up with an every-3 months recurring schedule.</p>

<h2>Alone With Your Thoughts</h2>

<p>Of course, it&#8217;s <em>your</em> Vision Quest.  So think about what you want and need.  In the end, I try to end up with 3 main areas that I want to focus on until my next Vision Quest, 3 months from now.  This is more or less the idea that Todd Henry calls <a href="http://jaketrent.com/post/ideas-from-accidental-creative/">The Big 3 in his book, The Accidental Creative</a>.</p>

<p>The Big 3 will help guide your most important work for the next 3 months.  You will have another guide by which you decide what work you should or shouldn&#8217;t focus on.  If a task will help you accomplish your Big 3 or fits well within the things listed there, that should encourage you to take it on where possible.  If there is something vying for your attention that doesn&#8217;t fit in The Big 3, you should likely be hesitant to take it on.  What is the cost to your Big 3 if you do this new thing instead?</p>

<p>Hours of writing, questioning and answering, given my eclectic thought process, can lead to sundry topics.  A few that might fit into your Vision Quest are:</p>

<ul>
<li>What&#8217;s important to me?</li>
<li>How do I want to grow?</li>
<li>How can I take advantage of my strengths?</li>
<li>What are opportunities I foresee?</li>
<li>What are some current opportunities that I should take advantage of?</li>
<li>What do I want for myself and my family?</li>
<li>What is my value to my team and company?</li>
<li>What makes me excited to go to work?</li>
<li>What makes me want to stay home?  What do I want to do instead?</li>
<li>How can I be the kind of person I want to work with every day?</li>
<li>What am I interested in that I might not be doing at work?</li>
<li>What do I waste time on?</li>
<li>What do I want to spend more time on?</li>
<li>What are some of my greatest recent successes?</li>
<li>Where will I find my next big challenge?</li>
<li>How do I feel about X?  Do I care about X?</li>
<li>How would I rate my current performance?</li>
</ul>


<h2>The Next 3 Months</h2>

<p>Now you have a long list of thoughts of various importance.  You have drawn out and summarized the essence of what you currently feel is your most important focus.  You&#8217;ve chosen just a few items, remembering that these are the <em>most</em> important things you want to move the needle on, and that you can&#8217;t do everything.  You&#8217;ve shared your Big 3 with people that you trust and from whom you will need support.</p>

<p>Now there&#8217;s a lot of work to do.  Way to go!  All that important work that you&#8217;ve clarified for your future represents a lot of growing and a lot of impact on what you value.  You have quested for a vision, and now the real questing begins as you seek out and accomplish the work that you have pinpointed.</p>

<p>It&#8217;s fantastic to make your life what you want of it.  If you don&#8217;t, it&#8217;s likely that you&#8217;ll make it to a grand old age, look back and realize that your life could have been so much more than you made it.  Or perhaps less epicly, you&#8217;ll just change jobs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Animating a Line in D3]]></title>
    <link href="http://jaketrent.com/post/animating-d3-line/"/>
    <updated>2015-07-27T07:01:00-06:00</updated>
    <id>http://jaketrent.com/post/animating-d3-line</id>
    <content type="html"><![CDATA[<p>You can make some awesome charts in D3.  Animate your charts, and they&#8217;re made even awesomerer.  To animate lines, such as those found in line charts, try out the following methods.</p>

<p><img src="http://i.imgur.com/94JQ8N8.jpg" alt="d3 line animation" /></p>

<!--more-->


<h2>D3 Transition</h2>

<p>In order to animate in D3, you call the <code>transition</code> function on a <code>d3.selection</code>.  The transition essentially creates a tween from the starting point of the animation to the specified ending point.  So, to specify an animation:</p>

<ol>
<li>Set the starting state</li>
<li>Specify that you are transitioning</li>
<li>Set the ending state</li>
</ol>


<p>Then D3 will handle the animation on the diff between the starting and ending state.</p>

<h2>SVG Line Animation</h2>

<p>An SVG line element has 4 required attributes, <code>x1</code>, <code>y1</code>, <code>x2</code>, and <code>y2</code>.  These required attributes specify where the line begins and ends in a 2D space.  When choosing your coordinates, remember that the SVG coordinate plane starts at (0,0) in the top-left of the SVG element.</p>

<p>For our line animation, we want the line to look like it&#8217;s being drawing from the beginning to the ending point.  We will follow the general formula for defining a D3 transition as stated above.  Assuming we have an <code>svg</code> element from the DOM selected, the remaining code might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;line&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">x1</span><span class="o">:</span> <span class="mi">25</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">y1</span><span class="o">:</span> <span class="mi">15</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">x2</span><span class="o">:</span> <span class="mi">25</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">y2</span><span class="o">:</span> <span class="mi">15</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">transition</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">duration</span><span class="p">(</span><span class="mi">1500</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">x2</span><span class="o">:</span> <span class="mi">400</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">y2</span><span class="o">:</span> <span class="mi">15</span>
</span><span class='line'>  <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the code above, the line&#8217;s starting state shows the line beginning and end at the same point, (25, 15).  This is so that the line appears to be <code>15px</code> long when first seen in the UI.  Then, over time it will grow.  Note that the <code>attr</code>s set after the <code>transition</code> call specify the end of the line as being <code>400px</code> to the right.  Thus, over the duration of the transition (set to 1500ms in order to observe it), the line will appear to grow to its final length of 400px in the horizontal direction.</p>

<p data-height="266" data-theme-id="1749" data-slug-hash="Pqyvqo" data-default-tab="result" data-user="jaketrent" class='codepen'>See the Pen <a href='http://codepen.io/jaketrent/pen/Pqyvqo/'>Pqyvqo</a> by Jake Trent (<a href='http://codepen.io/jaketrent'>@jaketrent</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="http://jaketrent.com//assets.codepen.io/assets/embed/ei.js"></script>


<h2>D3 Line Function</h2>

<p>D3 line functions are specified differently than SVG lines.  An SVG line is guaranteed to be a straight edge from the beginning to the ending point.  On the other hand, a D3 line function can describe a line through many different points, and can thus be anything but straight.  Think of a zig-zaggy line chart, and this is what a D3 line function is meant to accomplish.  Thus, a D3 line function is often used to generate the data needed for an SVG <code>path</code>, not a <code>line</code> element.  There will still be an SVG <code>stroke</code> on a path, but we will use a different technique to animate it.</p>

<h4>Strokes with Dashes</h4>

<p>There are two attributes to of a <code>stroke</code> in SVG that we will use:</p>

<ul>
<li><code>stroke-dasharray</code> - a set of 2 numbers.  The first number is the length of the dash.  The second number is the length between the dashes.</li>
<li><code>stroke-dashoffset</code> - a dash pattern is repeated, according to the <code>stroke-dasharray</code> attribute.  But this attribute specifies where to start in that repeating pattern.  In other words, how many pixels offset <em>into</em> that pattern should the first iteration of the pattern begin.  The default is 0px.</li>
</ul>


<p>To see these numbers change and how they affect a line, check out the following SVG lines:</p>

<p data-height="266" data-theme-id="1749" data-slug-hash="GJYaqK" data-default-tab="result" data-user="jaketrent" class='codepen'>See the Pen <a href='http://codepen.io/jaketrent/pen/GJYaqK/'>SVG Stroke Dasharray Grows a Line</a> by Jake Trent (<a href='http://codepen.io/jaketrent'>@jaketrent</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="http://jaketrent.com//assets.codepen.io/assets/embed/ei.js"></script>


<p>In each of the above cases, the <code>stroke-dasharray</code> is set so the dash line length and the dash space length are equal to the total length of the total line.  Note that the <code>stroke-dashoffset</code> is the only attribute that changes between the 3 lines.</p>

<ol>
<li>In the first, the <code>stroke-dashoffset</code> is set to the length of the total line.  This means that the <code>stroke-dasharray</code> pattern begins at the point where the space between the dashes begins.  Thus, the line appears invisible &#8211; it&#8217;s just the line-length space between the dashes.</li>
<li>In the second, the <code>stroke-dashoffset</code> is set to the mid-length of the total line.  Thus, the 2nd half of the first dash is visible, making the line seem half as long as its total intended length.</li>
<li>Finally, the <code>stroke-dashoffset</code> is set to 0, meaning that the total line-length dash is now fully visible.</li>
</ol>


<h4>Animating with <code>stroke-dasharray</code></h4>

<p>One could imagine that were the <code>stroke-dashoffset</code> to tween from the full line length to 0, the line would appear to grow from the left to the right.  At first, the space between the dash would be fully visible, slowly, backing off the <code>stroke-dashoffset</code> until the pattern, which begins with a dash be fully visible.  Let&#8217;s try it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">15</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">15</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">400</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">15</span> <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">line</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">svg</span><span class="p">.</span><span class="nx">line</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">x</span><span class="p">(</span><span class="nx">d</span> <span class="o">=&gt;</span> <span class="nx">d</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">y</span><span class="p">(</span><span class="nx">d</span> <span class="o">=&gt;</span> <span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">datum</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">({</span>
</span><span class='line'>      <span class="s1">&#39;d&#39;</span><span class="o">:</span> <span class="nx">line</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;stroke-dasharray&#39;</span><span class="o">:</span> <span class="s1">&#39;385 385&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;stroke-dashoffset&#39;</span><span class="o">:</span> <span class="mi">385</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">transition</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">duration</span><span class="p">(</span><span class="mi">1500</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;stroke-dashoffset&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p data-height="266" data-theme-id="1749" data-slug-hash="JdmqRm" data-default-tab="result" data-user="jaketrent" class='codepen'>See the Pen <a href='http://codepen.io/jaketrent/pen/JdmqRm/'>JdmqRm</a> by Jake Trent (<a href='http://codepen.io/jaketrent'>@jaketrent</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="http://jaketrent.com//assets.codepen.io/assets/embed/ei.js"></script>


<p>The above is the simplest possible example of how to make this happen.  In real life, you&#8217;re going to have:</p>

<ul>
<li>No foreknowledge of the data domain or maybe even the visual space range and will need a d3 scale (eg, <code>d3.scale.linear</code>)</li>
<li>A more complicated set of data which is going to lead to a more complicated line and the actual need for the line function used above</li>
<li>A more complicated line where the length is not immediately obvious and where <code>path.node().getTotalLength()</code> will be useful as a way to use the browser&#8217;s distance-along-a-path algorithm</li>
</ul>


<p>In the example above, note that the total length of the line is <code>385px</code>.  We make the line dashed.  We set the dash length and the space between the dash length to both be <code>385px</code> using <code>stroke-dasharray</code>.  We define the animation by making the starting state have a <code>stroke-dashoffset</code> of <code>385px</code>, showing nothing but the invisible space between the dash to start.  Then we tween to a <code>stroke-dashoffset</code> of <code>0</code>, causing the offset window to shrink until we see the dash, which is the length of the total line, grow into view.</p>

<p>Frankly, this dash-based solution feels like a hack.  It doesn&#8217;t seem like someone sat back and thought much about how to animate a non-linear path.  But this solution works well all the times I&#8217;ve used it.</p>

<p>What are some other solutions that you&#8217;ve found for animating lines or creating other interesting line animations?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slack Survival Guide]]></title>
    <link href="http://jaketrent.com/post/slack-survival-guide/"/>
    <updated>2015-07-17T07:25:00-06:00</updated>
    <id>http://jaketrent.com/post/slack-survival-guide</id>
    <content type="html"><![CDATA[<p>Slack is a fantastic tool.  It allows always-on group chat in this spirit of Hipchat or Campfire or your friends&#8217; group text thread that just won&#8217;t end.  You can create channels, public or private, to suit your purpose.  You can gather communities together to talk about specific things.  Slack can become an invaluable source of communication and information for you and your teams.  Without a bit of management and care, however, it can become a burden that distracts you from the essence of your work.</p>

<p><img src="http://i.imgur.com/gFBW4F4.jpg" alt="slack" /></p>

<!--more-->


<p>If your job is to coordinate and communicate all day, every day, this article won&#8217;t really apply.  You should use Slack to the max and worry about little else.  If, instead, Slack is a tool meant to empower your essential work, especially something that requires focused thinking, creative process, or anything that requires some cognitive flow time, the suggestions in this article are for you.</p>

<h2>Don&#8217;t Notify on Everything</h2>

<p>There are doubtless channels that you love and are very interested in on Slack.  You likely appreciate these places because they&#8217;re often abuzz with chatter that interests you.  Do not ask to be notified every time someone says something in these channels.  You are asking for interruptions about things that interest you but might not be directed at you.</p>

<p>Notifications are valuable, but they are an active form of the tool getting your attention and should be used judiciously.  Set a small number of keywords that would indicate to you that someone is trying to talk to you specifically.</p>

<p><img src="http://i.imgur.com/C1fG5y5.png" alt="limit notifications" /></p>

<h2>Use Mentions</h2>

<p>Assume that others are doing the above only listening for certain keywords, including their username.  And then realize that once you mention their name, like <code>@jaketrent</code>, in the channel, the tool will actively engage them with a notification.  Don&#8217;t assume their just watching the channel for traffic.  And don&#8217;t be upset if they don&#8217;t respond everything said in a channel.  Don&#8217;t mention unless you must.  And mention when you want someone&#8217;s specific attention.</p>

<p><img src="http://i.imgur.com/VlzhTua.png" alt="mentions" /></p>

<h2>Mute Channels</h2>

<p>Normally, when chatter happens in a channel, the channel nav in the left of the UI will appear white and bold, indicating you have unread chats in the channel.  If you mute a channel, this indicator doesn&#8217;t happen.  It always appears that there is nothing to read.  The great exception is when someone mentions you particularly.  In that case, you still get the red badge, indicating your number of unread mentions.</p>

<p><img src="http://i.imgur.com/5dEVlty.png" alt="mute slack channel" /></p>

<h2>Mention without Notifying</h2>

<p>Sometimes you want to speak about someone in a message without notifying them.  For instance, you could be explaining to another questioning team member what Jake&#8217;s schedule is for that day.  Jake doesn&#8217;t necessarily need notified that you&#8217;re talking about him, and he&#8217;s probably being notified of mentions of his name.  So, we can break up his name so it doesn&#8217;t match his keywords.  For instance:</p>

<p><img src="http://i.imgur.com/YxCQ1yw.png" alt="@justin Yesterday Jak e said that he would test that after we merged our change." /></p>

<h2>Expect Involvement</h2>

<p>If no one is involved on Slack, it has no value.  So if you team or company wants to communicate over the tool, you must be in there typing and reading.  We should also be understanding that people want to be involved at different levels.  Some people are great information radiators.  Some introverts would rather read and not type as much.  Some would rather talk to few people indeed and just get other essential work completed.  So expect involvement, and be willing to meet people where they&#8217;re at in relation to this communication tool and don&#8217;t expect equal involvement from everyone.</p>

<h2>The Digest Version</h2>

<p>Slack is always on, the clock is always ticking, and things are always being said.  Were you to always be keeping up, you&#8217;d never leave the tool.  So embrace &#8220;falling behind&#8221;.  Actually plan on catching up later and experiencing the past minutes, hours, or days in digest version.  Take advantage of down time and catch up then, being careful not to get sucked in past the actual down time.</p>

<h2>Leave Channels</h2>

<p>If you find yourself not being interested or engaged by the unread chats in an channel, leave it.  If the digest doesn&#8217;t catch your attention, don&#8217;t read it.  If it provides no value, it&#8217;s just taking up time.  You probably joined that channel for a long-forgotten reason, and there&#8217;s no present reason compelling you to be there.  Leave.  If someone wants you in there, she can invite you back, sharing relevant conversations at any time.</p>

<p><img src="http://i.imgur.com/nNu09rw.png" alt="invite to slack" /></p>

<h2>Bankruptcy is Ok</h2>

<p>In the context of a chat tool, bankruptcy is ok.  There is no great shame in declaring that you either don&#8217;t care about what happened in slack the past while or that you aren&#8217;t willing to take the time to experience the digest version.  Mark all those messages as read and go on with life.  If someone really wanted your attention, they&#8217;ll mention you again.</p>

<h2>Turn it off</h2>

<p>There are many moments of creative thought where an idle comment that you notice will whisk your mind away from the problem at hand that series of abstract connections you had just made is now lost.  Be willing to put boundaries around your most important, creative, or difficult work, and just turn Slack off for those periods.  It&#8217;ll be ok.  Just do it.</p>

<h2>Limit <code>@channel</code> Usage</h2>

<p>Really think twice before you use the <code>@channel</code> or <code>@group</code> mentions.  Everyone in the channel will receive a notification about what you&#8217;re saying.  Is it urgent &#8211; as in, is it time-sensitive enough that everyone should read this as soon as you type it?  Does it <em>really</em> apply to <em>everyone</em>?  <code>@channel</code> should really not be a part of your daily Slack vocabulary.  Your mind should not go there instinctively, and your fingers should not type it readily.  It should really be for exceptional moments when you remember, &#8220;Oh yeah, I <em>can</em> get a hold of everyone right now if use @channel&#8221;.</p>

<p>Everyone really needs to be responsible and limit themselves on this point because the situation in which there are bunch of at-channel police is not fun either.  It tends to draw out people that think they&#8217;re funny and use <code>@channel</code> mentions for their own entertainment.</p>

<h2>Talk Face-to-Face</h2>

<p>Slack is great for letting multiple people, across geography, know at once what you&#8217;re talking about.  It&#8217;s also great a making a record of the conversation for later reference.  But be willing to stand up, stop typing, and look someone in the eye.  An important conversation prefers humans speaking directly to humans, where non-verbal cues are seen, conversation can flow more directly, and we are more aware that we&#8217;re talking to a person and not a machine.</p>

<h2>Trim the Channels</h2>

<p>Just like unsubscribing to all that junk mail that you accumulate over months, it&#8217;s a good idea to trim the fat on the Slack channels you&#8217;ve joined now and again.  This will slim down the digest-version catchups that you have to consume.  Ask yourself what value you&#8217;ve been able to receive and share in those channels lately.  Ask yourself if the info shared there is really essential communication for you.</p>

<p>Well surely there are many, many other practices or thoughts that could encourage your better use of this group chat tool.  What are some ideas that occur to you?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using JavaScript's Function Bind]]></title>
    <link href="http://jaketrent.com/post/using-javascript-function-bind/"/>
    <updated>2015-06-26T07:51:00-06:00</updated>
    <id>http://jaketrent.com/post/using-javascript-function-bind</id>
    <content type="html"><![CDATA[<p>JavaScript&#8217;s Function object has a very helpful method, <code>bind</code>.  It is a great tool to give you control of the ever-squirrely <code>this</code> keyword.  Have you ever had trouble predicting what <code>this</code> will be or making equate to what you want?  <code>bind</code> will help you do that with more power and consistency.  It can also help you with partial function application.</p>

<p><img src="http://i.imgur.com/4huM3Xb.jpg" alt="function bind" /></p>

<!--more-->


<h2>The <code>this</code> Keyword</h2>

<p>In JavaScript, what the <code>this</code> keyword refers to changes often.  This can be useful but also unexpected.  Generally <code>this</code>, used within a function, will refer to the context in which that function was called. That calling context might be the global context of <code>window</code> if an event callback is being called in a browser.  That calling context might be an object that contains the function.  For more specific cases, MDN has some <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this">great docs on the variety of contexts referred to by <code>this</code></a>.</p>

<h2>Controlling <code>this</code> with <code>bind</code></h2>

<p>When writing code, I often am thinking of <code>this</code> in the context in which I&#8217;m writing.  In other words, if I&#8217;m writing an object and use the keyword <code>this</code> in a function, I would normally expect <code>this</code> to refer to the object in which I <em>declared</em> the function.  But, again, it is actually the <em>calling</em> context that actually determines the value of <code>this</code>.</p>

<p>To change this default behavior, I can pre-bind the function&#8217;s value of <code>this</code> to a value of my choosing.  This will happen at the time of <em>declaration</em>, which is what I more naturally would expect.</p>

<p>For example, in <a href="http://facebook.github.io/react/">React</a> we write UI components.  In interesting UIs, we&#8217;re often handling events like those that occur with user interaction.  Normally events in the browser are attached to the DOM and are executed in the context of the <code>window</code>.  This being the case, it&#8217;ll be hard for us to create an event handler function in our React Component that can refer back to anything of use in the React Component itself.</p>

<p>As a simple example, we&#8217;ll write a <code>handleClick</code> function that wants to call the Component&#8217;s <code>doLog</code> function for interesting logging:</p>

<figure class='code'><figcaption><span>event-handling.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">MyComponent</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">doLog</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Yay, you clicked!&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">handleClick</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;this is window?&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="k">this</span> <span class="o">==</span> <span class="nb">window</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;this is component?&#39;</span><span class="p">,</span>
</span><span class='line'>               <span class="k">this</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">name</span> <span class="o">==</span> <span class="s1">&#39;MyComponent&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">doLog</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Time</span> <span class="nx">to</span> <span class="nx">start</span> <span class="nx">clicking</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleClick</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">So</span><span class="p">,</span> <span class="nx">click</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">React</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">MyComponent</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jsbin.com/lixayanoso/edit?js,console,output">jsbin of broken state</a></p>

<p>If you click the button, <code>this.doLog</code> is not available as a function.  How could it be?  <code>doLog</code> is defined in <code>MyComponent</code>, not the <code>window</code>, which is the original context in which the event callback is executed.</p>

<p>To fix this, one need only pre-bind the <code>handleClick</code> function.  By changing one line, we can fix this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleClick</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span><span class="o">&gt;</span><span class="nx">So</span><span class="p">,</span> <span class="nx">click</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When this line is executed, it&#8217;s in the <code>MyComponent#render</code> function, thus the <code>MyComponent</code> context.  So <code>this</code>, at that moment, is <code>MyComponent</code>.</p>

<p>The other detail that makes this work is that <code>bind</code> returns a <em>brand new function</em>.  That&#8217;s how the pre-binding works.  So, the <code>onClick</code> prop that gets given to the <code>button</code> is a new function where we have said we want to permanently control the value of <code>this</code> to be whatever we bound it to.</p>

<p><a href="http://jsbin.com/luwoxegopu/edit?js,console,output">jsbin of fixed state</a></p>

<h2>Passing Specific Arguments with <code>bind</code></h2>

<p>Another great reason to use <code>bind</code> is to pass specific arguments to a function.  Just as <code>bind</code> can create new functions where the value of <code>this</code> is pre-determined (bound), <code>bind</code> can pre-fill (ie, partially apply) function arguments on the newly-created function.</p>

<p>It may not be immediately intuitive why one would want to create a function with parameters just to turn around and permanently make it so an argument to the function equals a specific value.  It almost feels like hard-coding a wart-ridden value on something that was previously dynamic and beautiful.  Perhaps an example will help.</p>

<p>Again, to the world of React&#8230;  As in the previous example, we&#8217;ll pass an event handler for a click event.  Notice, just as above, that we&#8217;re passing the function itself (<code>this.handleClick</code> above) instead of the return value of the function (which would look like <code>this.handleClick()</code>).  In this example, we&#8217;ll have several click handlers, each on a list item, where the button will function as a remove button:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">Item</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onRemove</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Rm</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">List</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">items</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">initalItems</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">handleClickRemove</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">clonedItems</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">slice</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">clonedItems</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="nx">items</span><span class="o">:</span> <span class="nx">clonedItems</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">item</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="o">&lt;</span><span class="nx">Item</span> <span class="nx">text</span><span class="o">=</span><span class="p">{</span><span class="nx">item</span><span class="p">}</span> <span class="nx">onRemove</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleClickRemove</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">i</span><span class="p">)}</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">item</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="p">})}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">React</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">List</span> <span class="nx">initalItems</span><span class="o">=</span><span class="p">{[</span><span class="s1">&#39;Do&#39;</span><span class="p">,</span> <span class="s1">&#39;More&#39;</span><span class="p">,</span> <span class="s1">&#39;Reakt&#39;</span><span class="p">]}</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jsbin.com/cinovebasu/edit?js,console,output">A working jsbin</a></p>

<p>In <code>List</code>, we have the event handler, the <code>handleClickRemove</code> function, that takes an <code>index</code> parameter.  In order to make this function work as defined, we are using <code>bind</code> on this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">return</span> <span class="o">&lt;</span><span class="nx">Item</span> <span class="nx">text</span><span class="o">=</span><span class="p">{</span><span class="nx">item</span><span class="p">}</span> <span class="nx">onRemove</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleClickRemove</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">i</span><span class="p">)}</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">item</span><span class="p">}</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This <code>bind</code> call is doing a few things for us:</p>

<ol>
<li>Pre-binding <code>handleClickRemove</code> to the <code>List</code> Component so that <code>this.setState</code> works inside the callback.</li>
<li>Creating a new function that always has <code>i</code> as its first parameter.  Since this line is executed in a loop, <code>i</code> changes.  It will be <code>0</code> for the first item, <code>1</code>, then <code>2</code>.  This is perfect, as we want the first remove button to remove the first item, and so on.</li>
</ol>


<p>Isn&#8217;t that awesome and useful?</p>

<p>So <code>bind</code> can help make <code>this</code> more predictable for you.  It will help you send new functions with pre-filled parameters.  What else have you used <code>bind</code> for?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing React on jsdom]]></title>
    <link href="http://jaketrent.com/post/testing-react-with-jsdom/"/>
    <updated>2015-06-18T07:13:00-06:00</updated>
    <id>http://jaketrent.com/post/testing-react-with-jsdom</id>
    <content type="html"><![CDATA[<p>React allows you to create components that will render UI for your application.  If your UI is of any complexity, you&#8217;ll likely want to test that it functions correctly and allows for future refactors.  There are numerous ways to do this.  One way that you might appreciate is using <a href="https://github.com/tmpvar/jsdom">jsdom</a>, an in-JavaScript implementation of the DOM.</p>

<p><img src="http://i.imgur.com/DXuSNbw.png" alt="react on jsdom" /></p>

<!--more-->


<h2>What is jsdom?</h2>

<p>Jsdom is an in-JavaScript implementation of the DOM.  The DOM is the document object model, which is the tree of nodes that make up the UI for documents shown in web browsers.</p>

<p>Because jsdom is implemented in JavaScript, we can have a DOM-like API to work with without needing a browser.  That means that we don&#8217;t have to capture a browser in order test, a la <a href="http://karma-runner.github.io/">Karma</a>.  That means that we can run our tests in environments without browsers, like in Node or in continuous integration environments.</p>

<p>By not using real browsers, we&#8217;re also essentially saying that we believe the problems in our client JavaScript will not be browser-dependent (again, because we&#8217;re not capturing <em>real</em> browsers).</p>

<h2>jsdom Requirements</h2>

<p>The <a href="https://github.com/tmpvar/jsdom">latest version of jsdom</a>, as of this writing, requires <a href="https://iojs.org/en/index.html">io.js</a> instead of Node to run.  If you&#8217;d like to run in Node.js instead, the <a href="https://github.com/tmpvar/jsdom/tree/3.x">3.x series of jsdom</a> is required.</p>

<p>As <a href="http://thenextweb.com/dd/2015/06/16/node-js-and-io-js-are-settling-their-differences-merging-back-together/">Node and io.js merge in the future</a>, I expect the new versions of jsdom to support the one, unified platform.</p>

<h2>The Test Runner</h2>

<p>In my JavaScript tests, I prefer to use the <a href="http://mochajs.org/">Mocha</a> test runner.  It&#8217;s usable in Node or browser environments.  It has great async test support.  It has the familiar behavior-style syntax of <code>describe</code> and <code>it</code> and all the normal test setup hooks that you like.  Most importantly, it features the Nyan cat test reporter:</p>

<p><img src="http://mochajs.org/images/reporter-nyan.png" alt="nyan cat test reporter" /></p>

<p>Mocha lets you choose your own assertion library.  I like <a href="http://shouldjs.github.io/">should.js</a>.</p>

<p>To install both:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install mocha should --save-dev</span></code></pre></td></tr></table></div></figure>


<h2>Configuring Mocha</h2>

<p>By default, Mocha wants a <code>/test</code> directory in your project root in which to put its configuration and potentially your spec files, depending on how you like to organize your projects:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir test</span></code></pre></td></tr></table></div></figure>


<p>Inside of the <code>/test</code> dir, let&#8217;s <code>vim mocha.opts</code> and give it a place to configure jsdom and our other libs:</p>

<figure class='code'><figcaption><span>mocha.opts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>--require test/utils/dom.js
</span><span class='line'>--require should
</span><span class='line'>--reporter nyan
</span></code></pre></td></tr></table></div></figure>


<p>We have yet to write the <code>test/utils/dom.js</code> file.  We will.  This file includes options for mocha.  Line by line, we&#8217;re saying that before mocha runs tests, we want to load our <code>dom.js</code> config, the <code>should.js</code> library, and specify our reporter as <code>nyan</code>.</p>

<h2>Configuring jsdom</h2>

<p>I&#8217;ve tried to come up with several configurations that will make jsdom work well with my React projects.  This is the best/simplest that I&#8217;ve come up with.  I&#8217;d be interested to hear if you have any suggestions on the approach.</p>

<p>Here&#8217;s the full configuration with explanatory comments inline, as it would appear in <code>test/utils/dom.js</code>:</p>

<figure class='code'><figcaption><span>dom.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">jsdom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;jsdom&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// setup the simplest document possible</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">.</span><span class="nx">jsdom</span><span class="p">(</span><span class="s1">&#39;&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// get the window object out of the document</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">win</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">defaultView</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// set globals for mocha that make access to document and window feel </span>
</span><span class='line'><span class="c1">// natural in the test environment</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nb">document</span> <span class="o">=</span> <span class="nx">doc</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nb">window</span> <span class="o">=</span> <span class="nx">win</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// take all properties of the window object and also attach it to the </span>
</span><span class='line'><span class="c1">// mocha global object</span>
</span><span class='line'><span class="nx">propagateToGlobal</span><span class="p">(</span><span class="nx">win</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// from mocha-jsdom https://github.com/rstacruz/mocha-jsdom/blob/master/index.js#L80</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">propagateToGlobal</span> <span class="p">(</span><span class="nb">window</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">in</span> <span class="nb">window</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">window</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">key</span><span class="p">))</span> <span class="k">continue</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">key</span> <span class="k">in</span> <span class="nx">global</span><span class="p">)</span> <span class="k">continue</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">global</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reason that we want to attach all the <code>window</code> properties to the mocha <code>global</code> object is because developers often write code that is meant for the browser without explicitly using the global environment object.  For instance, in React the developers write:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;Chrome&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>instead of:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;Chrome&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Withing taking <code>window.navigator</code> and putting it on <code>global.navigator</code>, you&#8217;d get an error like this when running your tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">ReferenceError</span><span class="o">:</span> <span class="nx">navigator</span> <span class="nx">is</span> <span class="nx">not</span> <span class="nx">defined</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The React Test</h2>

<p>You are now ready to render React components into a document in your tests.  The document will be provided by jsdom.  You don&#8217;t need a browser environment to run this.</p>

<figure class='code'><figcaption><span>mycomponent.spec.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react/addons&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">should</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;should&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">TestUtils</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">addons</span><span class="p">.</span><span class="nx">TestUtils</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="c1">// a React.Component with a &lt;button/&gt; ...</span>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;MyComponent&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;has button that fires a dom event for click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">handleClick</span><span class="p">()</span> <span class="p">{</span> <span class="nx">done</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">detachedComp</span> <span class="o">=</span> <span class="nx">TestUtils</span><span class="p">.</span><span class="nx">renderIntoDocument</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">MyComponent</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">handleClick</span><span class="p">}</span><span class="o">/&gt;</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">button</span> <span class="o">=</span> <span class="nx">TestUtils</span><span class="p">.</span><span class="nx">findRenderedDOMComponentWithTag</span><span class="p">(</span><span class="nx">detachedComp</span><span class="p">,</span> <span class="s1">&#39;button&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">buttonNode</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">findDOMNode</span><span class="p">(</span><span class="nx">button</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">should</span><span class="p">.</span><span class="nx">exist</span><span class="p">(</span><span class="nx">buttonNode</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">TestUtils</span><span class="p">.</span><span class="nx">Simulate</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="nx">buttonNode</span><span class="p">)</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>To run mocha with the configuration above, I like to add an npm script in <code>package.json</code>:</p>

<figure class='code'><figcaption><span>package.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>     <span class="nt">&quot;test&quot;</span><span class="p">:</span> <span class="s2">&quot;mocha test/**/*.spec.js&quot;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>


<p>Write the source to satisfy your test, and the lights should go green.  Your DOM is happy.  Your test is happy.</p>

<p>Does it work well for you?  How might you improve on it?  Enjoy testing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pushState with webpack-dev-server]]></title>
    <link href="http://jaketrent.com/post/pushstate-webpack-dev-server/"/>
    <updated>2015-05-20T07:17:00-06:00</updated>
    <id>http://jaketrent.com/post/pushstate-webpack-dev-server</id>
    <content type="html"><![CDATA[<p>Webpack has a jolly little server for your development environment called <a href="http://webpack.github.io/docs/webpack-dev-server.html"><code>webpack-dev-server</code></a>.  With a touch of configuration, it can be convinced to handle JavaScript history API pushState.</p>

<p><img src="http://i.imgur.com/x0m2sTq.jpg" alt="webpack" /></p>

<!--more-->


<h2>webpack-dev-server</h2>

<p>Webpack is fast.  But once you have a growing number of static assets to process and a increasily-complex asset pipeline, you may wish for a faster build lifecycle in development mode.  <a href="http://webpack.github.io/docs/webpack-dev-server.html"><code>webpack-dev-server</code></a> was created for such a purpose.</p>

<p>It is a small <code>express</code> app that handles building your assets according to your webpack configuration, keeping them in memory, and doing so automatically as you change your source files.</p>

<h2>html-webpack-plugin</h2>

<p>In addition to webpack taking care of static assets like css and js for me, in dev mode I&#8217;ll often include the <a href="https://www.npmjs.com/package/html-webpack-plugin"><code>html-webpack-plugin</code></a>.</p>

<p>This plugin generates an <code>index.html</code> file for you that will keep up to date with the correct references to your assets built inside of <code>webpack-dev-server</code>.  Use of this plugin is perfect in situations where you&#8217;re building a client-side app that just needs a single html file to bootstrap on top of.</p>

<h2>History API</h2>

<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history#Adding_and_modifying_history_entries">history API</a> allows the browser to locally handle url changes that would usually signal a need to go back to the server for resources.  This allows client-side apps to include routers that can navigate from urls like <code>http://localhost:3000/one-place</code> to <code>http://localhost:3000/another</code> instead of having to use the url hash (eg, <code>http://localhost:3000#/one-place</code>).</p>

<h2>All routes to <code>index.html</code></h2>

<p>By default, <code>webpack-dev-server</code> is setup to serve assets directly from the http requests received.  For instance, if my <code>webpack-dev-server</code> was running on port <code>3000</code>, and my <code>webpack.config.js</code> was setup so that I was building a <code>main.js</code> for my application, I could make a request to get that build asset via <code>http://localhost:3000/main.js</code>.</p>

<p>Likewise, if I&#8217;m using the <code>html-webpack-plugin</code>, I can make a request to <code>http://localhost:3000/</code> to get my <code>index.html</code> file, which contains the <code>script</code> tag to bootstrap my app &#8211; again, likely something like <code>main.js</code>.</p>

<p>But if my app has a client-side router that is using the history API, how do I get <code>webpack-dev-server</code> to differentiate a client-side route from an asset request to <code>http://localhost:3000</code>?</p>

<h2><code>historyApiFallback</code> Option</h2>

<p>It turns out that we&#8217;re in luck.  <code>webpack-dev-server</code> includes a useful option named <code>historyApiFallback</code>.  If this boolean flag is set to true, all requests to the <code>webpack-dev-server</code> that do not map to an existing asset will instead by routed straight to <code>/</code>, that is, the <code>index.html</code> file.</p>

<p>This is exactly what we want.  If we want more customization in the fallback routes, we can specify that as well.  Internally, <code>webpack-dev-server</code> uses <a href="https://github.com/bripkens/connect-history-api-fallback"><code>connect-history-api-fallback</code></a> which takes several options.</p>

<p>These options include overriding the name of the index file or rerouting certain request url patterns to different html files in the case you have multiples.  These options can be set by passing an object to <code>historyApiFallback</code> instead of a boolean flag.</p>

<p>Finally, in order to not have to type this every time you want to run the <code>webpack-dev-server</code> cli, you can specify all of these options in the <code>webpack-config.js</code> under the <code>devServer</code> attribute.</p>

<p>The simple example looks like:</p>

<figure class='code'><figcaption><span>webpack-config.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>  <span class="nx">devServer</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">port</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">historyApiFallback</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A more complex example might look something like:</p>

<figure class='code'><figcaption><span>webpack-config.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>  <span class="nx">devServer</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">port</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">historyApiFallback</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">index</span><span class="o">:</span> <span class="s1">&#39;default.html&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">rewrites</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span> <span class="nx">from</span><span class="o">:</span> <span class="sr">/\/soccer/</span><span class="p">,</span> <span class="nx">to</span><span class="o">:</span> <span class="s1">&#39;/soccer.html&#39;</span><span class="p">}</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Given the above configuration, routes like <code>/one-place</code> and <code>/another</code> would go to <code>/</code>, which is backed by the <code>default.html</code> markup.  Routes like <code>/soccer/schedule</code> or <code>/soccer/games/123</code> would go to <code>soccer.html</code>.</p>

<p>So, you don&#8217;t need to write your own proxy.  The option is built in for you.  webpack excites again!</p>

<p>What other things have you been surprised that webpack already does for you?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Power of Liking]]></title>
    <link href="http://jaketrent.com/post/the-power-of-liking/"/>
    <updated>2015-04-23T21:50:00-06:00</updated>
    <id>http://jaketrent.com/post/the-power-of-liking</id>
    <content type="html"><![CDATA[<p>When there is a new software product to write, there&#8217;s a decision to be made on what to write it in.  In other words, what tech should we use?  Technologists have technology they &#8220;like&#8221;.  So then, what tech should they choose for the new project?  Does it matter what they like?</p>

<p><img src="http://i.imgur.com/HmNq6Xz.jpg" alt="Like!" /></p>

<!--more-->


<h2>We Like Different Tech</h2>

<p>Obviously, there are differences in people&#8217;s opinions.  Take a look at one current hot arena: in-browser MV* JavaScript frameworks.  They essentially are all made for the same purpose.  And years of different approaches and techs have been taken before each of them.</p>

<p>They have many stylistic and substantive differences.  There are many acolytes assembled in each camp.  Each likes what they have.  Differences are real and perceived.  They&#8217;re here to stay.  That&#8217;s ok and probably better than ok.</p>

<h2>On the Origins of Liking</h2>

<p>Different people have different reasons for liking certain things.  Just like the subject of the liking, the origins of liking can be stylistic or substantive.</p>

<p>Perhaps they have a long, storied background in a tech and want to cash in on their investment in the future.  Perhaps they had good experiences with successfully shipping product in the past in certain tech and bad experiences in others.  Perhaps the public perception and community uptake around a tech excites them to join in the merriment.</p>

<p>They may, in fact, be drawn to something quite superficial &#8211; something as unaffecting the actual tech as liking the tech project&#8217;s logo.  More substantively, perhaps they&#8217;ve grown to like a tech after trying it out on a problem space and discovering and predicting great payoffs as they develop a particular product.</p>

<h2>Of Course, Like the Product</h2>

<p>If you like your product and you&#8217;re good at creating and supporting a product, of course you won&#8217;t choose a tech for just the tech&#8217;s sake.  You can do that inside your own github account.  There is time and space to simply explore tech as a technologist.  Here there are real products to ship to support great causes in real companies.</p>

<p>I believe that choosing a tech should support the main goal of delivering value via an experience or service in software to real people.  I also believe that there is a power in liking a tech as the product creator.  Can we have both?  Often, I believe we can.</p>

<h2>OK to Like</h2>

<p>When is it appropriate to use a tech you want to write in?  There are insufficient blogosphere bits to enumerate all the permutations of appropriateness and inappropriateness factors.  You will need to use your judgement.  Often these issues are complicated in deciding how to support a product.  Believing that your personal desires have a place in product tech decisions, should what you like seem very complicated to you?</p>

<p>I would ask, &#8220;What&#8217;s the alternative writing software in something you like?   Writing a product in a tech you <em>don&#8217;t</em> want to write in?&#8221;  And why would you do that?</p>

<p>Sometimes I think we almost lead ourselves to think that something we don&#8217;t like to write in must have some power to do us good.  How, we&#8217;re not sure.  But just as our parents told us the veggies on our plates were good all those years ago, perhaps some tech austerity measure might do us some good now, right?</p>

<p>Is a bad taste required for health?  Choosing the disliked option doesn&#8217;t necessarily mean that the outcome will be better just because it feels more responsible.</p>

<h2>The Advantage of Liking</h2>

<p>Are there advantages to writing in a tech you like?  Probably, yes.  And probably disadvantages, I&#8217;m sure.  Again, this isn&#8217;t meant to over simplify one&#8217;s analysis of tech options and problem fit.  Separate and in addition to that, what are the advantages of writing in something you like?</p>

<p>An advantage is that you must already have some level of mastery in the tech you like.  I don&#8217;t think you&#8217;ll like things that you aren&#8217;t terribly good at.  You don&#8217;t have as much of a sense of accomplishment with those.  You have a strength in some tech that you can offer your company and your team.  You should play to that and use it to your advantage.  That&#8217;s what you, your leader, your team, and your customers want &#8211; your best productivity.</p>

<p>If you&#8217;re a software creator, it&#8217;s likely that a good portion of your day is writing code for your product.  If you like the everyday experience, focus and flow time will come more easily to you.  You&#8217;ll be able to dig deep into your time and energy more easily to muster extra effort when needed.  The extra mile will not seem so laborious to you.</p>

<h2>Like More Than the Tech</h2>

<p>There is a lot of tech and a lot of product to be experienced out there.  It&#8217;s likely that you&#8217;ll be writing in a tech that you don&#8217;t fully like soon if you haven&#8217;t already.  There are many reasons to be a part of a software project beyond the tech.  It will be stabilizing and satisfying for you to find extra facets of your project to like.</p>

<p>Like the team you work with.  Like the people you work for.  Like the purpose and aim of your company.  Like the product you&#8217;re making.  Like the values you&#8217;re living by.  Like the impact you&#8217;re making.  Like the relationships you&#8217;re building.  Like the skills you&#8217;re gaining.</p>

<p>And if you have the choice &#8211; and we all do to one degree or another &#8211; why not like the tech you&#8217;re using!</p>
]]></content>
  </entry>
  
</feed>
