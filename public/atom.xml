<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jake Trent]]></title>
  <link href="http://jaketrent.com/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2015-06-18T08:00:45-06:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing React on jsdom]]></title>
    <link href="http://jaketrent.com/post/testing-react-with-jsdom/"/>
    <updated>2015-06-18T07:13:00-06:00</updated>
    <id>http://jaketrent.com/post/testing-react-with-jsdom</id>
    <content type="html"><![CDATA[<p>React allows you to create components that will render UI for your application.  If your UI is of any complexity, you&#8217;ll likely want to test that it functions correctly and allows for future refactors.  There are numerous ways to do this.  One way that you might appreciate is using <a href="https://github.com/tmpvar/jsdom">jsdom</a>, an in-JavaScript implementation of the DOM.</p>

<p><img src="http://i.imgur.com/DXuSNbw.png" alt="react on jsdom" /></p>

<!--more-->


<h2>What is jsdom?</h2>

<p>Jsdom is an in-JavaScript implementation of the DOM.  The DOM is the document object model, which is the tree of nodes that make up the UI for documents shown in web browsers.</p>

<p>Because jsdom is implemented in JavaScript, we can have a DOM-like API to work with without needing a browser.  That means that we don&#8217;t have to capture a browser in order test, a la <a href="http://karma-runner.github.io/">Karma</a>.  That means that we can run our tests in environments without browsers, like in Node or in continuous integration environments.</p>

<p>By not using real browsers, we&#8217;re also essentially saying that we believe the problems in our client JavaScript will not be browser-dependent (again, because we&#8217;re not capturing <em>real</em> browsers).</p>

<h2>jsdom Requirements</h2>

<p>The <a href="https://github.com/tmpvar/jsdom">latest version of jsdom</a>, as of this writing, requires <a href="https://iojs.org/en/index.html">io.js</a> instead of Node to run.  If you&#8217;d like to run in Node.js instead, the <a href="https://github.com/tmpvar/jsdom/tree/3.x">3.x series of jsdom</a> is required.</p>

<p>As <a href="http://thenextweb.com/dd/2015/06/16/node-js-and-io-js-are-settling-their-differences-merging-back-together/">Node and io.js merge in the future</a>, I expect the new versions of jsdom to support the one, unified platform.</p>

<h2>The Test Runner</h2>

<p>In my JavaScript tests, I prefer to use the <a href="http://mochajs.org/">Mocha</a> test runner.  It&#8217;s usable in Node or browser environments.  It has great async test support.  It has the familiar behavior-style syntax of <code>describe</code> and <code>it</code> and all the normal test setup hooks that you like.  Most importantly, it features the Nyan cat test reporter:</p>

<p><img src="http://mochajs.org/images/reporter-nyan.png" alt="nyan cat test reporter" /></p>

<p>Mocha lets you choose your own assertion library.  I like <a href="http://shouldjs.github.io/">should.js</a>.</p>

<p>To install both:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install mocha should --save-dev</span></code></pre></td></tr></table></div></figure>


<h2>Configuring Mocha</h2>

<p>By default, Mocha wants a <code>/test</code> directory in your project root in which to put its configuration and potentially your spec files, depending on how you like to organize your projects:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir test</span></code></pre></td></tr></table></div></figure>


<p>Inside of the <code>/test</code> dir, let&#8217;s <code>vim mocha.opts</code> and give it a place to configure jsdom and our other libs:</p>

<figure class='code'><figcaption><span>mocha.opts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>--require test/utils/dom.js
</span><span class='line'>--require should
</span><span class='line'>--reporter nyan
</span></code></pre></td></tr></table></div></figure>


<p>We have yet to write the <code>test/utils/dom.js</code> file.  We will.  This file includes options for mocha.  Line by line, we&#8217;re saying that before mocha runs tests, we want to load our <code>dom.js</code> config, the <code>should.js</code> library, and specify our reporter as <code>nyan</code>.</p>

<h2>Configuring jsdom</h2>

<p>I&#8217;ve tried to come up with several configurations that will make jsdom work well with my React projects.  This is the best/simplest that I&#8217;ve come up with.  I&#8217;d be interested to hear if you have any suggestions on the approach.</p>

<p>Here&#8217;s the full configuration with explanatory comments inline, as it would appear in <code>test/utils/dom.js</code>:</p>

<figure class='code'><figcaption><span>dom.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">jsdom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;jsdom&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// setup the simplest document possible</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">.</span><span class="nx">jsdom</span><span class="p">(</span><span class="s1">&#39;&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// get the window object out of the document</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">win</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">defaultView</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// set globals for mocha that make access to document and window feel </span>
</span><span class='line'><span class="c1">// natural in the test environment</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nb">document</span> <span class="o">=</span> <span class="nx">doc</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nb">window</span> <span class="o">=</span> <span class="nx">win</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// take all properties of the window object and also attach it to the </span>
</span><span class='line'><span class="c1">// mocha global object</span>
</span><span class='line'><span class="nx">propagateToGlobal</span><span class="p">(</span><span class="nx">win</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// from mocha-jsdom https://github.com/rstacruz/mocha-jsdom/blob/master/index.js#L80</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">propagateToGlobal</span> <span class="p">(</span><span class="nb">window</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">in</span> <span class="nb">window</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">window</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">key</span><span class="p">))</span> <span class="k">continue</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">key</span> <span class="k">in</span> <span class="nx">global</span><span class="p">)</span> <span class="k">continue</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">global</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reason that we want to attach all the <code>window</code> properties to the mocha <code>global</code> object is because developers often write code that is meant for the browser without explicitly using the global environment object.  For instance, in React the developers write:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;Chrome&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>instead of:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;Chrome&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Withing taking <code>window.navigator</code> and putting it on <code>global.navigator</code>, you&#8217;d get an error like this when running your tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">ReferenceError</span><span class="o">:</span> <span class="nx">navigator</span> <span class="nx">is</span> <span class="nx">not</span> <span class="nx">defined</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The React Test</h2>

<p>You are now ready to render React components into a document in your tests.  The document will be provided by jsdom.  You don&#8217;t need a browser environment to run this.</p>

<figure class='code'><figcaption><span>mycomponent.spec.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react/addons&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">should</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;should&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">TestUtils</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">addons</span><span class="p">.</span><span class="nx">TestUtils</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="c1">// a React.Component with a &lt;button/&gt; ...</span>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;MyComponent&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;has button that fires a dom event for click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">handleClick</span><span class="p">()</span> <span class="p">{</span> <span class="nx">done</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">detachedComp</span> <span class="o">=</span> <span class="nx">TestUtils</span><span class="p">.</span><span class="nx">renderIntoDocument</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">MyComponent</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">handleClick</span><span class="p">}</span><span class="o">/&gt;</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">button</span> <span class="o">=</span> <span class="nx">TestUtils</span><span class="p">.</span><span class="nx">findRenderedDOMComponentWithTag</span><span class="p">(</span><span class="nx">detachedComp</span><span class="p">,</span> <span class="s1">&#39;button&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">buttonNode</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">findDOMNode</span><span class="p">(</span><span class="nx">button</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">should</span><span class="p">.</span><span class="nx">exist</span><span class="p">(</span><span class="nx">buttonNode</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">TestUtils</span><span class="p">.</span><span class="nx">Simulate</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="nx">buttonNode</span><span class="p">)</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>To run mocha with the configuration above, I like to add an npm script in <code>package.json</code>:</p>

<figure class='code'><figcaption><span>package.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>     <span class="nt">&quot;test&quot;</span><span class="p">:</span> <span class="s2">&quot;mocha test/**/*.spec.js&quot;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>


<p>Write the source to satisfy your test, and the lights should go green.  Your DOM is happy.  Your test is happy.</p>

<p>Does it work well for you?  How might you improve on it?  Enjoy testing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pushState with webpack-dev-server]]></title>
    <link href="http://jaketrent.com/post/pushstate-webpack-dev-server/"/>
    <updated>2015-05-20T07:17:00-06:00</updated>
    <id>http://jaketrent.com/post/pushstate-webpack-dev-server</id>
    <content type="html"><![CDATA[<p>Webpack has a jolly little server for your development environment called <a href="http://webpack.github.io/docs/webpack-dev-server.html"><code>webpack-dev-server</code></a>.  With a touch of configuration, it can be convinced to handle JavaScript history API pushState.</p>

<p><img src="http://i.imgur.com/x0m2sTq.jpg" alt="webpack" /></p>

<!--more-->


<h2>webpack-dev-server</h2>

<p>Webpack is fast.  But once you have a growing number of static assets to process and a increasily-complex asset pipeline, you may wish for a faster build lifecycle in development mode.  <a href="http://webpack.github.io/docs/webpack-dev-server.html"><code>webpack-dev-server</code></a> was created for such a purpose.</p>

<p>It is a small <code>express</code> app that handles building your assets according to your webpack configuration, keeping them in memory, and doing so automatically as you change your source files.</p>

<h2>html-webpack-plugin</h2>

<p>In addition to webpack taking care of static assets like css and js for me, in dev mode I&#8217;ll often include the <a href="https://www.npmjs.com/package/html-webpack-plugin"><code>html-webpack-plugin</code></a>.</p>

<p>This plugin generates an <code>index.html</code> file for you that will keep up to date with the correct references to your assets built inside of <code>webpack-dev-server</code>.  Use of this plugin is perfect in situations where you&#8217;re building a client-side app that just needs a single html file to bootstrap on top of.</p>

<h2>History API</h2>

<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history#Adding_and_modifying_history_entries">history API</a> allows the browser to locally handle url changes that would usually signal a need to go back to the server for resources.  This allows client-side apps to include routers that can navigate from urls like <code>http://localhost:3000/one-place</code> to <code>http://localhost:3000/another</code> instead of having to use the url hash (eg, <code>http://localhost:3000#/one-place</code>).</p>

<h2>All routes to <code>index.html</code></h2>

<p>By default, <code>webpack-dev-server</code> is setup to serve assets directly from the http requests received.  For instance, if my <code>webpack-dev-server</code> was running on port <code>3000</code>, and my <code>webpack.config.js</code> was setup so that I was building a <code>main.js</code> for my application, I could make a request to get that build asset via <code>http://localhost:3000/main.js</code>.</p>

<p>Likewise, if I&#8217;m using the <code>html-webpack-plugin</code>, I can make a request to <code>http://localhost:3000/</code> to get my <code>index.html</code> file, which contains the <code>script</code> tag to bootstrap my app &#8211; again, likely something like <code>main.js</code>.</p>

<p>But if my app has a client-side router that is using the history API, how do I get <code>webpack-dev-server</code> to differentiate a client-side route from an asset request to <code>http://localhost:3000</code>?</p>

<h2><code>historyApiFallback</code> Option</h2>

<p>It turns out that we&#8217;re in luck.  <code>webpack-dev-server</code> includes a useful option named <code>historyApiFallback</code>.  If this boolean flag is set to true, all requests to the <code>webpack-dev-server</code> that do not map to an existing asset will instead by routed straight to <code>/</code>, that is, the <code>index.html</code> file.</p>

<p>This is exactly what we want.  If we want more customization in the fallback routes, we can specify that as well.  Internally, <code>webpack-dev-server</code> uses <a href="https://github.com/bripkens/connect-history-api-fallback"><code>connect-history-api-fallback</code></a> which takes several options.</p>

<p>These options include overriding the name of the index file or rerouting certain request url patterns to different html files in the case you have multiples.  These options can be set by passing an object to <code>historyApiFallback</code> instead of a boolean flag.</p>

<p>Finally, in order to not have to type this every time you want to run the <code>webpack-dev-server</code> cli, you can specify all of these options in the <code>webpack-config.js</code> under the <code>devServer</code> attribute.</p>

<p>The simple example looks like:</p>

<figure class='code'><figcaption><span>webpack-config.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>  <span class="nx">devServer</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">port</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">historyApiFallback</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A more complex example might look something like:</p>

<figure class='code'><figcaption><span>webpack-config.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>  <span class="nx">devServer</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">port</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">historyApiFallback</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">index</span><span class="o">:</span> <span class="s1">&#39;default.html&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">rewrites</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span> <span class="nx">from</span><span class="o">:</span> <span class="sr">/\/soccer/</span><span class="p">,</span> <span class="nx">to</span><span class="o">:</span> <span class="s1">&#39;/soccer.html&#39;</span><span class="p">}</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Given the above configuration, routes like <code>/one-place</code> and <code>/another</code> would go to <code>/</code>, which is backed by the <code>default.html</code> markup.  Routes like <code>/soccer/schedule</code> or <code>/soccer/games/123</code> would go to <code>soccer.html</code>.</p>

<p>So, you don&#8217;t need to write your own proxy.  The option is built in for you.  webpack excites again!</p>

<p>What other things have you been surprised that webpack already does for you?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Power of Liking]]></title>
    <link href="http://jaketrent.com/post/the-power-of-liking/"/>
    <updated>2015-04-23T21:50:00-06:00</updated>
    <id>http://jaketrent.com/post/the-power-of-liking</id>
    <content type="html"><![CDATA[<p>When there is a new software product to write, there&#8217;s a decision to be made on what to write it in.  In other words, what tech should we use?  Technologists have technology they &#8220;like&#8221;.  So then, what tech should they choose for the new project?  Does it matter what they like?</p>

<p><img src="http://i.imgur.com/HmNq6Xz.jpg" alt="Like!" /></p>

<!--more-->


<h2>We Like Different Tech</h2>

<p>Obviously, there are differences in people&#8217;s opinions.  Take a look at one current hot arena: in-browser MV* JavaScript frameworks.  They essentially are all made for the same purpose.  And years of different approaches and techs have been taken before each of them.</p>

<p>They have many stylistic and substantive differences.  There are many acolytes assembled in each camp.  Each likes what they have.  Differences are real and perceived.  They&#8217;re here to stay.  That&#8217;s ok and probably better than ok.</p>

<h2>On the Origins of Liking</h2>

<p>Different people have different reasons for liking certain things.  Just like the subject of the liking, the origins of liking can be stylistic or substantive.</p>

<p>Perhaps they have a long, storied background in a tech and want to cash in on their investment in the future.  Perhaps they had good experiences with successfully shipping product in the past in certain tech and bad experiences in others.  Perhaps the public perception and community uptake around a tech excites them to join in the merriment.</p>

<p>They may, in fact, be drawn to something quite superficial &#8211; something as unaffecting the actual tech as liking the tech project&#8217;s logo.  More substantively, perhaps they&#8217;ve grown to like a tech after trying it out on a problem space and discovering and predicting great payoffs as they develop a particular product.</p>

<h2>Of Course, Like the Product</h2>

<p>If you like your product and you&#8217;re good at creating and supporting a product, of course you won&#8217;t choose a tech for just the tech&#8217;s sake.  You can do that inside your own github account.  There is time and space to simply explore tech as a technologist.  Here there are real products to ship to support great causes in real companies.</p>

<p>I believe that choosing a tech should support the main goal of delivering value via an experience or service in software to real people.  I also believe that there is a power in liking a tech as the product creator.  Can we have both?  Often, I believe we can.</p>

<h2>OK to Like</h2>

<p>When is it appropriate to use a tech you want to write in?  There are insufficient blogosphere bits to enumerate all the permutations of appropriateness and inappropriateness factors.  You will need to use your judgement.  Often these issues are complicated in deciding how to support a product.  Believing that your personal desires have a place in product tech decisions, should what you like seem very complicated to you?</p>

<p>I would ask, &#8220;What&#8217;s the alternative writing software in something you like?   Writing a product in a tech you <em>don&#8217;t</em> want to write in?&#8221;  And why would you do that?</p>

<p>Sometimes I think we almost lead ourselves to think that something we don&#8217;t like to write in must have some power to do us good.  How, we&#8217;re not sure.  But just as our parents told us the veggies on our plates were good all those years ago, perhaps some tech austerity measure might do us some good now, right?</p>

<p>Is a bad taste required for health?  Choosing the disliked option doesn&#8217;t necessarily mean that the outcome will be better just because it feels more responsible.</p>

<h2>The Advantage of Liking</h2>

<p>Are there advantages to writing in a tech you like?  Probably, yes.  And probably disadvantages, I&#8217;m sure.  Again, this isn&#8217;t meant to over simplify one&#8217;s analysis of tech options and problem fit.  Separate and in addition to that, what are the advantages of writing in something you like?</p>

<p>An advantage is that you must already have some level of mastery in the tech you like.  I don&#8217;t think you&#8217;ll like things that you aren&#8217;t terribly good at.  You don&#8217;t have as much of a sense of accomplishment with those.  You have a strength in some tech that you can offer your company and your team.  You should play to that and use it to your advantage.  That&#8217;s what you, your leader, your team, and your customers want &#8211; your best productivity.</p>

<p>If you&#8217;re a software creator, it&#8217;s likely that a good portion of your day is writing code for your product.  If you like the everyday experience, focus and flow time will come more easily to you.  You&#8217;ll be able to dig deep into your time and energy more easily to muster extra effort when needed.  The extra mile will not seem so laborious to you.</p>

<h2>Like More Than the Tech</h2>

<p>There is a lot of tech and a lot of product to be experienced out there.  It&#8217;s likely that you&#8217;ll be writing in a tech that you don&#8217;t fully like soon if you haven&#8217;t already.  There are many reasons to be a part of a software project beyond the tech.  It will be stabilizing and satisfying for you to find extra facets of your project to like.</p>

<p>Like the team you work with.  Like the people you work for.  Like the purpose and aim of your company.  Like the product you&#8217;re making.  Like the values you&#8217;re living by.  Like the impact you&#8217;re making.  Like the relationships you&#8217;re building.  Like the skills you&#8217;re gaining.</p>

<p>And if you have the choice &#8211; and we all do to one degree or another &#8211; why not like the tech you&#8217;re using!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[List Npm Scripts]]></title>
    <link href="http://jaketrent.com/post/list-npm-scripts/"/>
    <updated>2015-03-02T07:44:00-07:00</updated>
    <id>http://jaketrent.com/post/list-npm-scripts</id>
    <content type="html"><![CDATA[<p>Tools for storing and then later easily running scripts alias names are awesome.  Npm is one of those tools.  Rake is another.  Rake has a cool feature of allowing you to list the scripts available to you.  Npm has not &#8211; until now.</p>

<p><img src="http://i.imgur.com/ZDCd9u1.png" alt="npm" /></p>

<!--more-->


<h2>Npm Scripts</h2>

<p>You can specify scripts in your <code>package.json</code> for later use.  They go in the <code>scripts</code> attribute:</p>

<figure class='code'><figcaption><span>package.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;start&quot;</span><span class="p">:</span> <span class="s2">&quot;node server.js&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;dist&quot;</span><span class="p">:</span> <span class="s2">&quot;webpack -p&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To run these scripts, you use the <a href="https://docs.npmjs.com/cli/run-script"><code>npm run</code></a> command.  For example, type <code>npm run build</code> to actually execute the <code>webpack -p</code> command in your terminal.  <code>start</code> and <code>test</code> are specially commands to npm and do not require <code>run</code>.  Instead, you can use <code>npm start</code>.</p>

<h2>Npm List Scripts</h2>

<p>In Rake, you run <code>rake -T</code> in your terminal and all the available scripts for your project are displayed.  This allows you to see the what&#8217;s potentially helpful.  You can&#8217;t be expected to remember all of them, especially months later, right?</p>

<p>I certainly was having a hard time remembering all of my scripts and getting tired of typing <code>cat package.json</code>.  It didn&#8217;t feel as cool as the <code>rake -T</code> experience.  I wrote a library called <a href="https://www.npmjs.com/package/npm-ls-scripts"><code>npm-ls-scripts</code></a>.  To install, run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install npm-ls-scripts -g
</span></code></pre></td></tr></table></div></figure>


<p>I like installing this package globally because then the CLI binary is available globally &#8211; it does seem applicable to all projects.  You could instead include it under project <code>devDependencies</code> if you&#8217;d like.</p>

<p>If installed globally, you can then run it with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ls-scripts
</span></code></pre></td></tr></table></div></figure>


<p>If I was to run this in the above project, it would print:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>NPM - ls scripts
</span><span class='line'>---
</span><span class='line'>start - node server.js
</span><span class='line'>dist - webpack -p
</span><span class='line'>---
</span></code></pre></td></tr></table></div></figure>


<p>This prints the exact code that can be executed for each script.  If I would like to add some prose around any or all of the available scripts, I can do so by adding more config data to my <code>package.json</code> that will print when I run <code>ls-scripts</code>:</p>

<figure class='code'><figcaption><span>package.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;config&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;scripts: {</span>
</span><span class='line'><span class="nt">       &quot;</span><span class="err">dist</span><span class="s2">&quot;: &quot;</span><span class="err">Builds</span> <span class="err">project</span> <span class="err">for</span> <span class="err">distribution&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if I were to run the <code>ls-scripts</code> command, I would see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>NPM - ls scripts
</span><span class='line'>---
</span><span class='line'>start - node server.js
</span><span class='line'>dist - Builds project <span class="k">for </span>distribution
</span><span class='line'>---
</span></code></pre></td></tr></table></div></figure>


<p>Cool, right?  Complete with Shakespearean prose.</p>

<h2>New: Npm Run</h2>

<p>After I had developed the above <code>npm-ls-scripts</code> tool, Npm built this feature natively into the core tool &#8211; finally!  Now, to list available scripts, the command is intuitively to leave off the target script and instead simply type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm run
</span></code></pre></td></tr></table></div></figure>


<p>On the above example, this would yield:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Available scripts in the package:
</span><span class='line'>  start
</span><span class='line'>    node server.js
</span><span class='line'>  dist
</span><span class='line'>    webpack -p
</span></code></pre></td></tr></table></div></figure>


<p>So, they work about the same, and now it&#8217;s built in!  What other cool features could you imagine this having?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["12-Factor App" Summary]]></title>
    <link href="http://jaketrent.com/post/12-factor-app-summary/"/>
    <updated>2015-02-28T16:20:00-07:00</updated>
    <id>http://jaketrent.com/post/12-factor-app-summary</id>
    <content type="html"><![CDATA[<p>I recently had a chance to go through the principles of the 12-Factor App as listed on <a href="http://12factor.net/">12factor.net</a>.  It&#8217;s written by some of the fine folk at Heroku.  The principles describe the best practices they see for how to get a modern web app deployed properly.  It&#8217;s a short read.  This summary is even shorter.</p>

<p><img src="http://i.imgur.com/8aY0qiD.jpg" alt="12 Factors" /></p>

<!--more-->


<h5>1. Codebase</h5>

<ul>
<li>Always in src ctrl</li>
<li>One codebase per app (many repos = distributed system)</li>
<li>A deploy = instance of app running</li>
</ul>


<h5>2. Dependencies</h5>

<ul>
<li>All app and system dependencies explicitly declared</li>
<li>Do not dep on implicit existence of system tools (eg, ImageMagick)</li>
<li>Required sys tools vendored into app</li>
</ul>


<h5>3. Config</h5>

<ul>
<li>Strict separation between code and config</li>
<li>Config stored in env vars</li>
</ul>


<h5>4. Backing Services</h5>

<ul>
<li>Should be loosely coupled, swappable</li>
<li>Changes in services (eg, db) should not require code change</li>
</ul>


<h5>5. Build, release, run</h5>

<ul>
<li>Strict separation: build (binary), release (binary + env config), run (exec runtime)</li>
<li>Ordered &#8211; can&#8217;t make change upstream</li>
<li>Every release has unique id</li>
</ul>


<h5>6. Processes</h5>

<ul>
<li>Independent, stateless, share nothing</li>
<li>Sharing happens in backing service (eg, db)</li>
<li>No sticky sessions w/ process affinity</li>
</ul>


<h5>7. Port Binding</h5>

<ul>
<li>Can talk a protocol (eg, HTTP) by binding comm to a port</li>
<li>Allows an app to become a backing service for another app via a url</li>
<li>What does the alternative look like here?  Seems like a given.</li>
</ul>


<h5>8. Concurrency</h5>

<ul>
<li>Process is first-class citizen patterned after unix service daemons</li>
<li>Process can multiplex internally (eg, threads or something like node.js)</li>
<li>Scaling becomes a simple addition of the same process</li>
</ul>


<h5>9. Disposability</h5>

<ul>
<li>Startups are fast</li>
<li>Requests are short</li>
<li>Shutdowns are graceful; requests can finish; jobs returned to queue</li>
</ul>


<h5>10. Dev/Prod Parity</h5>

<ul>
<li>Time from dev to prod deploy should be short (eg, hrs)</li>
<li>Devs who wrote the code should be around to op the code</li>
<li>Toolchains and tech stacks should be as similar as possible</li>
<li>Backing servies should be the same, even if adapters supposedly abstract implementations</li>
</ul>


<h5>11. Logs</h5>

<ul>
<li>Logs are treated as streams, simply written by an app to stdout</li>
<li>Let log storage, collating, and analysis be done in the env or or w/ other tools</li>
<li>Logs should provide visibility to how an app works over time</li>
</ul>


<h5>12. Admin Processes</h5>

<ul>
<li>Run as one-off processes in REPL</li>
<li>Env shares same code and config as long-running processes</li>
</ul>


<p>If you have the extra little time required, I encourage you to check out <a href="http://12factor.net/">12factor.net</a> and draw some of your own conclusions.</p>

<p>What other insights do you have on these principles?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test React componentWillReceiveProps]]></title>
    <link href="http://jaketrent.com/post/test-react-componentwillreceiveprops/"/>
    <updated>2015-02-26T08:34:00-07:00</updated>
    <id>http://jaketrent.com/post/test-react-componentwillreceiveprops</id>
    <content type="html"><![CDATA[<p>Testing React Components has been easier and more enjoyable than any previous UI unit testing I&#8217;ve done in the past.  Components that have interesting things happen in lifecycle methods have a little more setup to get tested.  Components that use the <code>componentWillReceiveProps</code> method are in this category.</p>

<p><img src="http://i.imgur.com/DXuSNbw.png" alt="react" /></p>

<!--more-->


<h2>React Test Setup</h2>

<p>Not all lifecycle methods require as much setup in a test as <code>componentWillReceiveProps</code>.  This is because:</p>

<ul>
<li>This method is concerned with <strong><em>changing</em></strong> props.</li>
<li>Changing props directly on a React Component (even under test) is against the React code of conduct</li>
</ul>


<p>So, we need something that is legal to change&#8230; <code>state</code>!  We need to not modify our subject under test and simply pass it new <code>props</code>.</p>

<p>My solution is to create a React Component specifically for the test.  This Component will be a parent to the subject under test, on which we can set <code>state</code>.  We&#8217;ll design it so that this state is transferred to the child Component under test.</p>

<h2>React Component using <code>componentWillReceiveProps</code></h2>

<p>You might have a React Component to test that looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">ComponentToTest</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">getInitialProps</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">myProp</span><span class="o">:</span> <span class="s2">&quot;blank&quot;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">getInitialState</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">modified</span><span class="o">:</span> <span class="s2">&quot;still blank&quot;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">componentWillReceiveProps</span><span class="p">(</span><span class="nx">nextProps</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">modified</span><span class="o">:</span> <span class="nx">nextProps</span><span class="p">.</span><span class="nx">myProp</span> <span class="o">+</span> <span class="s2">&quot;IsSoModified&quot;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;displayed&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">modified</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is nothing particularly interesting about this subject beyond the fact that it uses <code>componentWillReceiveProps</code>.  When new props are received, internal state is modified.  In real life, more interesting things like data fetching or complex calculations might be done here and then stored in state.  We simply are matching the scenario of needing to verify something when <code>componentWillReceiveProps</code> is called.</p>

<h2>A Parent Test Component</h2>

<p>The test to exercise <code>componentWillReceiveProps</code> on the above Component might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;react/addons&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">TestUtils</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">addons</span><span class="p">.</span><span class="nx">TestUtils</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;displays a modified state upon changing props&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">TestParent</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createFactory</span><span class="p">(</span><span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">getInitialState</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">{</span> <span class="nx">testState</span><span class="o">:</span> <span class="s2">&quot;init&quot;</span> <span class="p">};</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">&lt;</span><span class="nx">ComponentToTest</span> <span class="nx">ref</span><span class="o">=</span><span class="s2">&quot;sot&quot;</span> <span class="nx">myProp</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">testState</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}));</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">parent</span> <span class="o">=</span> <span class="nx">TestUtils</span><span class="p">.</span><span class="nx">renderIntoDocument</span><span class="p">(</span><span class="nx">TestParent</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">parent</span><span class="p">.</span><span class="nx">refs</span><span class="p">.</span><span class="nx">sot</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">myProp</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">eql</span><span class="p">(</span><span class="s2">&quot;init&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">parent</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">testState</span><span class="o">:</span> <span class="s2">&quot;somethingElse&quot;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">parent</span><span class="p">.</span><span class="nx">refs</span><span class="p">.</span><span class="nx">sot</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">myProp</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">eql</span><span class="p">(</span><span class="s2">&quot;somethingElse&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">parent</span><span class="p">.</span><span class="nx">refs</span><span class="p">.</span><span class="nx">sot</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">modified</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">eql</span><span class="p">(</span><span class="s2">&quot;somethingElseIsSoModified&quot;</span><span class="p">);</span> <span class="c1">// assert #1</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">child</span> <span class="o">=</span> <span class="nx">TestUtils</span><span class="p">.</span><span class="nx">scryRenderedDOMComponentsWithClass</span><span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="s2">&quot;displayed&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="nx">child</span><span class="p">.</span><span class="nx">getDOMNode</span><span class="p">().</span><span class="nx">innerText</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">eql</span><span class="p">(</span><span class="s2">&quot;somethingElseIsSoModified&quot;</span><span class="p">);</span>  <span class="c1">// assert #2</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>TestParent</code> component is created specifically for this test.  It renders the Component under test.  It sets a <code>ref</code> attribute to it for easy access.  Once we render the parent, the initial state was sent as the prop to the child Component.  As soon as we <code>setState</code> on the parent, a new prop is sent to the child, triggering <code>componentWillReceiveProps</code>.</p>

<p>Finally, I&#8217;ve included two assertion styles.  Again, there are going to be more interesting things that you&#8217;re asserting here in real life.  In this case I&#8217;m verifying that state that renders directly to the UI is set in our lifecycle method.  I can interrogate the state directly.  Here, we reach into the child Component state for assertion method #1.  That may sound bad, but remember that <code>TestParent</code> was created only in the context of this test anyway, so the level we&#8217;re reaching through to grab child state is just test code.  Assertion method #2 is to go to the DOM to verify final output from the state change.</p>

<p>There is definitely more setup here to make this happen.  I feel like usually testing a React Component doesn&#8217;t require this much test code.</p>

<h2><code>componentWillReceiveProps</code> in Action</h2>

<p>Here is a Component that uses <code>componentWillReceiveProps</code> to make a simple display change:</p>

<p><a class="jsbin-embed" href="http://jsbin.com/munaxuguta/12/embed?js,output">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>

<p>You can also check out this <a href="http://jsbin.com/buwoqod/22/edit?js,output">slightly modified jsbin</a> which does the test assertion.</p>

<p>What methods have you used to test Components that use either <code>componentWillReceiveProps</code> or other interesting lifecycle methods?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programmer Struggle]]></title>
    <link href="http://jaketrent.com/post/programmer-struggle/"/>
    <updated>2015-02-25T09:39:00-07:00</updated>
    <id>http://jaketrent.com/post/programmer-struggle</id>
    <content type="html"><![CDATA[<blockquote class="quote large">
<p>The life of a programmer is mostly a never-ending struggle.  Solving problems in an always-changing technical landscape means that programmers are always learning new things.  In this case, &#8220;learning new things&#8221; is a euphemism for &#8220;battling against our own ignorance.&#8221;  Even if a programmer is just fixing a bug in code that uses a familiar technology, sometimes the software we create is so complex that simply understanding what is going on can take an entire day.</p>
<p>If you write code, you will struggle.  Most professional programmers learn to struggle hour after hour, day after day, without getting (too) frustrated.  This is another skill that will serve you well.</p>
<footer>
<cite>Aaron Hillegass, in <a target="_blank" href="https://books.google.com/books?id=yxwiAgAAQBAJ&pg=PA4&lpg=PA4&ots=MYkju-O5W3&sig=u4R8RZ1EhemFcQcD-3CCwllcEcw&hl=en&sa=X&ei=W5jsVOiuEsG7ogSG2YGADw&ved=0CDAQ6AEwAw#v=onepage">Objective-C Programming: The Big Nerd Ranch Guide</a></cite>
</footer>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sinon Spies vs. Stubs]]></title>
    <link href="http://jaketrent.com/post/sinon-spies-vs-stubs/"/>
    <updated>2015-02-25T07:35:00-07:00</updated>
    <id>http://jaketrent.com/post/sinon-spies-vs-stubs</id>
    <content type="html"><![CDATA[<p><a href="http://sinonjs.org/">Sinon</a> provides spies, stubs, and mocks.  They&#8217;re all useful as fakes in tests.  They come with essential differences for what they&#8217;re helpful in doing and how they work.</p>

<p><img src="http://i.imgur.com/yuKcrP9.jpg" alt="spies vs stubs" /></p>

<!--more-->


<h2>Why Use Fakes?</h2>

<p>In a unit test, you might want to avoid having to test the unit&#8217;s dependencies.  This is especially true in <a href="http://en.wikipedia.org/wiki/White-box_testing">white-box testing</a>.  In this case, test fakes are going to be very helpful.  Sinon provides several fakes, notably spies, stubs, and mocks.  Let&#8217;s compare and contrast the three:</p>

<h2>Sinon Spies</h2>

<p>Spies sound like what they do &#8211; they watch your functions and report back on how they are called.  They generally avoid the violence and mayhem of a Hollywood spy, but depending on your application, this could vary.</p>

<p>They don&#8217;t change the functionality of your application.  They simply report what they see.  The <a href="http://sinonjs.org/docs/#spies-api">sinon API for spies</a> is fairly large, but it essentially centers around the <code>called</code> attribute (of which there are many variations).</p>

<p>I first setup that I want to spy on something.  Then I call my subject under test (src code).  Then I verify with the spy what was actually called and stop spying.  That might look like this in a test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;#fight&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;calls prayForStrength for fight success&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">(</span><span class="nx">subject</span><span class="p">.</span><span class="nx">strengthDep</span><span class="p">,</span> <span class="s2">&quot;prayForStrength&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">subject</span><span class="p">.</span><span class="nx">fight</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">subject</span><span class="p">.</span><span class="nx">strengthDep</span><span class="p">.</span><span class="nx">called</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">subject</span><span class="p">.</span><span class="nx">strengthDep</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: this example is in <a href="http://mochajs.org/">mocha</a> using a <a href="https://www.npmjs.com/package/should">should.js</a> assertion style</em></p>

<p>The dependency&#8217;s <code>prayForStrength</code> method is referred to by name in a string to setup the spy.  When <code>fight</code> is called here, <code>strengthDep.prayForStrength</code> will be called as normal &#8211; but there will be someone watching.  Finally, we call <code>restore</code> on the function we spied on so that all spies are called off.  If you want to do more than watch as dependencies work as described, you might want to use a stub.</p>

<h2>Sinon Stubs</h2>

<p>Stubs are more hands-on than spies (though they sound more useless, don&#8217;t they).  With a stub, you will actually change how functions are called in your test.  You don&#8217;t want to change the subject under test, thus changing the accuracy of your test.  But you may want to test several ways that dependencies of your unit could be expected to act.</p>

<p>For instance, if you had a function that returned a boolean that your code used to do different things, you might want to use a stub in two different tests to verify conditions when returning different values (ie, guarantee one run of <code>true</code> and one of <code>false</code> return).</p>

<p>To continue the <code>fight</code> example from above, let&#8217;s assume that if <code>prayForStrength</code> returns true, we are guaranteed to win the fight for the orphans (ie, <code>fight()</code> should return <code>true</code>).  That might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;#fight&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;always wins when prayForStrength is true&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sinon</span><span class="p">.</span><span class="nx">stub</span><span class="p">(</span><span class="nx">subject</span><span class="p">.</span><span class="nx">strengthDep</span><span class="p">,</span> <span class="s2">&quot;prayForStrength&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'>    <span class="nx">subject</span><span class="p">.</span><span class="nx">fight</span><span class="p">().</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">subject</span><span class="p">.</span><span class="nx">strengthDep</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that we use a different <code>sinon.stub</code> API.  For the 3rd parameter, we&#8217;re supplying our own version of <code>prayForStrength</code>.  For our test, all we care about is the return value, so that&#8217;s all we supply.  We&#8217;re not testing this dependency.  We&#8217;re instead testing how our subject <code>fight</code>s in a certain circumstance.  There are many ways you can use <a href="http://sinonjs.org/docs/#stubs">sinon stubs</a> to control how functions are called.  Also note that you can still use the <code>called</code> verifications with stubs.  But if you do verify a stub was called, you may want to use a mock.</p>

<h2>Sinon Mocks</h2>

<p><a href="http://sinonjs.org/docs/#mocks">Mocks</a> take the attributes of spies and stubs, smashes them together and changes the style a bit.  A mock will both observe the calling of functions and verify that they were called in some specific way.  And all this setup happens <em>previous</em> to calling your subject under test.  After the call, mocks are simply asked if all went to plan.</p>

<p>So the previous test could be rewritten to use a mock:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;#fight&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;always wins when prayForStrength is true&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">mock</span> <span class="o">=</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">mock</span><span class="p">(</span><span class="nx">subject</span><span class="p">.</span><span class="nx">strengthDep</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">mock</span><span class="p">.</span><span class="nx">expects</span><span class="p">(</span><span class="s2">&quot;prayForStrength&quot;</span><span class="p">).</span><span class="nx">returns</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">subject</span><span class="p">.</span><span class="nx">fight</span><span class="p">().</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">mock</span><span class="p">.</span><span class="nx">verify</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">mock</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>expects</code> and <code>returns</code> line is where the combo magic happens.  <code>expects</code> is verifying a call (like <code>spies</code> can), and <code>returns</code> is specifying functionality (like <code>stubs</code> can).  The <code>verify</code> call is the line that will fail (essentially the mock assertion) if things in the subject didn&#8217;t go exactly according to plan.</p>

<h2>Spies vs. Stubs vs. Mocks</h2>

<p>So when should I use spies or stubs or mocks?  As with most art, there are many ways to accomplish what you want.  Much of your choice will depend on your own style and what you become proficient in.</p>

<p>Some basic rules might be:</p>

<ul>
<li><strong><em>Use Spies</em></strong> - if you simply want to watch and verify somethings happens in your test case.</li>
<li><strong><em>Use Stubs</em></strong> - if you simply want to specify how something will work to help your test case.</li>
<li><strong><em>Use Mocks</em></strong> - if you want to both of the above on a single dependency in your test case.</li>
</ul>


<p>When do you find yourself most often using spies vs. stubs vs. mocks?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby CLI Options Parsing]]></title>
    <link href="http://jaketrent.com/post/ruby-cli-options-parsing/"/>
    <updated>2015-02-24T07:21:00-07:00</updated>
    <id>http://jaketrent.com/post/ruby-cli-options-parsing</id>
    <content type="html"><![CDATA[<p>Ruby&#8217;s stdlib never ceases to amaze.  If you&#8217;re making a CLI tool in Ruby, your efforts are made more straightforward by the existence of the <a href="http://ruby-doc.org/stdlib-2.2.0/libdoc/optparse/rdoc/OptionParser.html">OptionParser</a> class.  Use it, and let happiness fill your heart.</p>

<p><img src="http://i.imgur.com/Z7WWtL0.jpg" alt="Ruby" /></p>

<!--more-->


<p>We&#8217;re used to some nice CLI tools these days &#8211; ones that have many useful options that allow for easier scripting and more powerful, quick usage.  Ruby&#8217;s <code>OptionParser</code> will help us make our own and not disappoint the masses of fevered CLI users.</p>

<p>All terminal input from initial execution will enter our Ruby program via the <code>ARGV</code> variable.</p>

<p>To have the <code>OptionParser</code> class available to us, we must require the <code>optsparse</code> package.</p>

<p><code>OptionParser</code> options are defined similar to how you&#8217;d expect event handlers to be defined: with the <code>on</code> keyword.  You can pass it a string to match a short option, a string to match the verbose option, and finally a block to be executed when the option is detected.  In the block, we generally will want to store the option state.  We&#8217;ll choose to use an <code>OpenStruct</code> for that (and will need the <code>ostruct</code> package).</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;optsparse&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;ostruct&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">options</span> <span class="o">=</span> <span class="no">OpenStruct</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">opt_parser</span> <span class="o">=</span> <span class="no">OptionParser</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">opts</span><span class="o">|</span>
</span><span class='line'>    <span class="n">opts</span><span class="o">.</span><span class="n">banner</span> <span class="o">=</span> <span class="s2">&quot;Usage: luchador [options]&quot;</span>
</span><span class='line'>    <span class="n">opts</span><span class="o">.</span><span class="n">separator</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="n">opts</span><span class="o">.</span><span class="n">separator</span> <span class="s2">&quot;Options:&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">opts</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s2">&quot;-t, &quot;</span><span class="o">--</span><span class="n">twist</span><span class="s2">&quot;, &quot;</span><span class="no">Apply</span> <span class="n">the</span> <span class="n">nipple</span> <span class="n">twist</span><span class="s2">&quot;) do |t|</span>
</span><span class='line'><span class="s2">      options.twist = true</span>
</span><span class='line'><span class="s2">    end</span>
</span><span class='line'>
</span><span class='line'><span class="s2">    opts.on(&quot;</span><span class="o">-</span><span class="n">a</span> <span class="n">a</span><span class="s2">&quot;, &quot;</span><span class="o">--</span><span class="n">anaconda</span><span class="o">-</span><span class="n">squeeze</span> <span class="n">a</span><span class="s2">&quot;, &quot;</span><span class="no">The</span> <span class="n">degrees</span> <span class="n">of</span> <span class="n">anaconda</span> <span class="n">squeeze</span> <span class="n">pressure</span><span class="s2">&quot;) do |a|</span>
</span><span class='line'><span class="s2">      options.anaconda_squeeze = a</span>
</span><span class='line'><span class="s2">    end</span>
</span><span class='line'>
</span><span class='line'><span class="s2">    opt_parser.parse!(ARGV)</span>
</span><span class='line'><span class="s2">    options</span>
</span><span class='line'><span class="s2">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can we might run CLI tool something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">luchador</span> <span class="o">-</span><span class="n">t</span> <span class="o">--</span><span class="n">anaconda</span><span class="o">-</span><span class="n">squeeze</span> <span class="mi">130</span>
</span></code></pre></td></tr></table></div></figure>


<p>And run with both options engaged for ultimate luchador power.  Notice we used both short and verbose-style options (choosing to write out the longest of the options for its added poetic punch on that whopping 130 degrees of pure squeeze pressure!).</p>

<p>A few more points to note:</p>

<ul>
<li><code>opts.banner</code> and <code>opts.separator</code> can be used to format usage information.</li>
<li>Usage information, stored in <code>opts</code> can be <code>put</code> to the screen.  A <code>-h</code>/<code>--help</code> option is automatically built in for this purpose.</li>
<li>Remember to call <code>parse!</code> after configuring the options so the input is actually processed.</li>
<li>Here, the <code>--anaconda-squeeze</code> option is defined differently than the first: there is a trailing <code>a</code>.  For options that require a non-boolean, this is required.  Otherwise, the argument to your handling block will always be a boolean <code>true</code>.</li>
<li>Note that this example code only shows option parsing &#8211; nothing about the <code>luchador</code> binary itself.</li>
</ul>


<p>This gives you the basic tools.  It&#8217;s very easy, and it&#8217;s built in!  To do more, you might take required options first through the CLI options and then read them interactively from the console.  What other neat additions do you see that we could add?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test React-Router Previous Params for Component Update]]></title>
    <link href="http://jaketrent.com/post/test-react-router-params-component-update/"/>
    <updated>2015-02-09T15:39:00-07:00</updated>
    <id>http://jaketrent.com/post/test-react-router-params-component-update</id>
    <content type="html"><![CDATA[<p>Once upon a time, react-router transferred params and query params from the url via props into components.  It doesn&#8217;t happen this way any more.  So, let&#8217;s say you have a need in your component like overriding <code>shouldComponentUpdate</code> in your component which only has access to <code>this.props</code> and <code>this.state</code>.   How can you use the url data to affect the component re-render or not?</p>

<p><img src="http://i.imgur.com/DXuSNbw.png" alt="react" /></p>

<!--more-->


<h2>Why control rendering with the url?</h2>

<p>There are two instances that come to mind when considering the scenarios that it might be needful to control the update of your component based on the url:</p>

<ol>
<li><p><strong>Avoid re-render</strong>: Of course, if the component we&#8217;re talking about is a page-level component, you&#8217;ll most likely always be wanting to re-render as the url changes.  But, if you&#8217;re a little widget component that cares about the url, you might not need to always re-render on url change.</p></li>
<li><p><strong>Trigger re-render when it might not otherwise happen</strong>: For whatever reason, you may have already needed to implement <code>shouldComponentUpdate</code> in your component.  This function returns true or false to flag a &#8220;should&#8221; or &#8220;should not&#8221; re-render.  You&#8217;ll need to access url state and likely previous url state in this method to make re-renders happen that otherwise wouldn&#8217;t if you had no logic in this function for it.</p></li>
</ol>


<p>Of course, beyond these re-render scenarios, there are many other situations in which knowing previous and current states in the url could come in handy.</p>

<h2>React-Router in shouldComponentUpdate</h2>

<p><code>shouldComponentUpdate</code> determines if component should re-render.  It&#8217;s called whenever <code>this.props</code> or <code>this.state</code> changes.  It has access to incoming props and state via the function parameters.</p>

<p>React-router gives your component access to params and query params by requiring you to mix in the <code>State</code> param from react-router.  Then you have access to new functions, <code>this.getParams()</code> and <code>this.getQuery()</code>.  If you only need to know current url state, this is enough.  If you want to compare current url state to previous url state, you&#8217;ll have to save the parts that you care about.  We&#8217;ll do that in <code>this.state</code>.</p>

<p>Let&#8217;s say that we want to trigger a redraw on changes to a <code>range</code> query parameter.  The component might, in part, look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var { State } = require('react-router')
</span><span class='line'>
</span><span class='line'>module.exports = React.createClass({
</span><span class='line'>
</span><span class='line'>  mixins: [ State ],
</span><span class='line'>
</span><span class='line'>  getInitialState() {
</span><span class='line'>    range: nul
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>  componentWillReceiveProps() {
</span><span class='line'>    this.setState({
</span><span class='line'>      range: this.getQuery().range
</span><span class='line'>    })
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>  componentWillMount() {
</span><span class='line'>    this.setState({
</span><span class='line'>      range: this.getQuery().range
</span><span class='line'>    })
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  shouldComponentUpdate() {
</span><span class='line'>    return this.state.range !== nextState.range
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  // ...
</span><span class='line'>
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p>When the url params change, <code>componentWillReceiveProps</code> is called.  But this is not called on the first render, thus we implement <code>componentWillMount</code>.  Both these functions save the <code>range</code> from the url to the component state.  Now, as <code>shouldComponentUpdate</code> is called on future <code>this.props</code> and <code>this.state</code> changes, current and next <code>range</code> values can be compared and used in &#8220;should re-render&#8221; calculation.</p>

<p>What other ways have you found to accomplish this tracking of previous state in the url?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set Cookie on Rack Mock Request]]></title>
    <link href="http://jaketrent.com/post/set-cookie-on-rack-mock-request/"/>
    <updated>2015-01-21T10:58:00-07:00</updated>
    <id>http://jaketrent.com/post/set-cookie-on-rack-mock-request</id>
    <content type="html"><![CDATA[<p>Rack apps are generally straightforward to test because of their very basic public interface.  But where do we put specific things, in this case, a cookie for the request, on that <code>env</code> argument it takes?  Here&#8217;s one way.</p>

<p><img src="http://i.imgur.com/044x6s6.jpg" alt="rack mock request" /></p>

<!--more-->


<h1>env</h1>

<p>The <code>env</code> argument that is sent to <code>#call</code> in a Rack app is an variable that represents the <a href="http://www.rubydoc.info/github/rack/rack/master/file/SPEC#The_Environment">environment of the request</a>.  It is a hash of CGI-like headers: request method, query params, http headers &#8211; that sort of thing.</p>

<p>The <code>HTTP_*</code> keys on the hash will be <a href="https://tools.ietf.org/html/rfc3875#section-4.1.18">read as request headers from the environment</a>.</p>

<h1>Rack MockRequest Cookies</h1>

<p>Rack provides a great little <code>Rack::MockRequest</code> helper object in its library that will help us test our app.  This object has a class method called <code>env_for</code> which allows for quick construction of an <code>env</code> var that is a request to a specified url.</p>

<p>On the returned <code>env</code> we will continue to make modifications before passing it to our Rack app.  We&#8217;ll add our cookie header with a key of <code>HTTP_COOKIE</code>.  The value will be of the format <code>cookieName=cookieValue</code>.  We can handle multiple cookies by separating the cookies with <code>;</code>.</p>

<p>Let&#8217;s say we&#8217;re testing a token authentication middleware with rspec.  Our spec may look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;accepts an cookie token in the request&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">middleware</span> <span class="o">=</span> <span class="c1"># ... instantiate rack middleware</span>
</span><span class='line'>  <span class="n">env</span> <span class="o">=</span> <span class="no">Rack</span><span class="o">::</span><span class="no">MockRequest</span><span class="o">.</span><span class="n">env_for</span><span class="p">(</span><span class="s2">&quot;/protected&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">env</span><span class="o">[</span><span class="s2">&quot;HTTP_COOKIE&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;AUTH_COOKIE=123&quot;</span>
</span><span class='line'>  <span class="n">status</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">middleware</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">status</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then in our Rack app source, we can code for the availability of a cookie on the request.  It might look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># ...</span>
</span><span class='line'><span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>  <span class="n">request</span> <span class="o">=</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Request</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>  <span class="n">token</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">cookies</span><span class="o">[</span><span class="s2">&quot;AUTH_TOKEN&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Is this the easiest or best way to set cookies on requests when testing Rack apps?  What do you do?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pagination Headers with Kaminari]]></title>
    <link href="http://jaketrent.com/post/pagination-headers-with-kaminari/"/>
    <updated>2015-01-15T14:07:00-07:00</updated>
    <id>http://jaketrent.com/post/pagination-headers-with-kaminari</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/amatsuda/kaminari">Kaminari</a> provides easy pagination in a rails app.  It&#8217;s great to use.  We&#8217;ll make it better by adding a little function to your controllers to provide useful pagination headers.</p>

<p><img src="http://i.imgur.com/XOUecnw.jpg" alt="kaminari pagination" /></p>

<!--more-->


<h2>Pagination from Kaminari</h2>

<p>Installation is easy with an addition to your <code>Gemfile</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'kaminari'</span></code></pre></td></tr></table></div></figure>


<p>and an install:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>Now, you have a magical <code>page</code> method available on your models.  It works like a charm right out of the box.</p>

<p>Let&#8217;s say that I have a <code>germs_controller.rb</code> (because it&#8217;s a great time of year for that), where I have a list of germs that I want to paginate.  I could easily request <code>/api/v1/germs?page=2</code> and get the second page with this code in the controller:</p>

<figure class='code'><figcaption><span>germs_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Api</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">V1</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">GermsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>        <span class="vi">@germs</span> <span class="o">=</span> <span class="no">Germ</span><span class="o">.</span><span class="n">page</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span>
</span><span class='line'>        <span class="n">render</span> <span class="n">json</span><span class="p">:</span> <span class="vi">@germs</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to control the default page size, you can do that in the initializers:</p>

<figure class='code'><figcaption><span>kaminari_config.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Kaminari</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">default_per_page</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Pagination Headers</h2>

<p>There&#8217;s another feature that we want to add, and that&#8217;s pagination headers.  These are going to be HTTP headers that come back in the response that indicate to clients where the relative pages are located in our API.  For instance, we asked for page 2, but where might one request the previous and next pages, 1 and 3?</p>

<p>Putting the pagination info into the header follows a pattern used in the <a href="https://developer.github.com/guides/traversing-with-pagination/">github api</a>.</p>

<p>We&#8217;ll add a function to our <code>ApplicationController</code> to helps us out:</p>

<figure class='code'><figcaption><span>application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">API</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">protected</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">set_pagination_header</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>    <span class="n">scope</span> <span class="o">=</span> <span class="nb">instance_variable_get</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">request_params</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">query_parameters</span>
</span><span class='line'>    <span class="n">url_without_params</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">original_url</span><span class="o">.</span><span class="n">slice</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">original_url</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s2">&quot;?&quot;</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="k">unless</span> <span class="n">request_params</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>    <span class="n">url_without_params</span> <span class="o">||=</span> <span class="n">request</span><span class="o">.</span><span class="n">original_url</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">page</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">page</span><span class="o">[</span><span class="ss">:first</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">scope</span><span class="o">.</span><span class="n">total_pages</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">scope</span><span class="o">.</span><span class="n">first_page?</span>
</span><span class='line'>    <span class="n">page</span><span class="o">[</span><span class="ss">:last</span><span class="o">]</span> <span class="o">=</span> <span class="n">scope</span><span class="o">.</span><span class="n">total_pages</span>  <span class="k">if</span> <span class="n">scope</span><span class="o">.</span><span class="n">total_pages</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">scope</span><span class="o">.</span><span class="n">last_page?</span>
</span><span class='line'>    <span class="n">page</span><span class="o">[</span><span class="ss">:next</span><span class="o">]</span> <span class="o">=</span> <span class="n">scope</span><span class="o">.</span><span class="n">current_page</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">unless</span> <span class="n">scope</span><span class="o">.</span><span class="n">last_page?</span>
</span><span class='line'>    <span class="n">page</span><span class="o">[</span><span class="ss">:prev</span><span class="o">]</span> <span class="o">=</span> <span class="n">scope</span><span class="o">.</span><span class="n">current_page</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">unless</span> <span class="n">scope</span><span class="o">.</span><span class="n">first_page?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pagination_links</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">page</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span>
</span><span class='line'>      <span class="n">new_request_hash</span><span class="o">=</span> <span class="n">request_params</span><span class="o">.</span><span class="n">merge</span><span class="p">({</span><span class="ss">:page</span> <span class="o">=&gt;</span> <span class="n">v</span><span class="p">})</span>
</span><span class='line'>      <span class="n">pagination_links</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;&lt;</span><span class="si">#{</span><span class="n">url_without_params</span><span class="si">}</span><span class="s2">?</span><span class="si">#{</span><span class="n">new_request_hash</span><span class="o">.</span><span class="n">to_param</span><span class="si">}</span><span class="s2">&gt;; rel=</span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">k</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">headers</span><span class="o">[</span><span class="s2">&quot;Link&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="n">pagination_links</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code will provide a <code>Link</code> header in the HTTP response.  Its value might look something like this:</p>

<figure class='code'><figcaption><span>Link</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&lt;http://myapi.com/api/v1/germs?page=1&gt;; rel=&quot;prev&quot;, &lt;http://myapi.com/api/v1/germs?page=3&gt;; rel=&quot;next&quot;
</span></code></pre></td></tr></table></div></figure>


<p>The values of <code>first</code>, <code>last</code>, <code>next</code>, etc are populated from calls to <a href="http://www.rubydoc.info/github/amatsuda/kaminari/Kaminari/PageScopeMethods">Kaminari methods</a> such as <code>first_page?</code>.</p>

<p>In order to have this header set on a response, we need to add it to a callback in our controller:</p>

<figure class='code'><figcaption><span>germs_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Api</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">V1</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">GermsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">after_filter</span> <span class="n">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:index</span><span class="o">]</span> <span class="p">{</span> <span class="n">set_pagination_header</span><span class="p">(</span><span class="ss">:germs</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>        <span class="vi">@germs</span> <span class="o">=</span> <span class="no">Germ</span><span class="o">.</span><span class="n">page</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span>
</span><span class='line'>        <span class="n">render</span> <span class="n">json</span><span class="p">:</span> <span class="vi">@germs</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, a fresh request to <code>/api/v1/germs</code> with or without the <code>page</code> query parameter should return back the <code>Link</code> header in the HTTP response which your client can use to traverse the other pages of data available in your API.</p>

<p>So, there&#8217;s one way to get pagination info from Kaminari into your HTTP headers.  What would you improve?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React-Router with Flux]]></title>
    <link href="http://jaketrent.com/post/react-router-with-flux/"/>
    <updated>2015-01-15T09:21:00-07:00</updated>
    <id>http://jaketrent.com/post/react-router-with-flux</id>
    <content type="html"><![CDATA[<p>react-router provides great route handling with route params and query params.  Flux provides a pattern for building React apps, including a pattern from providing data to your components.  Here&#8217;s a straightforward way to make route changes trigger data changes in your components.</p>

<p><img src="http://i.imgur.com/DXuSNbw.png" alt="react" /></p>

<!--more-->


<p>Note: Code here reflects usage of react-router 0.11.x.</p>

<p>It is often the case that we&#8217;ll need to trigger data changes in a react component in our Flux app because of a route transition.  A prime example of this would be on an object show page, where the details of a particular object are being shown.  In our example, let&#8217;s say that we&#8217;re showing the details of a book, such as title, author, and description.</p>

<p>The route to our book detail page is likely defined as:</p>

<figure class='code'><figcaption><span>routes.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;book&quot;</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/books/:id&quot;</span> <span class="nx">handler</span><span class="o">=</span><span class="p">{</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./books-show&#39;</span><span class="p">)}</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The handler is just a controller-component that defines the view.  It might look simply like:</p>

<figure class='code'><figcaption><span>books-show.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="p">{</span><span class="nx">State</span><span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react-router&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">BooksStore</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./books-store&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">displayName</span><span class="o">:</span> <span class="s1">&#39;BooksShow&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">mixins</span><span class="o">:</span> <span class="p">[</span> <span class="nx">State</span> <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">getInitialState</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getStateFromStores</span><span class="p">()</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">getStateFromStores</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">book</span><span class="o">:</span> <span class="nx">BooksStore</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span> <span class="nx">id</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">getParams</span><span class="p">().</span><span class="nx">id</span> <span class="p">})</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">BooksStore</span><span class="p">.</span><span class="nx">addChangeListener</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_onChange</span><span class="p">)</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">componentWillUnmount</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">BooksStore</span><span class="p">.</span><span class="nx">removeChangeListener</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_onChange</span><span class="p">)</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">_onChange</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getStateFromStores</span><span class="p">())</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">book</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">book</span><span class="p">.</span><span class="nx">author</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">book</span><span class="p">.</span><span class="nx">description</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the view component references a <code>BooksStore</code> for getting its initial state.  The state of <code>book</code> will also be updated as the <code>BooksStore</code> emits that its data has changed and <code>this._onChange</code> is called.</p>

<p>Every time a route transitions, react-router has a <code>Router.run</code> callback that will also run in order to render the matching route.  This will also be a great place to put our action to signal to our Flux app that routes are transitioning and therefore other stuff like data in the display might need to change as well.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Router</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="nx">routes</span><span class="p">,</span> <span class="p">(</span><span class="nx">Handler</span><span class="p">,</span> <span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">React</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Handler</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">BooksAction</span><span class="p">.</span><span class="nx">transition</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">params</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Important note</strong>: Make sure the transition action is called after <code>React.render</code> so that the change emission will be detected after render, otherwise you&#8217;ll be one route transition behind.</p>

<p>The <code>BooksAction.transition</code> definition is something very simple &#8211; something that can trigger events on the dispatcher:</p>

<figure class='code'><figcaption><span>books-actions.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">transition</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">AppDispatcher</span><span class="p">.</span><span class="nx">handleViewAction</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span> <span class="nx">ActionTypes</span><span class="p">.</span><span class="nx">TRANSITION</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The final connection is in the store, where the dispatched action can be listened for an then trigger the store event, updating the component views:</p>

<figure class='code'><figcaption><span>books-store.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">BooksStore</span> <span class="o">=</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">EventEmitter</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">find</span><span class="p">(</span><span class="nx">filter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">BooksStore</span><span class="p">.</span><span class="nx">dispatchToken</span> <span class="o">=</span> <span class="nx">AppDispatcher</span><span class="p">.</span><span class="nx">register</span><span class="p">((</span><span class="nx">payload</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">action</span> <span class="o">=</span> <span class="nx">payload</span><span class="p">.</span><span class="nx">action</span>
</span><span class='line'>  <span class="k">switch</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="nx">ActionTypes</span><span class="p">.</span><span class="nx">TRANSITION</span><span class="o">:</span>
</span><span class='line'>      <span class="nx">BooksStore</span><span class="p">.</span><span class="nx">emitChange</span><span class="p">()</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">BooksStore</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, all the route transitions should trigger data changes in views.  Visiting the url <code>/books/1</code> and then the url <code>/books/2</code> should display different data on screen according to which book id was in the route.  <code>Router.Link</code> should work correctly, usable instead of buttons with actions being triggered on click.</p>

<p>react-router and Flux make for a great combo in this way, right?  What adjustments would you make?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[D3 Class Operations]]></title>
    <link href="http://jaketrent.com/post/d3-class-operations/"/>
    <updated>2014-12-24T10:58:00-07:00</updated>
    <id>http://jaketrent.com/post/d3-class-operations</id>
    <content type="html"><![CDATA[<p>D3 has operations for class name manipulation that you&#8217;re used to from jQuery.  These include addClass, removeClass, hasClass, and toggleClass.  They just go by different names.</p>

<p><img src="http://i.imgur.com/94JQ8N8.jpg" alt="d3 class names" /></p>

<!--more-->


<h2>selection.classed</h2>

<p>The magic all comes in the form of the <code>selection.classed</code> method from d3.  It is going to be the api that is used to accomplish all the operations listed below.  From the <a href="https://github.com/mbostock/d3/wiki/Selections#classed">docs</a>:</p>

<blockquote><p>This operator is a convenience routine for setting the &#8220;class&#8221; attribute; it understands that the &#8220;class&#8221; attribute is a set of tokens separated by spaces. Under the hood, it will use the classList if available, for convenient adding, removing and toggling of CSS classes.</p></blockquote>

<p>It knows how to handle one or many classes on an element, and it will be performant.</p>

<p>Also note that this method is only available on a selection.</p>

<h2>d3 addClass</h2>

<p>To add a class, the second parameter to <code>classed</code> must be true, as in this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">d3</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;.bar&quot;</span><span class="p">)</span>
</span><span class='line'> <span class="p">.</span><span class="nx">classed</span><span class="p">(</span><span class="s2">&quot;my-selector&quot;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>d3 removeClass</h2>

<p>To remove a class, the second parameter to <code>classed</code> must be false.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">d3</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;.bar&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">classed</span><span class="p">(</span><span class="s2">&quot;my-selector&quot;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>d3 hasClass</h2>

<p>To check for the existence of a class, just leave off the second parameter and pass the class name you&#8217;re querying for.  This will return true if it exists, false if it does not.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">d3</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;.bar&quot;</span><span class="p">)</span>
</span><span class='line'> <span class="p">.</span><span class="nx">classed</span><span class="p">(</span><span class="s2">&quot;my-selector&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will return true if any element in the selection has the class.  Use <code>d3.select</code> for single element selection.</p>

<h2>d3 toggleClass</h2>

<p>To flip a class to the opposite state  &#8211; remove it if it exists already, add it if it does not yet exist &#8211; you can do one of the following.</p>

<p>For a single element, the code might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">oneBar</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;.bar&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">oneBar</span><span class="p">.</span><span class="nx">classed</span><span class="p">(</span><span class="s2">&quot;my-selector&quot;</span><span class="p">,</span> <span class="o">!</span><span class="nx">oneBar</span><span class="p">.</span><span class="nx">classed</span><span class="p">(</span><span class="s2">&quot;my-selector&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>For multiple elements, one will want to pass in a callback.  The callback function takes as parameters <code>d</code>, the datum, <code>i</code>, the index in the selection, and <code>this</code> is the current DOM element.</p>

<p>It&#8217;s also important to note that the <a href="https://github.com/mbostock/d3/wiki/Selections#classed">docs</a> inform us that:</p>

<blockquote><p>The function&#8217;s return value is then used to assign or unassign the specified class on each element.</p></blockquote>

<p>The code for toggling multiple elements in a selection at once might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">d3</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;bar&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">classed</span><span class="p">(</span><span class="s2">&quot;my-selector&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">!</span><span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">classed</span><span class="p">(</span><span class="s2">&quot;my-selector&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s a <a href="http://jsbin.com/qeyawa/1/edit?html,js,output">jsbin</a> that provides some toggle functionality.  Ees for fun.</p>

<p><a class="jsbin-embed" href="http://jsbin.com/qeyawa/1/embed?output">d3 toggleClass</a><script src="http://static.jsbin.com/js/embed.js"></script></p>

<h2>Bonus: A note on single active classes</h2>

<p>Here&#8217;s a fun tip for that oft-encountered situation where you want a single element in a selection to have a class, like an <code>active</code> class, and the rest of the selection should not:</p>

<p>Make sure that you detect the active class in the selection previous to the clearing of the active classes.</p>

<p>A sample of what that might look like could be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">d3</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;.bar&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">activeClass</span> <span class="o">=</span> <span class="s2">&quot;active&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">alreadyIsActive</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">classed</span><span class="p">(</span><span class="nx">activeClass</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;.reports-chart__bar&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">classed</span><span class="p">(</span><span class="nx">activeClass</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">classed</span><span class="p">(</span><span class="nx">activeClass</span><span class="p">,</span> <span class="o">!</span><span class="nx">alreadyIsActive</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, unleash the power of your creativity!  Kazaam!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ideas From The Accidental Creative]]></title>
    <link href="http://jaketrent.com/post/ideas-from-accidental-creative/"/>
    <updated>2014-12-10T14:27:00-07:00</updated>
    <id>http://jaketrent.com/post/ideas-from-accidental-creative</id>
    <content type="html"><![CDATA[<p>I just finished a book about becoming a more productive and effective creative person, called “The Accidental Creative”.  It was a great book and included some thoughtful ideas that I ended up pondering and have started incorporating into my life.</p>

<p><img src="http://i.imgur.com/S3LkEjQ.jpg" alt="The Accidental Creative" /></p>

<!--more-->


<p>What follows are the big ideas from the book, broken into the areas that the author had identified and my short take on what each of them is or has the potential to benefit.</p>

<h2>Focus</h2>

<p><strong>Challenges</strong> - Define what you’re working on the big statements, sometimes in the form of questions, around what you’re focused on solving.</p>

<p><strong>The Big 3</strong> - Refine what you will actually tackle by aligning the efforts with what you’ve identified as your important work.</p>

<p><strong>Clustering</strong> - Avoid the frenetic task switching and the associated productivity penalties by scheduling single activities in order to deep and flow with your ideas.</p>

<h2>Relationships</h2>

<p><strong>Circles</strong> - Identify and regularly meet with people with similar interest with whom you can combine creative power and generate and vet new ideas.</p>

<p><strong>Head-to-heads</strong> - One-on-one meetings of people between who there is mutual respect in order to share as much value in the form of ideas and creative thought as possible.</p>

<p><strong>Core Team</strong> - Identify a handful of people in your life whose opinion and experience you value so much that you will trust yourself to be guided by their input on important decisions and life events.</p>

<h2>Energy</h2>

<p><strong>Whole-life Planning</strong> - Don’t pretend you can compartmentalize work and other parts of your life separately.  Rather, schedule and plan these things together to get a full picture of all important work you’re involved in.</p>

<p><strong>Pruning</strong> - Remove the things from your life that don’t match your big 3 or that are excessive energy drains in order to open possibilities for better/more results in areas that really matter to you.</p>

<h2>Stimuli</h2>

<p><strong>Study Plan</strong> - Have scheduled time to ingest new ideas and learn new things.</p>

<p><strong>Notation</strong> - In an effort to really digest what you experience, take notes and review them in order to understand more fully, remember, and let what you encounter change you for the better.</p>

<p><strong>Purposeful Experience</strong> - Filter the over-abundance of stimuli available to you and be intentional about what you experience, feeding your most important needs and efforts.</p>

<h2>Hours</h2>

<p><strong>Idea Time</strong> - Great ideas are important to the value you generate in your work, so actually schedule time to do nothing but  ponder and generate new ideas specifically for the future.</p>

<p><strong>Unnecessary Creating</strong> - Often what used to be a fulfilling creation activity for someone becomes drudgery and work without remembering what it feels like to just create without the pressure of the end product.</p>

<p>Have you read this book?  Others like it?  What are the practices that you’ve ended up incorporating, and how have you seen the benefits?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A JSON API Errors Serializer in Rails]]></title>
    <link href="http://jaketrent.com/post/jsonapi-errors-serializer-in-rails/"/>
    <updated>2014-12-04T10:11:00-07:00</updated>
    <id>http://jaketrent.com/post/jsonapi-errors-serializer-in-rails</id>
    <content type="html"><![CDATA[<p>The default serialization of error states in Rails might not be what you want for your app.  In that case, it&#8217;d be worth knowing how to write a custom serialization format for your needs.  In my case, I am trying to match the <a href="http://jsonapi.org/format/#errors">JSON API format for errors</a>.  Here&#8217;s a potential implementation&#8230;</p>

<p><img src="http://i.imgur.com/XOUecnw.jpg" alt="Rails jsonapi errors" /></p>

<!--more-->


<h2>JSON API Errors Format</h2>

<p>JSON API is cool because it is a standard format for REST APIs to serialize data.  It would be even cooler if it was well-established and it was standardized more than it currently is.  As it is, it&#8217;s a standard that seems to fluctuate a fair bit.  Nevertheless, it has many worthy ideas and might be worth using as a format on your app.</p>

<p>The <a href="http://jsonapi.org/format/#errors">errors format</a> specifically asks for JSON that looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;errors&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;name&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;Name cannot be empty&quot;</span>
</span><span class='line'>    <span class="p">}</span> <span class="err">//</span> <span class="err">...</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There must be an <code>errors</code> root attribute.  Its value is an array.  That array has individual errors that may include a number of different attributes.  Here, I have highlighted just two &#8211; <code>id</code>, a unique id of the problem and <code>title</code>, the human-readable error message.</p>

<h2>Rails Default Error Serialization</h2>

<p>A common place for errors to be reported are in the HTTP responses for requests to the resources in your REST API.  For instance, in your model for your resource &#8211; in this case, let&#8217;s say it&#8217;s a book &#8211; you may have some validation rules for what constitutes a well-formed book.  That model might look like:</p>

<figure class='code'><figcaption><span>book.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Book</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:title</span><span class="p">,</span> <span class="n">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thus, if I try to create a new book without a title, I should get some sort of error.  And indeed, I do.  If I have a <code>books_controller.rb</code> that looks like this:</p>

<figure class='code'><figcaption><span>books_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BooksController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">book_params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">book</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="n">render</span> <span class="n">json</span><span class="p">:</span> <span class="n">book</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">render</span> <span class="n">json</span><span class="p">:</span> <span class="n">book</span><span class="o">.</span><span class="n">errors</span>  <span class="c1"># Allowing default serialization</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">book_params</span>
</span><span class='line'>    <span class="n">params</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>By default, Rails 4 will return an error serialization that looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;can&#39;t be blank&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Custom Error Serializer in Rails</h2>

<p>But I wrote a client that doesn&#8217;t consume errors in the default Rails format, so I want a custom error serialization format &#8211; specifically one to match the JSON API specs.</p>

<p>On the line in <code>books_controller.rb</code> that was returning <code>book.errors</code>, now we&#8217;ll introduce a new function to call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">render</span><span class="p">:</span> <span class="n">json</span><span class="p">:</span> <span class="no">ErrorSerializer</span><span class="o">.</span><span class="n">serialize</span><span class="p">(</span><span class="n">book</span><span class="o">.</span><span class="n">errors</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;re going to write the serializer method in a separate file, <code>error_serializer.rb</code>, so it can be used in many controllers.  To gain access to it in our controller, we need to include the line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">include</span> <span class="no">ErrorSerializer</span>
</span></code></pre></td></tr></table></div></figure>


<p>The contents of your <code>error_serializer.rb</code> can be whatever fits your use case.  For my simple JSON API implementation, it looks like:</p>

<figure class='code'><figcaption><span>error_serializer.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ErrorSerializer</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">ErrorSerializer</span><span class="o">.</span><span class="nf">serialize</span><span class="p">(</span><span class="n">errors</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">if</span> <span class="n">errors</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">json</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">new_hash</span> <span class="o">=</span> <span class="n">errors</span><span class="o">.</span><span class="n">to_hash</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span>
</span><span class='line'>      <span class="n">v</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">msg</span><span class="o">|</span>
</span><span class='line'>        <span class="p">{</span> <span class="nb">id</span><span class="p">:</span> <span class="n">k</span><span class="p">,</span> <span class="n">title</span><span class="p">:</span> <span class="n">msg</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span><span class="o">.</span><span class="n">flatten</span>
</span><span class='line'>    <span class="n">json</span><span class="o">[</span><span class="ss">:errors</span><span class="o">]</span> <span class="o">=</span> <span class="n">new_hash</span>
</span><span class='line'>    <span class="n">json</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the format includes an <code>errors</code> root attribute and an <code>id</code> and <code>title</code> for each error object.</p>

<p>Now, the errors serialization format from the API in the case of an error appears like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;errors&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;title&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;Title can&#39;t be blank&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just what we wanted.</p>

<p>I&#8217;m sure there are better places to put your error serialization logic, ways to call it, or great libraries you&#8217;ve worked with that do a similar thing.  Any suggestions?  Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Destroy Duplicate Tests]]></title>
    <link href="http://jaketrent.com/post/destroy-duplicate-tests/"/>
    <updated>2014-11-05T16:59:00-07:00</updated>
    <id>http://jaketrent.com/post/destroy-duplicate-tests</id>
    <content type="html"><![CDATA[<p>As soon as we begin to write a test for our code, it is natural for us to think that we are doing a good thing, and often, we are.  Yet, I believe there are times that we’re writing tests when we’re hurting more than helping — and, of course, this is not on purpose.  To clarify, I’m an advocate for testing in general, and this is a short thought on how to make it better.</p>

<p><img src="http://i.imgur.com/ozzuTNQ.png" alt="Double tests are not fine" /></p>

<!--more-->


<p>As soon as we begin to write a test for our code, it is natural for us to think that we are doing a good thing, and often, we are.  Yet, I believe there are times that we’re writing tests when we’re hurting more than helping — and, of course, this is not on purpose.  To clarify, I’m an advocate for testing in general, and this is a short thought on how to make it better.</p>

<h2>Verify It, and Be Done</h2>

<p>One of the main goals of testing is to verify that what you have written is correct.  So, if we’ve met that goal, there’s no need to go around the track one more time and see the checkered flag again.  The second time around produces no extra glory and no extra benefit.</p>

<p>If we cover a section of code many times, it isn’t more helpful than the first time we covered it.  To verify twice isn’t to verify any better.  If the second attempt does happen to verify the same thing in an obviously better way, remove the first attempt and keep the second.</p>

<p>If it’s a variation of a certain case that you’re verifying, that’s different.  Adding new cases based on slight permutations of previous cases can be a good thing.  But covering the exact same thing provides no value.  In fact, multiple verification of code is just a type of debt.  It should be a smell in your test code that alerts you to clean things up.</p>

<h2>The Debt of Duplicate Tests</h2>

<p>If you have multiples of something, it just increases the maintenance over time.  Why would you want to update two tests instead of one?  Now that you have duplicate tests, you also have to keep them in sync.  Of course, if they cover the exact same case, if you change source code to fix the one test, the other will still be broken and be apparent and easy to fix.</p>

<p>The more tests you have, the longer your feedback loop in development or in a continuous build environment will be.  Multiply that extra wait time across your life on the project, and it has the possibility of being a non-trivial product.  Of course we need to wait for the tests that are needful and provide added value, but we shouldn’t wait needlessly.</p>

<p>Sometimes you do see duplicate tests within the same file — for instance, within the same unit.  This might happen when different developers approach the unit at different times to add tests.</p>

<p>I think it’s probably more often the case that duplicate tests are found across test classes &#8211; meaning across the different types of tests.  For instance, a developer might write a unit test that covers a case.  Later, someone else might add an integration test that adds the same case.  Later still, someone else might add a functional test that adds the same case yet again.  All these developers are well-intentioned in adding tests.  They all need to think, communicate, investigate, and coordinate a little more to avoid the duplicate test problem.</p>

<h2>Deleting Duplicate Tests</h2>

<p>When duplicate tests are found, we should delete them.  Again, this might require some thinking.  We might want to consider which of the duplicate cases is the best test and therefore the one to keep.  This consideration might include which test is most stable, runs the fastest, is most readable, best designed, latest, earliest, etc.</p>

<h2>Avoiding Duplicate Tests</h2>

<p>The best scenario would be the one where we avoid duplicate tests.  Teams with clear guidelines will be able to coordinate better.  Useful information might include which classes of tests exist in the project and what each is intended for.  We might describe which kinds of tests we prefer, in which order, for certain kinds of verifications.  Having clean, well-organized tests will also encourage the team to read each others’ tests and familiarize themselves with what’s already written and know where to find existing cases and where to properly categorize new cases.</p>

<p>So have fun testing, and destroy the duplicate tests!  Yay for test doubles, but boo for double tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expose HTTP Headers in CORS]]></title>
    <link href="http://jaketrent.com/post/expose-http-headers-in-cors/"/>
    <updated>2014-09-15T09:42:00-06:00</updated>
    <id>http://jaketrent.com/post/expose-http-headers-in-cors</id>
    <content type="html"><![CDATA[<p>For APIs, it seems more and more data is making its way into the HTTP headers.  Recently, whilst adding a <code>Link</code> header, for paging data, into the HTTP response, I realized that my browser code couldn&#8217;t see it.  Who was the culprit?  CORS, of course.</p>

<p><img src="http://i.imgur.com/JAce7py.jpg" alt="Cors" /></p>

<!--more-->


<h2>Headers in Browser</h2>

<p>It was just another day, and I was developing in my browser of choice, Chrome, known, in part, for its unequaled developer tools.  The <code>Link</code> header that I had added onto my HTTP responses for my API were viewable from the Network tab.  It looked good.  The browser could see it, curl could even see it.</p>

<p>In the browser client code, I was using <code>superagent</code>, but the code failed to see it.  I&#8217;d run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;superagent&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;myApi&#39;</span><span class="p">).</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">getResponseHeader</span><span class="p">(</span><span class="s1">&#39;Link&#39;</span><span class="p">)</span> <span class="c1">// nothing</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">link</span> <span class="c1">// nothing</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the header was not coming through.  I ran the same command in the console, <code>res.xhr.getResponseHeader('Link')</code>, and got the error response:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Refused</span> <span class="nx">to</span> <span class="nx">get</span> <span class="nx">unsafe</span> <span class="nx">header</span> <span class="err">‘</span><span class="nx">Link</span><span class="err">’</span>
</span></code></pre></td></tr></table></div></figure>


<p>These are a classic CORS symptoms.</p>

<h2>CORS Spec</h2>

<p>Well, a few great <a href="http://blog.import.io/tech-blog/exposing-headers-over-cors-with-access-control-expose-headers">google results</a> later, I ended up at the <a href="http://www.w3.org/TR/cors/#simple-response-header">CORS spec</a>, which drones on that only simple headers are allowable in CORS requests by default.  These headers include:</p>

<ul>
<li>Cache-Control</li>
<li>Content-Language</li>
<li>Content-Type</li>
<li>Expires</li>
<li>Last-Modified</li>
<li>Pragma</li>
</ul>


<p><code>Link</code> is definitely not on that list.  So, how to add it?</p>

<h2>Access-Control-Expose-Headers in rack-cors</h2>

<p>Like the other CORS headers, the <code>Access-Control-</code> prefix is present.  The one you&#8217;re looking for is <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS"><code>Access-Control-Expose-Headers</code></a>.  It is a comma-separated list of header names. You can add this header manually to your response, or depending on the library you&#8217;re using, it might be added differently.</p>

<p>I was using <code>rack-cors</code>.  Thus, my addition ended up looking something like:</p>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># ...</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Cors</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">allow</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">origins</span> <span class="s1">&#39;*&#39;</span>
</span><span class='line'>    <span class="n">resource</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="ss">:headers</span> <span class="o">=&gt;</span> <span class="ss">:any</span><span class="p">,</span> <span class="ss">:methods</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:get</span><span class="p">,</span> <span class="ss">:post</span><span class="p">,</span> <span class="ss">:put</span><span class="p">,</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">:options</span><span class="o">]</span><span class="p">,</span> <span class="ss">:expose</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Link&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Can you see that the <code>expose</code> key was the key for me?  Once that was added, the browser let the client code read the link, and all was safe and well.</p>

<h2>Bonus:</h2>

<p>As a bonus, here&#8217;s a great client library for consuming a <a href="https://developer.github.com/v3/#link-header">GitHub API-style</a> <code>Link</code> header, called <a href="https://www.npmjs.org/package/parse-link-header">parse-link-header</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Send Props to Children in React]]></title>
    <link href="http://jaketrent.com/post/send-props-to-children-react/"/>
    <updated>2014-08-12T16:55:00-06:00</updated>
    <id>http://jaketrent.com/post/send-props-to-children-react</id>
    <content type="html"><![CDATA[<p>In React, you&#8217;re always making components.  Sometimes components are standalone.  Other times, you&#8217;ll have components that can nest children components.  Sometimes you&#8217;ll want to send properties to the children components from the parent as often as a doting parent wants to send packages to a child missionary.  It&#8217;s possible, it&#8217;s simple, and it&#8217;s not documented super well.  Here&#8217;s one method.</p>

<p><img src="http://i.imgur.com/DXuSNbw.png" alt="React" /></p>

<!--more-->


<h2>Children Components</h2>

<p>When parent components are rendered, they have access to a special property, <code>this.props.children</code>.  It&#8217;s like an Angular <code>ng-transclude</code> or an Ember <code>yield</code>.  Children components are generally rendered something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;iAmParentHearMeRoar&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The generic example above shows simply how to render children, <code>props</code> untouched, within a parent component.  Sometimes, however, a parent wants to bequeath its children with extra properties.  How will we make that happen?</p>

<h2>Setting Child Props</h2>

<p><code>props</code> are meant to be immutable.  But, in order for us to send <code>props</code> values to our children, we&#8217;re going to essentially loop through our children and set props on them as a part of our parent <code>render</code> function.</p>

<p>Deep breath.  It&#8217;s ok.  The children that we&#8217;ll loop through aren&#8217;t mounted component instances.  They are, instead, <a href="http://facebook.github.io/react/blog/2014/07/17/react-v0.11.html#descriptors">descriptors</a>.  These descriptors have all the <code>props</code> attributes that we&#8217;ve declared should be put on the components, but they haven&#8217;t been rendered yet.  Because of this, we can change props, and it&#8217;s ok.  We&#8217;re not mutating what has rendered.  The data still hasn&#8217;t flowed to the children.  We&#8217;re still effectively still riffing on the logic of what the children components should really be when they&#8217;re eventually mounted.</p>

<h2>Looping on Children Components</h2>

<p><code>this.props.children</code> is a funny property.  It&#8217;s special in more ways than one.  The things that might trip us up in looping is that even though it sounds like a plural thing, meaning an array, sometimes it&#8217;s a singular object.  To help avoid potential problems, React gives us a helper, <code>React.Children</code>.  It has a few functions for array iteration, such as <code>map</code> and <code>forEach</code> that help account for the potential forms of <code>this.props.children</code>.</p>

<h2>Functional Modifications</h2>

<p>Immutable data is a big part of functional programming.  This means that when we &#8216;mutate&#8217; the props, we want to mutate on a clone of the child component without affecting the original.  There&#8217;s an input, there&#8217;s an output, and the input is untouched.  Once we have our cloned children components as we want them, we&#8217;ll render those instead.  React offers another great helper for cloning components and setting properties in a single function, <code>React.addons.cloneWithProps</code>.  Note that in order to use this function, you need to <code>require('react/addons')</code>.</p>

<h2>Checking Child Type</h2>

<p>It&#8217;s a generally-useful thing to be able to tell what the React class type of a component object is.  It&#8217;s an applicable skill in terms of looping through child components because we might not want to modify the properties of all types of children.  Each React component class has a <code>type</code> attribute accessible via <code>MyComponent.type</code>.  This attribute is also available on component descriptors.</p>

<h2>A Child CheckOption Example</h2>

<p>To bring this all together and illustrate the concepts, let&#8217;s say we created a <code>RadioGroup</code> component that could take one or many <code>RadioOption</code> child components.  In raw html, which is what our component will eventually render, <code>input</code>s with type <code>checkbox</code> need to all have the same <code>name</code> attribute value to work well as toggles within the group.  But this is something that React can help us not have to duplicate.  We&#8217;ll instead put a <code>name</code> property on the parent <code>RadioGroup</code> and have it transfer it as a property on all its children.  The implementation might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/** @jsx React.DOM */</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react/addons&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">RadioOption</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">label</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;radio&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">value</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">label</span><span class="p">}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/label&gt;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">RadioGroup</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">renderChildren</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Children</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">child</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">child</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="nx">RadioOption</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">React</span><span class="p">.</span><span class="nx">addons</span><span class="p">.</span><span class="nx">cloneWithProps</span><span class="p">(</span><span class="nx">child</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">name</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">child</span>
</span><span class='line'>    <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">))</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;radio-group&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">renderChildren</span><span class="p">()}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">WhereImUsingRadioGroups</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">RadioGroup</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;blizzard-games&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">RadioOption</span> <span class="nx">label</span><span class="o">=</span><span class="s2">&quot;Warcraft 2&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;wc2&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">RadioOption</span> <span class="nx">label</span><span class="o">=</span><span class="s2">&quot;Warcraft 3&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;wc3&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">RadioOption</span> <span class="nx">label</span><span class="o">=</span><span class="s2">&quot;Starcraft 1&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;sc1&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">RadioOption</span> <span class="nx">label</span><span class="o">=</span><span class="s2">&quot;Starcraft 2&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;sc2&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/RadioGroup&gt;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, where the parent <code>RadioGroup</code> has the <code>name</code> prop, it will be given to each of the children so their <code>name</code> prop will match and the radio group will work as expected.  Thus, the hearts of the children are turned toward their fathers.</p>

<p>Is there a better way to do this?  How have you been sending <code>props</code> to children?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set State in Callbacks in React]]></title>
    <link href="http://jaketrent.com/post/set-state-in-callbacks-in-react/"/>
    <updated>2014-06-23T08:30:00-06:00</updated>
    <id>http://jaketrent.com/post/set-state-in-callbacks-in-react</id>
    <content type="html"><![CDATA[<p>In React, you can setup components that fetch their own data and set their own state with that data.  Because of the async nature of data fetching, you’ll have to make sure to keep things cleaned up to avoid the error of trying to set state in an unmounted component.</p>

<p><img src="http://i.imgur.com/DXuSNbw.png" alt="React" /></p>

<!--more-->


<p><strong>Updated</strong> for React 0.13.  See below</p>

<h2>React Components setState</h2>

<p>If a React component fetches its own data, it will usually do so in the <code>componentDidMount</code> method.  In the data request callback, it will set its own state via the <code>this.setState</code> method.  (<code>this.state</code> should be treated as immutable.)  State should only be set on mounted components, or those components that are inserted into the dom.</p>

<p>If you attempt to set state on an unmounted component, you&#8217;ll get an error that looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Uncaught Error: Invariant Violation: replaceState(...): Can only update a mounted or mounting component.</span></code></pre></td></tr></table></div></figure>


<p>Others have reported this variation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Invariant Violation: replaceState(...): Cannot update while unmounting component. This usually means you called setState() on an unmounted component.</span></code></pre></td></tr></table></div></figure>


<p>Both indicate that you&#8217;re setting state on a component that is not mounted.  How should one avoid this?  In my case, <code>setState</code> was being called in a callback that was firing after the component that initially started the request had already been unmounted from the dom.  Here are the two ways I addressed the problem&#8230;</p>

<h2>Assure Component isMounted</h2>

<p>If the component is mounted, <code>setState</code> is a safe bet.  If it&#8217;s not mounted, never do it.  If it&#8217;s not mounted, you probably don&#8217;t about the state at that point either.  So wrap your state setting in <code>this.isMounted()</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">componentDidMount</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">MyModel</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isMounted</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">goodiesFrom</span><span class="o">:</span> <span class="nx">data</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>It feels a bit like a hack, but it makes the code safe.  Another option&#8230;</p>

<h2>Abort the Request</h2>

<p>My asynchronous action is a network request that, when finished, will call the callback function.  When the component unmounts, I can just throw away the request so the callback is never invoked.  To do this, we&#8217;ll take advantage of another React lifecycle hook, <code>componentWillUnmount</code>:</p>

<figure class='code'><figcaption><span>my-component.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">componentDidMount</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">req</span> <span class="o">=</span> <span class="nx">MyModel</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({})</span>
</span><span class='line'>    <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">))</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">componentWillUnmount</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">req</span><span class="p">.</span><span class="nx">abort</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>In my model, I&#8217;m using the <a href="https://github.com/visionmedia/superagent">superagent</a> library for network requests which provides an <a href="http://visionmedia.github.io/superagent/#aborting-requests">abort</a> method.</p>

<figure class='code'><figcaption><span>my-model.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="err">‘</span><span class="nx">superagent</span><span class="err">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">MyModel</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">find</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">request</span><span class="p">(</span><span class="err">‘</span><span class="nx">modelUrl</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also note that in my <code>end</code> function callback, I&#8217;m checking for the existence of data.  This is because when a request is aborted, data will come back as undefined.</p>

<p>My favored method for solving the problem is the latter request abort method.  It feels cleaner that we&#8217;re relying on the lifecycle functions of the component to deal with cleanup, much like we would for <a href="http://facebook.github.io/react/tips/dom-event-listeners.html">events</a>.  How have you dealt with this problem?</p>

<h2>Update: Using ES6 Classes</h2>

<p>With React 0.13, you can define your components using the ES6 <code>class</code> definition.  These classes conspicuously change behavior from the old style of <code>React.createClass</code> in several ways.  Here are a couple that are relevant here:</p>

<ul>
<li>There is no <code>isMounted()</code> method any more</li>
<li>There is no <code>getDOMNode()</code> method any more</li>
</ul>


<p><code>isMounted</code> is gone, awol, as far as I can tell, and <code>getDOMNode</code> has been moved to a utility function.</p>

<p>So, in order to get the DOM Node, you&#8217;d call it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">React</span><span class="p">.</span><span class="nx">getDOMNode</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="c1">// `this` would be my component</span>
</span></code></pre></td></tr></table></div></figure>


<p>It functions as before.</p>

<p>In order to check <code>isMounted</code>, you&#8217;re on your own.  My basic implementation can be seen in the following <a href="http://jsbin.com/telopegaya/2/edit?js,output">jsbin</a>.  Frankly, it feels dirty.  <code>React.findDOMNode</code> will throw an exception if the component isn&#8217;t mounted, so we are using exceptions for flow control.  Egh:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">isMounted</span> <span class="o">=</span> <span class="p">(</span><span class="nx">component</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// exceptions for flow control :(</span>
</span><span class='line'>  <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">React</span><span class="p">.</span><span class="nx">findDOMNode</span><span class="p">(</span><span class="nx">component</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Error: Invariant Violation: Component (with keys: props,context,state,refs,_reactInternalInstance) contains `render` method but is not mounted in the DOM</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>How it might still be used:</p>

<p><a class="jsbin-embed" href="http://jsbin.com/telopegaya/2/embed?js,output">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>

<p>This leaves me with the question of why <code>isMounted</code> was removed if it helps solve a potential problem.  Do we solve it in another way?  Does the core library do more for you?  You can verify for yourself in the jsbin above that if you remove the <code>isMounted</code> check, the old invariant error message is still logged.</p>

<p>Does anyone have a <em>good</em> <code>isMounted</code> solution?</p>
]]></content>
  </entry>
  
</feed>
