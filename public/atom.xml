<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jake Trent]]></title>
  <link href="http://jaketrent.com/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2014-03-17T08:24:37-06:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Detecting Window Closing in Ember]]></title>
    <link href="http://jaketrent.com/post/ember-window-beforeunload/"/>
    <updated>2014-03-17T08:04:00-06:00</updated>
    <id>http://jaketrent.com/post/ember-window-beforeunload</id>
    <content type="html"><![CDATA[<p>In a long-running app such as you might build in Ember, it can be useful to detect when the window is closing.  This is easily detected with JavaScript, and there are easy places to put the code in your Ember app.</p>

<p><img src="http://i.imgur.com/85v8PQP.png" alt="Ember beforeunload" /></p>

<!--more-->


<h2>beforeunload</h2>

<p>The <code>window</code> event that you want to listen for is <code>beforeunload</code>.  You might bind to the event like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">bind</span> <span class="s">&#39;beforeunload&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="s">&#39;Are you sure you want to close this window?&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Return a string from the function.  This string will be displayed in a browser-native confirm-style dialogue.</p>

<h2>beforeunload in Ember</h2>

<p>Now, if your app is controlled by Ember, you&#8217;re likely going to want it to handle bindings such as this from within Ember.  There are several places you might want to put this code.  Your decision will depend on the needs of your app.  You can put it in a route or controller.  The scope of that route or controller should match the scope for which you want the <code>beforeunload</code> event to be caught.  In other words, if you want <code>beforeunload</code> to be caught for the entire app, put the listener in <code>ApplicationRoute</code> (or <code>ApplicationController</code>).  Or if you wanted a more limited scope, put the listener in a more specific route.</p>

<p>For instance, if you wanted to save a blog post when the user closes a tab, you might implement something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">App.BlogEditController = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">saveBeforeClose: </span><span class="p">(</span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">bind</span> <span class="s">&#39;beforeunload&#39;</span><span class="p">,</span> <span class="o">=&gt;</span>
</span><span class='line'>      <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;model&#39;</span><span class="p">).</span><span class="nx">save</span><span class="p">()</span>
</span><span class='line'>      <span class="s">&#39;Are you sure you want to leave unsaved work?&#39;</span>
</span><span class='line'>  <span class="p">).</span><span class="kc">on</span> <span class="s">&#39;init&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>In Practice</h2>

<p>In practice, the UX for this kind of feature can be tricky.  If someone closes a tab, odds are they meant to and don&#8217;t want to be bothered with a confirm dialogue asking them to reiterate their decision.  On the other hand, maybe the didn&#8217;t realize the implications of closing out the app, such as in the case of unsaved work, and they become very grateful for the reminder to stay and save something.</p>

<p>In the case of the last example, it would be cool if we could detect the window closing, save the work automatically, and let the user close the tab as they indicated without interruption.  For asynchronous actions such as network requests, this is problematic.  The request will not finish before the browser has trashed the whole window.  In cases such as this, you will need to synchronize your requests to block before finishing execution of the <code>beforeunload</code> event callback.</p>

<p>So, does this work for you?  How might you make it better?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Express Validator]]></title>
    <link href="http://jaketrent.com/post/testing-express-validator/"/>
    <updated>2014-03-10T07:37:00-06:00</updated>
    <id>http://jaketrent.com/post/testing-express-validator</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/ctavan/express-validator">Express-validator</a> is a <a href="http://expressjs.com/api.html#middleware">middleware for Express</a> on Node.js that can help you validate user input.  It&#8217;s a lovely library.  Here&#8217;s a pattern for testing code that uses it.</p>

<p><img src="http://i.imgur.com/ZfK9bv4.png" alt="express-validator" /></p>

<!--more-->


<h2>Install</h2>

<p>To get <code>express-validator</code> in your project, install with npm:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install express-validator --save
</span></code></pre></td></tr></table></div></figure>


<h2>Plug in the Middleware</h2>

<p>To use the middleware in your code, crack open the part of your app that sets up Express middlewares, and add in a reference to this lil beaut:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">expressValidator = </span><span class="nx">require</span> <span class="s">&#39;express-validator&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span> <span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">()</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span> <span class="nx">expressValidator</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that you should insert the new <code>express-validator</code> middleware directly after the <code>json</code> middleware.  Also note that the <code>json</code> middleware, used in conjunction with <code>urlencoded</code> now <a href="http://andrewkelley.me/post/do-not-use-bodyparser-with-express-js.html">replace <code>bodyParser</code></a> to avoid deprecation warnings on startup.</p>

<h2>Validate Something</h2>

<p>Let&#8217;s say you&#8217;re writing a validator for new posts to a blog.  That code might look like this.</p>

<figure class='code'><figcaption><span>blog-new-validator.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">module.exports = </span><span class="nf">(req) -&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">req</span><span class="p">.</span><span class="nx">checkBody</span><span class="p">(</span><span class="s">&#39;title&#39;</span><span class="p">,</span> <span class="s">&#39;Title is required&#39;</span><span class="p">).</span><span class="nx">notEmpty</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">req</span><span class="p">.</span><span class="nx">checkBody</span><span class="p">(</span><span class="s">&#39;body&#39;</span><span class="p">,</span> <span class="s">&#39;Body is required&#39;</span><span class="p">).</span><span class="nx">notEmpty</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">validationErrors</span><span class="p">()</span> <span class="o">or</span> <span class="nx">req</span><span class="p">.</span><span class="nx">validationErrors</span><span class="p">().</span><span class="nx">length</span> <span class="o">is</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>It checks to see if there is a title and a body given.  If there is not, the validator will return false, and there will be a validation errors array on the <code>req</code> object.  There are many <a href="https://github.com/chriso/validator.js">other assertions (provided internally by validator.js)</a> besides <code>notEmpty</code> that you can use.</p>

<h2>Validating the Validator</h2>

<p>First, setup a test helper that stubs the request, <code>req</code>, for validation:</p>

<figure class='code'><figcaption><span>req.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">expressValidator = </span><span class="nx">require</span><span class="p">(</span><span class="s">&#39;express-validator&#39;</span><span class="p">)()</span>
</span><span class='line'>
</span><span class='line'><span class="nv">exports.stubForValidation = </span><span class="nf">(done) -&gt;</span>
</span><span class='line'>  <span class="nv">req =</span>
</span><span class='line'>    <span class="nv">query: </span><span class="p">{}</span>
</span><span class='line'>    <span class="nv">body: </span><span class="p">{}</span>
</span><span class='line'>    <span class="nv">params: </span><span class="p">{}</span>
</span><span class='line'>    <span class="nv">param: </span><span class="nf">(name) -&gt;</span>
</span><span class='line'>      <span class="nx">@params</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">expressValidator</span> <span class="nx">req</span><span class="p">,</span> <span class="p">{},</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">done</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&#8217;s nothing too incredibly special here.  It&#8217;s just abstracted out of your test into a reusable helper.  The <code>req</code> object has empty objects to slap fixture data onto in your tests.  It includes a stubbed <code>param</code> function that can return params by name.  Finally, the <code>express-validator</code> middleware is called with the stubbed <code>req</code> object.</p>

<p>Now, in your test, you can simply:</p>

<ol>
<li>Stub the request before each test</li>
<li>Setup your fixture data to make the test pass (or not)</li>
<li>Assert validation errors&#8217; existence and messages</li>
</ol>


<figure class='code'><figcaption><span>blog-new-validator.spec.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">stubReq = </span><span class="nx">require</span><span class="p">(</span><span class="s">&#39;req&#39;</span><span class="p">).</span><span class="nx">stubForValidation</span>
</span><span class='line'><span class="nv">validateNew = </span><span class="nx">require</span> <span class="s">&#39;blog-new-validator&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span> <span class="s">&#39;blog-new-validator&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">req = </span><span class="kc">null</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span> <span class="nf">(done) -&gt;</span>
</span><span class='line'>    <span class="nx">stubReq</span> <span class="nf">(r) -&gt;</span>
</span><span class='line'>      <span class="nv">req = </span><span class="nx">r</span>
</span><span class='line'>      <span class="nx">done</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span> <span class="s">&#39;is invalid without title&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">validateNew</span><span class="p">(</span><span class="nx">req</span><span class="p">).</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="kc">false</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">validationErrors</span><span class="p">(</span><span class="kc">true</span><span class="p">).</span><span class="nx">title</span><span class="p">.</span><span class="nx">msg</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">eql</span> <span class="s">&#39;Title is required&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span> <span class="s">&#39;is invalid without body&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">validateNew</span><span class="p">(</span><span class="nx">req</span><span class="p">).</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="kc">false</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">validationErrors</span><span class="p">(</span><span class="kc">true</span><span class="p">).</span><span class="nx">body</span><span class="p">.</span><span class="nx">msg</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">eql</span> <span class="s">&#39;Body is required&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span> <span class="s">&#39;is valid with title and body&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">req.body.title = </span><span class="s">&#39;New Blog Title&#39;</span>
</span><span class='line'>    <span class="nv">req.body.body = </span><span class="s">&#39;The body of the blog.&#39;</span>
</span><span class='line'>    <span class="nx">validateNew</span><span class="p">(</span><span class="nx">req</span><span class="p">).</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>What do you think?  Is there an easier way?  A way to get better assertions?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switch: How to Change Things When Change is Hard Review]]></title>
    <link href="http://jaketrent.com/post/switch-review/"/>
    <updated>2014-03-04T07:51:00-07:00</updated>
    <id>http://jaketrent.com/post/switch-review</id>
    <content type="html"><![CDATA[<p>The book is called Switch: How to Change Things When Change is Hard.  It&#8217;s by Chip Heath and Dan Heath.  It shows interesting anecdotes and good strategies on how to motivate people and situations to change.</p>

<p><img src="http://i.imgur.com/zjnOrqX.jpg" alt="Switch" /></p>

<!--more-->


<h2>Who are you?</h2>

<p>Did you know you are actually a combination elephant and rider?  Your rider represents your analytical thinking.  He wants to know every option.  He gets hung up in analysis paralysis.  It is likely he&#8217;ll never make a decision.  Your elephant represents your emotions and your instincts on things.  It&#8217;s much bigger than the rider, who is supposedly in control.  If your elephant decides it wants something, it usually gets its way.</p>

<p>This analogy of our two halves is a bit silly but works quite well.  It illustrates well our internal struggle.  It helps me realize how I approach problems, seek solutions, and eventually make a choice on how to proceed.  I thought it was quite helpful.  As with most of the concepts in the book, it is revisited many times, presumably in order for us to do a better job remembering the concept.</p>

<h2>Practical and Powerful</h2>

<p>The 3 main thrusts of the book are focused around a strategy that the authors stated they hoped was small and simple enough to be memorable and practiced yet real and powerful enough to actually help us exact change.</p>

<h3>1. Direct the Rider</h3>

<p>The rider, admittedly, will not make decisions easily.  So, he needs some direction.  It can be hard to choose how to even begin to change.  The main helps stated in the book are as follows:</p>

<h4>Follow the Bright Spots</h4>

<p>In the problem situation or field that you are considering, there are most definitely things that <em>are</em> working.  These are the bright spots.  Why not replicate these good things in your own way for your own problem?  There are people who have faced a similar problem, whether they knew it or not, and found their way through all or part of it.  These are usually easier to discover than by starting from scratch.  And we know they&#8217;ll work!</p>

<h4>Script the Critical Moves</h4>

<p>To ensure the rider takes action, you&#8217;ll want to make it more than abundantly clear what <em>exactly</em> you want him to do.  If there is one thing that will make the biggest impact, that becomes your critical move.  Script, just as in a screenplay, exactly what actors in the program are expect to perform.</p>

<h4>Point to the Destination</h4>

<p>As the rider is weighing options, there will be many that appeal to him (or not).  It will be important to enumerate in an analytical way why the destination you&#8217;re choosing is worth pointing toward.</p>

<h3>2. Motivate the Elephant</h3>

<p>The elephant, once sufficiently motivated becomes the powerhouse that ensures change will begin.  The elephant is the one to change inertia, bringing us lurching out of our standing position.</p>

<h4>Find the Feeling</h4>

<p>Knowledge alone will not change behavior.  This is obvious considering our clear knowledge of the ill effects of habits such as smoking.  People still smoke.  So we must additional paint an emotional picture of what a change may mean to someone, what it will feel like, and the deeper reasons for attempting it.</p>

<h4>Shrink the Change</h4>

<p>Large changes require a large effort and many steps.  It may look daunting, especially to start.  The elephant starts on emotion, but it will also stop by the same virtues.  Break down the change into steps that are small and readily doable.</p>

<h4>Grow Your People</h4>

<p>People attach themselves to causes.  Causes appeal to the inner values of people and motivate them from within.  Encourage a sense of identity with the change you&#8217;re promoting.  If people can identify with the behavior as a part of who they are, they are likely to meet the change with a great dose of internal enthusiasm and excitement.</p>

<h3>3. Shape the Path</h3>

<p>Even with great instructions for our riders and motivation for our elephant, the friction to change may still be strong.  There is still more we can do to help.</p>

<h4>Tweak the Environment</h4>

<p>What looks like resistance from a person may just be that person falling into the environmental norms.  It may be the way things have always been done, and it&#8217;s natural to continue doing them.  Make the change you advocate the most natural thing to do as a product of the environment.  And consider environmental change your responsibility before you blame others for not responding well to change.</p>

<h4>Build Habits</h4>

<p>It turns out that making decisions, especially hard decisions to change, takes energy and will power.  And we only have so much to give.  If something becomes automatic, the effort to enact the behavior will be much lower.  We&#8217;ll just do it.  Determine how you can create triggers that happen automatically to regularly change behavior along the path.</p>

<h4>Rally the Herd</h4>

<p>Behavior is contagious.  People want to respond as others around them do.  Most people instinctively do not want to stand out, especially in negative ways, compared to the crowd around them.  To encourage change, publicize the majority behavior that is in line with what you seek.</p>

<h2>Style and Read</h2>

<p>Switch is a pretty short book.  The sheer amount of anecdotal and interesting examples of people chaning their lives and communities made it fun and inspiring to read.  I think I&#8217;d have to re-read it to have the strategies and tactics for change sink in deep enough to pull them out in the midst of change, but it does seems small enough to remember and powerful enough to be useful.  At the least, it&#8217;s a great reference.  I&#8217;d recommend the book.  And since everyone has encountered and/or wants to change, it seems like an applicable read.  Chip and Dan have several other books I&#8217;m going to go check out now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ng-Conf Review]]></title>
    <link href="http://jaketrent.com/post/ng-conf-review/"/>
    <updated>2014-01-24T07:22:00-07:00</updated>
    <id>http://jaketrent.com/post/ng-conf-review</id>
    <content type="html"><![CDATA[<p>Ng-Conf just happened last week in Salt Lake City, Utah.  It was awesome.  Oh blast, I blew the punch line.  Anyway, here&#8217;s my take.</p>

<p><img src="http://i.imgur.com/4swtO6x.jpg" alt="ng-conf" /></p>

<!--more-->


<h2>Format</h2>

<p>Two days.  Early &#8216;til late.  One track.  20-40 min talks virtually back to back.  Lightning&#8217;y?  When we broke for lunch, I felt relieved.  My brain could go into some low-power mode.  Breaks between talks were mostly announced as anywhere from 30 seconds to 3 minutes, this whilst yammering off a short list of swag winners.  The format encouraged content, and there was a lot of it!</p>

<h2>Line Up</h2>

<p>The conference was easy to look forward to.  Looking at the speaker list, I was immediately impressed.  At one point during the event, Aaron Frost said that they hoped if the Angular team would come that they&#8217;d get more attendees.  Yes, that was a draw.  It was fun having them there.  Core.  Very core.  I believe that about each member of the team took the stage over the two days.</p>

<p>The speaker list in total was very impressive.  There was a good mix of local and remote talent who came together to cover a broad array of Angular and JavaScript-related topics.</p>

<h2>Talk Quality</h2>

<p>Talk for talk, just numbers-wise, it was definitely one of the most high quality conferences I&#8217;ve attended.  Of course, there were some less-than-stellar presentations.  But, on the whole, I was more than impressed by the subject mastery and teaching ability of the speakers.  Thank you to everyone who prepared.</p>

<p>There were also some definite highlights: Dave Smith on directives, Vojta Jina on DI, Brian Ford on zone.js, and Julie Ralph on Protractor.</p>

<p>And one of the best parts is that each of these talks was recorded on video for a livestream and <a href="http://www.youtube.com/user/ngconfvideos">on youtube for later viewing</a>.</p>

<h2>Venue</h2>

<p>The conference was held at the Little America hotel in Salt Lake City.  It was a beautiful location.  The combined main ballrooms that the talks were held in were awesome.  Plenty of marble.  The food was great.  There weren&#8217;t tons of snacks, but that was probably good for my health.  The air quality in Salt Lake during the conference wasn&#8217;t good.  In fact, oobleck!  But, I didn&#8217;t get food poisoning &#8211; plus!</p>

<h2>Smooth</h2>

<p>I heard it said by multiple people during the conference that it was the best first-time conference they had attended.  Indeed, everything went Domo smooth.  The content was the star.  It was fun.  It was energetic (minus some confusing lack of screaming for all the sweet swag &#8211; probably had something to do with the sheer amount, like clapping for the 3rd curtain call).  The AV crew did a fantastic job.  Usually, it&#8217;s annoying to sit in an audience as video or audio problems plague the start of a talk.  That simply did not happen here, and it was oh, so refreshing.</p>

<p>Oh yeah, and sweet jacket!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developing an Ember Edge Review]]></title>
    <link href="http://jaketrent.com/post/developing-an-ember-edge-review/"/>
    <updated>2014-01-23T11:19:00-07:00</updated>
    <id>http://jaketrent.com/post/developing-an-ember-edge-review</id>
    <content type="html"><![CDATA[<p>The latest book on The List at <a href="http://emberwatch.com/books">emberwatch</a> is <a href="http://bleedingedgepress.com/our-books/developing-an-ember-edge/">Developing an Ember Edge</a>.  It&#8217;s a great intro book to Ember.js.</p>

<p><img src="http://i.imgur.com/85v8PQP.png" alt="Developing an Ember Edge" /></p>

<!--more-->


<p>The book is published by Bleeding Edge Press.  Pretty awesome name.  It is written by Jamie White, Matthew Beale, Christopher Sansone, Wesley Workman, and Bradley Priest, quite the host of authors.  It turns out to be a very timely read for me.  The code in the book even uses some of ember-data 1.0 beta 3.  As of this writing, that&#8217;s almost the bleeding edge.</p>

<p>I would compare the book to the <a href="http://emberjs.com/guides/">Ember.js official guides</a>.  It&#8217;s introductory.  It definitely favors a breadth approach.  For me, but a wee Ember babe, it brings to light some interesting details about the Ember internals or at least the approach of the framework.</p>

<h2>Format</h2>

<p>I read the book in digital form as a pdf.  I love the digitalness, but I wonder if it wouldn&#8217;t have had a bit more editorial review if printed.  Perhaps this is what Bleeding Edge Press means.  The code in the snippets was all smashed to the left, destroying most indentation reading assistance.  The code bits were also a smaller font size than the prose which made the switch between the two slightly awkward to my over-taxed eyes.  By the end of the book, I wasn&#8217;t surprised when I found a typo.  There were a lot but not too many.  For someone of lesser OCD, it probably would&#8217;ve largely gone unnoticed.  Of course, considering the engineer audience of the book, maybe that doesn&#8217;t exist.</p>

<h2>The Zen of Ember</h2>

<p>The book content is really good.  I felt like it helped me piece together why things are organized in Ember as they are.  I learned more of what the pieces are by themselves and how they&#8217;re meant to interact together.  The authors were also kind to point out where some of the rough edges were in terms of design (or potential misdesign by app authors) and api changes.</p>

<p>I liked the mostly-breadth approach to the writing.  The book was good for a newb and remained pretty short.  Perhaps that&#8217;s because there&#8217;s not too much there as a general subject without bloating this book into an API reference book. [whew]  The book struck a good balance of being technical, readable, and giving good insight into the practical use of the framework.</p>

<h2>Ember Trackr</h2>

<p>The first half of the book covers the concepts and layers of Ember, approaching mvc in general, objects, application, routes, handlebars, views, controllers, components, and models.  This takes 54 pages.  The other half(+) shows the development of a ticket tracking app.</p>

<p>The development process shown is thorough, even including the tool install, project file layout, and ui styling.  The TDD of the app in total was awesome.  It&#8217;s really step by step.  Sometimes this was a little painful, but you definitely don&#8217;t miss anything.  The screenshots of test runners in terminals and the app in browser windows could have been cropped for easier reading with less vertical blank space.  The testing walkthrough was really great.  They even worked through a few &#8220;unexpected&#8221; errors as one might actually encounter them.</p>

<p>The app dev portion could probably have been cut short.  About the time they start into the user management screens, we probably could have called it good.  But, they do introduce some good, new concepts in the app dev section of the book.  For instance, he covers a little on containers and <code>Ember.run</code> as it relates to testing.</p>

<p>I&#8217;m glad I read the book.  It was helpful to my slingshot into the Ember atmosphere.  Boom!  Go get it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Permit Array in Rails Strong Parameters]]></title>
    <link href="http://jaketrent.com/post/permit-array-rails-strong-parameters/"/>
    <updated>2014-01-22T11:19:00-07:00</updated>
    <id>http://jaketrent.com/post/permit-array-rails-strong-parameters</id>
    <content type="html"><![CDATA[<p>Rails 4 introduced the pattern of strong parameters at the controller layer.  As a best practice, you will explicitly list the parameters that an endpoint should accept in payloads.  Arrays are specified just slightly different.</p>

<p><img src="http://i.imgur.com/XOUecnw.jpg" alt="Rails" /></p>

<!--more-->


<h2>Strong Parameters</h2>

<p>You don&#8217;t want those blackhats to update any field they want on your poor models.  Raise the shields &#8211; strong parameters!  In ye olden days, <code>attr_accessible</code> could add some protection to your models.  Since Rails 4, it has been best practice to move this responsibility to the controller.  At that layer, you can make adjustments and allowances on a per-endpoint basis (eg, admin functionality has more power over a particular model than the layman user).</p>

<p>So, create a private function in your controller where you can filter your params for your model.  It might look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">private</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">luchador_params</span>
</span><span class='line'>  <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:luchador</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:favorite_move</span><span class="p">,</span> <span class="ss">:weight</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You have two main methods to use:</p>

<ul>
<li><code>require</code> - ensures that the parameter is present (as in this root <code>luchador</code> key)</li>
<li><code>permit</code> - whitelist filters the parameters to the set specified</li>
</ul>


<h2>Arrays in <code>permit</code></h2>

<p>The most standard use case for <code>permit</code> is to pass it a collection of :symbols.  These keys must represent scalar values (string, number, that sort) only.  But what about arrays?  They&#8217;re represented differently by an empty array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:luchador</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:favorite_move</span><span class="p">,</span> <span class="ss">:weight</span><span class="p">,</span> <span class="n">wins</span><span class="p">:</span> <span class="o">[]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But wait &#8211; one more problem, and I don&#8217;t like the answer here.  My client might send back a <code>nil</code> instead of an array (ie, when the luchador has no <code>wins</code>).  If this happens, cue ugly error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Unpermitted parameter: wins
</span></code></pre></td></tr></table></div></figure>


<p>To fix, default to empty array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">params</span><span class="o">[</span><span class="ss">:luchador</span><span class="o">][</span><span class="ss">:wins</span><span class="o">]</span> <span class="o">||=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:luchador</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:favorite_move</span><span class="p">,</span> <span class="ss">:weight</span><span class="p">,</span> <span class="n">wins</span><span class="p">:</span> <span class="o">[]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>What have you done that looks better?  Please! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grunt-init Exercism.io]]></title>
    <link href="http://jaketrent.com/post/grunt-init-exercism-io/"/>
    <updated>2014-01-03T07:07:00-07:00</updated>
    <id>http://jaketrent.com/post/grunt-init-exercism-io</id>
    <content type="html"><![CDATA[<p><a href="http://exercism.io">Exercism.io</a> has a great set of JavaScript exercises.  They could be made better by a better test setup and runner.  I&#8217;ve created a small grunt-init template to help in that setup.</p>

<p><img src="http://i.imgur.com/4773D.jpg" alt="Grunt and Exercism" /></p>

<!--more-->


<h2>Exercism.io</h2>

<p>For those unfamiliar, <a href="http://exercism.io">Excercism.io</a> is a great tool that helps coders and potential coders learn and expand their knowledge in several programming languages.  Currently, among the 9 language choices, JavaScript is one.  The JavaScript exercises come with a pre-built <a href="https://github.com/mhevery/jasmine-node">jasmine_node</a> test suite.  The point of the exercise is to write code that will make all the corresponding tests pass.  For more on Excercism.io, see my <a href="http://jaketrent.com/post/exercism-review/">review</a>.</p>

<h2>Vanilla jasmine_node</h2>

<p>As the <a href="http://exercism.io/help/setup/javascript">Exercism JavaScript docs</a> indicate, you can setup your JavaScript environment like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install -g jasmine_node
</span></code></pre></td></tr></table></div></figure>


<p>And then run your tests like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>jasmine_node bob_test.spec.js
</span></code></pre></td></tr></table></div></figure>


<p>This does work perfectly well.  But, we want something more.  Of course.</p>

<h2>Grunt watch</h2>

<p>We want the test suite to re-run as soon as we make a change and save either our test file or our file under test.  Well, it turns out that <a href="http://gruntjs.com">Grunt</a> is a great little command-line tool that has plugins for file watching.</p>

<p>Grunt needs to be told to use a plugin.  Then it needs to be told that we want to run the task that watches our files.  All of this is indicated to Grunt via a local <code>Gruntfile.js</code> or <code>Gruntfile.coffee</code> file.  You could create this file by yourself, but wouldn&#8217;t it be nice if there was a <code>Gruntfile.js</code> created somewhere for you already that worked well with Exercism?</p>

<h2>Grunt-init</h2>

<p>It turns out that there is a great, separate utility called <a href="http://gruntjs.com/project-scaffolding">grunt-init</a> that you can use to create your <code>Gruntfile.js</code> (and many other things) with a pre-built template.</p>

<p>To install this tool, run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install -g grunt-init
</span></code></pre></td></tr></table></div></figure>


<p>To use a grunt-init template, you need to have a local copy.  This template copy could live anywhere, but grunt-init can reference these templates purely by name if you put them in <code>~/.grunt-init/</code>.</p>

<p>To get the <a href="https://github.com/jaketrent/grunt-init-exercism">Exercism grunt-init template</a>, clone it like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git@github.com:jaketrent/grunt-init-exercism.git ~/.grunt-init/exercism
</span></code></pre></td></tr></table></div></figure>


<p>Then change into your specific Exercism directory, init your <code>Gruntfile.js</code>, and follow the other commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/dev/exercism/javascript/bob
</span><span class='line'>grunt-init exercism
</span><span class='line'>npm init
</span><span class='line'>npm install
</span></code></pre></td></tr></table></div></figure>


<p>The <code>npm init</code> will flush out the rest of the generated <code>package.json</code>.  The <code>npm install</code> will install all dependencies that we said Grunt needed to do its job.</p>

<p>Finally, activate Grunt to watch your files with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>grunt watch
</span></code></pre></td></tr></table></div></figure>


<p>Now as you write your Exercism code to fulfill tests, you will see the tests get run automatically and become greenlit as your code increases in awesomeness.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Zerigo DNS to Heroku]]></title>
    <link href="http://jaketrent.com/post/add-zerigo-dns-to-heroku/"/>
    <updated>2013-12-31T07:03:00-07:00</updated>
    <id>http://jaketrent.com/post/add-zerigo-dns-to-heroku</id>
    <content type="html"><![CDATA[<p>Once upon a time, I could setup DNS super easily on Heroku using their Zerigo DNS addon.  Lately, I tried again using the same pattern and failed.  Here&#8217;s an updated step-by-step guide.</p>

<p><img src="http://i.imgur.com/6DUwRKt.png" alt="Heroku and Zerigo" /></p>

<!--more-->


<h2>Back in the Day</h2>

<p>It used to be that all you had to do was setup the nameservers on your domain registrar, add the Zerigo addon on Heroku&#8217;s end with a few commands, and you were rocking in minutes.  The latest DNS setup on Heroku caused me a bit more grief.  Something has changed.  But there is hope.  The new steps are almost just as brief.  You&#8217;ll just have to take care to get it just right.</p>

<h2>Cedar, not Bamboo</h2>

<p>These days new deployments on Heroku are going to favor using the Cedar stack as the new option.  The Bamboo stack was the original and older Ruby stack.  And so it troubled me after setting up my DNS as I used to that I got an error message (<a href="https://devcenter.heroku.com/articles/error-codes#h70-access-to-bamboo-http-endpoint-denied">h70</a>) similar to this in my logs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>2010-10-06T21:51:07-07:00 heroku<span class="o">[</span>router<span class="o">]</span>: <span class="nv">at</span><span class="o">=</span>error <span class="nv">code</span><span class="o">=</span>H70 <span class="nv">desc</span><span class="o">=</span><span class="s2">&quot;Access to bamboo HTTP endpoint denied&quot;</span> <span class="nv">method</span><span class="o">=</span>GET <span class="nv">path</span><span class="o">=</span>/ <span class="nv">host</span><span class="o">=</span>foo.myapp.com <span class="nv">fwd</span><span class="o">=</span>17.17.17.17 <span class="nv">dyno</span><span class="o">=</span> <span class="nv">connect</span><span class="o">=</span> <span class="nv">service</span><span class="o">=</span> <span class="nv">status</span><span class="o">=</span>503 <span class="nv">bytes</span><span class="o">=</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lame, lame, lame, lame, lame.  Now, who did you contact?</p>

<p>Running <code>heroku info</code> reveals that I&#8217;m indeed using the Cedar stack on this project, so what gives?  It turns out my DNS was messed up.</p>

<h2>The New Zerigo/Heroku Setup</h2>

<p>The <a href="https://devcenter.heroku.com/articles/zerigo_dns">Heroku devcenter docs for Zerigo</a> are pretty good, but as of this writing, they&#8217;re a little inaccurate.  Here is the step-by-step that worked for me:</p>

<h4>1. Nameservers</h4>

<p>Setup your domain via your registrar&#8217;s site to point to these nameservers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>a.ns.zerigo.net
</span><span class='line'>b.ns.zerigo.net
</span><span class='line'>c.ns.zerigo.net
</span><span class='line'>d.ns.zerigo.net
</span><span class='line'>e.ns.zerigo.net
</span></code></pre></td></tr></table></div></figure>


<h4>2. Zerigo Addon</h4>

<p>Add the Zerigo addon via the Heroku cli:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku addons:add zerigo_dns
</span></code></pre></td></tr></table></div></figure>


<h4>3. Zerigo Config</h4>

<p>Open Zerigo addon for configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku addons:open zerigo_dns
</span></code></pre></td></tr></table></div></figure>


<p>Navigate to the Zerigo site for your app and press the &#8220;Add Snippet&#8221; button.  From the snippets available, select &#8220;Heroku&#8221;.  This snippet contains a CNAME entry and a URL redirect entry.  Add the snippet.  Now, you&#8217;ll need to adjust the CNAME entry.  The <code>data</code> field probably reads <code>proxy.heroku.com</code>.  This has been deprecated.  Instead, change the CNAME entry to point to <code>yourapp.herokuapp.com</code>.</p>

<p>Note also that the URL redirect entry is moving all traffic from yourapp.com to http://www.yourapp.com.  Apparently now the &#8220;www.&#8221; subdomain is required and you can&#8217;t setup a naked domain on Heroku.  If someone knows otherwise, I&#8217;d love to here about it, because I used to do this all the time.</p>

<h4>4. Add Domains on Heroku</h4>

<p>Via the Heroku cli, type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku domains:add www.yourapp.com
</span></code></pre></td></tr></table></div></figure>


<p>Note that we do <em>not</em> want to add <code>yourapp.com</code> (no &#8220;www&#8221;) to in this manner.  If you do that, the tool adds multiple A records to Zerigo, which the Zerigo docs clearly state you don&#8217;t want.  These A records are what will activate routing through the Bamboo stack, which you want to avoid.</p>

<p>This should be the point at which you can refresh your browser at &#8220;yourapp.com&#8221;.  You should see the redirect happen, moving you to &#8220;www.yourapp.com&#8221;.  The routing should be happy on Heroku&#8217;s end.  It sometimes takes more time for this to propagate, so if you don&#8217;t see results immediately, be a bit patient before your start changing your configuration, thinking it&#8217;s not working.</p>

<p>Has anyone else run into this?  Is there a better way to set this up?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Define Methods Dynamically in Ruby]]></title>
    <link href="http://jaketrent.com/post/define-dynamic-methods-ruby/"/>
    <updated>2013-11-26T07:28:00-07:00</updated>
    <id>http://jaketrent.com/post/define-dynamic-methods-ruby</id>
    <content type="html"><![CDATA[<p>In Ruby, it&#8217;s common to see new methods defined dynamically or on the fly for your class.  And who doesn&#8217;t want to have a piece of that metaprogramming?</p>

<p><img src="http://i.imgur.com/Z7WWtL0.jpg" alt="Ruby" /></p>

<!--more-->


<h2>An Example</h2>

<p>For example, I just finished an <a href="http://jaketrent.com/post/exercism-review/">exercism code exercise</a> where I felt like there was a fair bit of code duplication.  I had a bunch of convenience functions that would show the conversion of a time in earth time to a time specific to a planet.  So, the API required something that looked something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SpaceAge</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">on_earth</span>
</span><span class='line'>    <span class="n">seconds_on_planet</span> <span class="ss">:earth</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">on_mercury</span>
</span><span class='line'>    <span class="n">seconds_on_planet</span> <span class="ss">:mercury</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">on_venus</span>
</span><span class='line'>    <span class="n">seconds_on_planet</span> <span class="ss">:venus</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Feeling that this might be an excessive number of similarly pattern methods, I considered ways that the API might stay in tact but the effort of maintenance of these many functions might be decreased.</p>

<h2><code>define_method</code></h2>

<p>We could collapse these methods quite a bit in the visual code by defining them dynamically, using <code>define_method</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SpaceAge</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">on_planets</span><span class="p">(</span><span class="o">*</span><span class="n">planets</span><span class="p">)</span>
</span><span class='line'>    <span class="n">planets</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">planet</span><span class="o">|</span>
</span><span class='line'>      <span class="n">define_method</span> <span class="s2">&quot;on_</span><span class="si">#{</span><span class="n">planet</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">seconds_on_planet</span> <span class="n">planet</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">on_planets</span> <span class="ss">:earth</span><span class="p">,</span> <span class="ss">:mercury</span><span class="p">,</span> <span class="ss">:venus</span><span class="p">,</span> <span class="ss">:mars</span><span class="p">,</span> <span class="ss">:jupiter</span><span class="p">,</span> <span class="ss">:saturn</span><span class="p">,</span> <span class="ss">:uranus</span><span class="p">,</span> <span class="ss">:neptune</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The exact same code would be generated.  It&#8217;s better! But it&#8217;s worse!  It&#8217;s actually less readable than before.  <code>on_planets</code> as a new helper API might be nice.  But, we&#8217;re not currently using this anywhere else.  The code is probably more maintainable, but it&#8217;s also more stiff.  Previously, each of the methods was separate and therefore separately modifiable and customizable.  Now, there&#8217;s one implementation of an &#8220;on_#{planet}&#8221; method.  This could be easier/harder to deal with, depending.  I think the readability is better because of the smaller amount of code, but the readability is worse because of the increased complexity and eye parsing required.  In the end, for my code, I stayed with the original solution for its 5-star readability.</p>

<p>But the ability to define methods dynamically is super awesome.  When do you find yourself using this super power?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Call Dynamic Method in Ruby]]></title>
    <link href="http://jaketrent.com/post/ruby-call-dynamic-method/"/>
    <updated>2013-11-25T07:10:00-07:00</updated>
    <id>http://jaketrent.com/post/ruby-call-dynamic-method</id>
    <content type="html"><![CDATA[<p>I love Ruby&#8217;s syntax for method calls.  The syntax for calling dynamic methods is pretty nice, and it&#8217;s easily mastered.</p>

<p><img src="http://i.imgur.com/Z7WWtL0.jpg" alt="Ruby" /></p>

<!--more-->


<h2><code>send</code> method</h2>

<p>The <code>send</code> method is one of the best and most basic ways to call a method dynamically on your object.  Let&#8217;s say we have an object with multiple methods like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Fezzik</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show_sportsmanship</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">be_colossus_for</span><span class="p">(</span><span class="n">person_1</span><span class="p">,</span> <span class="n">person_2</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span> <span class="n">person_3</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The method you want to call might be represented as a string or a symbol.  Your method call might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fezzik</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:show_sportsmanship</span><span class="p">)</span>
</span><span class='line'><span class="c1"># or</span>
</span><span class='line'><span class="no">Fezzik</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;show_sportsmanship&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Calling <code>send</code> with parameters</h2>

<p>Now, some of your methods might have parameters.  How are those called?  Simply pass the argument values into the <code>send</code> call as the final argument, which is a variable length argument:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">just_one_person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="no">Fezzik</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:be_colossus_for</span><span class="p">,</span> <span class="n">just_one_person</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also pass the parameters as a splat array, such as this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">people</span> <span class="o">=</span> <span class="o">[</span><span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">,</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">,</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="o">]</span>
</span><span class='line'><span class="no">Fezzik</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:be_colossus_for</span><span class="p">,</span> <span class="o">*</span><span class="n">people</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Ruby, the splat operator destructures the array into parameters, so the above code essentially becomes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">people</span> <span class="o">=</span> <span class="o">[</span><span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">,</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">,</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="o">]</span>
</span><span class='line'><span class="no">Fezzik</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:be_colossus_for</span><span class="p">,</span> <span class="n">people</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="n">people</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">people</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, <code>send</code> turns out to be pretty easy to deal with and really useful.  Use it, and be happy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exercism Review]]></title>
    <link href="http://jaketrent.com/post/exercism-review/"/>
    <updated>2013-11-19T07:29:00-07:00</updated>
    <id>http://jaketrent.com/post/exercism-review</id>
    <content type="html"><![CDATA[<p>Exercism.io is a fantastic site and tool that provides a wealth of daily code exercises.  If you want to learn to be better in a language, it&#8217;s a great resource to do exercises and receive feedback.</p>

<p><img src="http://i.imgur.com/2oAEqBZ.jpg" alt="Exercism" /></p>

<!--more-->


<h2>Origin</h2>

<p><a href="http://exercism.io">Exercism.io</a> was introduced to me by Franklin Webber of gSchool and JumpStart Labs fame.  He and his colleagues use it as a part of their instruction, and it&#8217;s a great, free tool available to the public.</p>

<h2>Languages</h2>

<p>There is a fun array of language-learning possibilities inside Exercism.  It currently includes a varying number of exercises across these languages:</p>

<ul>
<li>clojure</li>
<li>elixir</li>
<li>haskell</li>
<li>javascript</li>
<li>objective-c</li>
<li>python</li>
<li>ruby</li>
<li>scala</li>
</ul>


<p>I&#8217;m currently running through the Ruby exercises.</p>

<h2>Starting Point</h2>

<p>Based on what I&#8217;ve seen of the Ruby and JavaScript exercises, I don&#8217;t think that Exercism&#8217;s exercises are meant for an absolute beginner.  Some basic knowledge of the programming language is assumed and required.  You&#8217;ll start a little deep if you know next to nothing.  These exercises are meant to expand your exposure to and understanding of language features.</p>

<h2>Installation</h2>

<p>Installation consists of a few things:</p>

<ol>
<li>Go to <a href="http://exercism.io">exercism.io</a> and register using your Github credentials.</li>
<li>While on the site, download the CLI.  It&#8217;s a pre-built binary that you just need to put somewhere that is tied to your system PATH.  That way you can execute it from the terminal.</li>
<li>Setup your environment for the language you&#8217;ll be learning.  Again, this information is on the site.  None of the environments are automatic in their setup, and you must follow the written steps to be ready to develop in your weapon, er language of choice.</li>
</ol>


<h2>Your First Exercise</h2>

<p>After installation, you&#8217;re ready for your first exercise.  On the terminal, type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>exercism fetch
</span></code></pre></td></tr></table></div></figure>


<p>This will download fresh exercises at the head of each of your language paths.  At first, you&#8217;ll start on exercise 0 of each of the language paths.  Now, choose a language.  I chose Ruby first.  The first exercise was called <code>bob</code>.  Bob is a lackadaisical teenager who responds with smart remarks to whatever somewhat says to him.  Typical.</p>

<p>Bob comes with a suite of failing tests.  All the tests are written, and it&#8217;s up to use to write the code that actually makes Bob function and the tests pass.  This is literally TDD or test-driven development, and yay for us, someone has already written the tests!  In the case of Ruby, the tests are written in a MiniTest syntax.  To run them, I&#8217;m typing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby bob_test.rb
</span></code></pre></td></tr></table></div></figure>


<p>This is where I think we might be able to have a bit of a better setup with the exercises.  It would be nice to have the tests automatically run on a file watch as opposed to having to run them each time manually.  For this, I personally setup <code>guard-minitest</code>.  I would recommend the same.  Of course, I can only think that Exercism doesn&#8217;t do this by default in order to simplify the environment setup process.</p>

<h2>Nitpicking</h2>

<p>After you complete your first exercise in some form by getting all the tests to pass, you can submit it to the site for feedback.  For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>exercism submit ruby/bob/bob.rb
</span></code></pre></td></tr></table></div></figure>


<p>The CLI will give you a link to your now-online code, and you can go there to see your submission.  Others who have completed the same exercise will also be able to see your solution.  And this is one of the coolest potentials of Exercism.  Others can give you feedback on your solution, called &#8220;nitpicks&#8221; by default.  This is a great learning opportunity.  We are ready to take feedback given from the perspective of others in their experience with the language.  We can also give feedback, training our eye to be more critical in our observation and future writing of code.  It feels like a great outcome and a great potential community.</p>

<p>I have given nitpicks.  Of course, that&#8217;s easier to do.  But, I am sad to say that I have never received any.  It&#8217;s hard to tell how active the community really is.  I see quite a few submissions, but there are definitely fewer nitpicks than submissions.  There&#8217;s quite a bit untapped community learning potential here.  To help this, I wish the system allowed you to unlock the next exercise in your language path without closing opportunity for nitpicks on submitted exercises.</p>

<p>So, have you used Exercism.io before?  Do you know of similar sites?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Save a Gem to Gemfile from Terminal]]></title>
    <link href="http://jaketrent.com/post/save-gem-to-gemfile-from-terminal/"/>
    <updated>2013-11-18T07:54:00-07:00</updated>
    <id>http://jaketrent.com/post/save-gem-to-gemfile-from-terminal</id>
    <content type="html"><![CDATA[<p>Have you ever wished you could save a gem to your <code>Gemfile</code> straight from the command line?  I wish Rubygems had this built in, but it&#8217;s easy to add.  After all, there&#8217;s a gem for that.</p>

<p><img src="http://i.imgur.com/x2I31sl.jpg" alt="Gemrat" /></p>

<!--more-->


<h2>From npm</h2>

<p>Coming from Node/Npm previous to Ruby/Rubygems, I wished I could do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install express --save
</span></code></pre></td></tr></table></div></figure>


<p>This would take my specified npm module and append it to the end of my <code>package.json</code> dependencies list.</p>

<p>There is no equivalent for this built into Rubygems.</p>

<h2>Gemrat</h2>

<p>But, there is a mutant beast that skulks through the gem-lined sewers of Rubyland &#8211; and it&#8217;s name is <code>gemrat</code>!  What a great, image-provoking name.  Once you install <code>gemrat</code>, you will have the power of 20 npms at your fingertips.</p>

<p>First, install it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install gemrat
</span></code></pre></td></tr></table></div></figure>


<p>Next, decide what gem you want to save to your <code>Gemfile</code>.  Let&#8217;s choose a gem of a gem to try called <code>guard</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gemrat guard
</span></code></pre></td></tr></table></div></figure>


<p>Now, install the dependencies listed in your <code>Gemfile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<p>Kaboom.  You have learned the secrets of the Fire Swamp and could live there for some time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug Ruby and Rails]]></title>
    <link href="http://jaketrent.com/post/debug-ruby-rails/"/>
    <updated>2013-11-14T07:37:00-07:00</updated>
    <id>http://jaketrent.com/post/debug-ruby-rails</id>
    <content type="html"><![CDATA[<p>Interactive debugging can sometimes be faster and more effective in helping you code than a <code>puts</code> statement.  It&#8217;s easy to get interactive debugging in Ruby or on Rails with the help of a nice gem.</p>

<p><img src="http://i.imgur.com/Z7WWtL0.jpg" alt="Ruby" /></p>

<!--more-->


<h2>No IDE Required</h2>

<p>There are Ruby IDEs that provide interactive debugging capabilities.  My favorite is <a href="http://www.jetbrains.com/ruby/">RubyMine by Jetbrains</a>.  But if you don&#8217;t have or don&#8217;t want an IDE, there&#8217;s still hope.</p>

<h2>Debugger Gem</h2>

<h4>Include the dependency</h4>

<p>My new buddy George showed me a sweet gem simply named <code>debugger</code>.  To use it, I first add the <code>debugger</code> dependency to my <code>Gemfile</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source "https://rubygems.org"
</span><span class='line'>
</span><span class='line'>gem 'debugger'</span></code></pre></td></tr></table></div></figure>


<h4>Add a breakpoint</h4>

<p>Next, I need to add my &#8220;breakpoint&#8221; into my code that I&#8217;m going to run.  In this case, the breakpoint is defined by calling <code>debugger</code>.  On the same line, we&#8217;ll also import the <code>debugger</code> library:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">is_anagram?</span>
</span><span class='line'>    <span class="nb">require</span> <span class="s1">&#39;debugger&#39;</span><span class="p">;</span> <span class="n">debugger</span>
</span><span class='line'>    <span class="n">same_length?</span> <span class="ow">and</span> <span class="n">different?</span> <span class="ow">and</span> <span class="n">has_same_letters?</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Run your code</h4>

<p>In this example, I&#8217;m going to break right after I call the <code>is_anagram?</code> method.  From the terminal, now I exercise the code.  In this case, I&#8217;ll run my unit tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby anagram_test.rb
</span></code></pre></td></tr></table></div></figure>


<h4>Debug like a champ</h4>

<p>And when execution of the script gets to the <code>debugger</code> line, execution will pause and output in my terminal will look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/Users/</span><span class="n">jake</span><span class="o">.</span><span class="n">trent</span><span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">exercism</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="n">anagram</span><span class="o">/</span><span class="n">anagram</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">13</span>
</span><span class='line'><span class="n">same_length?</span> <span class="ow">and</span> <span class="n">different?</span> <span class="ow">and</span> <span class="n">has_same_letters?</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">17</span><span class="o">]</span> <span class="k">in</span> <span class="sr">/Users/</span><span class="n">jake</span><span class="o">.</span><span class="n">trent</span><span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">exercism</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="n">anagram</span><span class="o">/</span><span class="n">anagram</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>   <span class="mi">8</span>      <span class="vi">@letters2</span> <span class="o">=</span> <span class="vi">@word2</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="mi">9</span>    <span class="k">end</span>
</span><span class='line'>   <span class="mi">10</span>
</span><span class='line'>   <span class="mi">11</span>    <span class="k">def</span> <span class="nf">is_anagram?</span>
</span><span class='line'>   <span class="mi">12</span>      <span class="nb">require</span> <span class="s1">&#39;debugger&#39;</span><span class="p">;</span> <span class="n">debugger</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">13</span>      <span class="n">same_length?</span> <span class="ow">and</span> <span class="n">different?</span> <span class="ow">and</span> <span class="n">has_same_letters?</span>
</span><span class='line'>   <span class="mi">14</span>    <span class="k">end</span>
</span><span class='line'>   <span class="mi">15</span>
</span><span class='line'>   <span class="mi">16</span>    <span class="k">def</span> <span class="nf">has_same_letters?</span>
</span><span class='line'>   <span class="mi">17</span>      <span class="n">same_letters</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="p">(</span><span class="n">rdb</span><span class="p">:</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>A snippet of my code is shown, an arrow points at line 13, and there&#8217;s a prompt at the bottom (labeled &#8216;rdb&#8217;) that you can type in.  <code>debugger</code> gives you a few special commands to type, such as:</p>

<ul>
<li><code>n</code> - next</li>
<li><code>s</code> - step over</li>
<li><code>c</code> - continue</li>
</ul>


<p>These commands should be familiar to almost all debuggers.  The other fabulous thing is that the prompt functions as a sort of <code>irb</code> session from the current context of your code.  So, I can type variable names to see their contents or call functions to see what they&#8217;d return.  So, in the case of this code, I could try:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>rdb:1<span class="o">)</span> has_same_letters?
</span><span class='line'><span class="nb">true</span>
</span><span class='line'><span class="o">(</span>rdb:1<span class="o">)</span> @letters2
</span><span class='line'><span class="o">[</span><span class="s2">&quot;s&quot;</span>, <span class="s2">&quot;t&quot;</span>, <span class="s2">&quot;a&quot;</span>, <span class="s2">&quot;n&quot;</span>, <span class="s2">&quot;d&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty cool and pretty powerful all for the price of including the library and including a breakpoint in your code.</p>

<p>Are there tools similar to this that you love to use for debugging?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Change Page Title in Angular Route]]></title>
    <link href="http://jaketrent.com/post/change-page-title-angular-route/"/>
    <updated>2013-11-07T07:03:00-07:00</updated>
    <id>http://jaketrent.com/post/change-page-title-angular-route</id>
    <content type="html"><![CDATA[<p>When you change routes in Angular, the page title doesn&#8217;t change automatically, but this can be done rather simply.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="Angular Router" /></p>

<!--more-->


<h2>Servers and Clients</h2>

<p>Client-side routers are pretty awesome.  A new url is pushed into the browser&#8217;s history to represent the particular resource that pure client code has produced and displayed.  It&#8217;s pretty cool.  It&#8217;s also used widely these days.  Angularjs has a nice little router built into its framework.</p>

<p>Route changes from a server always have the page title set automatically in the <code>head &gt; title</code> tag.  Client-side routing doesn&#8217;t have that exactly.  Nor does the Angularjs router change the page title via an automatic mechanism.  So, let&#8217;s add our own.</p>

<h2>Add Page Title to Angular Router</h2>

<p>First, notice that you can add any arbitrary attributes to an angular route that you desire.  In the code below, notice that each route has a <code>title</code> attribute:</p>

<figure class='code'><figcaption><span>app.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;app&#39;</span><span class="p">,</span> <span class="p">[]).</span><span class="nx">config</span> <span class="nf">($routeProvider) -&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$routeProvider</span>
</span><span class='line'>    <span class="p">.</span><span class="k">when</span> <span class="s">&#39;/&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nv">controller: </span><span class="s">&#39;HomeCtrl&#39;</span>
</span><span class='line'>      <span class="nv">templateUrl: </span><span class="s">&quot;/templates/home.html&quot;</span>
</span><span class='line'>      <span class="nv">title: </span><span class="s">&#39;Home&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">.</span><span class="k">when</span> <span class="s">&#39;/about&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nv">controller: </span><span class="s">&#39;AboutCtrl&#39;</span>
</span><span class='line'>      <span class="nv">templateUrl: </span><span class="s">&quot;/templates/about.html&quot;</span>
</span><span class='line'>      <span class="nv">title: </span><span class="s">&#39;About&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then in a place that exists on every route &#8211; something like an <code>AppCtrl</code> &#8211; you can gain access to the <code>current</code> route&#8217;s <code>title</code> every time the route changes:</p>

<figure class='code'><figcaption><span>app-ctrl.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;app&#39;</span><span class="p">).</span><span class="nx">controller</span> <span class="s">&#39;AppCtrl&#39;</span><span class="p">,</span> <span class="nf">($rootScope) -&gt;</span>
</span><span class='line'>  <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$on</span> <span class="s">&#39;$routeChangeSuccess&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">current</span><span class="p">,</span> <span class="nx">previous</span><span class="p">)</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nv">$rootScope.pageTitle = </span><span class="nx">$route</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">title</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have put the route&#8217;s <code>title</code> in <code>$rootScope.pageTitle</code> and can use it in our template:</p>

<figure class='code'><figcaption><span>app.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title</span> <span class="na">ng-bind=</span><span class="s">&quot;pageTitle + &#39; | MyApp&#39;&quot;</span><span class="nt">&gt;&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- ... --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ng-bind</code> is just like using double curlies, but also acts as if it&#8217;s surrounded by an ng-cloak as well.  Notice that in the title, I&#8217;m even concatenating the <code>pageTitle</code> with my app&#8217;s overall name.</p>

<p>Props go to <a href="http://github.com/danethurber">@danethurber</a> for putting this title changing logic in our most recent app.</p>

<p>Is this how you change your Angular app&#8217;s title?  Is there a better way?  Specifically, I wonder if <code>AppCtrl</code> really is the best place to listen for <code>$routeChangeSuccess</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use D3 rangeBands]]></title>
    <link href="http://jaketrent.com/post/use-d3-rangebands/"/>
    <updated>2013-10-17T07:47:00-06:00</updated>
    <id>http://jaketrent.com/post/use-d3-rangebands</id>
    <content type="html"><![CDATA[<p>When building a chart such as a bar chart in d3, you&#8217;ll want an evenly divided space on your x axis.  You could divide the space up with your own manual calculations, accounting for space available, bar width, and inner and outer padding.  Or, you could have d3 do the calculation for you via a <code>rangeBand</code>.</p>

<p><img src="http://i.imgur.com/JEniNrp.jpg" alt="d3 rangeBand" /></p>

<!--more-->


<h2>Scale</h2>

<p>One of the great features of D3 is the ability it gives you to easily adapt your chart to the space available to you.  This is accomplished with scales.  There are a couple different scales built into D3.  Some for comparative numbers, such as <code>d3.scale.linear</code> and <code>d3.scale.log</code>; some for discrete data sets, such as <code>d3.scale.ordinal</code>.</p>

<p><strong>A scale maps visual space to data space.</strong></p>

<p>The visual space of a scale is the <code>range</code>.  The data space is the <code>domain</code>.  The internals of the scale will map it all for you.</p>

<h2>Manual Space Management</h2>

<p>Previous to realizing some of the things that d3 scales can do for you, I did a lot of space management myself.  Here&#8217;s an example:</p>

<p>Let&#8217;s say we have a data domain of all the letters in the alphabet.  Let&#8217;s say we&#8217;re building a bar chart.  We&#8217;ll put the letters on the x-axis, running horizontally along our chart.  We want to space out each letter&#8217;s bar evenly across the visual space or range.</p>

<p>If we did our own math, it might look like this:</p>

<figure class='code'><figcaption><span>brought-to-you-by.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">barOuterPad = </span><span class="mi">20</span>
</span><span class='line'><span class="nv">barPad = </span><span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="nv">widthForBars = </span><span class="nx">elementWidth</span> <span class="o">-</span> <span class="p">(</span><span class="nx">barOuterPad</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="nv">barWidth = </span><span class="nx">widthForBars</span> <span class="o">/</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">barPad</span> <span class="o">+</span> <span class="p">(</span><span class="nx">barPad</span> <span class="o">/</span> <span class="nx">numBars</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">barsG = </span><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s">&#39;g&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;transform&#39;</span><span class="p">,</span> <span class="s">&quot;translate(</span><span class="si">#{</span><span class="nx">barOuterPad</span><span class="si">}</span><span class="s">, 0)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">barsG</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s">&#39;rect&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">enter</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="s">&#39;rect&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;x&#39;</span><span class="p">,</span> <span class="nf">(d, i) -&gt;</span> <span class="p">(</span><span class="nx">barWidth</span> <span class="o">*</span> <span class="nx">i</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">i</span> <span class="o">*</span> <span class="nx">barPad</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;width&#39;</span><span class="p">,</span> <span class="nx">barWidth</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># attrs ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the code above, we have bar padding setup.  <code>barOuterPad</code> is the padding on only the far left and right of the entire chart.  <code>barPad</code> is the space between each of the bars.</p>

<p>The <code>barWidth</code> calculation is especially fun.  It splits the <code>widthForBars</code> space evenly over the number of bars.  Then it subtracts the <code>barPad</code> for the space of that bar that won&#8217;t be able to be used.  Then, finally, we remember that there will be 1 fewer empty pad areas between bars than there will be actual bars.  So, we take that extra <code>barPad</code> space and give a bit of it back to every bar.  Whew.</p>

<p>When we go to place bars, we create a new group, <code>barG</code>, transformed in to take account of <code>barOuterPad</code>.  Then, for each bar in we make sure it&#8217;s offset into the chart based on what number of bar it is in the set.</p>

<p>There is an easier way.</p>

<h2>d3.scale.ordinal.rangeBands</h2>

<p>There is one particular function of <code>d3.scale.ordinal</code> that is particularly useful.  That is <code>rangeBands</code>.  It will evenly divide a space up for you into bands across the range.</p>

<p>Here&#8217;s a great graphic from the d3 wiki on <a href="https://github.com/mbostock/d3/wiki/Ordinal-Scales#wiki-ordinal_rangeBands"><code>ordinal.rangeBands</code></a>:</p>

<p><img src="https://f.cloud.github.com/assets/230541/538688/46c298c0-c193-11e2-9a7e-15d9abcfab9b.png" alt="rangeBand diagram" /></p>

<p>It looks like it knows how to take care of everything in our scenario.  It handles outer padding.  It handles between-bar padding.  Let&#8217;s use it:</p>

<figure class='code'><figcaption><span>made-possible-by.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">barOuterPad = </span><span class="p">.</span><span class="mi">2</span>
</span><span class='line'><span class="nv">barPad = </span><span class="p">.</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="nv">x = </span><span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">ordinal</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">domain</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nf">(d) -&gt;</span> <span class="nx">d</span><span class="p">.</span><span class="nx">letter</span><span class="p">))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">rangeRoundBands</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nx">elementWidth</span><span class="p">],</span> <span class="nx">barPad</span><span class="p">,</span> <span class="nx">barOuterPad</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s">&#39;rect&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">enter</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="s">&#39;rect&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;x&#39;</span><span class="p">,</span> <span class="nf">(d) -&gt;</span> <span class="nx">x</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">letter</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;width&#39;</span><span class="p">,</span> <span class="nx">x</span><span class="p">.</span><span class="nx">rangeBand</span><span class="p">())</span>
</span><span class='line'>    <span class="c1"># attrs...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that our <code>barOuterPad</code> and <code>barPad</code> are now fractions.  This is because d3 expects a number, usually between 0 and 1, that is described as a proportion of the eventual width of the bands.</p>

<p><code>x</code> becomes our scale function, mapping the domain, which is all letters (<code>d.letter</code>), to the range.  The range is specified as bands using <code>rangeRoundBands</code>.  This is different than <code>rangeBands</code> in that all spaces are guaranteed to be integers, avoiding antialiasing on screen.  The signature is as follows:</p>

<p><code>ordinal.rangeBands(interval[, padding[, outerPadding]])</code></p>

<p>We avoid having to use a new <code>barG</code> group to make our math easier.</p>

<p>When we set the <code>x</code> attribute on our bar, it&#8217;s x offset is determined by passing the singular datum&#8217;s letter to the <code>x</code> scale function.  And the width is simply the width of all bands, known by calling <code>x.rangeBand()</code>.</p>

<p>So much better.  And so much more concise.</p>

<p>What do you think?  Does this work for you?  What is the even-better way of doing this that I have yet to realize?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start Review]]></title>
    <link href="http://jaketrent.com/post/start-review/"/>
    <updated>2013-10-02T07:54:00-06:00</updated>
    <id>http://jaketrent.com/post/start-review</id>
    <content type="html"><![CDATA[<p>Starting tends to be one of the biggest hurdles that we must jump in order to find out what awesome we really have inside of us and let it shine.  In the book <a href="http://www.amazon.com/gp/product/1937077594/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1937077594&amp;linkCode=as2&amp;tag=jaktre-20">Start by Jon Acuff</a>, he gives great motivation and tactical steps for starting to find our awesome.  It&#8217;s a hilarious, inspiring, and practical guide.</p>

<p><img src="http://i.imgur.com/ERlkwHb.jpg" alt="Start Book" /></p>

<!--more-->


<h2>Stages of an Awesome Life</h2>

<p>All of us go through 5 stages of life on our journey to find our awesome:</p>

<ul>
<li>Learning</li>
<li>Editing</li>
<li>Mastering</li>
<li>Harvesting</li>
<li>Guiding</li>
</ul>


<p>These stages used to be tied to age or tenure.  People used to go through them steadily, sequentially, almost a decade at a time.  Getting to your awesome will surely require significant time and investment, but now and in the future the game has changed.</p>

<h2>The game has changed</h2>

<ul>
<li><strong>Retirement is dead.</strong>  The economy will recover.  The ideals of companies and individuals and governments won&#8217;t.  Don&#8217;t expect to pack it in and sit for 3+ decades.</li>
<li><strong>Hope is boss.</strong>  For those that see themselves as wanted to add to something meaningful, the opportunities are many and they are now.  You don&#8217;t have to wait until you&#8217;re 50 and have built a non-profit empire for you to add to something fulfilling.</li>
<li><strong>The Internet.</strong>  Opportunities are always open for anyone with access and a will to learn.  You can enter a field and expand your influence in that field incredibly quickly.</li>
</ul>


<h2>Be 22 Again</h2>

<p>You can literally be 22 at anything.  You can decide to enter a field, begin accelerated learning, determine your focus, lay on the hours of practice, find a plentiful harvest because of your new talent, and eventually help others along the path you have chosen.  Then you can do it all again.  These days some people are doing this out of necessity as an &#8220;encore career&#8221; in the place of a retirement that will not arrive.  We can all revert to 22 in a new field of study or activity in order to expand our exposure, increase or ability, or make our lives more happy and fulfilled.</p>

<p>There is a joy and a great feeling of accomplishment and purpose in the way that Jon outlines life.  What taste would life have if it were not based on learning and becoming better?  The values my parents taught me from the youngest age have been marinated in similar ideas.</p>

<p>When we&#8217;re young, we literally feel like we can do anything.  And we do, to our own ability.  At some point, because of our own insecurity, we may tend to only keep going in the activities that others have told us we&#8217;re good at or that we discover some aptitude in.  There&#8217;s nothing inherently wrong in this.  In fact, we should take advantage of those things.  The feeling that we need to get rid of is fear of starting anything else.</p>

<p>As we grow older, we can become more prone to pigeon-holing ourselves and our successes.  We fear failure.  We want to build on the good that we&#8217;ve already done.  We don&#8217;t want to fall from what we have built.  If we remember the pure enthusiasm and joy of learning that we felt as a child, we will open up more fulfilling doors in our lives.  We will continue to find more of what our own brand of awesome looks like.</p>

<h2>Style</h2>

<p>Jon knows how to write a good book.  This book, like <a href="http://jaketrent.com/post/quitter-review/">Quitter</a>, was very encouraging.  Also like his previous books, I was laughing out loud as I read it.  People on the train sharing my commute surely had moments they wondered about me as I laughed at Jon&#8217;s prose.  And I think my wife was surprised more than once by the unstoppable laughter that ensued after several especially funny bits. Jon&#8217;s book reads quickly and happily.</p>

<h2>What&#8217;s Next</h2>

<p>Jon gives the kind of encouragement that I need.  I don&#8217;t feel greatly handicapped by fear.  In fact, I feel quite confident in learning and making new successes in my life.  But, Jon does help uncover some of the more subtle negative messages that I can give myself that tend to hamper my progress and lessen my enthusiasm, shooting holes in my own boat.  And then he gives practical steps for getting the momentum of learning going in my life and taking advantage of those things for which I&#8217;m the trail to mastery.</p>

<p>So, what&#8217;s next?  There&#8217;s only to start.  Let new adventures begin.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rotate Gauge Needle in D3]]></title>
    <link href="http://jaketrent.com/post/rotate-gauge-needle-in-d3/"/>
    <updated>2013-09-27T06:52:00-06:00</updated>
    <id>http://jaketrent.com/post/rotate-gauge-needle-in-d3</id>
    <content type="html"><![CDATA[<p>If you want to make a gauge chart in S3, you&#8217;ll need a needle on your gauge.  It&#8217;s not hard to draw a triangle, but here&#8217;s the extra work to rotate it.</p>

<p><img src="http://i.imgur.com/7GSyOFd.png" alt="D3 Gauge Chart" /></p>

<!--more-->


<h2>The Gauge Chart</h2>

<p>I&#8217;m not sure what you call this kind of chart, but I call it a gauge.  It pretty much looks like a speedometer or a pressure gauge.  I&#8217;m sure after seeing one, you want to make one.  I&#8217;m not going to cover the arc building.  It&#8217;s pretty easy to build a <a href="https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-arc">d3 arc</a>.</p>

<h2>The Components</h2>

<p>In my case, I can match the design of the needle with a triangle and a circle.  The circle is the base of the needle upon which the needle spins.  The triangle is the pointer of the needle, which will eventually sit at the angle we specify to our graph.</p>

<h2>The Coordinates</h2>

<p>In svg/d3, you can redefine your coordinates by using a group.  If my <code>svg</code> container is square, the default coordinate plane will start in the upper left-hand corner at <code>(0,0)</code>.  If I wanted to redefine <code>(0,0)</code> to be in the bottom center of the <code>svg</code> container, we could do so by positioning a group (<code>g</code>) so that <em>its</em> top left-hand corner is at that point.</p>

<p>We might write this:</p>

<figure class='code'><figcaption><span>gauge.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">height = </span><span class="c1"># ... svg height</span>
</span><span class='line'><span class="nv">width = </span><span class="c1"># ... svg width</span>
</span><span class='line'><span class="nv">needleG = </span><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s">&#39;g&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;transform&#39;</span><span class="p">,</span> <span class="s">&quot;translate(</span><span class="si">#{</span><span class="nx">width</span> <span class="o">/</span> <span class="mi">2</span><span class="si">}</span><span class="s">, </span><span class="si">#{</span><span class="nx">height</span><span class="si">}</span><span class="s">)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Draw a Triangle</h2>

<p>To draw a triangle, use an <a href="https://github.com/mbostock/d3/wiki/SVG-Shapes#path-data-generators">svg path</a>.  It needs a start point and 2 more points to draw lines to.  In the special language of svg <code>path</code>s, <code>M x y</code> is the start point and <code>L x y</code> is the point to which a straight light will be drawn from the previous point.</p>

<p>Let&#8217;s say that we want our needle to 60px tall and 20px wide at the base.  First we&#8217;ll draw it pointing straight up.  Let&#8217;s draw this triangle using the <code>needleG</code> coordinates.  In the code, I&#8217;ll call the corners of the triangle <code>top</code>, <code>left</code>, and <code>right</code>.  The d3 code to draw this might look like:</p>

<figure class='code'><figcaption><span>gauge.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">needleLen = </span><span class="mi">60</span>
</span><span class='line'><span class="nv">needleRadius = </span><span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="nv">centerX = </span><span class="mi">0</span>
</span><span class='line'><span class="nv">centerY = </span><span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="nv">topX = </span><span class="nx">centerX</span> <span class="o">-</span> <span class="mi">0</span>
</span><span class='line'><span class="nv">topY = </span><span class="nx">centerY</span> <span class="o">-</span> <span class="nx">needleLen</span>
</span><span class='line'>
</span><span class='line'><span class="nv">leftX = </span><span class="nx">centerX</span> <span class="o">-</span> <span class="nx">needleRadius</span>
</span><span class='line'><span class="nv">leftY = </span><span class="nx">centerY</span> <span class="o">-</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="nv">rightX = </span><span class="nx">centerX</span> <span class="o">-</span> <span class="o">-</span><span class="p">(</span><span class="nx">needleRadius</span><span class="p">)</span>
</span><span class='line'><span class="nv">rightY = </span><span class="nx">centerY</span> <span class="o">-</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="nx">needleG</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s">&#39;path&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;d&#39;</span><span class="p">,</span> <span class="s">&quot;M </span><span class="si">#{</span><span class="nx">leftX</span><span class="si">}</span><span class="s"> </span><span class="si">#{</span><span class="nx">leftY</span><span class="si">}</span><span class="s"> L </span><span class="si">#{</span><span class="nx">topX</span><span class="si">}</span><span class="s"> </span><span class="si">#{</span><span class="nx">topY</span><span class="si">}</span><span class="s"> L </span><span class="si">#{</span><span class="nx">rightX</span><span class="si">}</span><span class="s"> </span><span class="si">#{</span><span class="nx">rightY</span><span class="si">}</span><span class="s">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Rotate the Triangle</h2>

<p>Drawing a triangle pointed straight up, that is strictly parallel with the <code>x</code> and <code>y</code> access of the plane, is no problem.  But a gauge that points straight up isn&#8217;t worth that much.  It doesn&#8217;t measure anything.  So, let&#8217;s rotate the pointer/triangle of the needle to get an actual visual display of our measurement.</p>

<p>Unfortunately, (but maybe you&#8217;ll have fun) you&#8217;ll have to pull out your middle school trigonometry here.  I was remembering sayings I had heard once a time to figure this out (like the mysterious &#8220;SOHCAHTOA&#8221; acronym).</p>

<h3>Percentage Input</h3>

<p>Your input may vary, but mine starts as a percentage.  If yours does not, you could convert it to a percentage.  And since we&#8217;re working with a half circle, we&#8217;re just going to cut in half all our input since the rotation math is based on a circle.</p>

<p>Let&#8217;s say in this case our percentage is 65%.  We need to convert from percentage to radians.  Note that all the code for rotation angles will use <a href="http://en.wikipedia.org/wiki/Radian">radians</a>.  Here&#8217;s some conversion code:</p>

<figure class='code'><figcaption><span>gauge.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">percToDeg = </span><span class="nf">(perc) -&gt;</span>
</span><span class='line'>  <span class="nx">perc</span> <span class="o">*</span> <span class="mi">360</span>
</span><span class='line'>
</span><span class='line'><span class="nv">percToRad = </span><span class="nf">(perc) -&gt;</span>
</span><span class='line'>  <span class="nx">degToRad</span> <span class="nx">percToDeg</span> <span class="nx">perc</span>
</span><span class='line'>
</span><span class='line'><span class="nv">degToRad = </span><span class="nf">(deg) -&gt;</span>
</span><span class='line'>  <span class="nx">deg</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">/</span> <span class="mi">180</span>
</span></code></pre></td></tr></table></div></figure>


<h3>SOHCAHTOA</h3>

<p>We have to find the <code>top</code>, <code>left</code>, and <code>right</code> for a triangle rotated around the <code>(0,0)</code> point.  The basic SOHCAHTOA formulas will help us find the points:</p>

<figure class='code'><figcaption><span>gauge.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">sin</span> <span class="k">of</span> <span class="nv">angle = </span><span class="nx">opposite</span> <span class="o">/</span> <span class="nx">hypotenuse</span>
</span><span class='line'><span class="nx">cos</span> <span class="k">of</span> <span class="nv">angle = </span><span class="nx">adjacent</span> <span class="o">/</span> <span class="nx">hypotenuse</span>
</span><span class='line'><span class="nx">tan</span> <span class="k">of</span> <span class="nv">angle = </span><span class="nx">opposite</span> <span class="o">/</span> <span class="nx">adjacent</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/RxoQF98.png" alt="Needle trigonometry" /></p>

<p>Using these formulas, let&#8217;s update our code for finding the endpoints of the triangle:</p>

<figure class='code'><figcaption><span>gauge.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">needleLen = </span><span class="mi">60</span>
</span><span class='line'><span class="nv">needleRadius = </span><span class="mi">10</span>
</span><span class='line'><span class="nv">percent = </span><span class="p">.</span><span class="mi">65</span>
</span><span class='line'>
</span><span class='line'><span class="nv">thetaRad = </span><span class="nx">percToRad</span> <span class="nx">percent</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="nv">centerX = </span><span class="mi">0</span>
</span><span class='line'><span class="nv">centerY = </span><span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="nv">topX = </span><span class="nx">centerX</span> <span class="o">-</span> <span class="nx">needleLen</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">thetaRad</span><span class="p">)</span>
</span><span class='line'><span class="nv">topY = </span><span class="nx">centerY</span> <span class="o">-</span> <span class="nx">needleLen</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">thetaRad</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">leftX = </span><span class="nx">centerX</span> <span class="o">-</span> <span class="nx">needleRadius</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">thetaRad</span> <span class="o">-</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="nv">leftY = </span><span class="nx">centerY</span> <span class="o">-</span> <span class="nx">needleRadius</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">thetaRad</span> <span class="o">-</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">rightX = </span><span class="nx">centerX</span> <span class="o">-</span> <span class="nx">needleRadius</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">thetaRad</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="nv">rightY = </span><span class="nx">centerY</span> <span class="o">-</span> <span class="nx">needleRadius</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">thetaRad</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="s">&quot;M </span><span class="si">#{</span><span class="nx">leftX</span><span class="si">}</span><span class="s"> </span><span class="si">#{</span><span class="nx">leftY</span><span class="si">}</span><span class="s"> L </span><span class="si">#{</span><span class="nx">topX</span><span class="si">}</span><span class="s"> </span><span class="si">#{</span><span class="nx">topY</span><span class="si">}</span><span class="s"> L </span><span class="si">#{</span><span class="nx">rightX</span><span class="si">}</span><span class="s"> </span><span class="si">#{</span><span class="nx">rightY</span><span class="si">}</span><span class="s">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that <code>Math.PI / 2</code> is a 90 degree angle.  It&#8217;s used to find the angle smaller than theta for the left triangle and find the angle larger for the right triangle.</p>

<p>There you have it.  That&#8217;s the magic.  For an example of this working and some more code, see this <a href="http://cdpn.io/eloGk">codepen of a d3 gauge</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Import Erb Into Karma]]></title>
    <link href="http://jaketrent.com/post/import-erb-into-karma/"/>
    <updated>2013-09-20T16:59:00-06:00</updated>
    <id>http://jaketrent.com/post/import-erb-into-karma</id>
    <content type="html"><![CDATA[<p>Rails asset pipeline allows you to use erb helpers in your CoffeeScript.  You&#8217;ll still need to bring get these files into Karma runner.  It&#8217;s really easy.  You just need to get to know your Karma config options.</p>

<p><img src="http://i.imgur.com/i5fJT6j.png" alt="erb files in Karma runner" /></p>

<!--more-->


<h2>erb in JavaScripts</h2>

<p>Why in the world would you want to use erb helpers inside your script files?  You might not.  I definitely think this should be a limited practice.  In some cases, it can be very helpful.  For instance, if you use Ruby/Rails (via <a href="https://github.com/rumblelabs/asset_sync"><code>asset_sync</code></a>) to upload your static assets to an external server, such as S3, you can help your scripts know where static assets live after upload.</p>

<p>So your script might use the <code>asset_path</code> helper and end up looking something like this:</p>

<figure class='code'><figcaption><span>app.coffee.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;app&#39;</span><span class="p">,</span> <span class="p">[]).</span><span class="nx">config</span> <span class="nf">($routeProvider) -&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$routeProvider</span>
</span><span class='line'>    <span class="p">.</span><span class="k">when</span> <span class="s">&#39;/admin&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nv">controller: </span><span class="s">&#39;AdminIndexCtrl&#39;</span>
</span><span class='line'>      <span class="nv">templateUrl: </span><span class="s">&quot;&lt;%= asset_path(&#39;admin/index.html&#39;) %&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Import erb Files into Karma</h2>

<p>Well, now you have an <code>app.coffee.erb</code> file.  You need to get it into <a href="http://karma-runner.github.io">Karma runner</a>.  Normally <code>*.coffee</code> files will be brought straight in and compiled automatically by the runner as needed.  In this case, however, the Karma defaults won&#8217;t recognize the <code>.coffee.erb</code> file as a CoffeeScript file need compilation.</p>

<p>To tell Karma to process your erb file as a CoffeeScript file, add this to your config:</p>

<figure class='code'><figcaption><span>karma.conf.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">module.exports = </span><span class="nf">(config) -&gt;</span>
</span><span class='line'>  <span class="nx">config</span><span class="p">.</span><span class="nx">set</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>    <span class="nv">preprocessors:</span>
</span><span class='line'>      <span class="s">&#39;**/*.coffee.erb&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s">&#39;coffee&#39;</span><span class="p">]</span>
</span><span class='line'>      <span class="s">&#39;**/*.coffee&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s">&#39;coffee&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it.  That&#8217;s the key to getting your Erb files processed into JavaScript and ready for Karma to use.</p>

<p>Now, what are your thoughts on putting your CoffeeScripts through the erb filter of the asset pipeline at all?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Mixins]]></title>
    <link href="http://jaketrent.com/post/javascript-mixins/"/>
    <updated>2013-09-06T10:37:00-06:00</updated>
    <id>http://jaketrent.com/post/javascript-mixins</id>
    <content type="html"><![CDATA[<p>JavaScript makes mixins inherently easy.  Mixins are a native feature of the language without calling it that.  Here are a few methods for making this happen.</p>

<p><img src="http://i.imgur.com/XemDUw8.jpg" alt="JavaScript mixins" /></p>

<!--more-->


<h2>Attach a Property</h2>

<p>You can attach a property to a Javascript object at any time.  You don&#8217;t need to monkey patch it.  It doesn&#8217;t need to be packaged up in a very special format.  You just shove stuff onto the object.  Here&#8217;s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">MyModel</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">doOneThing</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;doing it right&#39;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">model</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyModel</span><span class="p">();</span>
</span><span class='line'><span class="nx">model</span><span class="p">.</span><span class="nx">doItRight</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;everybody will be dancing&#39;</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">model</span><span class="p">.</span><span class="nx">doOneThing</span><span class="p">();</span> <span class="c1">// =&gt; &#39;doing it right&#39;</span>
</span><span class='line'><span class="nx">model</span><span class="p">.</span><span class="nx">doItRight</span><span class="p">();</span>  <span class="c1">// =&gt; &#39;everybody will be dancing&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A function is defined.  It is instantiated.  Later, a new property, <code>doItRight</code> function, is added to it.  Both functions now magically work on the original model instance.  We could have attached to <code>MyModel.prototype</code> and had the <code>doItRight</code> function attached to all future instantiations of the function as well.</p>

<h2>Use Extend</h2>

<p>There are a couple great libraries that provide wholesale extension of object properties, just like mixins in other languages.  <a href="http://api.jquery.com/jQuery.extend/">jQuery</a> and <a href="http://underscorejs.org/#extend">Underscore</a> provide <code>$.extend</code> and <code>_.extend</code> respectively.  They are great utilities that make object extension quick and painless.  Here&#8217;s an example using Underscore:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">utilities</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">workWater</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;pay $75 for water&#39;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">otherUtilities</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">electrifyTheCompany</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;pay $75 for electric slides&#39;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">utilityConglomerate</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">({},</span> <span class="nx">utilities</span><span class="p">,</span> <span class="nx">otherUtilities</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">utilityConglomerate</span><span class="p">.</span><span class="nx">workWater</span><span class="p">()</span> <span class="c1">// =&gt; &#39;pay $75 for water&#39;</span>
</span><span class='line'><span class="nx">utilityConglomerate</span><span class="p">.</span><span class="nx">electrifyTheCompany</span><span class="p">()</span> <span class="c1">// =&gt; &#39;pay $75 for electric slides&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Handle Per-instance State</h2>

<p>Notice that the above methods are very good at attaching functions.  The functions in these examples have no shared state.  The scenarios that we&#8217;ve made up so far haven&#8217;t required per-instance state as specified by the mixin.  Recently I had a need for all of these things.  I was making a library called <a href="http://octanner.github.io/angular-models/">angular-models</a>.</p>

<p>I wanted to be able to assign what I called <code>AttributesMixin</code> to any function (Model <code>class</code>es, written in CoffeeScript).  To simplify the story, we have a <code>set</code> API that assign values to an internal <code>_attributes</code> object and a <code>get</code> to retrieve them.  These functions were to be assigned to the prototype of the function, but the <code>_attributes</code> were to be assigned to the object instance only, clean for each new object.</p>

<p>We invented our own convention, where each mixin would optionally implement its own <code>dependencies</code> function.  Each of the <code>Model</code>s knew how to extend itself with a given mixin.  This custom extend function was called <code>@include</code>.  As mixins were included, the <code>dependencies</code> function reference was saved (in an array called <code>_dependencyFns</code>) and then called in the <code>Model</code> superclass constructor.  So, each <code>Model</code> subclass is required to call the super constructor to get this functionality.</p>

<p>In the case of <code>AttributesMixin</code>, it looks as simple as this:</p>

<figure class='code'><figcaption><span>attributes-mixin.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">AttributesMixin =</span>
</span><span class='line'>  <span class="nv">dependencies: </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="vi">@_attributes = </span><span class="p">{}</span>
</span><span class='line'>  <span class="nv">get: </span><span class="o">-&gt;</span> <span class="c1"># ...</span>
</span><span class='line'>  <span class="nv">set: </span><span class="o">-&gt;</span> <span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Model</code> can include like this:</p>

<figure class='code'><figcaption><span>my-model.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MyModel</span> <span class="k">extends</span> <span class="nx">Model</span>
</span><span class='line'>  <span class="nx">@include</span> <span class="nx">AttributesMixin</span>
</span><span class='line'>  <span class="nv">constructor: </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">super</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the <code>Model</code> constructor includes a snippet something like this:</p>

<figure class='code'><figcaption><span>model.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Model</span>
</span><span class='line'>  <span class="nv">constructor: </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span> <span class="nx">@</span> <span class="k">for</span> <span class="nx">fn</span> <span class="k">in</span> <span class="nx">@_dependencyFns</span> <span class="k">if</span> <span class="nx">@_dependencyFns</span><span class="o">?</span>
</span></code></pre></td></tr></table></div></figure>


<p>For a more accurate, in-depth look at the code, see the <a href="https://github.com/octanner/angular-models">Github repo for angular-models</a>.</p>

<p>Do you use any of these methods to mixin functionality to your JavaScript objects?  What others?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Create a Bower Package]]></title>
    <link href="http://jaketrent.com/post/how-to-create-a-bower-package/"/>
    <updated>2013-09-05T07:04:00-06:00</updated>
    <id>http://jaketrent.com/post/how-to-create-a-bower-package</id>
    <content type="html"><![CDATA[<p>Bower is a client-side or browser package manager.  It will handle your 3rd-party packages that are registered with the service.  To make it more useful, you can package up some of your own code and create a component to install with Bower.</p>

<p><img src="http://i.imgur.com/t4XxrHn.jpg" alt="Bower" /></p>

<!--more-->


<h2>Prepare your Package</h2>

<p>To prepare your code to be a Bower package, you must install the Bower CLI:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install -g bower
</span></code></pre></td></tr></table></div></figure>


<p>If you haven&#8217;t upgraded Bower lately, you might want to, as the basic config files have changed recently, and the CLI has improved.  This command would do the trick:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm update -g bower
</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s generate the basic config file, <code>bower.json</code>, by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>your_project_dir
</span><span class='line'><span class="nv">$ </span>bower init
</span></code></pre></td></tr></table></div></figure>


<p>You will be prompted to select a name, version, etc. for your project.</p>

<h2>Add Your Package to the Registry</h2>

<p>There is a Bower registry at <code>http://bower.herokuapp.com</code> that is used as a central lookup for the Bower components that are available.  This allows searching for packages by name, for instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bower search angular-models
</span></code></pre></td></tr></table></div></figure>


<p>Now the only step left is to add a reference to our package in the registry, for instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bower register angular-models git://github.com/octanner/angular-models.git
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it!  It&#8217;s that easy.</p>

<h2>Potential Errors</h2>

<p>When giving a URL to your git repo, use the <code>git</code> protocol URL specifically.  Otherwise on old versions of Bower you&#8217;ll get an <a href="https://github.com/bower/bower/issues/66">error</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bower error Incorrect format
</span></code></pre></td></tr></table></div></figure>


<p>The newer versions will give a much more helpful message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bower EINVFORMAT The registry only accepts URLs starting with git://
</span></code></pre></td></tr></table></div></figure>


<p>And don&#8217;t worry about name overwriting.  Bower will catch that too with an error response:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bower EDUPLICATE Duplicate package
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
