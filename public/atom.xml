<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jake Trent]]></title>
  <link href="http://jaketrent.com/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2014-12-24T16:14:11-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[D3 Class Operations]]></title>
    <link href="http://jaketrent.com/post/d3-class-operations/"/>
    <updated>2014-12-24T10:58:00-07:00</updated>
    <id>http://jaketrent.com/post/d3-class-operations</id>
    <content type="html"><![CDATA[<p>D3 has operations for class name manipulation that you&#8217;re used to from jQuery.  These include addClass, removeClass, hasClass, and toggleClass.  They just go by different names.</p>

<p><img src="http://i.imgur.com/94JQ8N8.jpg" alt="d3 class names" /></p>

<!--more-->


<h2>selection.classed</h2>

<p>The magic all comes in the form of the <code>selection.classed</code> method from d3.  It is going to be the api that is used to accomplish all the operations listed below.  From the <a href="https://github.com/mbostock/d3/wiki/Selections#classed">docs</a>:</p>

<blockquote><p>This operator is a convenience routine for setting the &#8220;class&#8221; attribute; it understands that the &#8220;class&#8221; attribute is a set of tokens separated by spaces. Under the hood, it will use the classList if available, for convenient adding, removing and toggling of CSS classes.</p></blockquote>

<p>It knows how to handle one or many classes on an element, and it will be performant.</p>

<p>Also note that this method is only available on a selection.</p>

<h2>d3 addClass</h2>

<p>To add a class, the second parameter to <code>classed</code> must be true, as in this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">d3</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;.bar&quot;</span><span class="p">)</span>
</span><span class='line'> <span class="p">.</span><span class="nx">classed</span><span class="p">(</span><span class="s2">&quot;my-selector&quot;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>d3 removeClass</h2>

<p>To remove a class, the second parameter to <code>classed</code> must be false.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">d3</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;.bar&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">classed</span><span class="p">(</span><span class="s2">&quot;my-selector&quot;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>d3 hasClass</h2>

<p>To check for the existence of a class, just leave off the second parameter and pass the class name you&#8217;re querying for.  This will return true if it exists, false if it does not.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">d3</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;.bar&quot;</span><span class="p">)</span>
</span><span class='line'> <span class="p">.</span><span class="nx">classed</span><span class="p">(</span><span class="s2">&quot;my-selector&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will return true if any element in the selection has the class.  Use <code>d3.select</code> for single element selection.</p>

<h2>d3 toggleClass</h2>

<p>To flip a class to the opposite state  &#8211; remove it if it exists already, add it if it does not yet exist &#8211; you can do one of the following.</p>

<p>For a single element, the code might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">oneBar</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;.bar&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">oneBar</span><span class="p">.</span><span class="nx">classed</span><span class="p">(</span><span class="s2">&quot;my-selector&quot;</span><span class="p">,</span> <span class="o">!</span><span class="nx">oneBar</span><span class="p">.</span><span class="nx">classed</span><span class="p">(</span><span class="s2">&quot;my-selector&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>For multiple elements, one will want to pass in a callback.  The callback function takes as parameters <code>d</code>, the datum, <code>i</code>, the index in the selection, and <code>this</code> is the current DOM element.</p>

<p>It&#8217;s also important to note that the <a href="https://github.com/mbostock/d3/wiki/Selections#classed">docs</a> inform us that:</p>

<blockquote><p>The function&#8217;s return value is then used to assign or unassign the specified class on each element.</p></blockquote>

<p>The code for toggling multiple elements in a selection at once might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">d3</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;bar&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">classed</span><span class="p">(</span><span class="s2">&quot;my-selector&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">!</span><span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">classed</span><span class="p">(</span><span class="s2">&quot;my-selector&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s a <a href="http://jsbin.com/qeyawa/1/edit?html,js,output">jsbin</a> that provides some toggle functionality.  Ees for fun.</p>

<p><a class="jsbin-embed" href="http://jsbin.com/qeyawa/1/embed?output">d3 toggleClass</a><script src="http://static.jsbin.com/js/embed.js"></script></p>

<h2>Bonus: A note on single active classes</h2>

<p>Here&#8217;s a fun tip for that oft-encountered situation where you want a single element in a selection to have a class, like an <code>active</code> class, and the rest of the selection should not:</p>

<p>Make sure that you detect the active class in the selection previous to the clearing of the active classes.</p>

<p>A sample of what that might look like could be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">d3</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;.bar&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">activeClass</span> <span class="o">=</span> <span class="s2">&quot;active&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">alreadyIsActive</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">classed</span><span class="p">(</span><span class="nx">activeClass</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;.reports-chart__bar&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">classed</span><span class="p">(</span><span class="nx">activeClass</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">classed</span><span class="p">(</span><span class="nx">activeClass</span><span class="p">,</span> <span class="o">!</span><span class="nx">alreadyIsActive</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, unleash the power of your creativity!  Kazaam!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ideas From The Accidental Creative]]></title>
    <link href="http://jaketrent.com/post/ideas-from-accidental-creative/"/>
    <updated>2014-12-10T14:27:00-07:00</updated>
    <id>http://jaketrent.com/post/ideas-from-accidental-creative</id>
    <content type="html"><![CDATA[<p>I just finished a book about becoming a more productive and effective creative person, called “The Accidental Creative”.  It was a great book and included some thoughtful ideas that I ended up pondering and have started incorporating into my life.</p>

<p><img src="http://i.imgur.com/S3LkEjQ.jpg" alt="The Accidental Creative" /></p>

<!--more-->


<p>What follows are the big ideas from the book, broken into the areas that the author had identified and my short take on what each of them is or has the potential to benefit.</p>

<h2>Focus</h2>

<p><strong>Challenges</strong> - Define what you’re working on the big statements, sometimes in the form of questions, around what you’re focused on solving.</p>

<p><strong>The Big 3</strong> - Refine what you will actually tackle by aligning the efforts with what you’ve identified as your important work.</p>

<p><strong>Clustering</strong> - Avoid the frenetic task switching and the associated productivity penalties by scheduling single activities in order to deep and flow with your ideas.</p>

<h2>Relationships</h2>

<p><strong>Circles</strong> - Identify and regularly meet with people with similar interest with whom you can combine creative power and generate and vet new ideas.</p>

<p><strong>Head-to-heads</strong> - One-on-one meetings of people between who there is mutual respect in order to share as much value in the form of ideas and creative thought as possible.</p>

<p><strong>Core Team</strong> - Identify a handful of people in your life whose opinion and experience you value so much that you will trust yourself to be guided by their input on important decisions and life events.</p>

<h2>Energy</h2>

<p><strong>Whole-life Planning</strong> - Don’t pretend you can compartmentalize work and other parts of your life separately.  Rather, schedule and plan these things together to get a full picture of all important work you’re involved in.</p>

<p><strong>Pruning</strong> - Remove the things from your life that don’t match your big 3 or that are excessive energy drains in order to open possibilities for better/more results in areas that really matter to you.</p>

<h2>Stimuli</h2>

<p><strong>Study Plan</strong> - Have scheduled time to ingest new ideas and learn new things.</p>

<p><strong>Notation</strong> - In an effort to really digest what you experience, take notes and review them in order to understand more fully, remember, and let what you encounter change you for the better.</p>

<p><strong>Purposeful Experience</strong> - Filter the over-abundance of stimuli available to you and be intentional about what you experience, feeding your most important needs and efforts.</p>

<h2>Hours</h2>

<p><strong>Idea Time</strong> - Great ideas are important to the value you generate in your work, so actually schedule time to do nothing but  ponder and generate new ideas specifically for the future.</p>

<p><strong>Unnecessary Creating</strong> - Often what used to be a fulfilling creation activity for someone becomes drudgery and work without remembering what it feels like to just create without the pressure of the end product.</p>

<p>Have you read this book?  Others like it?  What are the practices that you’ve ended up incorporating, and how have you seen the benefits?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A JSON API Errors Serializer in Rails]]></title>
    <link href="http://jaketrent.com/post/jsonapi-errors-serializer-in-rails/"/>
    <updated>2014-12-04T10:11:00-07:00</updated>
    <id>http://jaketrent.com/post/jsonapi-errors-serializer-in-rails</id>
    <content type="html"><![CDATA[<p>The default serialization of error states in Rails might not be what you want for your app.  In that case, it&#8217;d be worth knowing how to write a custom serialization format for your needs.  In my case, I am trying to match the <a href="http://jsonapi.org/format/#errors">JSON API format for errors</a>.  Here&#8217;s a potential implementation&#8230;</p>

<p><img src="http://i.imgur.com/XOUecnw.jpg" alt="Rails jsonapi errors" /></p>

<!--more-->


<h2>JSON API Errors Format</h2>

<p>JSON API is cool because it is a standard format for REST APIs to serialize data.  It would be even cooler if it was well-established and it was standardized more than it currently is.  As it is, it&#8217;s a standard that seems to fluctuate a fair bit.  Nevertheless, it has many worthy ideas and might be worth using as a format on your app.</p>

<p>The <a href="http://jsonapi.org/format/#errors">errors format</a> specifically asks for JSON that looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;errors&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;name&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;Name cannot be empty&quot;</span>
</span><span class='line'>    <span class="p">}</span> <span class="err">//</span> <span class="err">...</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There must be an <code>errors</code> root attribute.  Its value is an array.  That array has individual errors that may include a number of different attributes.  Here, I have highlighted just two &#8211; <code>id</code>, a unique id of the problem and <code>title</code>, the human-readable error message.</p>

<h2>Rails Default Error Serialization</h2>

<p>A common place for errors to be reported are in the HTTP responses for requests to the resources in your REST API.  For instance, in your model for your resource &#8211; in this case, let&#8217;s say it&#8217;s a book &#8211; you may have some validation rules for what constitutes a well-formed book.  That model might look like:</p>

<figure class='code'><figcaption><span>book.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Book</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:title</span><span class="p">,</span> <span class="n">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thus, if I try to create a new book without a title, I should get some sort of error.  And indeed, I do.  If I have a <code>books_controller.rb</code> that looks like this:</p>

<figure class='code'><figcaption><span>books_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BooksController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">book_params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">book</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="n">render</span> <span class="n">json</span><span class="p">:</span> <span class="n">book</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">render</span> <span class="n">json</span><span class="p">:</span> <span class="n">book</span><span class="o">.</span><span class="n">errors</span>  <span class="c1"># Allowing default serialization</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">book_params</span>
</span><span class='line'>    <span class="n">params</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>By default, Rails 4 will return an error serialization that looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;can&#39;t be blank&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Custom Error Serializer in Rails</h2>

<p>But I wrote a client that doesn&#8217;t consume errors in the default Rails format, so I want a custom error serialization format &#8211; specifically one to match the JSON API specs.</p>

<p>On the line in <code>books_controller.rb</code> that was returning <code>book.errors</code>, now we&#8217;ll introduce a new function to call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">render</span><span class="p">:</span> <span class="n">json</span><span class="p">:</span> <span class="no">ErrorSerializer</span><span class="o">.</span><span class="n">serialize</span><span class="p">(</span><span class="n">book</span><span class="o">.</span><span class="n">errors</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;re going to write the serializer method in a separate file, <code>error_serializer.rb</code>, so it can be used in many controllers.  To gain access to it in our controller, we need to include the line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">include</span> <span class="no">ErrorSerializer</span>
</span></code></pre></td></tr></table></div></figure>


<p>The contents of your <code>error_serializer.rb</code> can be whatever fits your use case.  For my simple JSON API implementation, it looks like:</p>

<figure class='code'><figcaption><span>error_serializer.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ErrorSerializer</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">ErrorSerializer</span><span class="o">.</span><span class="nf">serialize</span><span class="p">(</span><span class="n">errors</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">if</span> <span class="n">errors</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">json</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">new_hash</span> <span class="o">=</span> <span class="n">errors</span><span class="o">.</span><span class="n">to_hash</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span>
</span><span class='line'>      <span class="n">v</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">msg</span><span class="o">|</span>
</span><span class='line'>        <span class="p">{</span> <span class="nb">id</span><span class="p">:</span> <span class="n">k</span><span class="p">,</span> <span class="n">title</span><span class="p">:</span> <span class="n">msg</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span><span class="o">.</span><span class="n">flatten</span>
</span><span class='line'>    <span class="n">json</span><span class="o">[</span><span class="ss">:errors</span><span class="o">]</span> <span class="o">=</span> <span class="n">new_hash</span>
</span><span class='line'>    <span class="n">json</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the format includes an <code>errors</code> root attribute and an <code>id</code> and <code>title</code> for each error object.</p>

<p>Now, the errors serialization format from the API in the case of an error appears like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;errors&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;title&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;Title can&#39;t be blank&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just what we wanted.</p>

<p>I&#8217;m sure there are better places to put your error serialization logic, ways to call it, or great libraries you&#8217;ve worked with that do a similar thing.  Any suggestions?  Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Destroy Duplicate Tests]]></title>
    <link href="http://jaketrent.com/post/destroy-duplicate-tests/"/>
    <updated>2014-11-05T16:59:00-07:00</updated>
    <id>http://jaketrent.com/post/destroy-duplicate-tests</id>
    <content type="html"><![CDATA[<p>As soon as we begin to write a test for our code, it is natural for us to think that we are doing a good thing, and often, we are.  Yet, I believe there are times that we’re writing tests when we’re hurting more than helping — and, of course, this is not on purpose.  To clarify, I’m an advocate for testing in general, and this is a short thought on how to make it better.</p>

<p><img src="http://i.imgur.com/ozzuTNQ.png" alt="Double tests are not fine" /></p>

<!--more-->


<p>As soon as we begin to write a test for our code, it is natural for us to think that we are doing a good thing, and often, we are.  Yet, I believe there are times that we’re writing tests when we’re hurting more than helping — and, of course, this is not on purpose.  To clarify, I’m an advocate for testing in general, and this is a short thought on how to make it better.</p>

<h2>Verify It, and Be Done</h2>

<p>One of the main goals of testing is to verify that what you have written is correct.  So, if we’ve met that goal, there’s no need to go around the track one more time and see the checkered flag again.  The second time around produces no extra glory and no extra benefit.</p>

<p>If we cover a section of code many times, it isn’t more helpful than the first time we covered it.  To verify twice isn’t to verify any better.  If the second attempt does happen to verify the same thing in an obviously better way, remove the first attempt and keep the second.</p>

<p>If it’s a variation of a certain case that you’re verifying, that’s different.  Adding new cases based on slight permutations of previous cases can be a good thing.  But covering the exact same thing provides no value.  In fact, multiple verification of code is just a type of debt.  It should be a smell in your test code that alerts you to clean things up.</p>

<h2>The Debt of Duplicate Tests</h2>

<p>If you have multiples of something, it just increases the maintenance over time.  Why would you want to update two tests instead of one?  Now that you have duplicate tests, you also have to keep them in sync.  Of course, if they cover the exact same case, if you change source code to fix the one test, the other will still be broken and be apparent and easy to fix.</p>

<p>The more tests you have, the longer your feedback loop in development or in a continuous build environment will be.  Multiply that extra wait time across your life on the project, and it has the possibility of being a non-trivial product.  Of course we need to wait for the tests that are needful and provide added value, but we shouldn’t wait needlessly.</p>

<p>Sometimes you do see duplicate tests within the same file — for instance, within the same unit.  This might happen when different developers approach the unit at different times to add tests.</p>

<p>I think it’s probably more often the case that duplicate tests are found across test classes &#8211; meaning across the different types of tests.  For instance, a developer might write a unit test that covers a case.  Later, someone else might add an integration test that adds the same case.  Later still, someone else might add a functional test that adds the same case yet again.  All these developers are well-intentioned in adding tests.  They all need to think, communicate, investigate, and coordinate a little more to avoid the duplicate test problem.</p>

<h2>Deleting Duplicate Tests</h2>

<p>When duplicate tests are found, we should delete them.  Again, this might require some thinking.  We might want to consider which of the duplicate cases is the best test and therefore the one to keep.  This consideration might include which test is most stable, runs the fastest, is most readable, best designed, latest, earliest, etc.</p>

<h2>Avoiding Duplicate Tests</h2>

<p>The best scenario would be the one where we avoid duplicate tests.  Teams with clear guidelines will be able to coordinate better.  Useful information might include which classes of tests exist in the project and what each is intended for.  We might describe which kinds of tests we prefer, in which order, for certain kinds of verifications.  Having clean, well-organized tests will also encourage the team to read each others’ tests and familiarize themselves with what’s already written and know where to find existing cases and where to properly categorize new cases.</p>

<p>So have fun testing, and destroy the duplicate tests!  Yay for test doubles, but boo for double tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expose HTTP Headers in CORS]]></title>
    <link href="http://jaketrent.com/post/expose-http-headers-in-cors/"/>
    <updated>2014-09-15T09:42:00-06:00</updated>
    <id>http://jaketrent.com/post/expose-http-headers-in-cors</id>
    <content type="html"><![CDATA[<p>For APIs, it seems more and more data is making its way into the HTTP headers.  Recently, whilst adding a <code>Link</code> header, for paging data, into the HTTP response, I realized that my browser code couldn&#8217;t see it.  Who was the culprit?  CORS, of course.</p>

<p><img src="http://i.imgur.com/JAce7py.jpg" alt="Cors" /></p>

<!--more-->


<h2>Headers in Browser</h2>

<p>It was just another day, and I was developing in my browser of choice, Chrome, known, in part, for its unequaled developer tools.  The <code>Link</code> header that I had added onto my HTTP responses for my API were viewable from the Network tab.  It looked good.  The browser could see it, curl could even see it.</p>

<p>In the browser client code, I was using <code>superagent</code>, but the code failed to see it.  I&#8217;d run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;superagent&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;myApi&#39;</span><span class="p">).</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">getResponseHeader</span><span class="p">(</span><span class="s1">&#39;Link&#39;</span><span class="p">)</span> <span class="c1">// nothing</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">link</span> <span class="c1">// nothing</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the header was not coming through.  I ran the same command in the console, <code>res.xhr.getResponseHeader('Link')</code>, and got the error response:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Refused</span> <span class="nx">to</span> <span class="nx">get</span> <span class="nx">unsafe</span> <span class="nx">header</span> <span class="err">‘</span><span class="nx">Link</span><span class="err">’</span>
</span></code></pre></td></tr></table></div></figure>


<p>These are a classic CORS symptoms.</p>

<h2>CORS Spec</h2>

<p>Well, a few great <a href="http://blog.import.io/tech-blog/exposing-headers-over-cors-with-access-control-expose-headers">google results</a> later, I ended up at the <a href="http://www.w3.org/TR/cors/#simple-response-header">CORS spec</a>, which drones on that only simple headers are allowable in CORS requests by default.  These headers include:</p>

<ul>
<li>Cache-Control</li>
<li>Content-Language</li>
<li>Content-Type</li>
<li>Expires</li>
<li>Last-Modified</li>
<li>Pragma</li>
</ul>


<p><code>Link</code> is definitely not on that list.  So, how to add it?</p>

<h2>Access-Control-Expose-Headers in rack-cors</h2>

<p>Like the other CORS headers, the <code>Access-Control-</code> prefix is present.  The one you&#8217;re looking for is <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS"><code>Access-Control-Expose-Headers</code></a>.  It is a comma-separated list of header names. You can add this header manually to your response, or depending on the library you&#8217;re using, it might be added differently.</p>

<p>I was using <code>rack-cors</code>.  Thus, my addition ended up looking something like:</p>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># ...</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Cors</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">allow</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">origins</span> <span class="s1">&#39;*&#39;</span>
</span><span class='line'>    <span class="n">resource</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="ss">:headers</span> <span class="o">=&gt;</span> <span class="ss">:any</span><span class="p">,</span> <span class="ss">:methods</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:get</span><span class="p">,</span> <span class="ss">:post</span><span class="p">,</span> <span class="ss">:put</span><span class="p">,</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">:options</span><span class="o">]</span><span class="p">,</span> <span class="ss">:expose</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Link&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Can you see that the <code>expose</code> key was the key for me?  Once that was added, the browser let the client code read the link, and all was safe and well.</p>

<h2>Bonus:</h2>

<p>As a bonus, here&#8217;s a great client library for consuming a <a href="https://developer.github.com/v3/#link-header">GitHub API-style</a> <code>Link</code> header, called <a href="https://www.npmjs.org/package/parse-link-header">parse-link-header</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Send Props to Children in React]]></title>
    <link href="http://jaketrent.com/post/send-props-to-children-react/"/>
    <updated>2014-08-12T16:55:00-06:00</updated>
    <id>http://jaketrent.com/post/send-props-to-children-react</id>
    <content type="html"><![CDATA[<p>In React, you&#8217;re always making components.  Sometimes components are standalone.  Other times, you&#8217;ll have components that can nest children components.  Sometimes you&#8217;ll want to send properties to the children components from the parent as often as a doting parent wants to send packages to a child missionary.  It&#8217;s possible, it&#8217;s simple, and it&#8217;s not documented super well.  Here&#8217;s one method.</p>

<p><img src="http://i.imgur.com/DXuSNbw.png" alt="React" /></p>

<!--more-->


<h2>Children Components</h2>

<p>When parent components are rendered, they have access to a special property, <code>this.props.children</code>.  It&#8217;s like an Angular <code>ng-transclude</code> or an Ember <code>yield</code>.  Children components are generally rendered something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;iAmParentHearMeRoar&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The generic example above shows simply how to render children, <code>props</code> untouched, within a parent component.  Sometimes, however, a parent wants to bequeath its children with extra properties.  How will we make that happen?</p>

<h2>Setting Child Props</h2>

<p><code>props</code> are meant to be immutable.  But, in order for us to send <code>props</code> values to our children, we&#8217;re going to essentially loop through our children and set props on them as a part of our parent <code>render</code> function.</p>

<p>Deep breath.  It&#8217;s ok.  The children that we&#8217;ll loop through aren&#8217;t mounted component instances.  They are, instead, <a href="http://facebook.github.io/react/blog/2014/07/17/react-v0.11.html#descriptors">descriptors</a>.  These descriptors have all the <code>props</code> attributes that we&#8217;ve declared should be put on the components, but they haven&#8217;t been rendered yet.  Because of this, we can change props, and it&#8217;s ok.  We&#8217;re not mutating what has rendered.  The data still hasn&#8217;t flowed to the children.  We&#8217;re still effectively still riffing on the logic of what the children components should really be when they&#8217;re eventually mounted.</p>

<h2>Looping on Children Components</h2>

<p><code>this.props.children</code> is a funny property.  It&#8217;s special in more ways than one.  The things that might trip us up in looping is that even though it sounds like a plural thing, meaning an array, sometimes it&#8217;s a singular object.  To help avoid potential problems, React gives us a helper, <code>React.Children</code>.  It has a few functions for array iteration, such as <code>map</code> and <code>forEach</code> that help account for the potential forms of <code>this.props.children</code>.</p>

<h2>Functional Modifications</h2>

<p>Immutable data is a big part of functional programming.  This means that when we &#8216;mutate&#8217; the props, we want to mutate on a clone of the child component without affecting the original.  There&#8217;s an input, there&#8217;s an output, and the input is untouched.  Once we have our cloned children components as we want them, we&#8217;ll render those instead.  React offers another great helper for cloning components and setting properties in a single function, <code>React.addons.cloneWithProps</code>.  Note that in order to use this function, you need to <code>require('react/addons')</code>.</p>

<h2>Checking Child Type</h2>

<p>It&#8217;s a generally-useful thing to be able to tell what the React class type of a component object is.  It&#8217;s an applicable skill in terms of looping through child components because we might not want to modify the properties of all types of children.  Each React component class has a <code>type</code> attribute accessible via <code>MyComponent.type</code>.  This attribute is also available on component descriptors.</p>

<h2>A Child CheckOption Example</h2>

<p>To bring this all together and illustrate the concepts, let&#8217;s say we created a <code>RadioGroup</code> component that could take one or many <code>RadioOption</code> child components.  In raw html, which is what our component will eventually render, <code>input</code>s with type <code>checkbox</code> need to all have the same <code>name</code> attribute value to work well as toggles within the group.  But this is something that React can help us not have to duplicate.  We&#8217;ll instead put a <code>name</code> property on the parent <code>RadioGroup</code> and have it transfer it as a property on all its children.  The implementation might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/** @jsx React.DOM */</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react/addons&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">RadioOption</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">label</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;radio&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">value</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">label</span><span class="p">}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/label&gt;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">RadioGroup</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">renderChildren</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Children</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">child</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">child</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="nx">RadioOption</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">React</span><span class="p">.</span><span class="nx">addons</span><span class="p">.</span><span class="nx">cloneWithProps</span><span class="p">(</span><span class="nx">child</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">name</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">child</span>
</span><span class='line'>    <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">))</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;radio-group&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">renderChildren</span><span class="p">()}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">WhereImUsingRadioGroups</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">RadioGroup</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;blizzard-games&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">RadioOption</span> <span class="nx">label</span><span class="o">=</span><span class="s2">&quot;Warcraft 2&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;wc2&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">RadioOption</span> <span class="nx">label</span><span class="o">=</span><span class="s2">&quot;Warcraft 3&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;wc3&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">RadioOption</span> <span class="nx">label</span><span class="o">=</span><span class="s2">&quot;Starcraft 1&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;sc1&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">RadioOption</span> <span class="nx">label</span><span class="o">=</span><span class="s2">&quot;Starcraft 2&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;sc2&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/RadioGroup&gt;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, where the parent <code>RadioGroup</code> has the <code>name</code> prop, it will be given to each of the children so their <code>name</code> prop will match and the radio group will work as expected.  Thus, the hearts of the children are turned toward their fathers.</p>

<p>Is there a better way to do this?  How have you been sending <code>props</code> to children?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set State in Callbacks in React]]></title>
    <link href="http://jaketrent.com/post/set-state-in-callbacks-in-react/"/>
    <updated>2014-06-23T08:30:00-06:00</updated>
    <id>http://jaketrent.com/post/set-state-in-callbacks-in-react</id>
    <content type="html"><![CDATA[<p>In React, you can setup components that fetch their own data and set their own state with that data.  Because of the async nature of data fetching, you’ll have to make sure to keep things cleaned up to avoid the error of trying to set state in an unmounted component.</p>

<p><img src="http://i.imgur.com/DXuSNbw.png" alt="React" /></p>

<!--more-->


<h2>React Components setState</h2>

<p>If a React component fetches its own data, it will usually do so in the <code>componentDidMount</code> method.  In the data request callback, it will set its own state via the <code>this.setState</code> method.  (<code>this.state</code> should be treated as immutable.)  State should only be set on mounted components, or those components that are inserted into the dom.</p>

<p>If you attempt to set state on an unmounted component, you&#8217;ll get an error that looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Uncaught Error: Invariant Violation: replaceState(...): Can only update a mounted or mounting component. </span></code></pre></td></tr></table></div></figure>


<p>Others have reported this variation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Invariant Violation: replaceState(...): Cannot update while unmounting component. This usually means you called setState() on an unmounted component.</span></code></pre></td></tr></table></div></figure>


<p>Both indicate that you&#8217;re setting state on a component that is not mounted.  How should one avoid this?  In my case, <code>setState</code> was being called in a callback that was firing after the component that initially started the request had already been unmounted from the dom.  Here are the two ways I addressed the problem&#8230;</p>

<h2>Assure Component isMounted</h2>

<p>If the component is mounted, <code>setState</code> is a safe bet.  If it&#8217;s not mounted, never do it.  If it&#8217;s not mounted, you probably don&#8217;t about the state at that point either.  So wrap your state setting in <code>this.isMounted()</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">componentDidMount</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">MyModel</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isMounted</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">goodiesFrom</span><span class="o">:</span> <span class="nx">data</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>It feels a bit like a hack, but it makes the code safe.  Another option&#8230;</p>

<h2>Abort the Request</h2>

<p>My asynchronous action is a network request that, when finished, will call the callback function.  When the component unmounts, I can just throw away the request so the callback is never invoked.  To do this, we&#8217;ll take advantage of another React lifecycle hook, <code>componentWillUnmount</code>:</p>

<figure class='code'><figcaption><span>my-component.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">componentDidMount</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">req</span> <span class="o">=</span> <span class="nx">MyModel</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({})</span>
</span><span class='line'>    <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">))</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">componentWillUnmount</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">req</span><span class="p">.</span><span class="nx">abort</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>In my model, I&#8217;m using the <a href="https://github.com/visionmedia/superagent">superagent</a> library for network requests which provides an <a href="http://visionmedia.github.io/superagent/#aborting-requests">abort</a> method.</p>

<figure class='code'><figcaption><span>my-model.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="err">‘</span><span class="nx">superagent</span><span class="err">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">MyModel</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">find</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">request</span><span class="p">(</span><span class="err">‘</span><span class="nx">modelUrl</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also note that in my <code>end</code> function callback, I&#8217;m checking for the existence of data.  This is because when a request is aborted, data will come back as undefined.</p>

<p>My favored method for solving the problem is the latter request abort method.  It feels cleaner that we&#8217;re relying on the lifecycle functions of the component to deal with cleanup, much like we would for <a href="http://facebook.github.io/react/tips/dom-event-listeners.html">events</a>.  How have you dealt with this problem?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Broccoli Ember Emblem]]></title>
    <link href="http://jaketrent.com/post/broccoli-ember-emblem/"/>
    <updated>2014-05-30T07:18:00-06:00</updated>
    <id>http://jaketrent.com/post/broccoli-ember-emblem</id>
    <content type="html"><![CDATA[<p>Make broccoli compile your emblem templates so they&#8217;re ready for your ember app.</p>

<p><img src="http://i.imgur.com/85v8PQP.png" alt="Broccoli Ember Emblem" /></p>

<!--more-->


<h2>The Libraries</h2>

<p><a href="https://www.npmjs.org/package/broccoli">Broccoli</a> builds your assets quickly.  It makes heavy use of caching so it only has to rebuild affected subtrees when files change.  <a href="http://emblemjs.com/">Emblem</a> is a significant whitespace version of <a href="http://handlebarsjs.com/">Handlebars</a> templates, similar in style to <a href="http://slim-lang.com/">Slim</a> or <a href="http://jade-lang.com/">Jade</a>.  <a href="http://emberjs.com/">Ember</a> is a MVC framework for building browser apps.</p>

<p>Put them all together, and you have something that will help you compile your templates quickly for your browser app.  The <a href="https://github.com/jaketrent/broccoli-ember-emblem">broccoli-ember-emblem</a> plugin for Broccoli will do just that.</p>

<h2>Install</h2>

<p>To use the library, you&#8217;ll need broccoli installed first.  Then, you&#8217;ll install the plugin via npm:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install --save-dev broccoli-ember-emblem</span></code></pre></td></tr></table></div></figure>


<h2>Usage</h2>

<p>You&#8217;ll setup the plugin in your app&#8217;s <code>Brocfile.js</code>.  That setup might look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">emblem</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;broccoli-ember-emblem&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mergeTrees</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;broccoli-merge-trees&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">pickFiles</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;broccoli-static-compiler&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">preprocess</span> <span class="p">(</span><span class="nx">tree</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">tree</span> <span class="o">=</span> <span class="nx">emblem</span><span class="p">(</span><span class="nx">tree</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">stripPathFromName</span><span class="o">:</span> <span class="s1">&#39;tmpl/&#39;</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">tree</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">tmplTree</span> <span class="o">=</span> <span class="s1">&#39;client/tmpl&#39;</span>
</span><span class='line'><span class="nx">tmplTree</span> <span class="o">=</span> <span class="nx">pickFiles</span><span class="p">(</span><span class="nx">tmplTree</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">srcDir</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">destDir</span><span class="o">:</span> <span class="s1">&#39;/tmpl&#39;</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="nx">tmplTree</span> <span class="o">=</span> <span class="nx">preprocess</span><span class="p">(</span><span class="nx">tmplTree</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">mergeTrees</span><span class="p">([</span> <span class="cm">/* other trees, */</span> <span class="nx">tmplTree</span> <span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note a few things:</p>

<ul>
<li>I&#8217;m using another plugin, <code>broccoli-static-compiler</code> to move files around in the broccoli build directories.  This is to be able to identify separate trees that both use similar file filters (eg, *.js for both src scripts and templates).</li>
<li>I&#8217;m using the one option for the <code>broccoli-ember-emblem</code> plugin, <code>stripPathFromName</code>, which allows me to remove the path name from the template name in output.  For example, if I have a file at <code>tmpl/application.emblem</code>, I want the template name in ember to be <code>application</code>, not <code>tmpl/application</code>.</li>
<li>Final output is merged into a single tree via another plugin, <code>broccoli-merge-trees</code>.</li>
</ul>


<h2>Output</h2>

<p>Broccoli will take care of finding all of your template files.  It will use directories and filenames as the input for template names.  As a few examples, here is input and output as it might happen in the above configuration:</p>

<ul>
<li>File: <code>client/tmpl/application.emblem</code> becomes: <code>Ember.TEMPLATES['application']</code></li>
<li>File: <code>client/tmpl/components/song.emblem</code> becomes: <code>Ember.TEMPLATES['components/song']</code></li>
</ul>


<p>Notice that Ember requires all templates to be registered on the <code>Ember.TEMPLATES</code> object.  Later, at app runtime, they are looked up on that object by name.</p>

<p>So, use the plugin and win.  How does your template compilation for Ember/Emblem differ?  What other features do you wish were supported here?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bower Resolutions]]></title>
    <link href="http://jaketrent.com/post/bower-resolutions/"/>
    <updated>2014-05-29T07:18:00-06:00</updated>
    <id>http://jaketrent.com/post/bower-resolutions</id>
    <content type="html"><![CDATA[<p>When you specify dependencies for you app via Bower, some of the packages might rely on different versions of the same library.  You will have to resolve what version of libraries your app actually wants.  In other words, you break the tie.  But you don&#8217;t want to break it every time, so save your choice.</p>

<p><img src="http://i.imgur.com/t4XxrHn.jpg" alt="Bower" /></p>

<!--more-->


<h2>bower.json Resolutions</h2>

<p>When you run <code>bower install</code>, the resolution process is interactive.  When bower recognizes that there are two packages that depend on a package at different versions, it&#8217;ll list all those versions and ask:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Unable to find a suitable version for ember, please choose one:
</span><span class='line'>    1) ember#~1.0.0 which resolved to 1.0.1 and is required by ember-data#0.0.14
</span><span class='line'>    2) ember#1.5.1 which resolved to 1.5.1 and is required by melodrama</span></code></pre></td></tr></table></div></figure>


<p>In this case, the library in question is ember.  I can press the number <code>2</code> and bower will install the 2nd option, <code>ember#1.5.1</code>.</p>

<p>The next line in the prompt is very handy.  It reads:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Prefix the choice with ! to persist it to bower.json</span></code></pre></td></tr></table></div></figure>


<p>Awesome! So, if I type <code>!2</code> instead, my choice is saved in <code>bower.json</code>.  Specifically, it&#8217;ll add a <code>resolutions</code> entry:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;resolutions&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;ember&quot;</span><span class="o">:</span> <span class="s2">&quot;1.5.1&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, the next time you run <code>bower install</code>, there is no interactive question of what version I want because I&#8217;ve already resolved that <code>ember</code> for my app should be version <code>1.5.1</code>.</p>

<h2>Bonus: Heroku install</h2>

<p>Not only do you save your brain from having to remember what version you want in your app, you save your fingers the added stress of typing numbers.  And as a bonus, you also make <code>bower install</code> possible for automated processes.  For instance, if you want to run <code>bower install</code> in a Heroku deploy of a Node app, you can add a postinstall script for npm in your <code>package.json</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;scripts&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;postinstall&quot;</span><span class="o">:</span> <span class="s2">&quot;./node_modules/bower/bin/bower install&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;dependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;bower&quot;</span><span class="o">:</span> <span class="s2">&quot;~1.3.3&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you should be able to push to heroku, have npm install, then have bower install.  Because you&#8217;ve recorded your resolutions choices, the process can work automatically on heroku without prompts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mountain West JavaScript Review]]></title>
    <link href="http://jaketrent.com/post/mtnwest-javascript-review/"/>
    <updated>2014-03-25T11:45:00-06:00</updated>
    <id>http://jaketrent.com/post/mtnwest-javascript-review</id>
    <content type="html"><![CDATA[<p>MountainWest JavaScript was a great conference last week.  It was a jubilee. Well, if you can have a jubilee in the first year of a conference.   Here&#8217;s my take.</p>

<p><img src="http://i.imgur.com/VGtnQzX.png" alt="MtnWest JavaScript" /></p>

<!--more-->


<h2>Format</h2>

<p><a href="http://mtnwestjs.org/">MountainWest JavaScript</a> started this year as a part of the larger Mountain West conference set, including <a href="http://mtnwestdevops.org/">devops</a> and <a href="http://mtnwestrubyconf.org/">Ruby</a> as well.  It was two full days.  There is a single track &#8211; everyone (that stays) hears everything.  Love both these features.  Splitting the disciplines into separate conferences is genius.</p>

<h2>Speakers</h2>

<p>The speaker lineup was exceptional.  There were many great minds assembled, fun experience shared, and great companies represented.  Following <a href="http://jaketrent.com/post/ng-conf-review/">ng-conf</a> earlier this year, I was again pleasantly surprised at the amount of great content.  I did not attend the devops or ruby portions, but it has been said by some that they were not as exceptional.</p>

<p>Thanks to the organizers for selecting great content and presenters.  Thank you to all the speakers for preparing some killer talks.</p>

<h2>Topics</h2>

<p>The mix of topics seemed relevant and varied.  This was welcome.  There was just a bit of overlap on some topics.  Conference organizers put similar topics together, which was fine.  But in one case, the back-to-back speakers, from the same company and essentially the same topic had so much overlap that it was obvious.  Repetition is good, but it should be done in front of the YouTube recording of a single, great talk on the subject.  The conference was recorded, so hopefully we can see the sessions online soon.</p>

<h2>Venue</h2>

<p>The conference met at the Salt Lake City Public Library.  It&#8217;s a great city.  It&#8217;s a cool building.  It has a location close to public transit lines.  The stadium seating in the conference room is good for visibility but bad for knees.  There were plenty of power sources.</p>

<p>Despite these good points about the location, I found myself not super-excited about showing up at the library for another conference.  I feel like it&#8217;s time for something fresh.</p>

<h2>Swag</h2>

<p>There was a nice shirt with mysterious symbols emblazened across the front.  Ruby was discernable.  I&#8217;m still up in the air over which represents JavaScript or devops.  There was also a nice, laminate sticker that they gave out with the conference logo.  Sponsors gave out nothing.  I was hoping for an O.C. Tanner gold bracelet and Instructure panda hoodie.  There was also a stunning lack of sweet treats and lunch. :(  In the place of actual food, there was an especially long, 2-hour lunch break &#8211; oh, and a lot of water.</p>

<h2>I&#8217;d Go Again</h2>

<p>I&#8217;d definitely go again if the speaker and topic lineup seemed as promising as it turned out to be this year.  Next year, hopefully I&#8217;ll attend at a different location in Salt Lake City and enjoy a chocolate eclair whilst learning about how I can actually use es6 features in the then-current evergreen browsers.</p>

<h2>My Notes</h2>

<p>As I&#8217;ve indicated, there were many topics touched upon that were interesting and helpful.  I&#8217;ve included my chicken scratch below (if you can actually type chicken scratch), mostly so you can grab some hyperlinks if you&#8217;d like.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>react.js - Pete Hunt - made react look very interesting from a perspective of the underlying ideas
</span><span class='line'>     - jsx - http://facebook.github.io/react/docs/jsx-in-depth.html
</span><span class='line'>     - virtual dom
</span><span class='line'>     - simplicity over familiarity
</span><span class='line'>      - riot.js - super-small mvp lib - https://moot.it/riotjs/docs/
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>macros - James Long -
</span><span class='line'>     - sweet.js
</span><span class='line'>
</span><span class='line'>async js - Jafar Husain - simplicity of event handling, handling of race conditions, and description of handling looked very compelling
</span><span class='line'>     - observable - combine iterator (‘i’m done’) with event (pub sub)
</span><span class='line'>     - events are just arrays
</span><span class='line'>     - vector programming - transformations over collections
</span><span class='line'>     - practice and learn - http://jhusain.github.io/learnrx/
</span><span class='line'>
</span><span class='line'>async -
</span><span class='line'>     - same bit as above
</span><span class='line'>     - rxjs - http://reactive-extensions.github.io/RxJS/ - https://rx.codeplex.com/
</span><span class='line'>     - Reactive Manifesto - http://www.reactivemanifesto.org/
</span><span class='line'>
</span><span class='line'>ball of mud - Brandon Hays - most entertaining; great
</span><span class='line'>     - Ball of mud architecture - http://laputan.org/mud/
</span><span class='line'>     - @tehviking
</span><span class='line'>
</span><span class='line'>TDD ember - Andy Pliszka
</span><span class='line'>
</span><span class='line'>Screenreaders - Ryan Florence - a humanistic appeal to do the right thing and help those with disabilities on the web
</span><span class='line'>     - aria-role
</span><span class='line'>
</span><span class='line'>seo - Jeff Whepley
</span><span class='line'>     - fragment spec
</span><span class='line'>     - make server render substates, js can pick up
</span><span class='line'>
</span><span class='line'>teach kids js - Liz Abinante - fun and light encouragement to share programming concepts with children
</span><span class='line'>     - children are moldable
</span><span class='line'>     - creative, imagination
</span><span class='line'>     - not limited by inhibitions
</span><span class='line'>     - start early, have time for mastery by young age.
</span><span class='line'>
</span><span class='line'>modules, packages - Guy Bedford
</span><span class='line'>     - traceur - still use
</span><span class='line'>     - es6-module-loader - es6 loader polyfill - used by addy osmani’s todomvc - http://addyosmani.github.io/todomvc-backbone-es6/
</span><span class='line'>     - systemjs - shim require on top of es6 loader polyfill
</span><span class='line'>     - jspm.io + systemjs - https://github.com/systemjs
</span><span class='line'>     - addy osmani’s todomvc rewrite experience - http://blog.tastejs.com/rewriting-a-webapp-with-ecmascript-6
</span><span class='line'>
</span><span class='line'>web animation - Jeremy Kahn
</span><span class='line'>     - detect end of css animation - http://blog.teamtreehouse.com/using-jquery-to-detect-when-css3-animations-and-transitions-end
</span><span class='line'>     - edit keyframe animation via js - https://github.com/jlongster/css-animations.js
</span><span class='line'>     - js tweening - https://github.com/jeremyckahn/shifty/
</span><span class='line'>     - stylie - viz tool create keyframe animation
</span><span class='line'>
</span><span class='line'>hardware hack - Jamisson Dance
</span><span class='line'>     - npm - johnny-five - node arduino
</span><span class='line'>     - npm - xbox-controller
</span><span class='line'>     - parrot ar drone
</span><span class='line'>          - “That’s against the spirit of node to use something when you could rewrite it yourself.”
</span><span class='line'>     - arduino uno w/ breadboard - ~$100
</span><span class='line'>
</span><span class='line'>flight.js - Kassandra Perch
</span><span class='line'>     - slides - http://kperch.github.io/mtn_west/
</span><span class='line'>
</span><span class='line'>node error handling - Jamund Ferguson
</span><span class='line'>     - Kraken - on top of express - https://github.com/paypal/kraken-js
</span><span class='line'>     - try/catch - for json.parse
</span><span class='line'>     - callback - first param is err
</span><span class='line'>     - custom error - custom name, attach custom data (e.g., ServerError has a list of services hitting, ports, etc)
</span><span class='line'>     - process.on(‘uncaughtException’) must always process.exit()
</span><span class='line'>     - handle errors in middleware - call next w/ error as first param, call return right after
</span><span class='line'>     - use default error handler in express - app.use(function (err, req, res, next) { res.send(500, etc) })
</span><span class='line'>     - node core notes - https://nodefirm.hackpad.com/Node-Error-Handling-Summit-uXFi4FUg8Td
</span><span class='line'>
</span><span class='line'>client error handling - Todd Gardner
</span><span class='line'>     - error handling service - http://trackjs.com/
</span><span class='line'>     - name your inner functions
</span><span class='line'>     - stacktrace.js - normalizes format of stack trace
</span><span class='line'>     - tracekit.js - get stack traces in old browsers
</span><span class='line'>     - zone.js - long stack traces across async events
</span><span class='line'>
</span><span class='line'>gulp - Eric Schoffstall
</span><span class='line'>     - getfractal
</span><span class='line'>     - still has problems with 3rd-party file-based builds, such as require.js
</span><span class='line'>     - github.com/substack/stream-handbook
</span><span class='line'>
</span><span class='line'>canvas animation - Josh Robertson
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Link to Broccoli Assets on a Webpage]]></title>
    <link href="http://jaketrent.com/post/link-broccoli-assets-on-webpage/"/>
    <updated>2014-03-18T08:06:00-06:00</updated>
    <id>http://jaketrent.com/post/link-broccoli-assets-on-webpage</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/joliss/broccoli">Broccoli.js</a> is good at <a href="http://www.solitr.com/blog/2014/02/broccoli-first-release/">building assets</a>.  But now that they&#8217;re built, how does one use them on a webpage?</p>

<p><img src="http://i.imgur.com/oYpiHcU.jpg" alt="Broccoli" /></p>

<!--more-->


<h2>Broccoli Serve</h2>

<p>Broccoli has a great feature of having assets cached at every step in a list of transforms.  This makes it quite fast.  It can selectively reprocess only the subset of assets that have changed, and it can selectively transform only what&#8217;s required.</p>

<p>Broccoli provides a command, <code>serve</code> that watches for changes to the trees specified in your <code>Brocfile.js</code> and spits them out to its temporary directory.  From there, it sets up a small webserver to serve the built assets to anyone who wants them.  The intent is that you can use this server in local dev on your sites.</p>

<p>Open your project and run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ broccoli serve
</span><span class='line'>Serving on http://localhost:4200</span></code></pre></td></tr></table></div></figure>


<p>And you&#8217;ll get a local server defaulting on port 4200.</p>

<h2>Webpage Reference</h2>

<p>Now that you have this server for local assets, you need to reference it from your webpage.  Just as when you get to production, you&#8217;ll want to reference a deployed asset on a CDN, locally broccoli can serve as your asset host.</p>

<p>You can accomplish this in any number of ways.  Essentially, you need two things:</p>

<h3>1. Environment Detection</h3>

<p>If you&#8217;re in development, you&#8217;ll want to use <code>http://localhost:4200</code> for asset host, otherwise you&#8217;ll want to use something like <code>http://mycdn.com</code>.</p>

<p>Assuming less of your other infrastructure, we&#8217;ll make Broccoli accomplish this (but you could do this easily with <code>NODE_ENV</code> or something similar).  Broccoli internally uses <code>BROCCOLI_ENV</code> to switch functionality.  To detect this value easily, you can install <a href="https://github.com/joliss/broccoli-env">the plugin</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install broccoli-env --save-dev</span></code></pre></td></tr></table></div></figure>


<p>Then you&#8217;ll be able to use it in your <code>Brocfile.js</code> to switch on important things:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">env</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;broccoli-env&#39;</span><span class="p">).</span><span class="nx">getEnv</span><span class="p">()</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">env</span> <span class="o">===</span> <span class="s1">&#39;development&#39;</span><span class="p">)</span> <span class="c1">// do stuff</span>
</span></code></pre></td></tr></table></div></figure>


<p>Currently, the plugin only supports <code>development</code> and <code>production</code> values.</p>

<h3>2. View Compilation</h3>

<p>If you have a server-side component in your project that serves UI, you likely have this built in already with the likes of <code>erb</code>, <code>jade</code>, <code>swig</code>, or something else.  If you don&#8217;t, again you can defer to Broccoli.  It&#8217;s good at building assets after all.</p>

<p>As an example, there is a plugin for compiling <code>jade</code> templates, <a href="https://github.com/sindresorhus/broccoli-jade">broccoli-jade</a>.  First, install:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">broccoli</span><span class="o">-</span><span class="nx">jade</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">dev</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then create a view to meet your needs.  Perhaps in part, that might look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">doctype</span> html
</span><span class='line'><span class="nt">html</span>
</span><span class='line'>  <span class="nt">head</span>
</span><span class='line'>    <span class="nt">script</span>(<span class="na">src=</span><span class="s">&quot;#{assetsHost}/main.js&quot;</span><span class="err">,</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span>)
</span><span class='line'>    <span class="c">/ ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, <code>assetsHost</code> is a variable that will be replaced at compile time with the appropriate asset host value.</p>

<p>Finally, in your <code>Brocfile.js</code> you can tie it all together with something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">env</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;broccoli-env&#39;</span><span class="p">).</span><span class="nx">getEnv</span><span class="p">()</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">jade</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;broccoli-jade&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">tree</span> <span class="o">=</span> <span class="nx">broccoli</span><span class="p">.</span><span class="nx">makeTree</span><span class="p">(</span><span class="s1">&#39;my/views/path&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">tree</span> <span class="o">=</span>  <span class="nx">jade</span><span class="p">(</span><span class="nx">tree</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">assetsHost</span><span class="o">:</span> <span class="nx">env</span> <span class="o">===</span> <span class="s1">&#39;development&#39;</span> <span class="o">?</span> <span class="s1">&#39;http://localhost:4200&#39;</span> <span class="o">:</span> <span class="s1">&#39;http://mycdn.com&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="k">return</span> <span class="nx">tree</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when the <code>jade</code> template is compiled, it will have as local data the value of <code>assetHost</code> according to the env set by <code>BROCCOLI_ENV</code>.</p>

<p>And since Broccoli is handling the building of your view, you can even use Broccoli to serve it.  If it&#8217;s called <code>index.jade</code> and ends up at the root directory after building with Broccoli, you could serve your whole site at <code>http://localhost:4200</code>.</p>

<p>And just like that, you can dev locally referencing the assets that Broccoli is building for you.  Does it work for you?  Is the picture clear?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert App From EmberFire to Fireplace]]></title>
    <link href="http://jaketrent.com/post/convert-app-from-emberfire-to-fireplace/"/>
    <updated>2014-03-17T16:17:00-06:00</updated>
    <id>http://jaketrent.com/post/convert-app-from-emberfire-to-fireplace</id>
    <content type="html"><![CDATA[<p>There are a few changes required to convert your Ember app from using EmberFire to Fireplace.  Here are a few that I found to be required.  There are probably more.</p>

<p><img src="http://i.imgur.com/1Jg69Pf.jpg" alt="Firebase" /></p>

<!--more-->


<h2>Your Options</h2>

<p><a href="https://github.com/firebase/emberFire">EmberFire</a> and <a href="https://github.com/rlivsey/fireplace">Fireplace</a> both provide an API for you to integrate your Ember app with a <a href="https://www.firebase.com/">Firebase</a> backend.  You don&#8217;t need either library; they provide a more high-level API and help handle some of the nitty gritties of making Ember data-binding work with your socket traffic.  You can just use the <a href="https://www.firebase.com/docs/javascript/firebase/index.html">Firebase JavaScript API</a>.</p>

<p>I was using EmberFire with ember-data first.  It worked pretty well.  I ran into a few hiccups where it seemed like model relationships weren&#8217;t working quite right in a couple places, but I worked around it for my simple app.  Fireplace was recommended to me as a good option instead of EmberFire.  From those that know more about this than I do, Fireplace was described as &#8220;the thing that ember-data should have been,&#8221; and way more capable than EmberFire.  As far as I can tell, they look very similar.  But, if you should want to switch, here are the basic changes:</p>

<h2>Changes Required</h2>

<h3>Set the Store</h3>

<p>Instead of setting up an adapter for Firebase to work with Ember data, you want to define a store on your app.  That might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">App.Store = </span><span class="nx">FP</span><span class="p">.</span><span class="nx">Store</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">firebaseRoot: </span><span class="s">&#39;https://myfirebase.firebaseio.com&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the store is of type <code>FP.Store</code> instead of <code>DS.Store</code>.</p>

<h3>Remove ember-data</h3>

<p>Now that you have another store set, you want to make sure you remove ember-data so it doesn&#8217;t try to interact with it.  If you forget, you will get an error at runtime:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">Uncaught</span> <span class="nb">Error</span><span class="o">:</span> <span class="nx">Assertion</span> <span class="nv">Failed: </span><span class="nx">The</span> <span class="nx">initializer</span> <span class="s">&#39;store&#39;</span> <span class="nx">has</span> <span class="nx">already</span> <span class="nx">been</span> <span class="nx">registered</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Add ember-inflector</h3>

<p>Ember-data comes bundled with ember-inflector.  But, now that ember-data is gone, we need to fetch this library separately.  This is the library responsible for inferring types in your models based on property names.  To get it, you&#8217;ll need the <a href="https://github.com/stefanpenner/ember-inflector">ember-inflector source</a>.  You&#8217;ll notice that there isn&#8217;t a nice package built for you.  Instead, you&#8217;ll have to build it with Ruby tools.</p>

<p>To make your own version from source, follow these steps:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">git</span> <span class="nx">clone</span> <span class="nx">git@github</span><span class="p">.</span><span class="nx">com</span><span class="o">:</span><span class="nx">stefanpenner</span><span class="o">/</span><span class="nx">ember</span><span class="o">-</span><span class="nx">inflector</span><span class="p">.</span><span class="nx">git</span>
</span><span class='line'><span class="nx">rake</span> <span class="nx">bundle</span>
</span><span class='line'><span class="nx">rake</span> <span class="nx">dist</span>
</span><span class='line'><span class="nx">cp</span> <span class="nx">dist</span><span class="o">/</span><span class="nx">modules</span><span class="o">/</span><span class="nx">ember</span><span class="o">-</span><span class="nx">inflector</span><span class="p">.</span><span class="nx">js</span> <span class="nx">your_project_dir</span>
</span></code></pre></td></tr></table></div></figure>


<p>For convenience, at the risk of being out-dated, I&#8217;ve uploaded the version that I built as of 17 Mar 2014 to a <a href="https://gist.github.com/jaketrent/9621891">gist of ember-inflector at 32e30eb</a>.`</p>

<h3>Change Model Definitions</h3>

<p>Your models will need to change, but not by much.  <code>DS.Model</code> becomes <code>FP.Model</code>.  <code>DS.attr</code> becomes <code>FP.attr</code>.  The changes are pretty much one-to-one in requiring just a namespace change.</p>

<h3>Optionally Change Finds</h3>

<p>Where you use ember-data&#8217;s <code>model.find</code> function, you may want to change to use Fireplace&#8217;s <code>model.fetch</code>.  <code>fetch</code>, in this case will return a promise where <code>find</code> does not.</p>

<h3>Change Deletes</h3>

<p>Beyond the above, only API that broke for me was ember-data&#8217;s <code>model.destroyRecord</code>.  It seems on that this is the different, because <code>save</code> and <code>createRecord</code> remain the same.  But, for the delete, the API becomes simply <code>model.delete</code>.</p>

<h3>Other Changes</h3>

<p>The app I converted was quite simple, so I&#8217;m thinking that there will be other changes required.  What have you run into?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Detecting Window Closing in Ember]]></title>
    <link href="http://jaketrent.com/post/ember-window-beforeunload/"/>
    <updated>2014-03-17T08:04:00-06:00</updated>
    <id>http://jaketrent.com/post/ember-window-beforeunload</id>
    <content type="html"><![CDATA[<p>In a long-running app such as you might build in Ember, it can be useful to detect when the window is closing.  This is easily detected with JavaScript, and there are easy places to put the code in your Ember app.</p>

<p><img src="http://i.imgur.com/85v8PQP.png" alt="Ember beforeunload" /></p>

<!--more-->


<h2>beforeunload</h2>

<p>The <code>window</code> event that you want to listen for is <code>beforeunload</code>.  You might bind to the event like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">bind</span> <span class="s">&#39;beforeunload&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="s">&#39;Are you sure you want to close this window?&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Return a string from the function.  This string will be displayed in a browser-native confirm-style dialogue.</p>

<h2>beforeunload in Ember</h2>

<p>Now, if your app is controlled by Ember, you&#8217;re likely going to want it to handle bindings such as this from within Ember.  There are several places you might want to put this code.  Your decision will depend on the needs of your app.  You can put it in a route or controller.  The scope of that route or controller should match the scope for which you want the <code>beforeunload</code> event to be caught.  In other words, if you want <code>beforeunload</code> to be caught for the entire app, put the listener in <code>ApplicationRoute</code> (or <code>ApplicationController</code>).  Or if you wanted a more limited scope, put the listener in a more specific route.</p>

<p>For instance, if you wanted to save a blog post when the user closes a tab, you might implement something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">App.BlogEditController = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">saveBeforeClose: </span><span class="p">(</span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">bind</span> <span class="s">&#39;beforeunload&#39;</span><span class="p">,</span> <span class="o">=&gt;</span>
</span><span class='line'>      <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;model&#39;</span><span class="p">).</span><span class="nx">save</span><span class="p">()</span>
</span><span class='line'>      <span class="s">&#39;Are you sure you want to leave unsaved work?&#39;</span>
</span><span class='line'>  <span class="p">).</span><span class="kc">on</span> <span class="s">&#39;init&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>In Practice</h2>

<p>In practice, the UX for this kind of feature can be tricky.  If someone closes a tab, odds are they meant to and don&#8217;t want to be bothered with a confirm dialogue asking them to reiterate their decision.  On the other hand, maybe the didn&#8217;t realize the implications of closing out the app, such as in the case of unsaved work, and they become very grateful for the reminder to stay and save something.</p>

<p>In the case of the last example, it would be cool if we could detect the window closing, save the work automatically, and let the user close the tab as they indicated without interruption.  For asynchronous actions such as network requests, this is problematic.  The request will not finish before the browser has trashed the whole window.  In cases such as this, you will need to synchronize your requests to block before finishing execution of the <code>beforeunload</code> event callback.</p>

<p>So, does this work for you?  How might you make it better?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Express Validator]]></title>
    <link href="http://jaketrent.com/post/testing-express-validator/"/>
    <updated>2014-03-10T07:37:00-06:00</updated>
    <id>http://jaketrent.com/post/testing-express-validator</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/ctavan/express-validator">Express-validator</a> is a <a href="http://expressjs.com/api.html#middleware">middleware for Express</a> on Node.js that can help you validate user input.  It&#8217;s a lovely library.  Here&#8217;s a pattern for testing code that uses it.</p>

<p><img src="http://i.imgur.com/ZfK9bv4.png" alt="express-validator" /></p>

<!--more-->


<h2>Install</h2>

<p>To get <code>express-validator</code> in your project, install with npm:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install express-validator --save
</span></code></pre></td></tr></table></div></figure>


<h2>Plug in the Middleware</h2>

<p>To use the middleware in your code, crack open the part of your app that sets up Express middlewares, and add in a reference to this lil beaut:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">expressValidator = </span><span class="nx">require</span> <span class="s">&#39;express-validator&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span> <span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">()</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span> <span class="nx">expressValidator</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that you should insert the new <code>express-validator</code> middleware directly after the <code>json</code> middleware.  Also note that the <code>json</code> middleware, used in conjunction with <code>urlencoded</code> now <a href="http://andrewkelley.me/post/do-not-use-bodyparser-with-express-js.html">replace <code>bodyParser</code></a> to avoid deprecation warnings on startup.</p>

<h2>Validate Something</h2>

<p>Let&#8217;s say you&#8217;re writing a validator for new posts to a blog.  That code might look like this.</p>

<figure class='code'><figcaption><span>blog-new-validator.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">module.exports = </span><span class="nf">(req) -&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">req</span><span class="p">.</span><span class="nx">checkBody</span><span class="p">(</span><span class="s">&#39;title&#39;</span><span class="p">,</span> <span class="s">&#39;Title is required&#39;</span><span class="p">).</span><span class="nx">notEmpty</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">req</span><span class="p">.</span><span class="nx">checkBody</span><span class="p">(</span><span class="s">&#39;body&#39;</span><span class="p">,</span> <span class="s">&#39;Body is required&#39;</span><span class="p">).</span><span class="nx">notEmpty</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">validationErrors</span><span class="p">()</span> <span class="o">or</span> <span class="nx">req</span><span class="p">.</span><span class="nx">validationErrors</span><span class="p">().</span><span class="nx">length</span> <span class="o">is</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>It checks to see if there is a title and a body given.  If there is not, the validator will return false, and there will be a validation errors array on the <code>req</code> object.  There are many <a href="https://github.com/chriso/validator.js">other assertions (provided internally by validator.js)</a> besides <code>notEmpty</code> that you can use.</p>

<h2>Validating the Validator</h2>

<p>First, setup a test helper that stubs the request, <code>req</code>, for validation:</p>

<figure class='code'><figcaption><span>req.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">expressValidator = </span><span class="nx">require</span><span class="p">(</span><span class="s">&#39;express-validator&#39;</span><span class="p">)()</span>
</span><span class='line'>
</span><span class='line'><span class="nv">exports.stubForValidation = </span><span class="nf">(done) -&gt;</span>
</span><span class='line'>  <span class="nv">req =</span>
</span><span class='line'>    <span class="nv">query: </span><span class="p">{}</span>
</span><span class='line'>    <span class="nv">body: </span><span class="p">{}</span>
</span><span class='line'>    <span class="nv">params: </span><span class="p">{}</span>
</span><span class='line'>    <span class="nv">param: </span><span class="nf">(name) -&gt;</span>
</span><span class='line'>      <span class="nx">@params</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">expressValidator</span> <span class="nx">req</span><span class="p">,</span> <span class="p">{},</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">done</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&#8217;s nothing too incredibly special here.  It&#8217;s just abstracted out of your test into a reusable helper.  The <code>req</code> object has empty objects to slap fixture data onto in your tests.  It includes a stubbed <code>param</code> function that can return params by name.  Finally, the <code>express-validator</code> middleware is called with the stubbed <code>req</code> object.</p>

<p>Now, in your test, you can simply:</p>

<ol>
<li>Stub the request before each test</li>
<li>Setup your fixture data to make the test pass (or not)</li>
<li>Assert validation errors&#8217; existence and messages</li>
</ol>


<figure class='code'><figcaption><span>blog-new-validator.spec.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">stubReq = </span><span class="nx">require</span><span class="p">(</span><span class="s">&#39;req&#39;</span><span class="p">).</span><span class="nx">stubForValidation</span>
</span><span class='line'><span class="nv">validateNew = </span><span class="nx">require</span> <span class="s">&#39;blog-new-validator&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span> <span class="s">&#39;blog-new-validator&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">req = </span><span class="kc">null</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span> <span class="nf">(done) -&gt;</span>
</span><span class='line'>    <span class="nx">stubReq</span> <span class="nf">(r) -&gt;</span>
</span><span class='line'>      <span class="nv">req = </span><span class="nx">r</span>
</span><span class='line'>      <span class="nx">done</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span> <span class="s">&#39;is invalid without title&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">validateNew</span><span class="p">(</span><span class="nx">req</span><span class="p">).</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="kc">false</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">validationErrors</span><span class="p">(</span><span class="kc">true</span><span class="p">).</span><span class="nx">title</span><span class="p">.</span><span class="nx">msg</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">eql</span> <span class="s">&#39;Title is required&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span> <span class="s">&#39;is invalid without body&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">validateNew</span><span class="p">(</span><span class="nx">req</span><span class="p">).</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="kc">false</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">validationErrors</span><span class="p">(</span><span class="kc">true</span><span class="p">).</span><span class="nx">body</span><span class="p">.</span><span class="nx">msg</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">eql</span> <span class="s">&#39;Body is required&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span> <span class="s">&#39;is valid with title and body&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">req.body.title = </span><span class="s">&#39;New Blog Title&#39;</span>
</span><span class='line'>    <span class="nv">req.body.body = </span><span class="s">&#39;The body of the blog.&#39;</span>
</span><span class='line'>    <span class="nx">validateNew</span><span class="p">(</span><span class="nx">req</span><span class="p">).</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>What do you think?  Is there an easier way?  A way to get better assertions?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switch: How to Change Things When Change is Hard Review]]></title>
    <link href="http://jaketrent.com/post/switch-review/"/>
    <updated>2014-03-04T07:51:00-07:00</updated>
    <id>http://jaketrent.com/post/switch-review</id>
    <content type="html"><![CDATA[<p>The book is called Switch: How to Change Things When Change is Hard.  It&#8217;s by Chip Heath and Dan Heath.  It shows interesting anecdotes and good strategies on how to motivate people and situations to change.</p>

<p><img src="http://i.imgur.com/zjnOrqX.jpg" alt="Switch" /></p>

<!--more-->


<h2>Who are you?</h2>

<p>Did you know you are actually a combination elephant and rider?  Your rider represents your analytical thinking.  He wants to know every option.  He gets hung up in analysis paralysis.  It is likely he&#8217;ll never make a decision.  Your elephant represents your emotions and your instincts on things.  It&#8217;s much bigger than the rider, who is supposedly in control.  If your elephant decides it wants something, it usually gets its way.</p>

<p>This analogy of our two halves is a bit silly but works quite well.  It illustrates well our internal struggle.  It helps me realize how I approach problems, seek solutions, and eventually make a choice on how to proceed.  I thought it was quite helpful.  As with most of the concepts in the book, it is revisited many times, presumably in order for us to do a better job remembering the concept.</p>

<h2>Practical and Powerful</h2>

<p>The 3 main thrusts of the book are focused around a strategy that the authors stated they hoped was small and simple enough to be memorable and practiced yet real and powerful enough to actually help us exact change.</p>

<h3>1. Direct the Rider</h3>

<p>The rider, admittedly, will not make decisions easily.  So, he needs some direction.  It can be hard to choose how to even begin to change.  The main helps stated in the book are as follows:</p>

<h4>Follow the Bright Spots</h4>

<p>In the problem situation or field that you are considering, there are most definitely things that <em>are</em> working.  These are the bright spots.  Why not replicate these good things in your own way for your own problem?  There are people who have faced a similar problem, whether they knew it or not, and found their way through all or part of it.  These are usually easier to discover than by starting from scratch.  And we know they&#8217;ll work!</p>

<h4>Script the Critical Moves</h4>

<p>To ensure the rider takes action, you&#8217;ll want to make it more than abundantly clear what <em>exactly</em> you want him to do.  If there is one thing that will make the biggest impact, that becomes your critical move.  Script, just as in a screenplay, exactly what actors in the program are expect to perform.</p>

<h4>Point to the Destination</h4>

<p>As the rider is weighing options, there will be many that appeal to him (or not).  It will be important to enumerate in an analytical way why the destination you&#8217;re choosing is worth pointing toward.</p>

<h3>2. Motivate the Elephant</h3>

<p>The elephant, once sufficiently motivated becomes the powerhouse that ensures change will begin.  The elephant is the one to change inertia, bringing us lurching out of our standing position.</p>

<h4>Find the Feeling</h4>

<p>Knowledge alone will not change behavior.  This is obvious considering our clear knowledge of the ill effects of habits such as smoking.  People still smoke.  So we must additional paint an emotional picture of what a change may mean to someone, what it will feel like, and the deeper reasons for attempting it.</p>

<h4>Shrink the Change</h4>

<p>Large changes require a large effort and many steps.  It may look daunting, especially to start.  The elephant starts on emotion, but it will also stop by the same virtues.  Break down the change into steps that are small and readily doable.</p>

<h4>Grow Your People</h4>

<p>People attach themselves to causes.  Causes appeal to the inner values of people and motivate them from within.  Encourage a sense of identity with the change you&#8217;re promoting.  If people can identify with the behavior as a part of who they are, they are likely to meet the change with a great dose of internal enthusiasm and excitement.</p>

<h3>3. Shape the Path</h3>

<p>Even with great instructions for our riders and motivation for our elephant, the friction to change may still be strong.  There is still more we can do to help.</p>

<h4>Tweak the Environment</h4>

<p>What looks like resistance from a person may just be that person falling into the environmental norms.  It may be the way things have always been done, and it&#8217;s natural to continue doing them.  Make the change you advocate the most natural thing to do as a product of the environment.  And consider environmental change your responsibility before you blame others for not responding well to change.</p>

<h4>Build Habits</h4>

<p>It turns out that making decisions, especially hard decisions to change, takes energy and will power.  And we only have so much to give.  If something becomes automatic, the effort to enact the behavior will be much lower.  We&#8217;ll just do it.  Determine how you can create triggers that happen automatically to regularly change behavior along the path.</p>

<h4>Rally the Herd</h4>

<p>Behavior is contagious.  People want to respond as others around them do.  Most people instinctively do not want to stand out, especially in negative ways, compared to the crowd around them.  To encourage change, publicize the majority behavior that is in line with what you seek.</p>

<h2>Style and Read</h2>

<p>Switch is a pretty short book.  The sheer amount of anecdotal and interesting examples of people chaning their lives and communities made it fun and inspiring to read.  I think I&#8217;d have to re-read it to have the strategies and tactics for change sink in deep enough to pull them out in the midst of change, but it does seems small enough to remember and powerful enough to be useful.  At the least, it&#8217;s a great reference.  I&#8217;d recommend the book.  And since everyone has encountered and/or wants to change, it seems like an applicable read.  Chip and Dan have several other books I&#8217;m going to go check out now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ng-Conf Review]]></title>
    <link href="http://jaketrent.com/post/ng-conf-review/"/>
    <updated>2014-01-24T07:22:00-07:00</updated>
    <id>http://jaketrent.com/post/ng-conf-review</id>
    <content type="html"><![CDATA[<p>Ng-Conf just happened last week in Salt Lake City, Utah.  It was awesome.  Oh blast, I blew the punch line.  Anyway, here&#8217;s my take.</p>

<p><img src="http://i.imgur.com/4swtO6x.jpg" alt="ng-conf" /></p>

<!--more-->


<h2>Format</h2>

<p>Two days.  Early &#8216;til late.  One track.  20-40 min talks virtually back to back.  Lightning&#8217;y?  When we broke for lunch, I felt relieved.  My brain could go into some low-power mode.  Breaks between talks were mostly announced as anywhere from 30 seconds to 3 minutes, this whilst yammering off a short list of swag winners.  The format encouraged content, and there was a lot of it!</p>

<h2>Line Up</h2>

<p>The conference was easy to look forward to.  Looking at the speaker list, I was immediately impressed.  At one point during the event, Aaron Frost said that they hoped if the Angular team would come that they&#8217;d get more attendees.  Yes, that was a draw.  It was fun having them there.  Core.  Very core.  I believe that about each member of the team took the stage over the two days.</p>

<p>The speaker list in total was very impressive.  There was a good mix of local and remote talent who came together to cover a broad array of Angular and JavaScript-related topics.</p>

<h2>Talk Quality</h2>

<p>Talk for talk, just numbers-wise, it was definitely one of the most high quality conferences I&#8217;ve attended.  Of course, there were some less-than-stellar presentations.  But, on the whole, I was more than impressed by the subject mastery and teaching ability of the speakers.  Thank you to everyone who prepared.</p>

<p>There were also some definite highlights: Dave Smith on directives, Vojta Jina on DI, Brian Ford on zone.js, and Julie Ralph on Protractor.</p>

<p>And one of the best parts is that each of these talks was recorded on video for a livestream and <a href="http://www.youtube.com/user/ngconfvideos">on youtube for later viewing</a>.</p>

<h2>Venue</h2>

<p>The conference was held at the Little America hotel in Salt Lake City.  It was a beautiful location.  The combined main ballrooms that the talks were held in were awesome.  Plenty of marble.  The food was great.  There weren&#8217;t tons of snacks, but that was probably good for my health.  The air quality in Salt Lake during the conference wasn&#8217;t good.  In fact, oobleck!  But, I didn&#8217;t get food poisoning &#8211; plus!</p>

<h2>Smooth</h2>

<p>I heard it said by multiple people during the conference that it was the best first-time conference they had attended.  Indeed, everything went Domo smooth.  The content was the star.  It was fun.  It was energetic (minus some confusing lack of screaming for all the sweet swag &#8211; probably had something to do with the sheer amount, like clapping for the 3rd curtain call).  The AV crew did a fantastic job.  Usually, it&#8217;s annoying to sit in an audience as video or audio problems plague the start of a talk.  That simply did not happen here, and it was oh, so refreshing.</p>

<p>Oh yeah, and sweet jacket!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developing an Ember Edge Review]]></title>
    <link href="http://jaketrent.com/post/developing-an-ember-edge-review/"/>
    <updated>2014-01-23T11:19:00-07:00</updated>
    <id>http://jaketrent.com/post/developing-an-ember-edge-review</id>
    <content type="html"><![CDATA[<p>The latest book on The List at <a href="http://emberwatch.com/books">emberwatch</a> is <a href="http://bleedingedgepress.com/our-books/developing-an-ember-edge/">Developing an Ember Edge</a>.  It&#8217;s a great intro book to Ember.js.</p>

<p><img src="http://i.imgur.com/85v8PQP.png" alt="Developing an Ember Edge" /></p>

<!--more-->


<p>The book is published by Bleeding Edge Press.  Pretty awesome name.  It is written by Jamie White, Matthew Beale, Christopher Sansone, Wesley Workman, and Bradley Priest, quite the host of authors.  It turns out to be a very timely read for me.  The code in the book even uses some of ember-data 1.0 beta 3.  As of this writing, that&#8217;s almost the bleeding edge.</p>

<p>I would compare the book to the <a href="http://emberjs.com/guides/">Ember.js official guides</a>.  It&#8217;s introductory.  It definitely favors a breadth approach.  For me, but a wee Ember babe, it brings to light some interesting details about the Ember internals or at least the approach of the framework.</p>

<h2>Format</h2>

<p>I read the book in digital form as a pdf.  I love the digitalness, but I wonder if it wouldn&#8217;t have had a bit more editorial review if printed.  Perhaps this is what Bleeding Edge Press means.  The code in the snippets was all smashed to the left, destroying most indentation reading assistance.  The code bits were also a smaller font size than the prose which made the switch between the two slightly awkward to my over-taxed eyes.  By the end of the book, I wasn&#8217;t surprised when I found a typo.  There were a lot but not too many.  For someone of lesser OCD, it probably would&#8217;ve largely gone unnoticed.  Of course, considering the engineer audience of the book, maybe that doesn&#8217;t exist.</p>

<h2>The Zen of Ember</h2>

<p>The book content is really good.  I felt like it helped me piece together why things are organized in Ember as they are.  I learned more of what the pieces are by themselves and how they&#8217;re meant to interact together.  The authors were also kind to point out where some of the rough edges were in terms of design (or potential misdesign by app authors) and api changes.</p>

<p>I liked the mostly-breadth approach to the writing.  The book was good for a newb and remained pretty short.  Perhaps that&#8217;s because there&#8217;s not too much there as a general subject without bloating this book into an API reference book. [whew]  The book struck a good balance of being technical, readable, and giving good insight into the practical use of the framework.</p>

<h2>Ember Trackr</h2>

<p>The first half of the book covers the concepts and layers of Ember, approaching mvc in general, objects, application, routes, handlebars, views, controllers, components, and models.  This takes 54 pages.  The other half(+) shows the development of a ticket tracking app.</p>

<p>The development process shown is thorough, even including the tool install, project file layout, and ui styling.  The TDD of the app in total was awesome.  It&#8217;s really step by step.  Sometimes this was a little painful, but you definitely don&#8217;t miss anything.  The screenshots of test runners in terminals and the app in browser windows could have been cropped for easier reading with less vertical blank space.  The testing walkthrough was really great.  They even worked through a few &#8220;unexpected&#8221; errors as one might actually encounter them.</p>

<p>The app dev portion could probably have been cut short.  About the time they start into the user management screens, we probably could have called it good.  But, they do introduce some good, new concepts in the app dev section of the book.  For instance, he covers a little on containers and <code>Ember.run</code> as it relates to testing.</p>

<p>I&#8217;m glad I read the book.  It was helpful to my slingshot into the Ember atmosphere.  Boom!  Go get it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Permit Array in Rails Strong Parameters]]></title>
    <link href="http://jaketrent.com/post/permit-array-rails-strong-parameters/"/>
    <updated>2014-01-22T11:19:00-07:00</updated>
    <id>http://jaketrent.com/post/permit-array-rails-strong-parameters</id>
    <content type="html"><![CDATA[<p>Rails 4 introduced the pattern of strong parameters at the controller layer.  As a best practice, you will explicitly list the parameters that an endpoint should accept in payloads.  Arrays are specified just slightly different.</p>

<p><img src="http://i.imgur.com/XOUecnw.jpg" alt="Rails" /></p>

<!--more-->


<h2>Strong Parameters</h2>

<p>You don&#8217;t want those blackhats to update any field they want on your poor models.  Raise the shields &#8211; strong parameters!  In ye olden days, <code>attr_accessible</code> could add some protection to your models.  Since Rails 4, it has been best practice to move this responsibility to the controller.  At that layer, you can make adjustments and allowances on a per-endpoint basis (eg, admin functionality has more power over a particular model than the layman user).</p>

<p>So, create a private function in your controller where you can filter your params for your model.  It might look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">private</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">luchador_params</span>
</span><span class='line'>  <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:luchador</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:favorite_move</span><span class="p">,</span> <span class="ss">:weight</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You have two main methods to use:</p>

<ul>
<li><code>require</code> - ensures that the parameter is present (as in this root <code>luchador</code> key)</li>
<li><code>permit</code> - whitelist filters the parameters to the set specified</li>
</ul>


<h2>Arrays in <code>permit</code></h2>

<p>The most standard use case for <code>permit</code> is to pass it a collection of :symbols.  These keys must represent scalar values (string, number, that sort) only.  But what about arrays?  They&#8217;re represented differently by an empty array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:luchador</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:favorite_move</span><span class="p">,</span> <span class="ss">:weight</span><span class="p">,</span> <span class="n">wins</span><span class="p">:</span> <span class="o">[]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But wait &#8211; one more problem, and I don&#8217;t like the answer here.  My client might send back a <code>nil</code> instead of an array (ie, when the luchador has no <code>wins</code>).  If this happens, cue ugly error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Unpermitted parameter: wins
</span></code></pre></td></tr></table></div></figure>


<p>To fix, default to empty array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">params</span><span class="o">[</span><span class="ss">:luchador</span><span class="o">][</span><span class="ss">:wins</span><span class="o">]</span> <span class="o">||=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:luchador</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:favorite_move</span><span class="p">,</span> <span class="ss">:weight</span><span class="p">,</span> <span class="n">wins</span><span class="p">:</span> <span class="o">[]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>What have you done that looks better?  Please! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grunt-init Exercism.io]]></title>
    <link href="http://jaketrent.com/post/grunt-init-exercism-io/"/>
    <updated>2014-01-03T07:07:00-07:00</updated>
    <id>http://jaketrent.com/post/grunt-init-exercism-io</id>
    <content type="html"><![CDATA[<p><a href="http://exercism.io">Exercism.io</a> has a great set of JavaScript exercises.  They could be made better by a better test setup and runner.  I&#8217;ve created a small grunt-init template to help in that setup.</p>

<p><img src="http://i.imgur.com/4773D.jpg" alt="Grunt and Exercism" /></p>

<!--more-->


<h2>Exercism.io</h2>

<p>For those unfamiliar, <a href="http://exercism.io">Excercism.io</a> is a great tool that helps coders and potential coders learn and expand their knowledge in several programming languages.  Currently, among the 9 language choices, JavaScript is one.  The JavaScript exercises come with a pre-built <a href="https://github.com/mhevery/jasmine-node">jasmine_node</a> test suite.  The point of the exercise is to write code that will make all the corresponding tests pass.  For more on Excercism.io, see my <a href="http://jaketrent.com/post/exercism-review/">review</a>.</p>

<h2>Vanilla jasmine_node</h2>

<p>As the <a href="http://exercism.io/help/setup/javascript">Exercism JavaScript docs</a> indicate, you can setup your JavaScript environment like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install -g jasmine_node
</span></code></pre></td></tr></table></div></figure>


<p>And then run your tests like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>jasmine_node bob_test.spec.js
</span></code></pre></td></tr></table></div></figure>


<p>This does work perfectly well.  But, we want something more.  Of course.</p>

<h2>Grunt watch</h2>

<p>We want the test suite to re-run as soon as we make a change and save either our test file or our file under test.  Well, it turns out that <a href="http://gruntjs.com">Grunt</a> is a great little command-line tool that has plugins for file watching.</p>

<p>Grunt needs to be told to use a plugin.  Then it needs to be told that we want to run the task that watches our files.  All of this is indicated to Grunt via a local <code>Gruntfile.js</code> or <code>Gruntfile.coffee</code> file.  You could create this file by yourself, but wouldn&#8217;t it be nice if there was a <code>Gruntfile.js</code> created somewhere for you already that worked well with Exercism?</p>

<h2>Grunt-init</h2>

<p>It turns out that there is a great, separate utility called <a href="http://gruntjs.com/project-scaffolding">grunt-init</a> that you can use to create your <code>Gruntfile.js</code> (and many other things) with a pre-built template.</p>

<p>To install this tool, run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install -g grunt-init
</span></code></pre></td></tr></table></div></figure>


<p>To use a grunt-init template, you need to have a local copy.  This template copy could live anywhere, but grunt-init can reference these templates purely by name if you put them in <code>~/.grunt-init/</code>.</p>

<p>To get the <a href="https://github.com/jaketrent/grunt-init-exercism">Exercism grunt-init template</a>, clone it like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git@github.com:jaketrent/grunt-init-exercism.git ~/.grunt-init/exercism
</span></code></pre></td></tr></table></div></figure>


<p>Then change into your specific Exercism directory, init your <code>Gruntfile.js</code>, and follow the other commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/dev/exercism/javascript/bob
</span><span class='line'>grunt-init exercism
</span><span class='line'>npm init
</span><span class='line'>npm install
</span></code></pre></td></tr></table></div></figure>


<p>The <code>npm init</code> will flush out the rest of the generated <code>package.json</code>.  The <code>npm install</code> will install all dependencies that we said Grunt needed to do its job.</p>

<p>Finally, activate Grunt to watch your files with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>grunt watch
</span></code></pre></td></tr></table></div></figure>


<p>Now as you write your Exercism code to fulfill tests, you will see the tests get run automatically and become greenlit as your code increases in awesomeness.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Zerigo DNS to Heroku]]></title>
    <link href="http://jaketrent.com/post/add-zerigo-dns-to-heroku/"/>
    <updated>2013-12-31T07:03:00-07:00</updated>
    <id>http://jaketrent.com/post/add-zerigo-dns-to-heroku</id>
    <content type="html"><![CDATA[<p>Once upon a time, I could setup DNS super easily on Heroku using their Zerigo DNS addon.  Lately, I tried again using the same pattern and failed.  Here&#8217;s an updated step-by-step guide.</p>

<p><img src="http://i.imgur.com/6DUwRKt.png" alt="Heroku and Zerigo" /></p>

<!--more-->


<h2>Back in the Day</h2>

<p>It used to be that all you had to do was setup the nameservers on your domain registrar, add the Zerigo addon on Heroku&#8217;s end with a few commands, and you were rocking in minutes.  The latest DNS setup on Heroku caused me a bit more grief.  Something has changed.  But there is hope.  The new steps are almost just as brief.  You&#8217;ll just have to take care to get it just right.</p>

<h2>Cedar, not Bamboo</h2>

<p>These days new deployments on Heroku are going to favor using the Cedar stack as the new option.  The Bamboo stack was the original and older Ruby stack.  And so it troubled me after setting up my DNS as I used to that I got an error message (<a href="https://devcenter.heroku.com/articles/error-codes#h70-access-to-bamboo-http-endpoint-denied">h70</a>) similar to this in my logs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>2010-10-06T21:51:07-07:00 heroku<span class="o">[</span>router<span class="o">]</span>: <span class="nv">at</span><span class="o">=</span>error <span class="nv">code</span><span class="o">=</span>H70 <span class="nv">desc</span><span class="o">=</span><span class="s2">&quot;Access to bamboo HTTP endpoint denied&quot;</span> <span class="nv">method</span><span class="o">=</span>GET <span class="nv">path</span><span class="o">=</span>/ <span class="nv">host</span><span class="o">=</span>foo.myapp.com <span class="nv">fwd</span><span class="o">=</span>17.17.17.17 <span class="nv">dyno</span><span class="o">=</span> <span class="nv">connect</span><span class="o">=</span> <span class="nv">service</span><span class="o">=</span> <span class="nv">status</span><span class="o">=</span>503 <span class="nv">bytes</span><span class="o">=</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lame, lame, lame, lame, lame.  Now, who did you contact?</p>

<p>Running <code>heroku info</code> reveals that I&#8217;m indeed using the Cedar stack on this project, so what gives?  It turns out my DNS was messed up.</p>

<h2>The New Zerigo/Heroku Setup</h2>

<p>The <a href="https://devcenter.heroku.com/articles/zerigo_dns">Heroku devcenter docs for Zerigo</a> are pretty good, but as of this writing, they&#8217;re a little inaccurate.  Here is the step-by-step that worked for me:</p>

<h4>1. Nameservers</h4>

<p>Setup your domain via your registrar&#8217;s site to point to these nameservers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>a.ns.zerigo.net
</span><span class='line'>b.ns.zerigo.net
</span><span class='line'>c.ns.zerigo.net
</span><span class='line'>d.ns.zerigo.net
</span><span class='line'>e.ns.zerigo.net
</span></code></pre></td></tr></table></div></figure>


<h4>2. Zerigo Addon</h4>

<p>Add the Zerigo addon via the Heroku cli:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku addons:add zerigo_dns
</span></code></pre></td></tr></table></div></figure>


<h4>3. Zerigo Config</h4>

<p>Open Zerigo addon for configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku addons:open zerigo_dns
</span></code></pre></td></tr></table></div></figure>


<p>Navigate to the Zerigo site for your app and press the &#8220;Add Snippet&#8221; button.  From the snippets available, select &#8220;Heroku&#8221;.  This snippet contains a CNAME entry and a URL redirect entry.  Add the snippet.  Now, you&#8217;ll need to adjust the CNAME entry.  The <code>data</code> field probably reads <code>proxy.heroku.com</code>.  This has been deprecated.  Instead, change the CNAME entry to point to <code>yourapp.herokuapp.com</code>.</p>

<p>Note also that the URL redirect entry is moving all traffic from yourapp.com to http://www.yourapp.com.  Apparently now the &#8220;www.&#8221; subdomain is required and you can&#8217;t setup a naked domain on Heroku.  If someone knows otherwise, I&#8217;d love to here about it, because I used to do this all the time.</p>

<h4>4. Add Domains on Heroku</h4>

<p>Via the Heroku cli, type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku domains:add www.yourapp.com
</span></code></pre></td></tr></table></div></figure>


<p>Note that we do <em>not</em> want to add <code>yourapp.com</code> (no &#8220;www&#8221;) to in this manner.  If you do that, the tool adds multiple A records to Zerigo, which the Zerigo docs clearly state you don&#8217;t want.  These A records are what will activate routing through the Bamboo stack, which you want to avoid.</p>

<p>This should be the point at which you can refresh your browser at &#8220;yourapp.com&#8221;.  You should see the redirect happen, moving you to &#8220;www.yourapp.com&#8221;.  The routing should be happy on Heroku&#8217;s end.  It sometimes takes more time for this to propagate, so if you don&#8217;t see results immediately, be a bit patient before your start changing your configuration, thinking it&#8217;s not working.</p>

<p>Has anyone else run into this?  Is there a better way to set this up?</p>
]]></content>
  </entry>
  
</feed>
