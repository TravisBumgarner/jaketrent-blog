<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jake Trent]]></title>
  <link href="http://jaketrent.com/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2013-01-18T08:09:07-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Make a Pinterest Webservice]]></title>
    <link href="http://jaketrent.com/post/how-to-make-pinterest-webservice/"/>
    <updated>2013-01-18T07:06:00-07:00</updated>
    <id>http://jaketrent.com/post/how-to-make-pinterest-webservice</id>
    <content type="html"><![CDATA[<p>Pinterest currently does not have an official webservice API.  It seems kind of crazy in this day and age.  They really should have one.  I can&#8217;t think what the business reasons might be for not having one.</p>

<p>They&#8217;ve not had one for long enough that it&#8217;s high time we write our own.  It&#8217;ll be surprisingly easy with a few choice tools</p>

<p><img src="http://i.imgur.com/7cv9d.png" alt="Pinterest API" /></p>

<!--more-->


<h2>Webservice API on NodeJs</h2>

<p><a href="http://nodejs.org/">NodeJs</a> is just a fun platform to write IO-heavy applications for the web.  We&#8217;re going to write a quick <a href="http://en.wikipedia.org/wiki/Representational_state_transfer">RESTful</a> endpoint using the <a href="http://expressjs.com/">Express</a> library that allows us to consume real Pinterest content that&#8217;s not available via a pre-existing service.</p>

<h4>Screen Scrape Pinterest</h4>

<p>Given no API, we&#8217;re left to our own devices.  The data for Pinterest is only exposed via the UI on the website.  We&#8217;re going to have our service visit that UI and grab the data that we need as a user of a web browser would see it.  This is screen scraping.  There a lot of downsides here, but we wouldn&#8217;t be trying it if there was an API already.</p>

<p>One down side is that our service will be brittle.  If Pinterest ever changes the layout of the page, our service won&#8217;t be able to bring back the right data.  Our solution will be simple, so it&#8217;ll be easy to update, but this should be a red flag not to do anything mission critical via screen scraping unless you&#8217;re giving it your full attention.</p>

<p>Another down side might be speed.  Screen scraping a UI is not the fastest way to get data.  We&#8217;ll try and help mitigate this with the fastest tools that we have.  NodeJs is a blasted fast web server.  A library called <a href="https://github.com/MatthewMueller/cheerio">cheerio</a> is supposedly best-in-class for screen scraping (advertised as 8x faster than <a href="https://github.com/tmpvar/jsdom">jsdom</a>).</p>

<h4>Caching</h4>

<p>To make this retrieval even faster for repeat use, caching could be very helpful.  We could cache in our service what we get back from pinterest via some datastore or we could cache in our client.  Best practices here will be very dependent on your use case.  These kind of enhancements have been made over and over again and would only clutter the simple Pinterest interaction, so I will exclude them for now.</p>

<h2>Getting Pinterest Data</h2>

<p>Here&#8217;s the final solution in all its glory.  This snippet only includes only the code inside the Express route.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// request is a library for making http requests</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// cheerio is a lib for screen scraping</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">cheerio</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;cheerio&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// req and res are express vars for the request and response</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">list</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// this is the actual request to the pinterest page I care about</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">(</span><span class="s1">&#39;http://pinterest.com/jaketrent/pins/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">resp</span><span class="p">,</span> <span class="nx">body</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// get ready for scraping</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">$</span> <span class="o">=</span> <span class="nx">cheerio</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">pins</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">$pin</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">$pins</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.pin&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// scraping only the 1st 10 pins;  you could get them all</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$pin</span> <span class="o">=</span> <span class="nx">$pins</span><span class="p">.</span><span class="nx">eq</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Finding the bits on the page we care about based on class names</span>
</span><span class='line'>      <span class="nx">pins</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">img</span><span class="o">:</span> <span class="nx">$pin</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.PinImageImg&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://pinterest.com&#39;</span> <span class="o">+</span> <span class="nx">$pin</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.ImgLink&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">desc</span><span class="o">:</span> <span class="nx">$pin</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.description&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">()</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// respond with the final json</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">pins</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I wrote it out for my own use, I was surprised at the brevity.  I love it.  Given, there&#8217;s no handling of any errors or attempts to make this semi-robust.  This just gets us the data on a good day.</p>

<p>The final json that&#8217;s exposed at our chosen Express endpoint looks like it this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;img&quot;</span><span class="o">:</span> <span class="s2">&quot;http://myimg.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;url&quot;</span><span class="o">:</span> <span class="s2">&quot;http://pinterest.com/pin/mypin&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;desc&quot;</span><span class="o">:</span> <span class="s2">&quot;Sweetest pin ever&quot;</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s ready for use by a json-ready client.  So stinkin easy.  We&#8217;re connecting the web together, and it&#8217;s awesome!  Now the world will know of the baked goods and flower arrangements that we love the most.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Naming Anonymous JavaScript Functions]]></title>
    <link href="http://jaketrent.com/post/naming-anonymous-javascript-functions/"/>
    <updated>2013-01-17T07:10:00-07:00</updated>
    <id>http://jaketrent.com/post/naming-anonymous-javascript-functions</id>
    <content type="html"><![CDATA[<p>In JavaScript, functions can be defined and used in the same statement.  This makes creation quick, and the functions are considered anonymous because of their inline use and lack of assignment to a local variable.  But, there are a couple reasons you might want to label them.</p>

<p><img src="http://i.imgur.com/uH7E2.jpg" alt="JavaScript Anonymous Functions" /></p>

<!--more-->


<h2>Readability</h2>

<p>A great thing about functions in general is that they will tell you what they&#8217;re used for.  If I call a function called <code>calculatePi()</code>, I expect it to do just that.  It&#8217;s a great abstraction.  We can look at the name of the function without having to learn exactly how it does its stated task.</p>

<p>The performance of anonymous functions can often be determined from the calling context, but why not just name it for what it does like all other functions?  Did you know that you can?  Piece of pi.  Where you would normally write this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">doStuff</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;reporting…&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Additionally label your callback:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">doStuff</span><span class="p">(</span><span class="kd">function</span> <span class="nx">reportResults</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;reporting…&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Easier Stack Traces</h2>

<p>To make this code actually run, let&#8217;s add a little bit and stick in a thrown error that should provide us a stack trace:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">doStuff</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">callback</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">doStuff</span><span class="p">(</span><span class="kd">function</span> <span class="nx">reportResults</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;problem&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another difference between labeled and non-labeled anonymous functions is what they print in a stack trace. Without a label, you are getting line numbers, but the stack trace itself is harder to follow without bring up the source in order to interpret it.</p>

<p>Without named function:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/.../error.js:10</span>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;problem&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="o">^</span>
</span><span class='line'><span class="nb">Error</span><span class="o">:</span> <span class="nx">problem</span>
</span><span class='line'>    <span class="nx">at</span> <span class="o">/</span><span class="p">...</span><span class="o">/</span><span class="nx">error</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">10</span><span class="o">:</span><span class="mi">8</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">doStuff</span> <span class="p">(</span><span class="err">/.../error.js:5:4)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nb">Object</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">anonymous</span><span class="o">&gt;</span> <span class="p">(</span><span class="err">/.../error.js:8:1)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">Module</span><span class="p">.</span><span class="nx">_compile</span> <span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">449</span><span class="o">:</span><span class="mi">26</span><span class="p">)</span>
</span><span class='line'>    <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/.../error.js:8</span>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;problem&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="o">^</span>
</span><span class='line'><span class="nb">Error</span><span class="o">:</span> <span class="nx">problem</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">reportResults</span> <span class="p">(</span><span class="err">/.../error.js:8:8)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">doStuff</span> <span class="p">(</span><span class="err">/.../error.js:4:4)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nb">Object</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">anonymous</span><span class="o">&gt;</span> <span class="p">(</span><span class="err">/.../error.js:7:1)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">Module</span><span class="p">.</span><span class="nx">_compile</span> <span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">449</span><span class="o">:</span><span class="mi">26</span><span class="p">)</span>
</span><span class='line'>    <span class="err">…</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that every frame of the stack is now clearly displaying its name.</p>

<p>And wouldn&#8217;t this be awesome if everyone did this, including all the people that wrote some of those favorite libraries that you use but that you have occassion to debug through?</p>

<p>What other benefits do you see that might come from naming your anonymous functions?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run a Single Mocha Test]]></title>
    <link href="http://jaketrent.com/post/run-single-mocha-test/"/>
    <updated>2013-01-16T07:07:00-07:00</updated>
    <id>http://jaketrent.com/post/run-single-mocha-test</id>
    <content type="html"><![CDATA[<p>When working inside your test suite, it&#8217;s often the case that you don&#8217;t want to run all of your tests.  Mocha has a great mechanism that allows you to easily specify what exactly you want run.  This can help make your processes such as TDD faster and more focused.</p>

<p><img src="http://i.imgur.com/hbcnU.png" alt="Mocha" /></p>

<!--more-->


<h2>Run a Single Test File</h2>

<p>Using the mocha cli, you can easily specify an exact or wildcarded pattern that you want to run.  This is accomplished with the <code>grep</code> option when running the <code>mocha</code> command.</p>

<p>If you wanted to run only the login-failure.js suite, the command would look like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mocha --grep login-failiure.js</span></code></pre></td></tr></table></div></figure>


<p>If you happen to have multiple suites that match a filename pattern that you wanted to run, exclusive to all others, you would run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mocha --grep login-*.js</span></code></pre></td></tr></table></div></figure>


<h2>Run a Single Spec</h2>

<p>Often we&#8217;re in the test code making changes, and it&#8217;s easy to make adjustments to what subset of tests you run from here as well.  If I want to run a single <code>describe()</code> function, I can add a <code>.only()</code> to the function call, like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// these tests will be skipped</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">describe</span><span class="p">.</span><span class="nx">only</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// these tests will run </span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can stick the <code>.only()</code> on any <code>describe</code>, no matter if it&#8217;s first or last in the list of specs.</p>

<h2>Run a Single Test</h2>

<p>Just as you can with <code>describe</code>, the tests can be specified to exclusively run if you attach <code>.only()</code> to the function call.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">.</span><span class="nx">only</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// this test will run</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">it</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// this test will be skipped</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note!</strong> that by putting the <code>.only()</code> on a test, all other functions in the spec are skipped.  This means that your <code>before</code>, <code>beforeEach</code>, <code>after</code>, and <code>afterEach</code> functions are <em>not</em> called.  Sometimes it&#8217;s hard to remember when that matters, so I usually end up running single specs instead of single tests.</p>

<h2>Skip Something</h2>

<p>If you want to run all the specs/tests that you have minus some subset, effectively commenting out these tests, you can add <code>.skip()</code> to either <code>describe</code> or <code>it</code> function calls.</p>

<h2>Remember to Remove</h2>

<p>With the additions of the <code>.only()</code> or <code>.skip()</code> you are altering the actual code of your tests.  This is great for your local development process.  You&#8217;ll need to be careful that you don&#8217;t commit this change &#8211; at least you usually won&#8217;t want to.  Otherwise, you CI process will be running a subset of your tests, just as you are locally, which is no bueno.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authenticated Supertest Tests]]></title>
    <link href="http://jaketrent.com/post/authenticated-supertest-tests/"/>
    <updated>2013-01-14T07:07:00-07:00</updated>
    <id>http://jaketrent.com/post/authenticated-supertest-tests</id>
    <content type="html"><![CDATA[<p>When you&#8217;re trying to test your authenticated URLs via supertest, there are just a couple things you&#8217;ll need to do that aren&#8217;t spelled out in the docs.</p>

<p><img src="http://i.imgur.com/PFUGV.jpg" alt="Supertest" /></p>

<!--more-->


<h2>Supertest</h2>

<p><a href="https://github.com/visionmedia/supertest">Supertest</a> is a library written by the prolific TJ Holowaychuk.  It is a companion to <a href="https://github.com/visionmedia/superagent">superagent</a>.  Superagent provides a clean API for issuing HTTP commands.  Supertest ties into superagent for allowing easy assertions on top of those HTTP requests.</p>

<h2>Authenticated Requests</h2>

<p>Lots of webapps have portions of their sites that require authenticated to access, so it makes sense that there&#8217;s a great need to test requests against these portions.  Yet in supertest, there&#8217;s not a totally-straightforward way to login for the sake of a test and do subsequent requests under that login.  At least there&#8217;s no explicit API for it in the current release.  But there have been <a href="https://github.com/visionmedia/supertest/issues/26">many</a> <a href="https://github.com/visionmedia/supertest/issues/46">requests</a> for it.  Who knows if it will come.  Given that we know the mechanism for session continuity between requests, cookies, we can make it happen ourselves.</p>

<h2>Login for Supertest</h2>

<h4>Use Superagent</h4>

<p>Supertest has no cookiejar for holding cookies like the sessionid.  But, superagent does.  So, we&#8217;re going to need to import it explicitly.  A login helper could look something like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">superagent</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;superagent&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">agent</span> <span class="o">=</span> <span class="nx">superagent</span><span class="p">.</span><span class="nx">agent</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">theAccount</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;username&quot;</span><span class="o">:</span> <span class="s2">&quot;nacho&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;password&quot;</span><span class="o">:</span> <span class="s2">&quot;iamtheluchadore&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">login</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">request</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/login&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">theAccount</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">agent</span><span class="p">.</span><span class="nx">saveCookies</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">done</span><span class="p">(</span><span class="nx">agent</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few points:</p>

<ul>
<li><code>theAccount</code> information could come from anywhere.  You could use the same pattern from this login process to setup a newly-registered user as well.</li>
<li>The <code>request</code> parameter to <code>login()</code> is the supertest request.</li>
<li>After we post to &#8216;/login&#8217; and a response returns in the <code>end()</code> function, we are saving the cookies from that response (a login response should return with a &#8216;Set-cookies&#8217; header).  This superagent agent (with the login cookie) is what we send back to the caller of the login helper via <code>done()</code>.</li>
</ul>


<h4>Attach the Cookies to Supertest</h4>

<p>Now that we&#8217;ve made login request and saved the cookies, it&#8217;s time to make our authenticated request(s).  Easy cheesy.  A simple test to see if the login worked might look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;supertest&#39;</span><span class="p">)(</span><span class="nx">app</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">login</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./login&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;MyApp&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">agent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">before</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">login</span><span class="p">.</span><span class="nx">login</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">loginAgent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">agent</span> <span class="o">=</span> <span class="nx">loginAgent</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should allow access to admin when logged in&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">req</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/admin&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">agent</span><span class="p">.</span><span class="nx">attachCookies</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="nx">done</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>More jabber about the code:</p>

<ul>
<li><code>app</code> is my Express app.  This is your webserver.</li>
<li>We&#8217;re importing the login helper, and we&#8217;ve called it one time before all the tests in our <code>MyApp</code> spec via <code>before()</code>.  This call to <code>before()</code> is asynchronous, just like our test in this case, because we have to do a full login to setup our test.  When the <code>loginAgent</code> is returned, we save it for use in our actual tests.</li>
<li>The test gets the best of both worlds.  When doing <code>request.get()</code>, we&#8217;re using the supertest request.  So, we can then do cool <code>expect()</code>s on it.  Right before the request goes out the door, we grab the superagent <code>agent</code> and attach its cookies to our new request.</li>
</ul>


<p>In the future, perhaps there will be a more expressive way to do this that&#8217;s worked into the supertest API.  For now, this strategy is the best I&#8217;ve found.  It&#8217;s based on the method I originally found in <a href="https://github.com/visionmedia/supertest/issues/46#issuecomment-11679706">visionmedia/supertest#46</a>.</p>

<p>Is there a better way that you&#8217;ve found to do this kind of authenticated test?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Log Your Issues]]></title>
    <link href="http://jaketrent.com/post/why-log-you-issues/"/>
    <updated>2013-01-10T07:06:00-07:00</updated>
    <id>http://jaketrent.com/post/why-log-you-issues</id>
    <content type="html"><![CDATA[<p>When you&#8217;re working on a software project, what&#8217;s the most important deliverable?  Why, the software!  It&#8217;s your eventual product.  Along the way, however, there will be some things you can do that will make it more likely you successfully ship great software. One of those is logging issues.  Here&#8217;s why you might want to do it.</p>

<p><img src="http://i.imgur.com/QNf1k.jpg" alt="A github log" /></p>

<!--more-->


<h2>Just Log It</h2>

<p>There are many tools.  There are many strategies.  The most important thing will be to just get your issues logged in a persistent system that everyone involved agrees upon.</p>

<p>The benefits will include:</p>

<ol>
<li><strong>You&#8217;ll remember it</strong> - Software projects are complex.  You&#8217;ll run into a lot of issues.  You don&#8217;t want to keep them in your head.</li>
<li><strong>You&#8217;ll have a historical record</strong> - Projects can take a long time to finish.  And often they aren&#8217;t done in contiguous calendar time.</li>
<li><strong>You&#8217;ll remember past mistakes</strong></li>
<li>Maybe it&#8217;s a bit of lemon juice on old wounds, but that&#8217;s better than reverting your software to do the same dumb things again.  By examining your once-resolved issues, you can remember not to go down certain paths again.</li>
<li><strong>You&#8217;ll have a todo list</strong> - Today&#8217;s software projects move fast, and there&#8217;s a lot going on in the office.  To help you remember, what you need to do and in what order, look to your issues list.</li>
<li><strong>You&#8217;ll have a clearer picture of your progress</strong> - You&#8217;ll know how much farther you have to go on your milestones.  You&#8217;ll have a finite list of exactly what is left that needs to be solved.</li>
<li><strong>You&#8217;ll have an alert system</strong> - When things go South, and bugs pop up, you&#8217;ll have an immediate global notification system.  That is, if the team is tuned into your issue tracker this way.</li>
<li><strong>You&#8217;ll invite others to help you</strong> - When it&#8217;s clear what needs to be done, people have a better-defined path to get started helping you out.  He sees an issue that is close to his expertise or interest, assigns it to himself, and goes!</li>
</ol>


<h2>Some Effort</h2>

<p>Of course this takes some effort.  Try to track issues more readily and steadily, and see if you don&#8217;t feel some of these benefits for yourself.  It&#8217;s an investment into your process that should add to your capability to ship great software.</p>

<h2>Some Caveats</h2>

<p>This benefits mostly have some major assumptions, like: people actually care; it&#8217;s a painless process to add issues, assign issues, and resolve issues; the issue tracker has good notifications &#8211; meaningingful and to the people that matter.  Well, there are lots of ways to mess that up as well.  But try it.  Do what works for your team.</p>

<p>What have you found to help your team be most successful in issue tracking?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Be True to Your Heart]]></title>
    <link href="http://jaketrent.com/post/be-true-to-your-heart/"/>
    <updated>2013-01-08T07:10:00-07:00</updated>
    <id>http://jaketrent.com/post/be-true-to-your-heart</id>
    <content type="html"><![CDATA[<p>When you&#8217;re interviewing and are asked to share what you&#8217;re most interested in.  You&#8217;d better know.  You&#8217;d better be enthused about it.  And don&#8217;t abandon it, or you&#8217;ll look insincere.</p>

<p><img src="http://i.imgur.com/fYzBj.png" alt="Alt Text" /></p>

<!--more-->


<p>Recently my teammate and I had a lunch interview with a potential future teammate.  As a lunch interview, it was mostly just a test as to the seriousness of the candidate and the opportunity as well as a team fitness test.  So, pretty laid back.  No hard core technical questions.  Mostly shooting the breeze about the tech industry, current positions, and thoughts on technology.  So, there&#8217;s plenty of room for inference based on opinions shared.</p>

<p>The guy we were talking to was comfortable working on the frontend and the backend.  From what we could tell, he was probably capable all around.  Then my teammate asked a great question:  What do you really enjoy?  The change in demeanor versus the preceding 40 minutes of talk was noticeable.  He lit up and exclaimed that he loved data &#8211; data relationships, data mining, and statistics.  He gave examples of things he had done recently and repeated his adoration of the subject.  I was caught up in his enthusiasm.</p>

<p>Then we made it more clear that we were on the frontend team, and the things he was most interested in were definitely not frontend.  My teammate told him that he&#8217;d get him in touch with our backend team lead.</p>

<p>Then he said that he could do both frontend or backend.  He&#8217;d be happy with frontend.  He loves learning new things.  &#8220;Will you interview me for a frontend position?  Just forget about my data comments.&#8221; was essentially what he was saying &#8211; or at least what I was hearing.</p>

<p>Oh, man!  My heart sank.  I was really kind of sad that he had essentially abandoned what he said he found most joy in.  It was an opportunistic move, even practical.  But I was pretty disappointed.  The guy seemed smart.  If so, he could probably pick his opportunity in this wonderful software industry of ours.  So why cave and totally deny the opportunities for what you really claim to enjoy to take the opportunity you had only had a lunch chat about?</p>

<p>His initial enthusiasm about his love of data was fun and contagious.  To see him deny it in the next breath made it feel like more of a play.  Perhaps it wasn&#8217;t, but when you betray your true love, it makes me wonder at your general sincerity.  If you like something in tech and you&#8217;re good at it, you should do it, hold out for it, and odds are you&#8217;ll get your opportunity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quitter Review]]></title>
    <link href="http://jaketrent.com/post/quitter-review/"/>
    <updated>2013-01-03T07:26:00-07:00</updated>
    <id>http://jaketrent.com/post/quitter-review</id>
    <content type="html"><![CDATA[<p>When you feel you&#8217;re ready to quit your day job to pursue your dream job, think twice, and read this book.</p>

<p><img src="http://i.imgur.com/mEsJW.png" alt="Quitter Book" /></p>

<!--more-->


<h2>The Gist</h2>

<p>Overall, the book was not what I expected.  Jon Acuff, in his book, Quitter, describes his past self as a serial quitter.  Thus, he has plenty of quitting experience to speak from.  He essentially says that he did it the wrong way.  Then, he tries to share some tips on how to quit the right way.  Essentially, his point is to keep your day job, and use it to prepare patiently for making your dream job a reality.</p>

<h2>Great Points</h2>

<p>Given that his book is based on his real life experiences, it should be no surprise that he brought up some insightful points.  Here are some I found most enlightening:</p>

<h4>The Value of Invisilibity</h4>

<p>Invisibility has value.  When we haven&#8217;t set ourselves up as the biggest professional around, we have a shorter distance to fall.  We all still fail at times, so the combo is a plus.  You can dream big in this mode because when you fail big, no one cares.  And you can do this over and over again.</p>

<p>The safest or most conservative person in the world will be the person with the most visibility.  Why?  Because they have a reputation and a performance record to keep up.  If you don&#8217;t have to maintain that, you&#8217;ll probably take interesting risks more readily.  When we see people at the height of their success, we don&#8217;t have visibility into the long years that came before when they were building it.</p>

<h4>Quantity is Essential in Starting a Dream</h4>

<p>We need to practice our dream.  We can see ourself successful in our minds, but interesting work requires serious skill.  Moreover, going straight to the pinnacle of our eventual quality standard will paralyze us in the short term.  We will find ourselves unable to produce.  In Jon Acuff&#8217;s case, he realized that he gave away 1 million blog words before he was ever good enough or had a following enough to publish and sell 50 thousand words.</p>

<h4>Perils of Business Ownership</h4>

<p>Being an entreprenuer is a special job.  But, that life is not for the faint of heart.  It&#8217;s great.  If you&#8217;re sitting in a day job you don&#8217;t particularly like, you&#8217;re probably fantasizing about the potential of ultimate freedom entreprenuership might bring.  It does, and it doesn&#8217;t.  The beast must be tamed.  Jon takes plenty of time to mention the pitfalls to avoid and the preparations to make in his book.  For instance, he explains what he and close associates have experienced:  That bills will become your new boss.  Your ability to create revenue on your own &#8211; every day! &#8211; will become the new stress.  That is, unless you&#8217;re able to prepare adequately and time your jump well.</p>

<h2>Jon&#8217;s Style</h2>

<p>I was unprepared for how much I would laugh while reading Jon&#8217;s book.  Business self-help books are not expected to be very comical or entertaining.  Jon gave the book a fun voice.  It was easy to read out loud to my wife &#8211; you know, for getting on the same dream page.  Jon doesn&#8217;t take himself to seriously, and that&#8217;s refreshing.</p>

<p>It&#8217;s a short read.  It&#8217;s a fun read.  The information is from the heart, and I think it&#8217;s worth learning from Jon&#8217;s experience.  If you&#8217;re considering ever starting your own business or if you&#8217;re not in your dream job yet and want to get there, I recommend this book on the subject.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocha Testing AngularJs Dependency Injection]]></title>
    <link href="http://jaketrent.com/post/mocha-testing-angularjs-dependency-injection/"/>
    <updated>2013-01-02T16:48:00-07:00</updated>
    <id>http://jaketrent.com/post/mocha-testing-angularjs-dependency-injection</id>
    <content type="html"><![CDATA[<p>When you test your AngularJs code, you need to explicitly inject the services that your controllers and modules require.  It has its own special syntax.  It requires mocking.  You&#8217;ll see a slightly different syntax than you may have expected.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="AngularJs" /></p>

<!--more-->


<h2>The Solution: Mocking AngularJs Injections</h2>

<p>Angular is simple and quick on many things.  On some things, it&#8217;s not as simple as we are be led to believe from simple examples.  From the <a href="http://docs.angularjs.org/tutorial/step_05">Angular tutorial</a>:</p>

<blockquote><p>Because we started using dependency injection and our controller has dependencies, constructing the controller in our tests is a bit more complicated.</p></blockquote>

<p>And really, who doesn&#8217;t use dependency injection in any of their Angular code?  But don&#8217;t worry, it&#8217;s not much worse.  And really, it makes sense that things would be this way.</p>

<p>The final Mocha code to test our simple controller should look something like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">assert</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">expect</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">expect</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">should</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">should</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be available&#39;</span><span class="p">,</span> <span class="nx">inject</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$rootScope</span><span class="p">,</span> <span class="nx">$controller</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">scope</span> <span class="o">=</span> <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$new</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">ctrl</span> <span class="o">=</span> <span class="nx">$controller</span><span class="p">(</span><span class="nx">MyController</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="o">:</span> <span class="nx">scope</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">ctrl</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">not</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="kc">undefined</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>A couple of points:</p>

<ul>
<li><a href="http://"><code>chai</code> is an assertion library</a> that makes a great bdd/should-style assertion available in browser tests.</li>
<li><code>inject()</code> is made available through the <a href="http://"><code>angular-mocks.js</code> file</a>.  This is available automagically in Jasmine, but in Mocha, you have to include this extra file to get the function.</li>
<li><code>$rootScope</code> is a scope available to all controllers, so it&#8217;s not dependent on <code>ng-controller</code> references which are in your src, but not your test environment.  From this scope, we create a new scope.</li>
<li>Initializing <code>MyController</code> with the <code>$controller</code> function allows us to mock the value of <code>$scope</code> in the controller.</li>
</ul>


<h2>Potential Errors</h2>

<p>If you look at the solution above, it should give you the working test of DI that you want.  Here are a few things I worked through when testing my Angular controller&#8230;</p>

<h4>TypeError: &#8216;undefined&#8217; is not an object</h4>

<p>My controller looked somewhat like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">MyController</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;$viewContentLoaded&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ... stuff when dom in the controller is ready</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this was the start of my test:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be available&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">ctrl</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyController</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// ... assertions</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ths <code>$scope.$on()</code> line couldn&#8217;t run because <code>$scope</code> was simply not injected and undefined.
blah - scope is not there</p>

<h4>ReferenceError: Can&#8217;t find variable: expect</h4>

<p>In Mocha, you&#8217;ll need to import an assertion library of your choice.  Otherwise, <code>expect()</code> and other assertions will not be available to use.  I prefer Chai for its should-style assertions.  They read as a sentence really well:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">ctrl</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">not</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="kc">undefined</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minimized AngularJs Dependency Injection]]></title>
    <link href="http://jaketrent.com/post/minimized-angularjs-dependency-injection/"/>
    <updated>2012-12-31T16:20:00-07:00</updated>
    <id>http://jaketrent.com/post/minimized-angularjs-dependency-injection</id>
    <content type="html"><![CDATA[<p>Aren&#8217;t environment-specific bugs some of the hardest to troubleshoot!  You may find yourself scratching your head after building and deploying your AngularJs code.  If you minimize or uglify your Angular code, there may be a few things you need to do differently to make it work.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="AngularJs" /></p>

<!--more-->


<h2>Dependency Injection</h2>

<p>Angular has a great feature for sharing code and declaring dependencies.  They use dependency injection, where modules or controllers and the like can use services available to them.  You can even define your own services to inject.  Our need here is nothing that fancy.  We just want the thing to work &#8211; always and in any environment.</p>

<h2>Angular Unknown Provider</h2>

<p>It&#8217;s hard to track down what&#8217;s really the problem in minimized code.  Everything&#8217;s on line 1.  And all the variable names are shortened and obfuscated.  Thus, when I first got this error, I was a bit lost:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Uncaught Error: Unknown provider: e from myModule</span></code></pre></td></tr></table></div></figure>


<p>In my local environment, my code looked like this and worked fine:</p>

<figure class='code'><figcaption><span>lang:&#8221;js&#8221; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>angular.module('myModule', [], function ($interpolateProvider) {
</span><span class='line'>  // interpolate stuff
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>After my build process and mangled local variables, it looked like this:</p>

<figure class='code'><figcaption><span>lang:&#8221;js&#8221; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>angular.module('myModule', [], function (e) {
</span><span class='line'>  // interpolate stuff
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>Oh boy.  A few StackOverflow articles later, and I was led to the <a href="http://docs.angularjs.org/guide/di">dependency injection guide</a> that&#8217;s a part of the Angular docs.  It revealed that my pattern of dependency injection wasn&#8217;t gonna cut it:</p>

<blockquote><p>While straightforward, this method will not work with JavaScript minifiers/obfuscators as they rename the method parameter names. This makes this way of annotating only useful for pretotyping, and demo applications.</p></blockquote>

<h2>Reliable Angular Injection</h2>

<p>While you can build Angular code that way, it just simply won&#8217;t be reliable.  &#8220;Pretotyping&#8221;, as the docs say, is only for trying stuff out and seeing how you like it.  Okaaaay.  I guess that&#8217;s kind of nice, since the reliable way is more verbose, requires writing things twice, and keeping them in sync.  Stink!</p>

<h4>Reliable Style #1: &#8220;Controller Style&#8221;</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">MyController</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">MyController</span><span class="p">.</span><span class="nx">$inject</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>$scope</code> parameter in the function is soon to be renamed once minified, so save a list of the parameter names as strings in the <code>$inject</code> array.  Make sure the order and length of these two lists match.</p>

<h4>Reliable Style #2: &#8220;Module Style&#8221;</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myModule&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">&#39;$interpolateProvider&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$interpolateProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">}]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The idea is the exact same.  Note the placement of the square brackets;  It&#8217;s a bit different.</p>

<p>Well, there you are.  Write Angular dependency injection once and run anywhere.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Npm Install Local Files]]></title>
    <link href="http://jaketrent.com/post/npm-install-local-files/"/>
    <updated>2012-12-14T08:23:00-07:00</updated>
    <id>http://jaketrent.com/post/npm-install-local-files</id>
    <content type="html"><![CDATA[<p>Sometimes you&#8217;ll want to use <a href="http://npmjs.org/">npm</a> to install a package that doesn&#8217;t exist in the official npm registry for some reason.  Maybe you&#8217;re developing the package yourself.  Maybe it&#8217;s an internal use-only package. Maybe the package writer never published it.  Here are a few ways to install a local package with npm.</p>

<p><img src="http://i.imgur.com/xnDMm.jpg" alt="Node Package Manager" /></p>

<!--more-->


<h2>Link the Local Node Package</h2>

<p>If you&#8217;re developing a package locally, you&#8217;re likely making lots of changes to the source.  You don&#8217;t want to publish after each change in order to install this package as a dependency elsewhere.  Npm has provided the <a href="http://npmjs.org/doc/link.html">link</a> keyword.</p>

<p>This allows your put a global label on your package that tells your local npm cache about it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> &lt;pkg_dir&gt;;
</span><span class='line'>npm link;
</span></code></pre></td></tr></table></div></figure>


<p>And then go to the local project that you&#8217;re using the package in and point to the dependency by package name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> &lt;project_dir&gt;;
</span><span class='line'>npm link &lt;pkg_name&gt;;
</span></code></pre></td></tr></table></div></figure>


<p>Now you have symlinked a directory called <code>&lt;pkg_name&gt;</code> in the project&#8217;s node_modules directory.  Changes you make in your package will appear and be usable from within your project.</p>

<h2>Tarball the Local Node Package</h2>

<p>Npm can <a href="https://npmjs.org/doc/install.html">install</a> either a path or url to a local tarball.  To create a tarball that npm will like, you want to run npm <a href="https://npmjs.org/doc/pack.html">pack</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> &lt;pkg_dir&gt;;
</span><span class='line'>npm pack
</span></code></pre></td></tr></table></div></figure>


<p>This will create a tarball a la <code>&lt;pkg_name&gt;-&lt;pkg_ver&gt;.tgz</code>.  Now just store your new tarball somewhere like a local filesystem or server that is accessible when you run npm install on your dependant project.</p>

<p>You can ask for the tarball manually:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install http://localServer/my-pkg-0.0.1.tgz
</span></code></pre></td></tr></table></div></figure>


<p>Or put the reference in your package.json for later:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;dependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;my-pkg&quot;</span><span class="o">:</span> <span class="s2">&quot;http://localServer/my-pkg-0.0.1.tgz&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You probably have a node package that&#8217;s only available locally for a reason.  To guarantee that it&#8217;s not accidentally published to the world via the npm registry, add this beaut to your package.json:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="s2">&quot;private&quot;</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Replicate the Npm Registry</h2>

<p>If you&#8217;re going all out, like creating a corporate npm registry, you always have the option of <a href="https://npmjs.org/doc/registry.html#Can-I-run-my-own-private-registry">replicating</a> the Npm registry internally.  It&#8217;s CouchDb, and &#8217;<a href="http://www.imdb.com/title/tt0120029/quotes?qt=qt0192627">replication</a>&#8217; is its Chinese neighbor&#8217;s middle name.  You can publish your own packages there so they&#8217;re still private to your and your organization.  And you also get local references to the public packages.</p>

<h2>The Glory of Npm</h2>

<p>Npm is great.  The ability to install published or local packages is an example of its flexibility and usefulness.  What are the other ways that you&#8217;ve found to make non-public packages installable &#8211; for instance, that package that the writer just never bothered to publish to npm?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IntelliJ 12 Review]]></title>
    <link href="http://jaketrent.com/post/intellij-12-review/"/>
    <updated>2012-12-12T15:33:00-07:00</updated>
    <id>http://jaketrent.com/post/intellij-12-review</id>
    <content type="html"><![CDATA[<p>I&#8217;ve used IntelliJ since version 6.  Now we&#8217;re version 12.  It&#8217;s just gotten better.  Version 12 is definitely an incremental release.  There&#8217;s nothing too whiz bang here that I care about, but the quality overall is increased.</p>

<p><img src="http://i.imgur.com/RM3Q1.jpg" alt="IntelliJ 12" /></p>

<!--more-->


<h2>IntelliJ 12 New Core Features</h2>

<p>The highlights of the <a href="http://www.jetbrains.com/idea/whatsnew/index.html">&#8220;What&#8217;s New&#8221;</a> list include Java 8 support, Spring tools update, Play 2.0 support, and Android UI designer.  All positives, but not really things I care very deeply about and will probably never use.  There&#8217;s a bit more on the list, but there&#8217;s nothing that is a huge, &#8220;Now IntelliJ can do ______&#8221; item.</p>

<h2>IntelliJ 12 Quality of Life</h2>

<p>During my evaluation, however, I have been very pleased with the quality of life it has afforded me.  IntelliJ has always treated me very well in comparison to the competition.  IntelliJ 12 just makes that good experience a little bit sweeter.</p>

<h4>Darkula Theme</h4>

<p>This has to be inspired by the rise of <a href="http://www.sublimetext.com/">Sublime Text</a>, which has a dark theme as its default.  More and more devs I know are using Sublime extensively.  Overall, I like the look of the Darkula theme.  It&#8217;s a bit easier on the eyes.  The icons got a fun, retro overhaul.  In some cases, I&#8217;ve noticed things that my eyes have grown so accustomed to that they have ignored for some time.  It&#8217;s also taken a bit to get used to it and start to expect things and see them faster.  I find it interesting that soooo much of this release has been focused on this UI theme.</p>

<h4>Popup Dialogs are Faster</h4>

<p>It seems that when a non-main window is told to appear that it does so a bit quicker now.  Intellisense seems a bit more snappy, and the &#8220;recent files&#8221; switcher doesn&#8217;t lag as it seemed to in the past sometimes.  It&#8217;s fun, and it lets me go faster.</p>

<h4>Better OSX Shortcuts</h4>

<p>When I switched to OSX from Linux, I was immediately disappointed by the lack of keyboard shortcuts in comparison to Linux.  The most egregious omission was the lack of alt-* combos to press buttons in the UI via the keyboard.  Alt-p to engage the &#8216;push&#8217; button in the Git push dialog has been a long time coming.</p>

<p><img src="http://i.imgur.com/FYe1O.jpg" alt="P for Push" /></p>

<h4>Git Integration is better</h4>

<p>For performance and UI reasons, I would often just use Git on the command line instead of from within IntelliJ.  Now the Git integration is better than ever.  It seems waaaay fast.  I&#8217;m a little puzzled at <em>how</em> the git push could be so much faster in comparison to the previous version.</p>

<h4>Project Type Support</h4>

<p>Small thing, but I like the new &#8220;New Project&#8221; dialog.  It&#8217;s simplified and easier to navigate.  It is fast and simple.  It doesn&#8217;t take you through options that don&#8217;t apply.  I&#8217;m in that dialog a lot, and I like the change.</p>

<h2>The Right Direction</h2>

<p>Really, there&#8217;s not a ton new here.  It&#8217;s such a solid tool to start.  It&#8217;s where I spend most of my day though, so even incremental quality improvement is welcome.</p>

<p>Let&#8217;s see, what&#8217;s not there that I wish for?:</p>

<ul>
<li>Live debug the JavaScript running in Chrome (not just Firefox)</li>
<li>Run and debug Grunt and other Node-based cli apps</li>
</ul>


<p>Does IntelliJ already do those things?  Probably, and I just don&#8217;t yet know how to bend it to my will.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Impressions of Grunt]]></title>
    <link href="http://jaketrent.com/post/impressions-of-grunt/"/>
    <updated>2012-12-12T14:24:00-07:00</updated>
    <id>http://jaketrent.com/post/impressions-of-grunt</id>
    <content type="html"><![CDATA[<p>Grunt is a great build tool for JavaScript projects.  It comes with a lot out of the box, and you can write your own custom tasks.  It joins a world fraught with many, glorious build tool options.  So, a bit has been made of the decision to have Grunt join the fray.  Perhaps most prominently, Miller Medeiros had <a href="http://blog.millermedeiros.com/node-js-ant-grunt-and-other-build-tools/">a few problems with Grunt</a>.  And in response, Ben Alman gave his reasoning on <a href="http://benalman.com/news/2012/08/why-grunt/">why he wrote it</a>.  Having used it for a bit, I have a few impressions.  Here they are so far.</p>

<p><img src="http://i.imgur.com/4773D.jpg" alt="Grunt impressions" /></p>

<!--more-->


<h2>Community</h2>

<p>There will probably never be any build tool that gains more mass than what already exists as just a bash or a make script.  And really nothing needs to.  Healthy-sized communities have been built up around different build tool options where those that used it liked the style, it fit their platform, and they found it useful.  Grunt feels like it&#8217;s on track to become a highlight build tool in the Js community.  There are many using it <a href="https://github.com/gruntjs/gruntjs.com/issues/9">already</a> and more <a href="https://github.com/angular/angular.js/pull/1544">on the way</a>.</p>

<h2>Declarative vs. Procedural</h2>

<p>Which style of project configuration is better?  Declarative or procedural?  Wars have been started with lesser words.  I don&#8217;t feel like it&#8217;s a question of better.  It&#8217;s just a matter of style.  There are pros and cons.  Where you do the many of same things as everyone else, declarative works just fine.  When you have to do new, original things, you have to write code to support that.  You might wrap that in a grunt plugin to encapsulate it then write declarative options to feed it.  But, you still own the plugin implementation.</p>

<h2>JavaScript Build for JavaScript Project</h2>

<p>Maybe obviously, the sweet spot for Grunt is building JavaScript projects.  Js projects are becoming more complex all the time.  Often, complementary build tools are lacking.  There are other projects that are named <a href="https://github.com/280north/jake">awesomely</a>, though they are mostly dead.  Grunt fills a gap for JavaScript projects.  It seems that the advantages of writing client <em>and</em> server js apply here as well:  Js build tools take advantage of the Js (Node) environment.  You can use your Js skills here.  The context switching is diminished.</p>

<h2>Synchronous Exec for JavaScript Build</h2>

<p>One of the main sellings points for NodeJs is that it is built from the ground up for using in asychronous environments and problems.  Build scripts aren&#8217;t generally asynchronous.  Usually, it&#8217;s quite the opposite.  Step 1 leads to step 2 and so on.  You can&#8217;t skip, and future steps rely upon completion of the previous.</p>

<p>So, you can try <a href="http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback">child_process.exec</a>, but it&#8217;s asynchronous.  So, make it synchronous and try <a href="https://github.com/jeremyfa/node-exec-sync">exec-sync</a>.  But it has <a href="https://github.com/jeremyfa/node-exec-sync/issues/8">problems</a> vanilla exec doesn&#8217;t.  The best synchronous exec for JavaScript I&#8217;ve found so far is <a href="http://documentup.com/arturadib/shelljs#command-reference/exec-command-options-callback">shelljs.exec</a>.</p>

<p>In this way, NodeJs/Grunt seems like an awkward fit as a build tool.</p>

<h2>Shell Commands in Grunt</h2>

<p>When I end up doing custom things in my Grunt build, it tends to be that I&#8217;m trying to get to the shell and execute something.  If I have a shell script, I can just execute it with <a href="https://github.com/jharding/grunt-exec">grunt-exec</a>.  If I&#8217;m trying to keep all logic in Grunt, I&#8217;ll use <a href="https://github.com/arturadib/shelljs">shelljs</a>.  The thing that gets me with both of these solutions is that I&#8217;m in Node, constantly trying to get out of Node to run something in the shell, like a git command.  So my code ends up looking like lots of these:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">shell</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;shelljs&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nx">writeln</span><span class="p">(</span><span class="s1">&#39;Cloning repo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">shell</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="s1">&#39;git clone &#39;</span> <span class="o">+</span> <span class="nx">opts</span><span class="p">.</span><span class="nx">repo</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&#8217;s a bit of cruft to recreate bash in Node.  It&#8217;s not as clean and does not read as well as a vanilla shell script might:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;Cloning repo&#39;</span>;
</span><span class='line'>git clone <span class="nv">$repo</span>
</span></code></pre></td></tr></table></div></figure>


<h2>New APIs</h2>

<p>Grunt does quite a bit for you.  It&#8217;s now up to me to go figure out all the cool stuff it can do.  Once I found the <a href="https://github.com/gruntjs/grunt/wiki/grunt.file">file API</a>, I was excited and retained a touch of the nagging feeling I just mentioned related to shell commands.</p>

<h2>JavaScript Build Scripts are Cross-OS Compatible</h2>

<p>One of the main reasons you would choose to write JavaScript for a build script instead of a .sh or a .bat file is that you can use it multiple OS&#8217;es.  Node <a href="https://github.com/jeremyfa/node-exec-sync/pull/6">should</a> :) execute the same on each platform it supports &#8211; essentially Windows, Linux, and Osx.</p>

<h2>Builds Scripts as Plugins</h2>

<p>When you come up with a new Grunt task that is obviously useful for someone else out in the world, you&#8217;ll likely generalize it and publish it to npm.  There already a good number of <a href="https://npmjs.org/browse/keyword/gruntplugin">&#8216;gruntplugin&#8217;</a>s out there.  This is a great sharing mechanism that not every build tool environment will give you.  I&#8217;m grateful for the good Grunt plugins shared out there.</p>

<h2>Grunt Configuration</h2>

<p>Grunt, by default, has a declarative configuration style.  This means lots of json, often long and nested.  It&#8217;s all organized by task names, so it&#8217;s fairly easy to find stuff.  But the bottom line is that there is a fair bit to navigate in the average grunt file.</p>

<h2>Breaking Changes in Grunt API</h2>

<p>As of this writing, Grunt 0.4 is on the verge of release.  By all accounts it will make things better, and it looks promising.  They have a mostly-straightforward <a href="https://github.com/gruntjs/grunt/wiki/Upgrading-from-0.3-to-0.4">migration guide</a>.  The thing that has been the most painful is the lack of backward compatibility.  My current, working builds rely on Grunt plugins that are not 0.4 compliant, so I have two choices:  Help each of those plugins upgrade or wait until 0.4 reaches critical mass &#8211; ie, most worthy plugins are upgraded.</p>

<h2>Grunt is Fast</h2>

<p>Grunt is faster than Pumba being chased by a hyena.  Previous to Grunt, we were using Maven to do similar tasks.  Now we do more (Grunt has made it easy for us to incorporate more good practices &#8211; eg, linting), and the build is done is a serious fraction of the time.  The speed is super dependant on what operations the build actually performs, but my impression for my builds is that Grunt is fast.</p>

<h2>The Grunt Logo</h2>

<p>Yes, it&#8217;s superficial, and it&#8217;s even a lame reason, but I like Grunt because they have a great logo.  Wild boar for logo?  Instant win.  (That is what it is, right?)</p>

<p>So, is Grunt helping you out?  What are your impressions?  Or are you using something else entirely?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RequireJs Paths in Prod, Test, and Build]]></title>
    <link href="http://jaketrent.com/post/requirejs-paths-in-prod-test-build/"/>
    <updated>2012-12-07T11:18:00-07:00</updated>
    <id>http://jaketrent.com/post/requirejs-paths-in-prod-test-build</id>
    <content type="html"><![CDATA[<p>RequireJs makes dependency management on the client mostly better.  Once it&#8217;s setup, it&#8217;s nice.  Getting the patterns of your paths to work correctly can be difficult to setup, depending on the constraints of your system.  Making the same paths work in a prod, test, and build environment can be even more adventuresome.  In my case, there were a few extra hoops.  My scenario might not fully match yours, but perhaps you can apply this solution to your own needs.</p>

<p><img src="http://i.imgur.com/xZqm5.png" alt="Alt Text" /></p>

<!--more-->


<h2>Prod: Loading Modules From a Different Server</h2>

<p>Recently, we built a portal.  It contains a bunch of widgets that are served from domains different from the host page.  The portal requested these widget js files via <a href="http://requirejs.org/">RequireJs</a>.</p>

<p>Because the widgets live on other domains, those widgets&#8217; subdependencies needed a path that would be relative to that other widget domain and not the portal domain.  In order to accomplish this, widget dependencies were specified in this way:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;./widgetDependency.js&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">dep</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// my widget code</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>.js</code> extension tells RequireJs to load the dependency <a href="https://github.com/jrburke/r.js/blob/2.1.1/require.js#L1521">as a URL</a>.  The <code>./</code> makes the URL relative to the widget domain.</p>

<h2>Test: RequireJs Paths in Testacular</h2>

<p>When you go to test your modules in a test environment, you may not want to load your modules as URLs.  Such was the case for me, <a href="http://jaketrent.com/post/test-requirejs-testacular/">running Testacular</a>, where the source code is requested into the context of the test server already.</p>

<p>In prod, I needed the <code>.js</code> extension.  But, in test I didn&#8217;t want to load modules from URLs.  So, I need to make the test environment ignore the extension.  The solution?  Override the regular expression that checks for the extension in my test runner to be something that was never matched:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">jsExtRegExp</span> <span class="o">=</span> <span class="sr">/^pileOTest/</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows RequireJs to load the module by module name.</p>

<h4>RequireJs Adds Double .js Extension</h4>

<p>It&#8217;s getting better in the test environment, but we still haven&#8217;t totally appeased RequireJs.  It turns out that when it loads a module by name, it still has to <a href="https://github.com/jrburke/r.js/blob/2.1.1/require.js#L1526">convert that name to a path</a>.</p>

<p>Given my constraints (widgets from another domain on a portal), my name actually includes a <code>.js</code> extension.  This isn&#8217;t usually the case.  RequireJs doesn&#8217;t test for this again (remember, we overrode the regex that did), so it just adds a <code>.js</code> extension on the end, creating two: <code>.js.js</code>.</p>

<p>But there is one final way to trick it out:  Add a &#8216;?&#8217; to the name.  This rule was meant to apply to URLs that represented dynamic scripts (and would thus take query strings) as opposed to static js files.  That&#8217;s not why we&#8217;ll add it, but it will help us nonetheless.</p>

<p>So now your module dependencies will look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;./widgetDependency.js?&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">dep</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// my widget code</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in your test environment they will load, and you will be happy.  Until&#8230;</p>

<h2>Build: Module Names for Optimization</h2>

<p>When you go to <a href="http://requirejs.org/docs/optimization.html#basics">optimize your RequireJs modules</a> you&#8217;ll again need RequireJs to load your modules by module name instead of url.  If you don&#8217;t, you&#8217;ll get nice messages like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt; Tracing dependencies for: MyModule
</span><span class='line'>&gt;&gt; Cannot optimize network URL, skipping: nls/str.js?
</span><span class='line'>&gt;&gt; Error: ENOENT, no such file or directory
</span><span class='line'>&gt;&gt; '/Users/.../style.css?'
</span><span class='line'>&gt;&gt; In module tree:
</span><span class='line'>&gt;&gt;     MyModule</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>You may cry a little, but we&#8217;re almost there.  Remember, your module dependency paths worked just fine in prod.  You only changed them to accommodate the test environment.  So, it&#8217;s time to change them back when you optimize your module into one file for production use.</p>

<p>The <code>r.js</code> configuration in <code>app.build.js</code> includes an function called <code>onBuildRead()</code>&#8217;.  Call it to transform the code as it goes out the door for optimization.  We want to strip out the &#8216;?&#8217; question marks from our dependency arrays.  Stripping out all &#8216;?&#8217;s might be a bit too dangerous.  So, let&#8217;s make a benign adjustment that will help us identify exactly what we&#8217;re trying to strip out and replace our &#8216;?&#8217; string in our dependency paths with &#8216;?test&#8217;, finally:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;./widgetDependency.js?test&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">dep</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// my widget code</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And <a href="https://github.com/jrburke/r.js/blob/2.1.1/build/example.build.js#L417">implement <code>onBuildRead</code></a> as:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">onBuildRead</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">moduleName</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">contents</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">contents</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\?test/g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>&#8220;Shut off all the garbage smashers on the detention level!&#8221;</h4>

<p>Take a deep breath.  That was a little much to make all that work.  You have made your RequireJs paths happy in 3 contexts:</p>

<ol>
<li>In production, where modules are served from domains different from the host page and must be loaded by URL.</li>
<li>In test, where your modules must be loaded by module name.</li>
<li>In the optimization build, where modules must be loaded by module name.</li>
</ol>


<p>I fill like I&#8217;ve tricked out RequireJs a bit to make this work.  How could we adjust the solution to be more straightforward?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Environment Specific Variables in NodeJs]]></title>
    <link href="http://jaketrent.com/post/environment-variables-in-node/"/>
    <updated>2012-12-05T16:12:00-07:00</updated>
    <id>http://jaketrent.com/post/environment-variables-in-node</id>
    <content type="html"><![CDATA[<p>Sometimes things change in different environments.  For one, I wear a tie to church but try not to otherwise.  In Node, you might want variables to change per environment.  And it turns out people have wanted this exact thing, creating marvels of code for us to use as we please.  Enter, nconf.</p>

<p><img src="http://i.imgur.com/5rZ8H.png" alt="Environment variables in Node" /></p>

<!--more-->


<h2>Nconf</h2>

<p><a href="https://github.com/flatiron/nconf">Nconf</a> provides &#8220;hierarchical node.js configuration with files, environment variables, command-line arguments, and atomic object merging.&#8221;  It is a great little package provided by the folks at <a href="http://nodejitsu.com/">NodeJitsu</a>.</p>

<p>To install, run a little:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install nconf</span></code></pre></td></tr></table></div></figure>


<h4>Environment Variables in Node</h4>

<p>Often, NodeJs environments are specified through the aptly-named environment variables.  These are the variables that are set on a system level, available to yours and other applications.  In Unixy environments, you&#8217;d set one with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export NODE_ENV=production</span></code></pre></td></tr></table></div></figure>


<p>And it turns out that <code>NODE_ENV</code> is the single most-used environment variable of them all.  Really, it&#8217;s the big kahuna that triggers other environment variables or code for activation.</p>

<p>For instance, in an <a href="http://expressjs.com/">Express</a> app, you&#8217;ll see this a lot:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="s1">&#39;production&#39;</span> <span class="o">==</span> <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;env&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;dbUri&#39;</span><span class="p">,</span> <span class="s1">&#39;n.n.n.n/prod&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Actually, you see <a href="http://expressjs.com/api.html#app.configure"><code>configure()</code></a>, but it&#8217;s all just sugar around a check to <code>process.env.NODE_ENV</code>.</p>

<h4>Set NODE_ENV and Start Node</h4>

<p>If you want to start node and set the environment variable all in a one liner, try:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export NODE_ENV=production && node app.js</span></code></pre></td></tr></table></div></figure>


<h4>Multiple, Variable Sources</h4>

<p>You could just grab all your variables out the process environment, but the cool thing that nconf gives you is a hierarchy.  The <a href="https://github.com/flatiron/nconf">docs</a> give the probable example of the following hierarchy:</p>

<ol>
<li>Command-line arguments</li>
<li>Environment variables</li>
<li>A file</li>
</ol>


<p>One could access these sources in code with this beaut:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">nconf</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;nconf&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">nconf</span><span class="p">.</span><span class="nx">argv</span><span class="p">()</span>
</span><span class='line'>     <span class="p">.</span><span class="nx">env</span><span class="p">()</span>
</span><span class='line'>     <span class="p">.</span><span class="nx">file</span><span class="p">({</span> <span class="nx">file</span><span class="o">:</span>
</span><span class='line'>       <span class="s1">&#39;config.json&#39;</span>
</span><span class='line'>     <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could even have a config file specific to each environment that ships with your app and load it with a slightly spiffier:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">nconf</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;nconf&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">nconf</span><span class="p">.</span><span class="nx">argv</span><span class="p">()</span>
</span><span class='line'>     <span class="p">.</span><span class="nx">env</span><span class="p">()</span>
</span><span class='line'>     <span class="p">.</span><span class="nx">file</span><span class="p">({</span> <span class="nx">file</span><span class="o">:</span>
</span><span class='line'>       <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">+</span> <span class="s1">&#39;.json&#39;</span>
</span><span class='line'>     <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Using the Data</h4>

<p>Finally, after loading, just access your environment variables and incorporate them in your code as you will:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">nconf</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;NODE_ENV&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Declare some variables per environment.  Likely candidates are database connection strings or web service endpoints or feature flags.  These will help you avoid as many nasty if-else branches in your code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Count Attributes in JavaScript Object]]></title>
    <link href="http://jaketrent.com/post/count-javascript-object-attributes/"/>
    <updated>2012-11-29T13:11:00-07:00</updated>
    <id>http://jaketrent.com/post/count-javascript-object-attributes</id>
    <content type="html"><![CDATA[<p>Sometimes it may be useful to know how many attributes a JavaScript object has.  There&#8217;s not a fantastic way to do this.  Or maybe there is.  Do you know one?  Could cut out IE8 support.  Or, for what it&#8217;s worth, here&#8217;s a way.</p>

<p><img src="http://i.imgur.com/54smb.jpg" alt="Count attributes in js object" /></p>

<!--more-->


<h2>Which Objects have a Length</h2>

<p>If instantiate a new object, it does <em>not</em> have a built-in length attribute:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="kc">undefined</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">length</span>
</span><span class='line'><span class="kc">undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>If I add an arbitrary property that object, it still doesn&#8217;t affect the length:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">prop1</span> <span class="o">=</span> <span class="s2">&quot;adsf&quot;</span>
</span><span class='line'><span class="s1">&#39;adsf&#39;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">length</span>
</span><span class='line'><span class="kc">undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>If I instantiate a new array, it has a built-in length attribute:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="kc">undefined</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span>
</span><span class='line'><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>But an array is an object whose attributes are numbers, right?  So, if I put an arbitrary property on it, does it affect length:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">prop1</span> <span class="o">=</span> <span class="s2">&quot;asdf&quot;</span>
</span><span class='line'><span class="s1">&#39;asdf&#39;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span>
</span><span class='line'><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>No, this <code>arr</code> array still just has the two items we previously pushed onto it.</p>

<h2>Just Iterating</h2>

<p>So, how do you find out how many attributes are in an object (not array)?  Just iterate on it:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">numAttrs</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">key</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">++</span><span class="nx">count</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">count</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I found this a bit painful to write.  There should be a better way, right?  Do you know what it is?</p>

<h2>A Better Way for Better Browsers</h2>

<p>If your in a <a href="http://kangax.github.com/es5-compat-table/">Modern JavaScript environment</a>, give this a whirl:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">).</span><span class="nx">length</span>
</span></code></pre></td></tr></table></div></figure>


<p>Way nicer.  Don&#8217;t try in &lt;= IE8.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Read Request Body in Spring Bean]]></title>
    <link href="http://jaketrent.com/post/http-request-body-spring/"/>
    <updated>2012-11-27T14:10:00-07:00</updated>
    <id>http://jaketrent.com/post/http-request-body-spring</id>
    <content type="html"><![CDATA[<p>Spring is a great addition to your Java stack.  It helps you access the request for inside your Spring beans easily.  Maybe I&#8217;m doing it wrong, but reading the request body seems blasted verbose after that.  It takes a surprising amount of code.</p>

<p><img src="http://i.imgur.com/w8Ezm.jpg" alt="Happy Spring" /></p>

<!--more-->


<h2>Access the Request</h2>

<p>Spring&#8217;s bread and butter, of course, is inversion of control.  So, to get to the request object itself is no big deal.  Just inject it (canonical packages shown for… fun, mostly):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="nd">@javax.inject.Inject</span>
</span><span class='line'>  <span class="n">javax</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">HttpServletRequest</span> <span class="n">req</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now for the pile of non-abstracted code.</p>

<h2>Parse the Body</h2>

<p>Number one, the body is accessed from the <a href="http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html"><code>HttpServletRequest</code></a> object it a place that wasn&#8217;t obvious to me: <code>request.getReader()</code>.  Heads up, we&#8217;ve got a BufferedReader here.  Hey, at least we don&#8217;t get a stream that we have to wrap in more than one reader!</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="nf">getBody</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">body</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="na">getMethod</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;POST&quot;</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>        <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>        <span class="n">BufferedReader</span> <span class="n">bufferedReader</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">bufferedReader</span> <span class="o">=</span>  <span class="n">req</span><span class="o">.</span><span class="na">getReader</span><span class="o">();</span>
</span><span class='line'>          <span class="kt">char</span><span class="o">[]</span> <span class="n">charBuffer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="mi">128</span><span class="o">];</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">bytesRead</span><span class="o">;</span>
</span><span class='line'>          <span class="k">while</span> <span class="o">((</span><span class="n">bytesRead</span> <span class="o">=</span> <span class="n">bufferedReader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">charBuffer</span><span class="o">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">charBuffer</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">bytesRead</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// swallow silently -- can&#39;t get body, won&#39;t</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">bufferedReader</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">bufferedReader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// swallow silently -- can&#39;t get body, won&#39;t</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">body</span> <span class="o">=</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">body</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code.  There is to much.  Let me sum up.  There&#8217;s only going to be a body if you are doing a post.  Otherwise, don&#8217;t worry about it.  If there is data, pull it into a string.  Everything else is for (not) handling errors.</p>

<p>There&#8217;s a bit there.  It&#8217;s not the worst.  But after getting used to <a href="http://expressjs.com/api.html#req.body">Express&#8217; bodyParser</a>, it was hard to see this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cons of CSS Preprocessors]]></title>
    <link href="http://jaketrent.com/post/cons-css-preprocessors/"/>
    <updated>2012-11-14T09:20:00-07:00</updated>
    <id>http://jaketrent.com/post/cons-css-preprocessors</id>
    <content type="html"><![CDATA[<p>If you have any sizeable stylesheet these days, you should use a CSS preprocessor.  They&#8217;re awesome, but they come with a few cons.  The pros still definitely out-weigh the cons.  Use the preprocessor.  The cons are just things you&#8217;ll want to look out for to make your experience with CSS preprocessors better.</p>

<p><img src="http://i.imgur.com/Mzozm.jpg" alt="CSS Preprocessors" /></p>

<!--more-->


<h2>CSS Preprocessors are Popular</h2>

<p>Chris Coyier recently <a href="http://css-tricks.com/poll-results-popularity-of-css-preprocessors/">took a poll on the usage of CSS preprocessors</a>.  About half use one of the preprocessor options available to them.  Of the languages used, <a href="http://lesscss.org/">LESS</a> is the most popular.  (<a href="http://learnboost.github.com/stylus/">Stylus</a> is my current favorite.  I like the HAML-style syntax.)</p>

<p>This means that half of the people who write CSS aren&#8217;t, in fact, writing CSS.  They&#8217;re writing in <a href="http://net.tutsplus.com/tutorials/html-css-techniques/sass-vs-less-vs-stylus-a-preprocessor-shootout/">some language</a> that transpiles to CSS.  So, half of these developers are getting the pros, but there&#8217;s a bit of baggage too.</p>

<h2>Cons of a CSS Preprocessor</h2>

<h4>File Size is Deceiving</h4>

<p>When you&#8217;re writing in a higher-level styling language, it&#8217;s often much smaller than the generated CSS will be.  Thus, you could be deceiving yourself thinking that your resulting CSS will be just as a small as what you&#8217;re editing.  Why?</p>

<ol>
<li>Hiearchy will be flattened in the resulting CSS.  And the tree of selectors will be duplicated for every selector.</li>
<li>You can loop in a preprocessor, generating n items where you only see one.  All those items will be listed in the final, static CSS file.</li>
<li>In some of these languages, you don&#8217;t have to write vendor prefixes.  This is a fantastic feature, but it makes you tend to forget that one attribut will expand into 5 or 6 in the resulting CSS. (Stylus&#8217; <a href="https://github.com/visionmedia/nib">nib</a> is great for this, btw.)</li>
</ol>


<p>Maybe not a big deal.  Remove an image from your site, and you&#8217;ve made up the difference in bits on the wire.</p>

<h4>More Process</h4>

<p>Because you usually won&#8217;t be deploying your .less or .styl file, you&#8217;ll need to have a point in your development lifecycle where the .css gets generated.  This can potentially slow you down, but there are great tools like <a href="https://github.com/gruntjs/grunt-contrib-stylus/">Grunt</a> or <a href="http://incident57.com/codekit/">CodeKit</a> to make this quite automagic.  These tools have good, logical defaults, but still require configuration for your specific project.</p>

<h4>Hard to Go Back</h4>

<p>After working with Stylus or another language for a while, you&#8217;ll meet a project that is straight CSS, and the RoI on conversion to a preprocessor is small.  So, you&#8217;ll be back in CSS land.  This will be hard.  You&#8217;ll realize how nice you&#8217;ve had it.  The mechanisms you&#8217;ve grown to rely on won&#8217;t be there.</p>

<h4>Variety of Syntax</h4>

<p>Each CSS Processor&#8217;s syntax is different.  The features largely overlap, but they&#8217;re implemented differently.  It&#8217;s a polyglot world, so it&#8217;s no big deal.  Still, it can be confusing switching between projects that have different styling syntax.  You&#8217;ll write your styles twice after you realize that Stylus syntax doesn&#8217;t work in a LESS file.</p>

<h4>Team Coordination</h4>

<p>You need to get everyone on your team on board when using a CSS preprocessor.  If someone starts editing a .css file, their changes will be overwritten.  Minify the generated .css.  That should make it less savory to edit.  It&#8217;ll be a deterrent, but I can almost guarantee someone will edit it anyway. :)  Make the stylesheet workflow very clear.</p>

<h2>The Native Future</h2>

<p>We really only have these CSS preprocessors because CSS is too strict, flat, unflexible, and verbose for the amazing things being written for the web today.  Wouldn&#8217;t it be nice if these styling languages or some new, similar version of CSS was available natively in the browser?</p>

<p>Meanwhile, we&#8217;ll use these tools.  What have you found your greatest challenge to be using a CSS preprocessor?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress vs. WordPress]]></title>
    <link href="http://jaketrent.com/post/octopress-vs-wordpress/"/>
    <updated>2012-11-12T16:42:00-07:00</updated>
    <id>http://jaketrent.com/post/octopress-vs-wordpress</id>
    <content type="html"><![CDATA[<p>Why would one choose Octopress over WordPress?  What are the pros and cons?  I&#8217;ve recently implemented a blog &#8211; this blog &#8211; in WordPress.  It was a difficult decision for me.  At the time, I looked at Octopress, but I was jazzed by the success of others on WordPress, and I wanted to try it out.  I&#8217;m glad that I did try it out, but now I&#8217;m glad that I&#8217;ve switched to Octopress.  Here&#8217;s why.</p>

<p><img src="http://i.imgur.com/uACBn.jpg" alt="Octopress" /></p>

<!--more-->


<h2>Just Posts</h2>

<p>Octopress is so dead simple, it just makes sense.  The post is a file in a folder.  I edit it in my current favorite MarkDown editor, <a href="http://mouapp.com/">Mou</a>.  The workflow is thus very easy.  I&#8217;m not transferring my post which I wrote offline to a web interface only available online.</p>

<h2>Nerd Cred</h2>

<p>Nerd cred or geek cred?  I don&#8217;t know, but Octopress bumps it right up.  As it says, it&#8217;s a &#8220;blogging framework for hackers&#8221;.  Given that I&#8217;m a creator of software and that&#8217;s the main topic of my blog, it seems fitting, doesn&#8217;t it.  Plenty of coders have WordPress sites, I suppose.  Still, I didn&#8217;t feel super awesome about running a WordPress PHP site as my home base.</p>

<h2>Performance</h2>

<p>The whole idea of a generated static site seems genius.  It&#8217;s blazing fast.  I&#8217;m on Heroku.  Currently, my site experiences very low volume traffic.  With one dyno, when the site goes without traffic for a certain amount of time, Heroku will power down the dyno.  WordPress takes a fair bit to come back up on the first request after that.  Octopress, no problem.  Pops back like it was never gone.  And why not?  There&#8217;s really nothing to spin up.</p>

<h2>No Reinvention</h2>

<p>I landed on Octopress for one of the same reasons I initially chose WordPress for this new blog.  It is a ready-made blogging platform.  I don&#8217;t need to reinvent the wheel.  It works, and it works well.</p>

<h2>A Bit of Customization</h2>

<p>I chose WordPress for the blog because I wanted to write blog posts, not tinker with the innards of the site.  (I do that plenty elsewhere.)  But it turns out that I couldn&#8217;t quite bare just using an out-of-the-box theme.  I literally needed to add my own flair and customizations.  I still want to keep that to a minimum.  Octopress&#8217; classic theme (the only one?) is fantastic &#8211; clean and crisp.  When I want to make a few changes, it&#8217;s a much more straight-forward task to find the place that needs editing and get it done.</p>

<h2>Ruby</h2>

<p>I&#8217;ve hardly done any Ruby.  Octopress is an easy little touch of Ruby.  I don&#8217;t have to mess with it unless I want to.  Ruby is much more appealing to me than PHP.</p>

<h2>Plugin Pluses</h2>

<p>When I chose WordPress, I figured that if there was any feature that I desired, there was probably already a plugin for it.  And that turned out to be true.  Octopress certainly <a href="https://github.com/imathis/octopress/wiki/3rd-party-plugins">has fewer options</a>.  But on the whole, I think they cater well to the coder crowd.</p>

<h2>For Now</h2>

<p>So, for now, I&#8217;m on Octopress.  It&#8217;s nice to think that my data is just a folder of files that I could really recreate anywhere.  So, we&#8217;ll see how long this lasts.  So far, it&#8217;s a blogging platform for this hacker, and I&#8217;m liking it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Responsive Table with Scrolling]]></title>
    <link href="http://jaketrent.com/post/responsive-table-with-scrolling/"/>
    <updated>2012-11-07T17:06:00-07:00</updated>
    <id>http://jaketrent.com/post/responsive-table-with-scrolling</id>
    <content type="html"><![CDATA[<p>Sometimes a <code>table</code> element is the most semantic element one can use in markup.  It is true.  If you&#8217;re displaying tabular data, a <code>table</code> is a likely option.  If you&#8217;re on a responsive site, however, you&#8217;ll cringe at this option.  It turns out that tables aren&#8217;t very responsive web design-friendly.  One way to create a more responsive table is with scrolling.</p>

<p><img src="http://i.imgur.com/GeuZe.png" alt="Responsive Table with Scrolling" /></p>

<!--more-->


<h2>Responsive Table Options</h2>

<p>I love the article by Chris Coyier that describes <a href="http://css-tricks.com/responsive-data-tables/">responsive tables</a>.  Some of his ideas and those of the commenters on his post a great at thinking outside the box on what the options include for responsive tables:</p>

<ol>
<li>Orient the table vertically when there&#8217;s not enough room for all the columns.</li>
<li>Replace tabular data with a graphic, such as a pie graph, that communicates the same gist.</li>
<li>Replace the table with a link that opens a scrollable view large enough for the regular-sized table.</li>
</ol>


<p>My favorite option is the first.  But, in my case, it didn&#8217;t seem to work extremely well because I have two headers.  The example had column headers only.  I have row headers as well.  After a bit more looking, I ran across this <a href="http://www.zurb.com/playground/playground/responsive-tables/">Zurb scrolling table css and js example</a>.  The best solution, it seemed for now, was scrolling.  (My example code is based on the markup and styles of the Zurb code with a few things taken out and a few things added.)</p>

<h2>Table Horizontal Scrolling</h2>

<p>On the web, vertical scrolling is a part of the full meal deal.  So, the only thing to solve is the horizontal scrolling.  Normally, we don&#8217;t want content flowing off the right side of the screen when browsing.  So, we when there&#8217;s scrolling required, we&#8217;re going to do it within the table only and for the columns we want.</p>

<h4>Divide table in two</h4>

<p>We want some columns to scroll and others to remain pinned whilst scrolling.  We&#8217;ll duplicate the table in the markup and wrap each, a la:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;table-wrapper&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;pinned&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- table here with pinned columns only--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;scrollable&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- table here with scrollable columns only--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Line up the rows</h4>

<p>Now we have two tables.  The flexibility we&#8217;ve given ourself is that we can make some columns stick and others scroll easily.  Our new challenge is keeping the row height lined up so the two tables look like one.</p>

<p>Put the two tables next to each other with a float left and a float right.  Make the widths percentage-based as with any <a href="http://en.wikipedia.org/wiki/Responsive_web_design">rwd</a>.</p>

<p>Now we have a few options to make our rows line up:</p>

<ol>
<li>Explicitly set all table cells to the same height</li>
<li>Use JavaScript to make each cell in a row be the same height as the tallest cell in that row</li>
<li>Put similar content in each cell on a row (eg, just text with the same attributes that will not wrap for longer text)</li>
</ol>


<p>Turns out that I will choose option 1 for the table cells (<code>td</code>) and option 3 for the table headers (<code>th</code>).</p>

<p>This is my least favorite feature of this solution.  Anyone have a better idea on lining up the rows?</p>

<h4>Set column width</h4>

<p>I want some of my columns to have a set width.  Well, as <em>set</em> as anything is in rwd.  An html <code>table</code> will usually expand and contract columns across the table to give optimum spacing based on the content.</p>

<p>I want to make my pinned table columns allow extra-long content, but I don&#8217;t want their widths to change at all.  A bit of StackOverflow love yielded this answer on why <code>overflow: hidden</code> doesn&#8217;t work when <a href="http://stackoverflow.com/a/7570613/118561">constraining table cell width</a>.</p>

<p>In short, the solution is to wrap the content inside of the <code>td</code> with two <code>divs</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;outer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;inner&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    Row 4 longer than lotr
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And sprinkle with a bit of stylesheet:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">td</span> <span class="nc">.outer</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">td</span> <span class="nc">.inner</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">overflow</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span>
</span><span class='line'>  <span class="k">white-space</span><span class="o">:</span> <span class="k">nowrap</span><span class="p">;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This style will let the column width remain and the content overflow.  It will also keep the cell text on one line, and it will be hidden as it flows off the right-hand side of the cell.  To wrap and hide as it flows off the bottom of the cell, remove the <code>white-space: nowrap</code> attribute.</p>

<h2>Responsive Table with Scrolling</h2>

<p>For the final result, check out the <a href="http://codepen.io/jaketrent/pen/CcboI">CodePen for the responsive table</a> below:</p>

<pre class="codepen" data-height="400" data-type="result" data-href="CcboI" data-user="jaketrent"><code></code></pre>


<script async src="http://codepen.io:/assets/embed/ei.js"></script>


<p>What are your suggestions for making this better?  How have you solved the responsive table challenge?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grunt and Testacular]]></title>
    <link href="http://jaketrent.com/post/grunt-and-testacular/"/>
    <updated>2012-11-06T17:05:00-07:00</updated>
    <id>http://jaketrent.com/post/grunt-and-testacular</id>
    <content type="html"><![CDATA[<p><a href="http://vojtajina.github.com/testacular/">Testacular</a> is a test runner for running browser tests.  Once you have it <a href="http://jaketrent.com/post/test-requirejs-testacular/">up and running</a>, you may want to integrate it with your <a href="http://gruntjs.com/">Grunt</a> build process.  This will allow Testacular to be started and your tests to be run from Grunt.</p>

<p><img src="http://i.imgur.com/zze56.jpg" alt="Grunt and Testacular" /></p>

<!--more-->


<h2>grunt-testacular</h2>

<p>Lucky for us, <a href="https://npmjs.org/package/grunt-testacular">Friedel Ziegelmayer</a> has created a nice little plugin, <a href="https://npmjs.org/package/grunt-testacular">grunt-testacular</a>.</p>

<p>To install:</p>

<pre><code>$ npm install grunt-testacular
</code></pre>

<p>Add the current version to your <code>package.json</code> for the future:</p>

<pre><code>"grunt-testacular": "0.2.x"
</code></pre>

<p>Import the plugin in your <code>grunt.js</code> file:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-testacular&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally, in <code>grunt.js</code>, specify your tasks:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">testacularServer</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">unit</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">keepalive</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">configFile</span><span class="o">:</span> <span class="s1">&#39;testacular.conf.js&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nx">testacularRun</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">unit</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">runnerPort</span><span class="o">:</span> <span class="mi">9100</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Two Tasks</h4>

<p>Grunt-testacular provides two tasks:</p>

<ol>
<li>testacularServer - starts the Testacular server (equivalent to <code>testacular start</code>)</li>
<li>testacularRun - runs your tests against an already-started server (equivalent to <code>testacular run</code>)</li>
</ol>


<h4>A grunt-testacular Oddity</h4>

<p>If you don&#8217;t have <code>keepalive: true</code> set for grunt-testacular, the Testacular server will shutdown before it has a chance to capture browsers or run your tests.  I&#8217;m really not sure why this is even an option.  The false case behavior doesn&#8217;t seem to be useful.  With the <code>singleRun</code> ability of Testacular, the plugin should just call start on the server and let the server configuration decide when it&#8217;s appropriate to shut down.</p>

<p><strong>Update:</strong>
I logged an <a href="https://github.com/Dignifiedquire/grunt-testacular/issues/3#issuecomment-10234529">issue for grunt-testacular</a> that Grunt tasks listed after <code>testacularServer</code> weren&#8217;t being run.  Friedal responded that <code>keepalive: true</code> was the problem.  If it is specified true, then it has to be the last task in the list.  So, if you have tasks after <code>testacularServer</code> specified, remove <code>keepalive: true</code> and add <code>watch</code> to the end of your task list.</p>

<h2>Grunt and Testacular Work Flow</h2>

<p>Of course, your work flow is up to you, and Grunt and Testacular give you enough flexibility to decide your own, but I think you&#8217;ll run your tests in two main scenarios: development and continuous integration.</p>

<h4>Development</h4>

<p>For development, I like to start up the Testacular server and keep it running.  Then, I go write tests and update source code.  Testacular will notice my changes and automatically re-run my tests.</p>

<p>To set this up, make sure your grunt-testacular task has this option:</p>

<pre><code>keepalive: true
</code></pre>

<p>This will keep the server up even after the tests have completed.</p>

<p>And make sure your <code>testacular.conf.js</code> file includes:</p>

<pre><code>autoWatch = true;
</code></pre>

<p>This will force Testacular to re-run your tests if anything in your source or tests change (specifically, if anything in testacular.conf.js&#8217;s <code>files</code> array changes).</p>

<h4>Continuous Integration</h4>

<p>For continuous integration, you just want your automated build to be able to verify the source code integrity prior to deploying.</p>

<p>We don&#8217;t want tests to re-run automatically based on our changes, so we turn off <code>autoWatch</code> in <code>testacular.conf.js</code>:</p>

<pre><code>autoWatch = false;
</code></pre>

<p>And we set one more value in <code>testacular.conf.js</code> to:</p>

<pre><code>singleRun = true;
</code></pre>

<p>This will allow the <code>testacularServer</code> task to be run once, have Testacular run all the tests, and then make the server shut down.</p>

<p>Finally, remember to keep <code>keepalive: true</code> set in <code>grunt.js</code>.  Odd, right?</p>

<h2>Multiple Testacular Configurations</h2>

<p>To manage the options that are distinct to these two work flows, one could just create two separate <code>testacular.conf.js</code> files.  But, that would be overkill, because there&#8217;d be a lot of overlap between the two files.</p>

<p>Instead, the grunt-testacular plugin gives you override ability on a per-variable basis.  To support the development and integration scenario, the grunt multiTask might look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">testacularServer</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">unit</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">keepalive</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">configFile</span><span class="o">:</span> <span class="s1">&#39;testacular.conf.js&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">integration</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">keepalive</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">configFile</span><span class="o">:</span> <span class="s1">&#39;testacular.conf.js&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">autoWatch</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">singleRun</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Following this same pattern, you could create a separate config for automated functional or end-to-end tests as well.</p>

<p>Note that the <code>options</code> object is strictly for the plugin.  The other variables at that level feed straight into Testacular as overrides.</p>

<h2>Integrated Testing</h2>

<p>Process and product maturity are increased as tests are integrated into the build process.  Grunt and Testacular make integrating your browser tests a snap.</p>
]]></content>
  </entry>
  
</feed>
