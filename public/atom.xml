<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jake Trent]]></title>
  <link href="http://jaketrent.com/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2013-11-19T08:16:25-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Exercism Review]]></title>
    <link href="http://jaketrent.com/post/exercism-review/"/>
    <updated>2013-11-19T07:29:00-07:00</updated>
    <id>http://jaketrent.com/post/exercism-review</id>
    <content type="html"><![CDATA[<p>Exercism.io is a fantastic site and tool that provides a wealth of daily code exercises.  If you want to learn to be better in a language, it&#8217;s a great resource to do exercises and receive feedback.</p>

<p><img src="http://i.imgur.com/2oAEqBZ.jpg" alt="Exercism" /></p>

<!--more-->


<h2>Origin</h2>

<p><a href="http://exercism.io">Exercism.io</a> was introduced to me by Franklin Webber of gSchool and JumpStart Labs fame.  He and his colleagues use it as a part of their instruction, and it&#8217;s a great, free tool available to the public.</p>

<h2>Languages</h2>

<p>There is a fun array of language-learning possibilities inside Exercism.  It currently includes a varying number of exercises across these languages:</p>

<ul>
<li>clojure</li>
<li>elixir</li>
<li>haskell</li>
<li>javascript</li>
<li>objective-c</li>
<li>python</li>
<li>ruby</li>
<li>scala</li>
</ul>


<p>I&#8217;m currently running through the Ruby exercises.</p>

<h2>Starting Point</h2>

<p>Based on what I&#8217;ve seen of the Ruby and JavaScript exercises, I don&#8217;t think that Exercism&#8217;s exercises are meant for an absolute beginner.  Some basic knowledge of the programming language is assumed and required.  You&#8217;ll start a little deep if you know next to nothing.  These exercises are meant to expand your exposure to and understanding of language features.</p>

<h2>Installation</h2>

<p>Installation consists of a few things:</p>

<ol>
<li>Go to <a href="http://exercism.io">exercism.io</a> and register using your Github credentials.</li>
<li>While on the site, download the CLI.  It&#8217;s a pre-built binary that you just need to put somewhere that is tied to your system PATH.  That way you can execute it from the terminal.</li>
<li>Setup your environment for the language you&#8217;ll be learning.  Again, this information is on the site.  None of the environments are automatic in their setup, and you must follow the written steps to be ready to develop in your weapon, er language of choice.</li>
</ol>


<h2>Your First Exercise</h2>

<p>After installation, you&#8217;re ready for your first exercise.  On the terminal, type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>exercism fetch
</span></code></pre></td></tr></table></div></figure>


<p>This will download fresh exercises at the head of each of your language paths.  At first, you&#8217;ll start on exercise 0 of each of the language paths.  Now, choose a language.  I chose Ruby first.  The first exercise was called <code>bob</code>.  Bob is a lackadaisical teenager who responds with smart remarks to whatever somewhat says to him.  Typical.</p>

<p>Bob comes with a suite of failing tests.  All the tests are written, and it&#8217;s up to use to write the code that actually makes Bob function and the tests pass.  This is literally TDD or test-driven development, and yay for us, someone has already written the tests!  In the case of Ruby, the tests are written in a MiniTest syntax.  To run them, I&#8217;m typing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby bob_test.rb
</span></code></pre></td></tr></table></div></figure>


<p>This is where I think we might be able to have a bit of a better setup with the exercises.  It would be nice to have the tests automatically run on a file watch as opposed to having to run them each time manually.  For this, I personally setup <code>guard-minitest</code>.  I would recommend the same.  Of course, I can only think that Exercism doesn&#8217;t do this by default in order to simplify the environment setup process.</p>

<h2>Nitpicking</h2>

<p>After you complete your first exercise in some form by getting all the tests to pass, you can submit it to the site for feedback.  For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>exercism submit ruby/bob/bob.rb
</span></code></pre></td></tr></table></div></figure>


<p>The CLI will give you a link to your now-online code, and you can go there to see your submission.  Others who have completed the same exercise will also be able to see your solution.  And this is one of the coolest potentials of Exercism.  Others can give you feedback on your solution, called &#8220;nitpicks&#8221; by default.  This is a great learning opportunity.  We are ready to take feedback given from the perspective of others in their experience with the language.  We can also give feedback, training our eye to be more critical in our observation and future writing of code.  It feels like a great outcome and a great potential community.</p>

<p>I have given nitpicks.  Of course, that&#8217;s easier to do.  But, I am sad to say that I have never received any.  It&#8217;s hard to tell how active the community really is.  I see quite a few submissions, but there are definitely fewer nitpicks than submissions.  There&#8217;s quite a bit untapped community learning potential here.  To help this, I wish the system allowed you to unlock the next exercise in your language path without closing opportunity for nitpicks on submitted exercises.</p>

<p>So, have you used Exercism.io before?  Do you know of similar sites?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Save a Gem to Gemfile from Terminal]]></title>
    <link href="http://jaketrent.com/post/save-gem-to-gemfile-from-terminal/"/>
    <updated>2013-11-18T07:54:00-07:00</updated>
    <id>http://jaketrent.com/post/save-gem-to-gemfile-from-terminal</id>
    <content type="html"><![CDATA[<p>Have you ever wished you could save a gem to your <code>Gemfile</code> straight from the command line?  I wish Rubygems had this built in, but it&#8217;s easy to add.  After all, there&#8217;s a gem for that.</p>

<p><img src="http://i.imgur.com/x2I31sl.jpg" alt="Gemrat" /></p>

<!--more-->


<h2>From npm</h2>

<p>Coming from Node/Npm previous to Ruby/Rubygems, I wished I could do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install express --save
</span></code></pre></td></tr></table></div></figure>


<p>This would take my specified npm module and append it to the end of my <code>package.json</code> dependencies list.</p>

<p>There is no equivalent for this built into Rubygems.</p>

<h2>Gemrat</h2>

<p>But, there is a mutant beast that skulks through the gem-lined sewers of Rubyland &#8211; and it&#8217;s name is <code>gemrat</code>!  What a great, image-provoking name.  Once you install <code>gemrat</code>, you will have the power of 20 npms at your fingertips.</p>

<p>First, install it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install gemrat
</span></code></pre></td></tr></table></div></figure>


<p>Next, decide what gem you want to save to your <code>Gemfile</code>.  Let&#8217;s choose a gem of a gem to try called <code>guard</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gemrat guard
</span></code></pre></td></tr></table></div></figure>


<p>Now, install the dependencies listed in your <code>Gemfile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<p>Kaboom.  You have learned the secrets of the Fire Swamp and could live there for some time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug Ruby and Rails]]></title>
    <link href="http://jaketrent.com/post/debug-ruby-rails/"/>
    <updated>2013-11-14T07:37:00-07:00</updated>
    <id>http://jaketrent.com/post/debug-ruby-rails</id>
    <content type="html"><![CDATA[<p>Interactive debugging can sometimes be faster and more effective in helping you code than a <code>puts</code> statement.  It&#8217;s easy to get interactive debugging in Ruby or on Rails with the help of a nice gem.</p>

<p><img src="http://i.imgur.com/Z7WWtL0.jpg" alt="Ruby" /></p>

<!--more-->


<h2>No IDE Required</h2>

<p>There are Ruby IDEs that provide interactive debugging capabilities.  My favorite is <a href="http://www.jetbrains.com/ruby/">RubyMine by Jetbrains</a>.  But if you don&#8217;t have or don&#8217;t want an IDE, there&#8217;s still hope.</p>

<h2>Debugger Gem</h2>

<h4>Include the dependency</h4>

<p>My new buddy George showed me a sweet gem simply named <code>debugger</code>.  To use it, I first add the <code>debugger</code> dependency to my <code>Gemfile</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source "https://rubygems.org"
</span><span class='line'>
</span><span class='line'>gem 'debugger'</span></code></pre></td></tr></table></div></figure>


<h4>Add a breakpoint</h4>

<p>Next, I need to add my &#8220;breakpoint&#8221; into my code that I&#8217;m going to run.  In this case, the breakpoint is defined by calling <code>debugger</code>.  On the same line, we&#8217;ll also import the <code>debugger</code> library:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">is_anagram?</span>
</span><span class='line'>    <span class="nb">require</span> <span class="s1">&#39;debugger&#39;</span><span class="p">;</span> <span class="n">debugger</span>
</span><span class='line'>    <span class="n">same_length?</span> <span class="ow">and</span> <span class="n">different?</span> <span class="ow">and</span> <span class="n">has_same_letters?</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Run your code</h4>

<p>In this example, I&#8217;m going to break right after I call the <code>is_anagram?</code> method.  From the terminal, now I exercise the code.  In this case, I&#8217;ll run my unit tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby anagram_test.rb
</span></code></pre></td></tr></table></div></figure>


<h4>Debug like a champ</h4>

<p>And when execution of the script gets to the <code>debugger</code> line, execution will pause and output in my terminal will look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/Users/</span><span class="n">jake</span><span class="o">.</span><span class="n">trent</span><span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">exercism</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="n">anagram</span><span class="o">/</span><span class="n">anagram</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">13</span>
</span><span class='line'><span class="n">same_length?</span> <span class="ow">and</span> <span class="n">different?</span> <span class="ow">and</span> <span class="n">has_same_letters?</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">17</span><span class="o">]</span> <span class="k">in</span> <span class="sr">/Users/</span><span class="n">jake</span><span class="o">.</span><span class="n">trent</span><span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">exercism</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="n">anagram</span><span class="o">/</span><span class="n">anagram</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>   <span class="mi">8</span>      <span class="vi">@letters2</span> <span class="o">=</span> <span class="vi">@word2</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="mi">9</span>    <span class="k">end</span>
</span><span class='line'>   <span class="mi">10</span>
</span><span class='line'>   <span class="mi">11</span>    <span class="k">def</span> <span class="nf">is_anagram?</span>
</span><span class='line'>   <span class="mi">12</span>      <span class="nb">require</span> <span class="s1">&#39;debugger&#39;</span><span class="p">;</span> <span class="n">debugger</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">13</span>      <span class="n">same_length?</span> <span class="ow">and</span> <span class="n">different?</span> <span class="ow">and</span> <span class="n">has_same_letters?</span>
</span><span class='line'>   <span class="mi">14</span>    <span class="k">end</span>
</span><span class='line'>   <span class="mi">15</span>
</span><span class='line'>   <span class="mi">16</span>    <span class="k">def</span> <span class="nf">has_same_letters?</span>
</span><span class='line'>   <span class="mi">17</span>      <span class="n">same_letters</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="p">(</span><span class="n">rdb</span><span class="p">:</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>A snippet of my code is shown, an arrow points at line 13, and there&#8217;s a prompt at the bottom (labeled &#8216;rdb&#8217;) that you can type in.  <code>debugger</code> gives you a few special commands to type, such as:</p>

<ul>
<li><code>n</code> - next</li>
<li><code>s</code> - step over</li>
<li><code>c</code> - continue</li>
</ul>


<p>These commands should be familiar to almost all debuggers.  The other fabulous thing is that the prompt functions as a sort of <code>irb</code> session from the current context of your code.  So, I can type variable names to see their contents or call functions to see what they&#8217;d return.  So, in the case of this code, I could try:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>rdb:1<span class="o">)</span> has_same_letters?
</span><span class='line'><span class="nb">true</span>
</span><span class='line'><span class="o">(</span>rdb:1<span class="o">)</span> @letters2
</span><span class='line'><span class="o">[</span><span class="s2">&quot;s&quot;</span>, <span class="s2">&quot;t&quot;</span>, <span class="s2">&quot;a&quot;</span>, <span class="s2">&quot;n&quot;</span>, <span class="s2">&quot;d&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty cool and pretty powerful all for the price of including the library and including a breakpoint in your code.</p>

<p>Are there tools similar to this that you love to use for debugging?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Change Page Title in Angular Route]]></title>
    <link href="http://jaketrent.com/post/change-page-title-angular-route/"/>
    <updated>2013-11-07T07:03:00-07:00</updated>
    <id>http://jaketrent.com/post/change-page-title-angular-route</id>
    <content type="html"><![CDATA[<p>When you change routes in Angular, the page title doesn&#8217;t change automatically, but this can be done rather simply.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="Angular Router" /></p>

<!--more-->


<h2>Servers and Clients</h2>

<p>Client-side routers are pretty awesome.  A new url is pushed into the browser&#8217;s history to represent the particular resource that pure client code has produced and displayed.  It&#8217;s pretty cool.  It&#8217;s also used widely these days.  Angularjs has a nice little router built into its framework.</p>

<p>Route changes from a server always have the page title set automatically in the <code>head &gt; title</code> tag.  Client-side routing doesn&#8217;t have that exactly.  Nor does the Angularjs router change the page title via an automatic mechanism.  So, let&#8217;s add our own.</p>

<h2>Add Page Title to Angular Router</h2>

<p>First, notice that you can add any arbitrary attributes to an angular route that you desire.  In the code below, notice that each route has a <code>title</code> attribute:</p>

<figure class='code'><figcaption><span>app.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;app&#39;</span><span class="p">,</span> <span class="p">[]).</span><span class="nx">config</span> <span class="nf">($routeProvider) -&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$routeProvider</span>
</span><span class='line'>    <span class="p">.</span><span class="k">when</span> <span class="s">&#39;/&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nv">controller: </span><span class="s">&#39;HomeCtrl&#39;</span>
</span><span class='line'>      <span class="nv">templateUrl: </span><span class="s">&quot;/templates/home.html&quot;</span>
</span><span class='line'>      <span class="nv">title: </span><span class="s">&#39;Home&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">.</span><span class="k">when</span> <span class="s">&#39;/about&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nv">controller: </span><span class="s">&#39;AboutCtrl&#39;</span>
</span><span class='line'>      <span class="nv">templateUrl: </span><span class="s">&quot;/templates/about.html&quot;</span>
</span><span class='line'>      <span class="nv">title: </span><span class="s">&#39;About&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then in a place that exists on every route &#8211; something like an <code>AppCtrl</code> &#8211; you can gain access to the <code>current</code> route&#8217;s <code>title</code> every time the route changes:</p>

<figure class='code'><figcaption><span>app-ctrl.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;app&#39;</span><span class="p">).</span><span class="nx">controller</span> <span class="s">&#39;AppCtrl&#39;</span><span class="p">,</span> <span class="nf">($rootScope) -&gt;</span>
</span><span class='line'>  <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$on</span> <span class="s">&#39;$routeChangeSuccess&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">current</span><span class="p">,</span> <span class="nx">previous</span><span class="p">)</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nv">$rootScope.pageTitle = </span><span class="nx">$route</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">title</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have put the route&#8217;s <code>title</code> in <code>$rootScope.pageTitle</code> and can use it in our template:</p>

<figure class='code'><figcaption><span>app.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title</span> <span class="na">ng-bind=</span><span class="s">&quot;pageTitle + &#39; | MyApp&#39;&quot;</span><span class="nt">&gt;&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- ... --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ng-bind</code> is just like using double curlies, but also acts as if it&#8217;s surrounded by an ng-cloak as well.  Notice that in the title, I&#8217;m even concatenating the <code>pageTitle</code> with my app&#8217;s overall name.</p>

<p>Props go to <a href="http://github.com/danethurber">@danethurber</a> for putting this title changing logic in our most recent app.</p>

<p>Is this how you change your Angular app&#8217;s title?  Is there a better way?  Specifically, I wonder if <code>AppCtrl</code> really is the best place to listen for <code>$routeChangeSuccess</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use D3 rangeBands]]></title>
    <link href="http://jaketrent.com/post/use-d3-rangebands/"/>
    <updated>2013-10-17T07:47:00-06:00</updated>
    <id>http://jaketrent.com/post/use-d3-rangebands</id>
    <content type="html"><![CDATA[<p>When building a chart such as a bar chart in d3, you&#8217;ll want an evenly divided space on your x axis.  You could divide the space up with your own manual calculations, accounting for space available, bar width, and inner and outer padding.  Or, you could have d3 do the calculation for you via a <code>rangeBand</code>.</p>

<p><img src="http://i.imgur.com/JEniNrp.jpg" alt="d3 rangeBand" /></p>

<!--more-->


<h2>Scale</h2>

<p>One of the great features of D3 is the ability it gives you to easily adapt your chart to the space available to you.  This is accomplished with scales.  There are a couple different scales built into D3.  Some for comparative numbers, such as <code>d3.scale.linear</code> and <code>d3.scale.log</code>; some for discrete data sets, such as <code>d3.scale.ordinal</code>.</p>

<p><strong>A scale maps visual space to data space.</strong></p>

<p>The visual space of a scale is the <code>range</code>.  The data space is the <code>domain</code>.  The internals of the scale will map it all for you.</p>

<h2>Manual Space Management</h2>

<p>Previous to realizing some of the things that d3 scales can do for you, I did a lot of space management myself.  Here&#8217;s an example:</p>

<p>Let&#8217;s say we have a data domain of all the letters in the alphabet.  Let&#8217;s say we&#8217;re building a bar chart.  We&#8217;ll put the letters on the x-axis, running horizontally along our chart.  We want to space out each letter&#8217;s bar evenly across the visual space or range.</p>

<p>If we did our own math, it might look like this:</p>

<figure class='code'><figcaption><span>brought-to-you-by.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">barOuterPad = </span><span class="mi">20</span>
</span><span class='line'><span class="nv">barPad = </span><span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="nv">widthForBars = </span><span class="nx">elementWidth</span> <span class="o">-</span> <span class="p">(</span><span class="nx">barOuterPad</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="nv">barWidth = </span><span class="nx">widthForBars</span> <span class="o">/</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">barPad</span> <span class="o">+</span> <span class="p">(</span><span class="nx">barPad</span> <span class="o">/</span> <span class="nx">numBars</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">barsG = </span><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s">&#39;g&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;transform&#39;</span><span class="p">,</span> <span class="s">&quot;translate(</span><span class="si">#{</span><span class="nx">barOuterPad</span><span class="si">}</span><span class="s">, 0)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">barsG</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s">&#39;rect&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">enter</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="s">&#39;rect&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;x&#39;</span><span class="p">,</span> <span class="nf">(d, i) -&gt;</span> <span class="p">(</span><span class="nx">barWidth</span> <span class="o">*</span> <span class="nx">i</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">i</span> <span class="o">*</span> <span class="nx">barPad</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;width&#39;</span><span class="p">,</span> <span class="nx">barWidth</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># attrs ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the code above, we have bar padding setup.  <code>barOuterPad</code> is the padding on only the far left and right of the entire chart.  <code>barPad</code> is the space between each of the bars.</p>

<p>The <code>barWidth</code> calculation is especially fun.  It splits the <code>widthForBars</code> space evenly over the number of bars.  Then it subtracts the <code>barPad</code> for the space of that bar that won&#8217;t be able to be used.  Then, finally, we remember that there will be 1 fewer empty pad areas between bars than there will be actual bars.  So, we take that extra <code>barPad</code> space and give a bit of it back to every bar.  Whew.</p>

<p>When we go to place bars, we create a new group, <code>barG</code>, transformed in to take account of <code>barOuterPad</code>.  Then, for each bar in we make sure it&#8217;s offset into the chart based on what number of bar it is in the set.</p>

<p>There is an easier way.</p>

<h2>d3.scale.ordinal.rangeBands</h2>

<p>There is one particular function of <code>d3.scale.ordinal</code> that is particularly useful.  That is <code>rangeBands</code>.  It will evenly divide a space up for you into bands across the range.</p>

<p>Here&#8217;s a great graphic from the d3 wiki on <a href="https://github.com/mbostock/d3/wiki/Ordinal-Scales#wiki-ordinal_rangeBands"><code>ordinal.rangeBands</code></a>:</p>

<p><img src="https://f.cloud.github.com/assets/230541/538688/46c298c0-c193-11e2-9a7e-15d9abcfab9b.png" alt="rangeBand diagram" /></p>

<p>It looks like it knows how to take care of everything in our scenario.  It handles outer padding.  It handles between-bar padding.  Let&#8217;s use it:</p>

<figure class='code'><figcaption><span>made-possible-by.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">barOuterPad = </span><span class="p">.</span><span class="mi">2</span>
</span><span class='line'><span class="nv">barPad = </span><span class="p">.</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="nv">x = </span><span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">ordinal</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">domain</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nf">(d) -&gt;</span> <span class="nx">d</span><span class="p">.</span><span class="nx">letter</span><span class="p">))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">rangeRoundBands</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nx">elementWidth</span><span class="p">],</span> <span class="nx">barPad</span><span class="p">,</span> <span class="nx">barOuterPad</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s">&#39;rect&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">enter</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="s">&#39;rect&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;x&#39;</span><span class="p">,</span> <span class="nf">(d) -&gt;</span> <span class="nx">x</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">letter</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;width&#39;</span><span class="p">,</span> <span class="nx">x</span><span class="p">.</span><span class="nx">rangeBand</span><span class="p">())</span>
</span><span class='line'>    <span class="c1"># attrs...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that our <code>barOuterPad</code> and <code>barPad</code> are now fractions.  This is because d3 expects a number, usually between 0 and 1, that is described as a proportion of the eventual width of the bands.</p>

<p><code>x</code> becomes our scale function, mapping the domain, which is all letters (<code>d.letter</code>), to the range.  The range is specified as bands using <code>rangeRoundBands</code>.  This is different than <code>rangeBands</code> in that all spaces are guaranteed to be integers, avoiding antialiasing on screen.  The signature is as follows:</p>

<p><code>ordinal.rangeBands(interval[, padding[, outerPadding]])</code></p>

<p>We avoid having to use a new <code>barG</code> group to make our math easier.</p>

<p>When we set the <code>x</code> attribute on our bar, it&#8217;s x offset is determined by passing the singular datum&#8217;s letter to the <code>x</code> scale function.  And the width is simply the width of all bands, known by calling <code>x.rangeBand()</code>.</p>

<p>So much better.  And so much more concise.</p>

<p>What do you think?  Does this work for you?  What is the even-better way of doing this that I have yet to realize?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start Review]]></title>
    <link href="http://jaketrent.com/post/start-review/"/>
    <updated>2013-10-02T07:54:00-06:00</updated>
    <id>http://jaketrent.com/post/start-review</id>
    <content type="html"><![CDATA[<p>Starting tends to be one of the biggest hurdles that we must jump in order to find out what awesome we really have inside of us and let it shine.  In the book <a href="http://www.amazon.com/gp/product/1937077594/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1937077594&amp;linkCode=as2&amp;tag=jaktre-20">Start by Jon Acuff</a>, he gives great motivation and tactical steps for starting to find our awesome.  It&#8217;s a hilarious, inspiring, and practical guide.</p>

<p><img src="http://i.imgur.com/ERlkwHb.jpg" alt="Start Book" /></p>

<!--more-->


<h2>Stages of an Awesome Life</h2>

<p>All of us go through 5 stages of life on our journey to find our awesome:</p>

<ul>
<li>Learning</li>
<li>Editing</li>
<li>Mastering</li>
<li>Harvesting</li>
<li>Guiding</li>
</ul>


<p>These stages used to be tied to age or tenure.  People used to go through them steadily, sequentially, almost a decade at a time.  Getting to your awesome will surely require significant time and investment, but now and in the future the game has changed.</p>

<h2>The game has changed</h2>

<ul>
<li><strong>Retirement is dead.</strong>  The economy will recover.  The ideals of companies and individuals and governments won&#8217;t.  Don&#8217;t expect to pack it in and sit for 3+ decades.</li>
<li><strong>Hope is boss.</strong>  For those that see themselves as wanted to add to something meaningful, the opportunities are many and they are now.  You don&#8217;t have to wait until you&#8217;re 50 and have built a non-profit empire for you to add to something fulfilling.</li>
<li><strong>The Internet.</strong>  Opportunities are always open for anyone with access and a will to learn.  You can enter a field and expand your influence in that field incredibly quickly.</li>
</ul>


<h2>Be 22 Again</h2>

<p>You can literally be 22 at anything.  You can decide to enter a field, begin accelerated learning, determine your focus, lay on the hours of practice, find a plentiful harvest because of your new talent, and eventually help others along the path you have chosen.  Then you can do it all again.  These days some people are doing this out of necessity as an &#8220;encore career&#8221; in the place of a retirement that will not arrive.  We can all revert to 22 in a new field of study or activity in order to expand our exposure, increase or ability, or make our lives more happy and fulfilled.</p>

<p>There is a joy and a great feeling of accomplishment and purpose in the way that Jon outlines life.  What taste would life have if it were not based on learning and becoming better?  The values my parents taught me from the youngest age have been marinated in similar ideas.</p>

<p>When we&#8217;re young, we literally feel like we can do anything.  And we do, to our own ability.  At some point, because of our own insecurity, we may tend to only keep going in the activities that others have told us we&#8217;re good at or that we discover some aptitude in.  There&#8217;s nothing inherently wrong in this.  In fact, we should take advantage of those things.  The feeling that we need to get rid of is fear of starting anything else.</p>

<p>As we grow older, we can become more prone to pigeon-holing ourselves and our successes.  We fear failure.  We want to build on the good that we&#8217;ve already done.  We don&#8217;t want to fall from what we have built.  If we remember the pure enthusiasm and joy of learning that we felt as a child, we will open up more fulfilling doors in our lives.  We will continue to find more of what our own brand of awesome looks like.</p>

<h2>Style</h2>

<p>Jon knows how to write a good book.  This book, like <a href="http://jaketrent.com/post/quitter-review/">Quitter</a>, was very encouraging.  Also like his previous books, I was laughing out loud as I read it.  People on the train sharing my commute surely had moments they wondered about me as I laughed at Jon&#8217;s prose.  And I think my wife was surprised more than once by the unstoppable laughter that ensued after several especially funny bits. Jon&#8217;s book reads quickly and happily.</p>

<h2>What&#8217;s Next</h2>

<p>Jon gives the kind of encouragement that I need.  I don&#8217;t feel greatly handicapped by fear.  In fact, I feel quite confident in learning and making new successes in my life.  But, Jon does help uncover some of the more subtle negative messages that I can give myself that tend to hamper my progress and lessen my enthusiasm, shooting holes in my own boat.  And then he gives practical steps for getting the momentum of learning going in my life and taking advantage of those things for which I&#8217;m the trail to mastery.</p>

<p>So, what&#8217;s next?  There&#8217;s only to start.  Let new adventures begin.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rotate Gauge Needle in D3]]></title>
    <link href="http://jaketrent.com/post/rotate-gauge-needle-in-d3/"/>
    <updated>2013-09-27T06:52:00-06:00</updated>
    <id>http://jaketrent.com/post/rotate-gauge-needle-in-d3</id>
    <content type="html"><![CDATA[<p>If you want to make a gauge chart in S3, you&#8217;ll need a needle on your gauge.  It&#8217;s not hard to draw a triangle, but here&#8217;s the extra work to rotate it.</p>

<p><img src="http://i.imgur.com/7GSyOFd.png" alt="D3 Gauge Chart" /></p>

<!--more-->


<h2>The Gauge Chart</h2>

<p>I&#8217;m not sure what you call this kind of chart, but I call it a gauge.  It pretty much looks like a speedometer or a pressure gauge.  I&#8217;m sure after seeing one, you want to make one.  I&#8217;m not going to cover the arc building.  It&#8217;s pretty easy to build a <a href="https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-arc">d3 arc</a>.</p>

<h2>The Components</h2>

<p>In my case, I can match the design of the needle with a triangle and a circle.  The circle is the base of the needle upon which the needle spins.  The triangle is the pointer of the needle, which will eventually sit at the angle we specify to our graph.</p>

<h2>The Coordinates</h2>

<p>In svg/d3, you can redefine your coordinates by using a group.  If my <code>svg</code> container is square, the default coordinate plane will start in the upper left-hand corner at <code>(0,0)</code>.  If I wanted to redefine <code>(0,0)</code> to be in the bottom center of the <code>svg</code> container, we could do so by positioning a group (<code>g</code>) so that <em>its</em> top left-hand corner is at that point.</p>

<p>We might write this:</p>

<figure class='code'><figcaption><span>gauge.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">height = </span><span class="c1"># ... svg height</span>
</span><span class='line'><span class="nv">width = </span><span class="c1"># ... svg width</span>
</span><span class='line'><span class="nv">needleG = </span><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s">&#39;g&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;transform&#39;</span><span class="p">,</span> <span class="s">&quot;translate(</span><span class="si">#{</span><span class="nx">width</span> <span class="o">/</span> <span class="mi">2</span><span class="si">}</span><span class="s">, </span><span class="si">#{</span><span class="nx">height</span><span class="si">}</span><span class="s">)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Draw a Triangle</h2>

<p>To draw a triangle, use an <a href="https://github.com/mbostock/d3/wiki/SVG-Shapes#path-data-generators">svg path</a>.  It needs a start point and 2 more points to draw lines to.  In the special language of svg <code>path</code>s, <code>M x y</code> is the start point and <code>L x y</code> is the point to which a straight light will be drawn from the previous point.</p>

<p>Let&#8217;s say that we want our needle to 60px tall and 20px wide at the base.  First we&#8217;ll draw it pointing straight up.  Let&#8217;s draw this triangle using the <code>needleG</code> coordinates.  In the code, I&#8217;ll call the corners of the triangle <code>top</code>, <code>left</code>, and <code>right</code>.  The d3 code to draw this might look like:</p>

<figure class='code'><figcaption><span>gauge.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">needleLen = </span><span class="mi">60</span>
</span><span class='line'><span class="nv">needleRadius = </span><span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="nv">centerX = </span><span class="mi">0</span>
</span><span class='line'><span class="nv">centerY = </span><span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="nv">topX = </span><span class="nx">centerX</span> <span class="o">-</span> <span class="mi">0</span>
</span><span class='line'><span class="nv">topY = </span><span class="nx">centerY</span> <span class="o">-</span> <span class="nx">needleLen</span>
</span><span class='line'>
</span><span class='line'><span class="nv">leftX = </span><span class="nx">centerX</span> <span class="o">-</span> <span class="nx">needleRadius</span>
</span><span class='line'><span class="nv">leftY = </span><span class="nx">centerY</span> <span class="o">-</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="nv">rightX = </span><span class="nx">centerX</span> <span class="o">-</span> <span class="o">-</span><span class="p">(</span><span class="nx">needleRadius</span><span class="p">)</span>
</span><span class='line'><span class="nv">rightY = </span><span class="nx">centerY</span> <span class="o">-</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="nx">needleG</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s">&#39;path&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;d&#39;</span><span class="p">,</span> <span class="s">&quot;M </span><span class="si">#{</span><span class="nx">leftX</span><span class="si">}</span><span class="s"> </span><span class="si">#{</span><span class="nx">leftY</span><span class="si">}</span><span class="s"> L </span><span class="si">#{</span><span class="nx">topX</span><span class="si">}</span><span class="s"> </span><span class="si">#{</span><span class="nx">topY</span><span class="si">}</span><span class="s"> L </span><span class="si">#{</span><span class="nx">rightX</span><span class="si">}</span><span class="s"> </span><span class="si">#{</span><span class="nx">rightY</span><span class="si">}</span><span class="s">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Rotate the Triangle</h2>

<p>Drawing a triangle pointed straight up, that is strictly parallel with the <code>x</code> and <code>y</code> access of the plane, is no problem.  But a gauge that points straight up isn&#8217;t worth that much.  It doesn&#8217;t measure anything.  So, let&#8217;s rotate the pointer/triangle of the needle to get an actual visual display of our measurement.</p>

<p>Unfortunately, (but maybe you&#8217;ll have fun) you&#8217;ll have to pull out your middle school trigonometry here.  I was remembering sayings I had heard once a time to figure this out (like the mysterious &#8220;SOHCAHTOA&#8221; acronym).</p>

<h3>Percentage Input</h3>

<p>Your input may vary, but mine starts as a percentage.  If yours does not, you could convert it to a percentage.  And since we&#8217;re working with a half circle, we&#8217;re just going to cut in half all our input since the rotation math is based on a circle.</p>

<p>Let&#8217;s say in this case our percentage is 65%.  We need to convert from percentage to radians.  Note that all the code for rotation angles will use <a href="http://en.wikipedia.org/wiki/Radian">radians</a>.  Here&#8217;s some conversion code:</p>

<figure class='code'><figcaption><span>gauge.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">percToDeg = </span><span class="nf">(perc) -&gt;</span>
</span><span class='line'>  <span class="nx">perc</span> <span class="o">*</span> <span class="mi">360</span>
</span><span class='line'>
</span><span class='line'><span class="nv">percToRad = </span><span class="nf">(perc) -&gt;</span>
</span><span class='line'>  <span class="nx">degToRad</span> <span class="nx">percToDeg</span> <span class="nx">perc</span>
</span><span class='line'>
</span><span class='line'><span class="nv">degToRad = </span><span class="nf">(deg) -&gt;</span>
</span><span class='line'>  <span class="nx">deg</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">/</span> <span class="mi">180</span>
</span></code></pre></td></tr></table></div></figure>


<h3>SOHCAHTOA</h3>

<p>We have to find the <code>top</code>, <code>left</code>, and <code>right</code> for a triangle rotated around the <code>(0,0)</code> point.  The basic SOHCAHTOA formulas will help us find the points:</p>

<figure class='code'><figcaption><span>gauge.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">sin</span> <span class="k">of</span> <span class="nv">angle = </span><span class="nx">opposite</span> <span class="o">/</span> <span class="nx">hypotenuse</span>
</span><span class='line'><span class="nx">cos</span> <span class="k">of</span> <span class="nv">angle = </span><span class="nx">adjacent</span> <span class="o">/</span> <span class="nx">hypotenuse</span>
</span><span class='line'><span class="nx">tan</span> <span class="k">of</span> <span class="nv">angle = </span><span class="nx">opposite</span> <span class="o">/</span> <span class="nx">adjacent</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/RxoQF98.png" alt="Needle trigonometry" /></p>

<p>Using these formulas, let&#8217;s update our code for finding the endpoints of the triangle:</p>

<figure class='code'><figcaption><span>gauge.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">needleLen = </span><span class="mi">60</span>
</span><span class='line'><span class="nv">needleRadius = </span><span class="mi">10</span>
</span><span class='line'><span class="nv">percent = </span><span class="p">.</span><span class="mi">65</span>
</span><span class='line'>
</span><span class='line'><span class="nv">thetaRad = </span><span class="nx">percToRad</span> <span class="nx">percent</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="nv">centerX = </span><span class="mi">0</span>
</span><span class='line'><span class="nv">centerY = </span><span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="nv">topX = </span><span class="nx">centerX</span> <span class="o">-</span> <span class="nx">needleLen</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">thetaRad</span><span class="p">)</span>
</span><span class='line'><span class="nv">topY = </span><span class="nx">centerY</span> <span class="o">-</span> <span class="nx">needleLen</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">thetaRad</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">leftX = </span><span class="nx">centerX</span> <span class="o">-</span> <span class="nx">needleRadius</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">thetaRad</span> <span class="o">-</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="nv">leftY = </span><span class="nx">centerY</span> <span class="o">-</span> <span class="nx">needleRadius</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">thetaRad</span> <span class="o">-</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">rightX = </span><span class="nx">centerX</span> <span class="o">-</span> <span class="nx">needleRadius</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">thetaRad</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="nv">rightY = </span><span class="nx">centerY</span> <span class="o">-</span> <span class="nx">needleRadius</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">thetaRad</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="s">&quot;M </span><span class="si">#{</span><span class="nx">leftX</span><span class="si">}</span><span class="s"> </span><span class="si">#{</span><span class="nx">leftY</span><span class="si">}</span><span class="s"> L </span><span class="si">#{</span><span class="nx">topX</span><span class="si">}</span><span class="s"> </span><span class="si">#{</span><span class="nx">topY</span><span class="si">}</span><span class="s"> L </span><span class="si">#{</span><span class="nx">rightX</span><span class="si">}</span><span class="s"> </span><span class="si">#{</span><span class="nx">rightY</span><span class="si">}</span><span class="s">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that <code>Math.PI / 2</code> is a 90 degree angle.  It&#8217;s used to find the angle smaller than theta for the left triangle and find the angle larger for the right triangle.</p>

<p>There you have it.  That&#8217;s the magic.  For an example of this working and some more code, see this <a href="http://cdpn.io/eloGk">codepen of a d3 gauge</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Import Erb Into Karma]]></title>
    <link href="http://jaketrent.com/post/import-erb-into-karma/"/>
    <updated>2013-09-20T16:59:00-06:00</updated>
    <id>http://jaketrent.com/post/import-erb-into-karma</id>
    <content type="html"><![CDATA[<p>Rails asset pipeline allows you to use erb helpers in your CoffeeScript.  You&#8217;ll still need to bring get these files into Karma runner.  It&#8217;s really easy.  You just need to get to know your Karma config options.</p>

<p><img src="http://i.imgur.com/i5fJT6j.png" alt="erb files in Karma runner" /></p>

<!--more-->


<h2>erb in JavaScripts</h2>

<p>Why in the world would you want to use erb helpers inside your script files?  You might not.  I definitely think this should be a limited practice.  In some cases, it can be very helpful.  For instance, if you use Ruby/Rails (via <a href="https://github.com/rumblelabs/asset_sync"><code>asset_sync</code></a>) to upload your static assets to an external server, such as S3, you can help your scripts know where static assets live after upload.</p>

<p>So your script might use the <code>asset_path</code> helper and end up looking something like this:</p>

<figure class='code'><figcaption><span>app.coffee.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;app&#39;</span><span class="p">,</span> <span class="p">[]).</span><span class="nx">config</span> <span class="nf">($routeProvider) -&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$routeProvider</span>
</span><span class='line'>    <span class="p">.</span><span class="k">when</span> <span class="s">&#39;/admin&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nv">controller: </span><span class="s">&#39;AdminIndexCtrl&#39;</span>
</span><span class='line'>      <span class="nv">templateUrl: </span><span class="s">&quot;&lt;%= asset_path(&#39;admin/index.html&#39;) %&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Import erb Files into Karma</h2>

<p>Well, now you have an <code>app.coffee.erb</code> file.  You need to get it into <a href="http://karma-runner.github.io">Karma runner</a>.  Normally <code>*.coffee</code> files will be brought straight in and compiled automatically by the runner as needed.  In this case, however, the Karma defaults won&#8217;t recognize the <code>.coffee.erb</code> file as a CoffeeScript file need compilation.</p>

<p>To tell Karma to process your erb file as a CoffeeScript file, add this to your config:</p>

<figure class='code'><figcaption><span>karma.conf.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">module.exports = </span><span class="nf">(config) -&gt;</span>
</span><span class='line'>  <span class="nx">config</span><span class="p">.</span><span class="nx">set</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>    <span class="nv">preprocessors:</span>
</span><span class='line'>      <span class="s">&#39;**/*.coffee.erb&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s">&#39;coffee&#39;</span><span class="p">]</span>
</span><span class='line'>      <span class="s">&#39;**/*.coffee&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s">&#39;coffee&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it.  That&#8217;s the key to getting your Erb files processed into JavaScript and ready for Karma to use.</p>

<p>Now, what are your thoughts on putting your CoffeeScripts through the erb filter of the asset pipeline at all?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Mixins]]></title>
    <link href="http://jaketrent.com/post/javascript-mixins/"/>
    <updated>2013-09-06T10:37:00-06:00</updated>
    <id>http://jaketrent.com/post/javascript-mixins</id>
    <content type="html"><![CDATA[<p>JavaScript makes mixins inherently easy.  Mixins are a native feature of the language without calling it that.  Here are a few methods for making this happen.</p>

<p><img src="http://i.imgur.com/XemDUw8.jpg" alt="JavaScript mixins" /></p>

<!--more-->


<h2>Attach a Property</h2>

<p>You can attach a property to a Javascript object at any time.  You don&#8217;t need to monkey patch it.  It doesn&#8217;t need to be packaged up in a very special format.  You just shove stuff onto the object.  Here&#8217;s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">MyModel</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">doOneThing</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;doing it right&#39;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">model</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyModel</span><span class="p">();</span>
</span><span class='line'><span class="nx">model</span><span class="p">.</span><span class="nx">doItRight</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;everybody will be dancing&#39;</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">model</span><span class="p">.</span><span class="nx">doOneThing</span><span class="p">();</span> <span class="c1">// =&gt; &#39;doing it right&#39;</span>
</span><span class='line'><span class="nx">model</span><span class="p">.</span><span class="nx">doItRight</span><span class="p">();</span>  <span class="c1">// =&gt; &#39;everybody will be dancing&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A function is defined.  It is instantiated.  Later, a new property, <code>doItRight</code> function, is added to it.  Both functions now magically work on the original model instance.  We could have attached to <code>MyModel.prototype</code> and had the <code>doItRight</code> function attached to all future instantiations of the function as well.</p>

<h2>Use Extend</h2>

<p>There are a couple great libraries that provide wholesale extension of object properties, just like mixins in other languages.  <a href="http://api.jquery.com/jQuery.extend/">jQuery</a> and <a href="http://underscorejs.org/#extend">Underscore</a> provide <code>$.extend</code> and <code>_.extend</code> respectively.  They are great utilities that make object extension quick and painless.  Here&#8217;s an example using Underscore:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">utilities</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">workWater</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;pay $75 for water&#39;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">otherUtilities</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">electrifyTheCompany</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;pay $75 for electric slides&#39;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">utilityConglomerate</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">({},</span> <span class="nx">utilities</span><span class="p">,</span> <span class="nx">otherUtilities</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">utilityConglomerate</span><span class="p">.</span><span class="nx">workWater</span><span class="p">()</span> <span class="c1">// =&gt; &#39;pay $75 for water&#39;</span>
</span><span class='line'><span class="nx">utilityConglomerate</span><span class="p">.</span><span class="nx">electrifyTheCompany</span><span class="p">()</span> <span class="c1">// =&gt; &#39;pay $75 for electric slides&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Handle Per-instance State</h2>

<p>Notice that the above methods are very good at attaching functions.  The functions in these examples have no shared state.  The scenarios that we&#8217;ve made up so far haven&#8217;t required per-instance state as specified by the mixin.  Recently I had a need for all of these things.  I was making a library called <a href="http://octanner.github.io/angular-models/">angular-models</a>.</p>

<p>I wanted to be able to assign what I called <code>AttributesMixin</code> to any function (Model <code>class</code>es, written in CoffeeScript).  To simplify the story, we have a <code>set</code> API that assign values to an internal <code>_attributes</code> object and a <code>get</code> to retrieve them.  These functions were to be assigned to the prototype of the function, but the <code>_attributes</code> were to be assigned to the object instance only, clean for each new object.</p>

<p>We invented our own convention, where each mixin would optionally implement its own <code>dependencies</code> function.  Each of the <code>Model</code>s knew how to extend itself with a given mixin.  This custom extend function was called <code>@include</code>.  As mixins were included, the <code>dependencies</code> function reference was saved (in an array called <code>_dependencyFns</code>) and then called in the <code>Model</code> superclass constructor.  So, each <code>Model</code> subclass is required to call the super constructor to get this functionality.</p>

<p>In the case of <code>AttributesMixin</code>, it looks as simple as this:</p>

<figure class='code'><figcaption><span>attributes-mixin.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">AttributesMixin =</span>
</span><span class='line'>  <span class="nv">dependencies: </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="vi">@_attributes = </span><span class="p">{}</span>
</span><span class='line'>  <span class="nv">get: </span><span class="o">-&gt;</span> <span class="c1"># ...</span>
</span><span class='line'>  <span class="nv">set: </span><span class="o">-&gt;</span> <span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Model</code> can include like this:</p>

<figure class='code'><figcaption><span>my-model.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MyModel</span> <span class="k">extends</span> <span class="nx">Model</span>
</span><span class='line'>  <span class="nx">@include</span> <span class="nx">AttributesMixin</span>
</span><span class='line'>  <span class="nv">constructor: </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">super</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the <code>Model</code> constructor includes a snippet something like this:</p>

<figure class='code'><figcaption><span>model.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Model</span>
</span><span class='line'>  <span class="nv">constructor: </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span> <span class="nx">@</span> <span class="k">for</span> <span class="nx">fn</span> <span class="k">in</span> <span class="nx">@_dependencyFns</span> <span class="k">if</span> <span class="nx">@_dependencyFns</span><span class="o">?</span>
</span></code></pre></td></tr></table></div></figure>


<p>For a more accurate, in-depth look at the code, see the <a href="https://github.com/octanner/angular-models">Github repo for angular-models</a>.</p>

<p>Do you use any of these methods to mixin functionality to your JavaScript objects?  What others?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Create a Bower Package]]></title>
    <link href="http://jaketrent.com/post/how-to-create-a-bower-package/"/>
    <updated>2013-09-05T07:04:00-06:00</updated>
    <id>http://jaketrent.com/post/how-to-create-a-bower-package</id>
    <content type="html"><![CDATA[<p>Bower is a client-side or browser package manager.  It will handle your 3rd-party packages that are registered with the service.  To make it more useful, you can package up some of your own code and create a component to install with Bower.</p>

<p><img src="http://i.imgur.com/t4XxrHn.jpg" alt="Bower" /></p>

<!--more-->


<h2>Prepare your Package</h2>

<p>To prepare your code to be a Bower package, you must install the Bower CLI:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install -g bower
</span></code></pre></td></tr></table></div></figure>


<p>If you haven&#8217;t upgraded Bower lately, you might want to, as the basic config files have changed recently, and the CLI has improved.  This command would do the trick:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm update -g bower
</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s generate the basic config file, <code>bower.json</code>, by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>your_project_dir
</span><span class='line'><span class="nv">$ </span>bower init
</span></code></pre></td></tr></table></div></figure>


<p>You will be prompted to select a name, version, etc. for your project.</p>

<h2>Add Your Package to the Registry</h2>

<p>There is a Bower registry at <code>http://bower.herokuapp.com</code> that is used as a central lookup for the Bower components that are available.  This allows searching for packages by name, for instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bower search angular-models
</span></code></pre></td></tr></table></div></figure>


<p>Now the only step left is to add a reference to our package in the registry, for instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bower register angular-models git://github.com/octanner/angular-models.git
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it!  It&#8217;s that easy.</p>

<h2>Potential Errors</h2>

<p>When giving a URL to your git repo, use the <code>git</code> protocol URL specifically.  Otherwise on old versions of Bower you&#8217;ll get an <a href="https://github.com/bower/bower/issues/66">error</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bower error Incorrect format
</span></code></pre></td></tr></table></div></figure>


<p>The newer versions will give a much more helpful message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bower EINVFORMAT The registry only accepts URLs starting with git://
</span></code></pre></td></tr></table></div></figure>


<p>And don&#8217;t worry about name overwriting.  Bower will catch that too with an error response:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bower EDUPLICATE Duplicate package
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Angular Directive With Isolate Scope]]></title>
    <link href="http://jaketrent.com/post/test-angular-directive-isolate-scope/"/>
    <updated>2013-08-21T07:46:00-06:00</updated>
    <id>http://jaketrent.com/post/test-angular-directive-isolate-scope</id>
    <content type="html"><![CDATA[<p>Directives with isolate scope do not inherit their scope from their parent.  Thus, the pattern to test them is slightly different.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="Angular Isolate Scope Testing" /></p>

<!--more-->


<p>When testing a directive, you&#8217;ll often want to setup some fixture element to attach your directive to.  This will act as the DOM that you will compile with scope.  At that point, the variables that you attached to scope will be available within the directive under test.</p>

<p>For example, if I had a directive called <code>AccountList</code> with isolate scope:</p>

<figure class='code'><figcaption><span>account-list.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;app&#39;</span><span class="p">).</span><span class="nx">directive</span> <span class="s">&#39;AccountList&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">restrict: </span><span class="s">&#39;EA&#39;</span>
</span><span class='line'>  <span class="nv">replace: </span><span class="kc">true</span>
</span><span class='line'>  <span class="nv">scope:</span>
</span><span class='line'>    <span class="nv">accounts: </span><span class="s">&#39;=&#39;</span>
</span><span class='line'>  <span class="c1"># etc ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I would setup my test something like this:</p>

<figure class='code'><figcaption><span>account-list.spec.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">describe</span> <span class="s">&#39;AccountList&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">elm = </span><span class="kc">null</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span> <span class="nx">inject</span> <span class="nf">($rootScope, $compile) -&gt;</span>
</span><span class='line'>    <span class="nv">accounts = </span><span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">num</span> <span class="k">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">..</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'>      <span class="nx">accounts</span><span class="p">.</span><span class="nx">push</span> <span class="nx">createFakeAccount</span><span class="p">()</span>
</span><span class='line'>    <span class="nv">$rootScope.accounts = </span><span class="nx">accounts</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">elm = </span><span class="nx">angular</span><span class="p">.</span><span class="nx">element</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">      &lt;account-list accounts=&quot;accounts&quot;&gt;&lt;/account-list&gt;</span>
</span><span class='line'><span class="s">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">e = </span><span class="nx">$compile</span><span class="p">(</span><span class="nx">elm</span><span class="p">)(</span><span class="nx">$rootScope</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">e</span><span class="p">.</span><span class="nx">scope</span><span class="p">().</span><span class="nx">$digest</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># actual specs, using elm ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few points:</p>

<ul>
<li><code>inject()</code> comes from <code>angular-mock</code>.  It is currently only supported in Jasmine.</li>
<li>Before each test of the <code>AccountList</code> directive, a set of 5 accounts will be put in scope so the directive, presumably, has something to display.</li>
<li><code>$rootScope</code> is going to be the only scope that you can get to easily from your tests.  You can attach variables to it directly as above or call <code>$rootScope.$new()</code> to generate a new scope if you&#8217;d like.</li>
<li>We initially <code>$compile</code> the fixture element, passing in <code>$rootScope</code>.</li>
<li>To get Angular to actually act internally on the variables that we&#8217;ve passed into the directive and put them on scope, we must call the important line of code: <code>e.scope().$digest()</code>.</li>
</ul>


<p>Now you should be ready to rock and roll with your tests.  Isolate scopes can be tricky.  Testing them, a bit tricky as well.</p>

<p>Do you know a better way?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spies with Sinon and Chai]]></title>
    <link href="http://jaketrent.com/post/spies-sinon-chai/"/>
    <updated>2013-08-19T08:21:00-06:00</updated>
    <id>http://jaketrent.com/post/spies-sinon-chai</id>
    <content type="html"><![CDATA[<p>Spies will help you verify calls to methods without actually calling them.  <a href="http://sinonjs.org/">Sinon</a> is a library that provides spies.  <a href="http://chaijs.com/">Chai</a> will provide assertions appropriate to spying.</p>

<p><img src="http://i.imgur.com/yuKcrP9.jpg" alt="Sinon-chai Spies" /></p>

<!--more-->


<h2>Install Dependencies</h2>

<p>You&#8217;ll need 3 dependencies in dev mode for running your tests:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install sinon chai sinon-chai --save-dev</span></code></pre></td></tr></table></div></figure>


<p>Now make sure that you import these testing tools into your test environment.  I&#8217;m using <a href="http://karma-runner.github.io/0.10/index.html">Karma Runner</a>, so my <code>files</code> array has these 3 lines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;node_modules/sinon/pkg/sinon.js&#39;</span><span class="p">,</span>
</span><span class='line'><span class="s1">&#39;node_modules/chai/chai.js&#39;</span><span class="p">,</span>
</span><span class='line'><span class="s1">&#39;node_modules/sinon-chai/lib/sinon-chai.js&#39;</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make sure that you are including the packaged version of each of these files.  For instance, the <code>sinon/lib</code> files are not built together, so you&#8217;ll likely import some subset of needed files; it won&#8217;t error out, but it won&#8217;t provide working spies like we&#8217;re wanting (so use the <code>pkg</code> directory files).</p>

<h2>Spying</h2>

<p>We spy because we care.  We don&#8217;t want certain methods to be called.  In this case, we&#8217;re testing Angularjs code.  We don&#8217;t want our event broadcast to actually happen because we don&#8217;t care about testing the listeners to that event.  We just want to know that the broadcast happens.  We can test listeners separately in their own unit test.</p>

<p>I found that following the &#8220;Getting Started&#8221; example on the Sinonjs page didn&#8217;t lead me to create a spy that worked.  I went spelunking and found a working example on a random tech blog (a la this one).  So, here&#8217;s this advice:</p>

<ul>
<li><code>sinon.spy</code> api takes the object with the function as a 1st parameter and the string name of the function that you&#8217;re wanting to spy on as the 2nd parameter.</li>
<li><code>sinon.spy</code> will return a reference to the spy.  You can use that reference to do assertions on or you can use the spied on function itself (ie, <code>$rootScope.$broadcast</code>)</li>
<li>Use <a href="https://github.com/domenic/sinon-chai"><code>sinon-chai</code></a>.  It provides better assertions and works with <code>chai</code>.</li>
</ul>


<figure class='code'><figcaption><span>model.spec.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">assert = </span><span class="nx">chai</span><span class="p">.</span><span class="nx">assert</span>
</span><span class='line'><span class="nv">expect = </span><span class="nx">chai</span><span class="p">.</span><span class="nx">expect</span>
</span><span class='line'><span class="nv">should = </span><span class="nx">chai</span><span class="p">.</span><span class="nx">should</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nv">model = </span><span class="kc">null</span>
</span><span class='line'><span class="nv">$rootScope = </span><span class="kc">null</span>
</span><span class='line'><span class="nv">$httpBackend = </span><span class="kc">null</span>
</span><span class='line'>
</span><span class='line'><span class="nx">beforeEach</span> <span class="nx">module</span> <span class="s">&#39;app&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">beforeEach</span> <span class="nx">inject</span> <span class="nf">(_Model_, _$rootScope_, _$httpBackend_) -&gt;</span>
</span><span class='line'>  <span class="nv">model = </span><span class="k">new</span> <span class="nx">_Model_</span>
</span><span class='line'>  <span class="nv">$rootScope = </span><span class="nx">_$rootScope_</span>
</span><span class='line'>  <span class="nv">$httpBackend = </span><span class="nx">_$httpBackend_</span>
</span><span class='line'>
</span><span class='line'><span class="nx">it</span> <span class="s">&#39;broadcasts model:fetched event w/ model&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">spy = </span><span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">(</span><span class="nx">$rootScope</span><span class="p">,</span> <span class="s">&#39;$broadcast&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">model</span><span class="p">.</span><span class="nx">fetch</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">flush</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">spy</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">been</span><span class="p">.</span><span class="nx">calledWith</span> <span class="s">&#39;model:fetched&#39;</span><span class="p">,</span> <span class="nx">model</span>
</span></code></pre></td></tr></table></div></figure>


<p>Most of that code is setup.  And most of that setup is related to <a href="http://angularjs.org/">Angularjs</a>.  If that doesn&#8217;t apply to you, ignore it.  It&#8217;s just there to give a more full picture of the environment.</p>

<p>The interesting part is all in the final <code>it</code> function call.  The code under test is <code>model.fetch()</code>, which is called.  Internal to that function, there is a <code>$rootScope.$broadcast</code> call that we&#8217;re spying on that we&#8217;re asserting is called with 2 parameters: &#8216;model:fetched&#8217; string and the model itself.</p>

<p>As with most testing environments, it&#8217;s fairly simple once you discover the pattern.  What do you think of this one?  Does it work for you?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disable ngClick]]></title>
    <link href="http://jaketrent.com/post/disable-ng-click/"/>
    <updated>2013-08-14T07:53:00-06:00</updated>
    <id>http://jaketrent.com/post/disable-ng-click</id>
    <content type="html"><![CDATA[<p>Angular&#8217;s ngClicks can be attached to anything.  This makes it easy to add interactivity to elements on the DOM.  Your program might require that these click callbacks be disabled at certain points, such as during form processing.  ngClick doesn&#8217;t have a toggle built in.  Let&#8217;s build one that might help.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="Angularjs" /></p>

<!--more-->


<p>In our app we&#8217;re going to track the state of the UI via various events that get passed in scope.  We slap our directive as an attribute on an element and it will respond by disabling or enabling on certain events.  Here&#8217;s the directive:</p>

<figure class='code'><figcaption><span>disable-toggle.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;app.directives&#39;</span><span class="p">).</span><span class="nx">directive</span> <span class="s">&#39;disableToggle&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">restrict: </span><span class="s">&#39;A&#39;</span>
</span><span class='line'>  <span class="nv">replace: </span><span class="kc">false</span>
</span><span class='line'>  <span class="nv">link: </span><span class="nf">(scope, element, attrs) -&gt;</span>
</span><span class='line'>    <span class="nv">defaultDisableEvt = </span><span class="s">&#39;click:disable&#39;</span>
</span><span class='line'>    <span class="nv">defaultEnableEvt = </span><span class="s">&#39;click:enable&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">disableEvt = </span><span class="nx">attrs</span><span class="p">.</span><span class="nx">disableEvt</span> <span class="o">||</span> <span class="nx">defaultDisableEvt</span>
</span><span class='line'>    <span class="nv">enableEvt = </span><span class="nx">attrs</span><span class="p">.</span><span class="nx">enableEvt</span> <span class="o">||</span> <span class="nx">defaultEnableEvt</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">disableEvts = </span><span class="nx">disableEvt</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/\ *?,\ *?/</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">enableEvts = </span><span class="nx">enableEvt</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/\ *?,\ *?/</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="nx">evt</span> <span class="k">in</span> <span class="nx">disableEvts</span>
</span><span class='line'>      <span class="nx">scope</span><span class="p">.</span><span class="nx">$on</span> <span class="nx">evt</span><span class="p">,</span> <span class="nf">(evt) -&gt;</span>
</span><span class='line'>        <span class="nx">element</span><span class="p">.</span><span class="nx">attr</span> <span class="s">&#39;disabled&#39;</span><span class="p">,</span> <span class="s">&#39;disabled&#39;</span>
</span><span class='line'>        <span class="nx">element</span><span class="p">.</span><span class="nx">addClass</span> <span class="s">&#39;is-disabled&#39;</span>
</span><span class='line'>        <span class="nv">scope.disabledToggled = </span><span class="kc">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="nx">evt</span> <span class="k">in</span> <span class="nx">enableEvts</span>
</span><span class='line'>      <span class="nx">scope</span><span class="p">.</span><span class="nx">$on</span> <span class="nx">evt</span><span class="p">,</span> <span class="nf">(evt) -&gt;</span>
</span><span class='line'>        <span class="nx">element</span><span class="p">.</span><span class="nx">removeAttr</span> <span class="s">&#39;disabled&#39;</span>
</span><span class='line'>        <span class="nx">element</span><span class="p">.</span><span class="nx">removeClass</span> <span class="s">&#39;is-disabled&#39;</span>
</span><span class='line'>        <span class="nv">scope.disabledToggled = </span><span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>The directive allows for listening on multiple events.  This is useful if your button should be disabled/enabled via multiple events.  Just separate your event list with commas.  If you don&#8217;t want to specify any events, the directive uses two default events, &#8216;click:disable&#8217; and &#8216;click:enable&#8217;.</p>

<p>The directive sets the <code>disabled</code> attribute, commonly used in form fields.  It also sets the <code>is-disabled</code> class so your app can style this state consistently in the UI.</p>

<p>Lastly, the directive also sets a <code>scope.disabledToggled</code> variable on the scope of the element.  This will be useful for elements which are not form elements and which do not prevent clicking just because their <code>disabled</code> attribute is set to <code>disabled</code>.  Instead, we&#8217;ll use this value to short-circuit the <code>ng-click</code> event itself.</p>

<p>So here it is in action on the template:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;disabledToggled || doClickyThings()&quot;</span>
</span><span class='line'>          <span class="na">disable-toggle</span> <span class="na">enable-evt=</span><span class="s">&quot;click:enable,photo:clear&quot;</span> <span class="na">disable-evt=</span><span class="s">&quot;photo:add&quot;</span><span class="nt">&gt;</span>Click Me<span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we&#8217;re setting custom events for disabling and enabling the button.  And note the <code>ng-click</code> value.  The <code>doClickyThings()</code> function will not get called if <code>disabledToggled</code> is true.</p>

<p>So, what do you think.  Is there an easier way to get this kind of functionality?  What could we do to make it better?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preload Route Data in Angular]]></title>
    <link href="http://jaketrent.com/post/preload-route-data-angular/"/>
    <updated>2013-08-13T08:10:00-06:00</updated>
    <id>http://jaketrent.com/post/preload-route-data-angular</id>
    <content type="html"><![CDATA[<p>It&#8217;s sometimes useful to be able to preload or resolve data previous to an Angular view being displayed.  Such was the case recently for our current user object.  It simplified a lot of things in the app to have the guarantee of a loaded current user previous to displaying pages.  The Angular router has a great mechanism built in to do just this sort of thing, called <code>resolve</code>.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="Angularjs" /></p>

<!--more-->


<h2>Current User</h2>

<p>For the example, our current user object is super simple.  Just pretend that it holds all of the relevant details of a user.  These details are useful for displaying various things in the app that need the context of who the currently logged-in user is.</p>

<figure class='code'><figcaption><span>current-user.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;app.services&#39;</span><span class="p">).</span><span class="nx">factory</span> <span class="s">&#39;CurrentUser&#39;</span><span class="p">,</span> <span class="nf">($http, User) -&gt;</span>
</span><span class='line'>    <span class="k">class</span> <span class="nx">CurrentUser</span> <span class="k">extends</span> <span class="nx">User</span>
</span><span class='line'>      <span class="nv">fetch: </span><span class="o">-&gt;</span>
</span><span class='line'>        <span class="c1"># do $http things to request user data</span>
</span><span class='line'>      <span class="nv">isLoaded: </span><span class="o">-&gt;</span>
</span><span class='line'>        <span class="c1"># true if fetched and ready to go</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">new</span> <span class="nx">CurrentUser</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that for our app there is just one <code>CurrentUser</code> object, a singleton, because we return a single instance from our factory, not a class.</p>

<h2>Router</h2>

<p>The Angular router is used for client-side routing of urls.  Our angular app is called <code>app</code>.  We setup some angular submodules to hold config, services, and controllers.</p>

<p>Let&#8217;s say that we have a home page and a profile page for our example.</p>

<p>Each route can be configured with a <code>resolve</code> object.  The key of that object is the name of a local variable and the value is a function which returns a promise.  The resolution value of the promise is the data you want before the route executes.After all the promises are resolved, the route is free to switch and execute.  Until then, each unresolved promise will block the route from executing.</p>

<figure class='code'><figcaption><span>app.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span> <span class="s">&#39;app.config&#39;</span><span class="p">,</span> <span class="p">[]</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span> <span class="s">&#39;app.services&#39;</span><span class="p">,</span> <span class="p">[]</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span> <span class="s">&#39;app.controllers&#39;</span><span class="p">,</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;app&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;app.config&#39;</span><span class="p">,</span> <span class="s">&#39;app.services&#39;</span><span class="p">,</span> <span class="s">&#39;app.controllers&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;app&#39;</span><span class="p">).</span><span class="nx">config</span> <span class="nf">($routeProvider, $locationProvider, resolves) -&gt;</span>
</span><span class='line'>  <span class="nx">$locationProvider</span><span class="p">.</span><span class="nx">html5Mode</span> <span class="kc">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$routeProvider</span>
</span><span class='line'>    <span class="p">.</span><span class="k">when</span> <span class="s">&#39;/&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nv">controller: </span><span class="s">&#39;HomeCtrl&#39;</span>
</span><span class='line'>      <span class="nv">templateUrl: </span><span class="s">&#39;/templates/home.html&#39;</span>
</span><span class='line'>    <span class="p">.</span><span class="k">when</span> <span class="s">&#39;/profile&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nv">controller: </span><span class="s">&#39;ProfileCtrl&#39;</span>
</span><span class='line'>      <span class="nv">templateUrl: </span><span class="s">&#39;/templates/profile.html&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;app&#39;</span><span class="p">).</span><span class="nx">run</span> <span class="nf">($route, resolves)-&gt;</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">r</span> <span class="k">in</span> <span class="nx">$route</span><span class="p">.</span><span class="nx">routes</span>
</span><span class='line'>    <span class="nx">r</span><span class="p">.</span><span class="nx">resolve</span> <span class="o">?=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="nv">r.resolve.CurrentUser = </span><span class="nx">resolves</span><span class="p">.</span><span class="nx">getCurrentUser</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>run</code> method is essentially the Angular app&#8217;s main method, starting the program.  I want to ensure the current user is loaded for each route.  In this case, instead of putting a <code>resolve</code> config on each route, I&#8217;m looping through all routes after their initial definition and adding the <code>CurrentUser: resolves.getCurrentUser</code> config.</p>

<h2>Resolve Function</h2>

<p>In our resolve function we setup our own promise via the <code>$q</code> service.  We check to see if our singleton <code>CurrentUser</code> is already loaded.  If it&#8217;s not, we fetch it.  If it has been fetched once already, we resolve the promise with the value that&#8217;s already available.</p>

<figure class='code'><figcaption><span>resolves.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;app.config&#39;</span><span class="p">).</span><span class="nx">constant</span> <span class="s">&#39;resolves&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">getCurrentUser: </span><span class="nf">($q, CurrentUser) -&gt;</span>
</span><span class='line'>    <span class="nv">defer = </span><span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">not</span> <span class="nx">CurrentUser</span><span class="p">.</span><span class="nx">isLoaded</span><span class="p">()</span>
</span><span class='line'>      <span class="nv">req = </span><span class="nx">CurrentUser</span><span class="p">.</span><span class="nx">fetch</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">req</span><span class="p">.</span><span class="nx">success</span> <span class="o">-&gt;</span> <span class="nx">defer</span><span class="p">.</span><span class="nx">resolve</span> <span class="nx">CurrentUser</span>
</span><span class='line'>      <span class="nx">req</span><span class="p">.</span><span class="nx">error</span> <span class="o">-&gt;</span> <span class="nx">defer</span><span class="p">.</span><span class="nx">reject</span><span class="p">()</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nx">defer</span><span class="p">.</span><span class="nx">resolve</span> <span class="nx">CurrentUser</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">defer</span><span class="p">.</span><span class="nx">promise</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Application Controller</h2>

<p>Now that we have the <code>CurrentUser</code> guaranteed to be resolved (fetched and returned) by the time we enter all routes, we need to grab the value of <code>CurrentUser</code> and put it in <code>$scope</code> where our program would normally pick up and start using variables.</p>

<figure class='code'><figcaption><span>app-ctrl.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;app.controllers&#39;</span><span class="p">).</span><span class="nx">controller</span> <span class="s">&#39;AppCtrl&#39;</span><span class="p">,</span> <span class="nf">($scope) -&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">$on</span> <span class="s">&#39;$routeChangeSuccess&#39;</span><span class="p">,</span> <span class="nf">(next, current) -&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">current</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">CurrentUser</span><span class="o">?</span>
</span><span class='line'>      <span class="nv">$scope.currentUser = </span><span class="nx">current</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">CurrentUser</span>
</span></code></pre></td></tr></table></div></figure>


<p>We listen the Angular-provided event when a route is successfully entered: <code>$routeChangeSuccess</code>.  The value we care about is available on the <code>current</code> route&#8217;s <code>locals</code> object, placed there magically by the resolve function.</p>

<h2>When to Use</h2>

<p>There are a few bits to piece together to make this happen.  It might be simpler than other solutions or make more sense for you in your app if you need something(s) loaded previous to executing on a route.</p>

<p>I would definitely use this feature judiciously, as it seems to eat away at one of the advantages of a client-side app in the first place: asynchronous loading.  We&#8217;8re blocking the whole app from going forward when we&#8217;re in the process of resolving.  That boundary used to be on the edge of the server, building up the page before it was servable to the client.  Now, on a web client, we have multiple requests that can happen in parallel and we can render bits as they&#8217;re available &#8211; important bits first and so on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How MarkLogic Made Me a Better Programmer]]></title>
    <link href="http://jaketrent.com/post/how-marklogic-made-me-better-programmer/"/>
    <updated>2013-08-08T09:01:00-06:00</updated>
    <id>http://jaketrent.com/post/how-marklogic-made-me-better-programmer</id>
    <content type="html"><![CDATA[<p>I started programming on the <a href="http://www.marklogic.com/">MarkLogic</a> platform in 2010.  It was a very new experience for me.  I don&#8217;t program in it these days, but I still think back on the experiences I had with MarkLogic and in general believe that they made me a better programmer.  Here&#8217;s how.</p>

<p><img src="http://i.imgur.com/32OKIUH.png" alt="MarkLogic" /></p>

<!--more-->


<h2>First Functional Language</h2>

<p>MarkLogic is a proprietary platform that uses the XQuery language.  This is MarkLogic-flavor XQuery, augmenting the vanilla.  There are first-level functions.  There are sequences.  There are no side effects.  There is no state outside of function scope.</p>

<p>This language proved to require a new way of thinking.  I came from coding Java at the time.  I was without my <code>StringBuilder</code> class.  I remember the first time I tried to build up a string dynamically in code.  There is no such thing as throwing substrings in a builder or a buffer and building it up (no side effects).  Of course, there is a way to build a dynamic string; it is just different.  I became a lot more comfortable with recursive methods for solving problems.</p>

<p>As a side note, the language isn&#8217;t 100% functional.  For instance, there actually are side effects.  For example, the <a href="https://docs.marklogic.com/map"><code>map</code></a> api sets values on preexisting maps and returns the same map.  And the terrible <a href="https://docs.marklogic.com/xdmp:set"><code>xmdp:set</code></a> will bypass all of the functional sauce and set whatever whenever and is to be avoided.</p>

<h2>First NoSql Store</h2>

<p>MarkLogic has its own database built in.  It&#8217;s a document store.  It was the first place I implemented real NoSQL work and pushed it to production.  Here, I learned document design.  I practiced optimizing for reads or writes depending on the use case.  The experience helped me think beyond well-formed tables and embrace the messier data that is more true to life.  I was thinking more in terms of search engines and less in terms of spreadsheets.</p>

<p>Coding in MarkLogic utilizes XQuery which encompasses XPath.  Given that much X technology, the data format was almost assuredly going to be XML.  And so it is.  Every document stored in MarkLogic is XML.  I became a lot better at tree traversal as a result.</p>

<h2>Lack of Libraries</h2>

<p>The MarkLogic ecosystem at the time was really lacking.  I don&#8217;t follow its current state, but it&#8217;s probably safe to say that there is less going on here than in the world of Node or Ruby.  You won&#8217;t find a MarkLogic package manager a la <code>npm</code> or <code>gem</code>.  You probably won&#8217;t even find a library to reuse.  There are literally just a handful of libraries that are shared widely in my experience, and these are lower-level utility libraries of the flavor of UnderscoreJs.</p>

<p>This meant that if I needed code, I was going to write it.  So, I wrote a lot of code.  I learned to produce everything I needed and not rely on any 3rd party code.</p>

<p>This was the same when it came to utilities on the platform.  For instance, there was not a unit test library at the time I started into XQuery.  There was a framework that was written in Java that would exercise XQuery code, but that didn&#8217;t fit my environment needs very well and felt odd, so we wrote our own unit testing framework a la Junit or Jasmine, called <a href="https://github.com/irinc/xqtest">XqTest</a>.  We finally open sourced it (also rare for the MarkLogic ecosystem), but by then several similar frameworks had been created.</p>

<h2>Lack of Help</h2>

<p>MarkLogic is a proprietary system.  There aren&#8217;t many people using it, but those that do license it from the MarkLogic company.  They also pay for support.  Most of the expertise I encountered in MarkLogic was either a visiting consultant from MarkLogic, an engineer I met at the one MarkLogic conference, MarkLogic world, or a fellow in-house engineer.</p>

<p>This means that when you go to StackOverflow, there is a woeful lack of good solutions for common problems.  So, I learned to do a lot of debugging by myself and just keep on keeping on until I figured out the problem.  We had to write almost all of our code, so I was mostly reading my own code, which is easier.  Google wasn&#8217;t a lot of help, and that&#8217;s pretty odd in this age of programming.  Upside was that once I wrote the web article about the subject, I was the first-page <a href="http://rockycode.com/blog/tech/marklogic/">result</a>.</p>

<h2>Playing Ops</h2>

<p>MarkLogic has its own web server as well, built into the monolith MarkLogic server product.  It was a new beast for the ops guys I worked with.  I was as new to it as them, thus I got to play ops a lot more than I would have on our older, more traditional systems.  I got to help keep the thing running.</p>

<p>I also got to help keep the apps tuned.  It turns out that MarkLogic can be either really performant or really <em>not</em> performant.  Often, I wrote the &#8220;not&#8221; way, and I had to help optimize (of course, via our in-house performance monitoring tools).</p>

<h2>The Experience</h2>

<p>I was excited to learn MarkLogic at the time.  It was something new.  I enjoy that.  New code, new team, new thinking.  It was a high-profile product.  It was really a good experience.</p>

<p>I felt like I became very productive on the platform and was able to produce quality and quantity code.  In the end, I chose to not do more more MarkLogic.  I was doing more heavy client-side apps.  The XML just became a stumbling block where Json is king.  The functional paradigm is cool.  I really like it.  But I really don&#8217;t like the XQuery language.  Its api is not very expressive, and its syntax requires a ton of typing.  MarkLogic is growing in its acceptance and use, but not at a huge pace.  It still seems like a niche product, used mostly in the publishing and defense industries.  It didn&#8217;t seem like a great investment to keep spending my golden dev years on the platform.</p>

<p> But for all the pros and cons of the platform and all the ups and downs of the experience, I feel like one of the net effects was that I became a better programmer in new, interesting ways.  For that, I&#8217;m grateful.  I&#8217;m glad I did it, and I&#8217;m glad to move on.  There are, after all, soooo many cool things to try in this age of software development.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember Dynamic Classes]]></title>
    <link href="http://jaketrent.com/post/ember-dynamic-classes/"/>
    <updated>2013-08-02T13:02:00-06:00</updated>
    <id>http://jaketrent.com/post/ember-dynamic-classes</id>
    <content type="html"><![CDATA[<p>In Ember, your state is separated from the UI inside models.  But, often you want the state of your models to be represented visually in the UI via dynamic class names.  Make it happen with <code>Ember.View</code>s.</p>

<p><img src="http://i.imgur.com/85v8PQP.png" alt="Dynamic Classes with Ember Views" /></p>

<!--more-->


<h2>Use an Ember.View</h2>

<p>A view will function as the translation layer between the state of your models and the DOM.  It will provide the logic to observe the properties within your model and expose it as a class name on the associated DOM element.</p>

<p>If I have a model with state:</p>

<figure class='code'><figcaption><span>my-model.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">App.MyModel = </span><span class="nx">App</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">hasSomeState: </span><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Use classNameBindings</h2>

<p>Based on that state, I want to add a <code>has-some-state</code> class to the UI if it&#8217;s true, and remove the class if it&#8217;s false.  The view might look like:</p>

<figure class='code'><figcaption><span>my-model-view.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">App.MyModelView = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="nv">classNameBindings: </span><span class="p">[</span><span class="s">&#39;hasSomeState&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="nv">hasSomeState: </span><span class="p">(</span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;content&#39;</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;hasSomeState&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">).</span><span class="nx">property</span><span class="p">(</span><span class="s">&#39;content.hasSomeState&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>hasSomeState</code> function will return a boolean has to whether or not the <code>has-some-state</code> class should be added to the element.</p>

<h2>Bind to Model Properties</h2>

<p>Now use the view in the template, being careful to match the binding of <code>content</code> so the property watching works:</p>

<figure class='code'><figcaption><span>template-fragment.jade</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'>App.MyModelView contentBinding=&quot;this.myModelInstance&quot;
</span></code></pre></td></tr></table></div></figure>


<p>In the example, make sure <code>myModelInstance</code> is available in the scope of your route/controller.</p>

<p>As your model&#8217;s <code>hasSomeState</code> value is changed internally with the <code>@set</code> function, the view will be notified that it needs to re-run the <code>hasSomeState</code> function, and the UI will update if needed.</p>

<p>What other methods do you utilize in Ember to get dynamic classes?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Style File Input]]></title>
    <link href="http://jaketrent.com/post/style-file-input/"/>
    <updated>2013-07-23T16:44:00-06:00</updated>
    <id>http://jaketrent.com/post/style-file-input</id>
    <content type="html"><![CDATA[<p>File input fields are notoriously painful to style.  Here are a few quick tips to that will save you some dead ends.</p>

<p><img src="http://i.imgur.com/sm1b2ok.jpg" alt="File input" /></p>

<!--more-->


<h2>The Problem with File Inputs</h2>

<p>File inputs are inconsistent to start with.  They differ even in their native form across all browsers.  They also have internal elements that are not individually accessible, such as the &#8220;Browse&#8221; button.  They are also subject to more browser-imposed security constraints than input fields of other types.</p>

<p>Given these inherent problems/constraints, try to follow two basic rules:</p>

<ol>
<li>Don&#8217;t expect to make your file input look exactly like you&#8217;d like</li>
<li>Don&#8217;t trigger clicks on the file input</li>
</ol>


<h2>Styling the File Input</h2>

<p>Why is file input rule reasonable?  Shouldn&#8217;t you be able to match the UI design you desire?  Yes, on both counts.</p>

<p>Don&#8217;t style the file input to make it look like a photo upload button (or whatever you&#8217;re marking).  Instead, <strong>hide it</strong>.  And after you hide it, position it <strong>over</strong> another another element, such as a <code>div</code>, that you can style much more easily to look like the UI you envision.</p>

<p>Here is some example css on how you might accomplish this:</p>

<figure class='code'><figcaption><span>fileinput.jade</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nc">.file-wrapper</span>
</span><span class='line'>  <span class="nc">.file-input</span>(<span class="na">type=</span><span class="s">&quot;file&quot;</span>)
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>fileinput.styl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.file-wrapper</span>
</span><span class='line'>  <span class="na">position</span><span class="o">:</span> <span class="no">relative</span>
</span><span class='line'>  <span class="na">overflow</span><span class="o">:</span> <span class="no">hidden</span>
</span><span class='line'>  <span class="na">cursor</span><span class="o">:</span> <span class="no">pointer</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.file-input</span>
</span><span class='line'>  <span class="na">position</span><span class="o">:</span> <span class="no">absolute</span>
</span><span class='line'>  <span class="na">top</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="na">right</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="na">z-index</span><span class="o">:</span> <span class="mi">2</span>
</span><span class='line'>  <span class="na">opacity</span><span class="o">:</span> <span class="mi">0</span><span class="mf">.01</span>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">100</span><span class="kt">%</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="mi">150</span><span class="kt">px</span>
</span></code></pre></td></tr></table></div></figure>


<p>The add additional styles to <code>.file-wrapper</code> to make it look as you wish.  Remember any vendor prefixes you may/not need for <code>opacity</code>, etc.</p>

<h2>Handling Double Clicks in IE</h2>

<p>It&#8217;s important to position the <code>.file-input</code> as <code>right: 0</code>.  Otherwise, in IE the file input field will not activate on a single click.  Instead it&#8217;ll need a double click.  This is because in IE clicking on the text box portion of the file input requires a double click.  Clicking on the browse button requires just a single click.  And the browse button is on the right side of the file input field in IE.  Finally, make the <code>font-size</code> big enough that you&#8217;re guaranteed to cover the <code>.file-wrapper</code> area.</p>

<h2>Handling Clicks</h2>

<p>Now you don&#8217;t need to have JavaScript to trigger click events on the file input field.  You will just be relying on direct user interaction to click the native file input field.  This will make <a href="http://stackoverflow.com/questions/210643/in-javascript-can-i-make-a-click-event-fire-programmatically-for-a-file-input">some browsers</a>, like Chrome and Firefox, happy.  This is because these browsers won&#8217;t hold file values given to the input programmatically as a security precaution.  Oddly, IE, which sometimes balks more about innane security constraints like this, is ok.</p>

<p>So, what do you think?  Does this work for you?  Anything else to make the solution more solid?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So Good They Can't Ignore You]]></title>
    <link href="http://jaketrent.com/post/so-good-they-cant-ignore-you/"/>
    <updated>2013-07-17T22:35:00-06:00</updated>
    <id>http://jaketrent.com/post/so-good-they-cant-ignore-you</id>
    <content type="html"><![CDATA[<p>&#8220;<a href="http://www.amazon.com/gp/product/1455509124/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1455509124&amp;linkCode=as2&amp;tag=jaktre-20">So Good They Can&#8217;t Ignore You</a>&#8221; is written by Cal Newport.  He rejects the idea of following your passion in order to find the work you love.  Instead, he suggests the accumulation of career capital.</p>

<p><img src="http://i.imgur.com/VWjzM2c.jpg" alt="So good" /></p>

<!--more-->


<p>What follows are the main sections or rules of the book with a few of my takeaways each.  The man is obviously steeped in science.  The book reads like laws of physics.  Well, not quite that dry, but just as precise and well organized.  I love reading him say, &#8220;In which I argue&#8230;&#8221;  Sounds very professorish.</p>

<h2>The Passion Hypothesis</h2>

<p>Isn&#8217;t it true that when someone is trying to determine a career path or job, we often ask questions like, &#8220;Well, what do you want to do?&#8221; And give advice like, &#8220;Do something you&#8217;re passionate about.&#8221;  The author gives a few individual profiles of people who followed this advice without key ingredients and were, in the end, disappointed by the result.  He also points out a whole class of lifestyle designers who, in their delusion, <a href="http://jaketrent.com/post/quitter-review/">quit their day job</a> to live on their yet-to-be-created passive Internet income and aren&#8217;t able to make it.</p>

<h2>Career Capital</h2>

<p>(In which) Newport argues that &#8220;working right trumps finding the right work.&#8221;  Essentially, you worry more about what you are producing and the value you&#8217;re giving (craftsman mindset) instead of whether or not it fits some passion you&#8217;re predisposed to.</p>

<p>Career capital is essentially the collection of rare and valuable skills that you possess that the market is willing to pay for.  Without this, you will likely not enjoy your work.  With this, your ability to define and magnify your work is much greater.</p>

<p>The title of the book comes from Steve Martin, who remarked in an interview that aspiring comics didn&#8217;t like his advice.  They wanted quick fix answers like, &#8220;How do I get an audition?&#8221;  But he would always advise, &#8220;Be so good they can&#8217;t ignore you.&#8221;  And most likely, judging by your name recognition of Monseiur Martin, he has worked himself to that level.</p>

<h2>Autonomy</h2>

<p>It is autonomy, not passion, that is most likely to help you love your work.  The amount of control you have in a job is likely to influence your liking it.  The more control, the better.  But, it doesn&#8217;t come immediately.  If you don&#8217;t have the career capital, you can&#8217;t purchase it.  And if you&#8217;re offered it, while you know you probably don&#8217;t have the capital, it&#8217;s probably a mirage.  But if you&#8217;re so good they can&#8217;t ignore you, your ability to set terms and influence your environment is real.</p>

<h2>Importance of a Mission</h2>

<p>&#8220;So good they can&#8217;t ignore you&#8221; hardly sounds like your average work.  Instead it&#8217;s likely that you&#8217;re attached to a catchy mission.  You have a vision that people want to share.  You do work that people like to talk about.  Your name is known by peers and leaders in your industry.  You have made it to the edge of your field.  You are pushing boundaries, and are creating new fields, often mixtures of those you have expertise within.</p>

<p>These stages of achievement that push your career and humanity forward are significant.  Little steps or bets need to be made strategically and intentionally in order to create a habit of advancing your knowledge and skill.  The sheer investment required to get to these levels is immense.</p>

<h2>Conclusions</h2>

<p>Newport&#8217;s book was worth the read.  In fact, I recommend it to anyone about to enter college, desiring to start in a new field, wanting to scratch an entrepreneurial itch, or thinking of changing jobs.</p>

<p>His advice is solid.  It&#8217;s more grounded and nuanced than the &#8220;follow your passion&#8221;, feel good propaganda.</p>

<p>The writing is a little dry.  It&#8217;s a short book at just over 200 small pages.  Still, it took me a bit to get through.  I wasn&#8217;t exactly glued to the pages.  But I do believe the advice is invaluable if it influences one to throw all their potential ability behind producing their best work and becoming their best worker.  It reads well, but sometimes feels like a textbook.  Perfect for all that intentional learning we all want to do, right?</p>

<p>Most importantly, it inspired me to be so good they can&#8217;t ignore me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Namespacing Angular Controller Attributes]]></title>
    <link href="http://jaketrent.com/post/namespacing-angular-controller-attributes/"/>
    <updated>2013-07-10T18:17:00-06:00</updated>
    <id>http://jaketrent.com/post/namespacing-angular-controller-attributes</id>
    <content type="html"><![CDATA[<p>Usually attributes of your Angular controllers are not namespaced.  But you can namespace them.  But you might not want to.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="AngularJs controller namespacing" /></p>

<!--more-->


<h2>Angular Controllers Usually Attach Attributes to Scope</h2>

<p>Usually attributes in an Angular controller, such as functions and variables, are attached to the <code>$scope</code> object.  That looks like this:</p>

<figure class='code'><figcaption><span>my-ctrl.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;myapp&#39;</span><span class="p">).</span><span class="nx">controller</span> <span class="s">&#39;MyCtrl&#39;</span><span class="p">,</span> <span class="nf">($scope) -&gt;</span>
</span><span class='line'>  <span class="nv">$scope.myVar = </span><span class="s">&#39;myVal&#39;</span>
</span><span class='line'>  <span class="nv">$scope.myFn = </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&#39;does stuff&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then in my template I don&#8217;t know, nor do I need to know, where the attribute comes from.  I just reference it:</p>

<figure class='code'><figcaption><span>my-app.jade</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'>html(ng-app=&quot;myapp&quot;)
</span><span class='line'>  body(ng-controller=&quot;MyCtrl&quot;)
</span><span class='line'>    h1 My Var: 
</span><span class='line'>    button(ng-click=&quot;myFun()&quot;) Does Stuff
</span></code></pre></td></tr></table></div></figure>


<h2>Namespaced Angular Controller Attributes</h2>

<p>In this simple example, this is no big deal.  But as your app grows in complexity with many, nested controllers and templates, it can become difficult to read the code.  If you have common function names, it might be hard to tell which controller&#8217;s function is referenced in your templates.  To make this less of a problem and the code more clear, you might namespace your controller attributes in the template.</p>

<p>To do this, you can write your controllers to attach attributes to the controller instead of scope and then put the controller itself on scope.  That looks like this:</p>

<figure class='code'><figcaption><span>my-ctrl.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;myapp&#39;</span><span class="p">).</span><span class="nx">controller</span> <span class="s">&#39;MyCtrl&#39;</span><span class="p">,</span> <span class="nf">($scope) -&gt;</span>
</span><span class='line'>  <span class="vi">@myVar = </span><span class="s">&#39;myVal&#39;</span>
</span><span class='line'>  <span class="vi">@myFn = </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&#39;does stuff&#39;</span>
</span><span class='line'>  <span class="nv">$scope.MyCtrl = </span><span class="nx">@</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then your template changes to look like this:</p>

<figure class='code'><figcaption><span>my-app.jade</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'>html(ng-app=&quot;myapp&quot;)
</span><span class='line'>  body(ng-controller=&quot;MyCtrl&quot;)
</span><span class='line'>    h1 My Var: 
</span><span class='line'>    button(ng-click=&quot;MyCtrl.myFun()&quot;) Does Stuff
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s kind of nice for the reasons stated above.  I saw this strategy referenced on the Interwebs at one point and thought it seemed like a good idea.</p>

<h2>Why You Might Avoid This</h2>

<p>Maybe you love the idea.  Maybe you don&#8217;t.  I thought I did.  I have been writing controllers this way for a while.  Now I don&#8217;t.  Here&#8217;s why:</p>

<h3>1. It Makes Templates Less Reusable</h3>

<p>It&#8217;s quite probable that I&#8217;ll have templates that I don&#8217;t want permanently attached to a specific controller.  An example I ran into recently was on a profile page.  I had two pages to show profiles: one for my profile and one for an arbitrary person in the system.  They looked the same in the UI.  They had the same basic functions.  But the source of data for the variables and the implementation of the functions was different in the two scenarios.  Thus, I had to refactor to remove the namespacing to be able to reuse the template across pages.</p>

<h3>2. It&#8217;s More Typing</h3>

<p>It&#8217;s silly.  It adds up.  The less superfluous typing I can do, the more I consider that solution.</p>

<h3>3. The Creators Don&#8217;t Do It</h3>

<p>I haven&#8217;t seen this strategy featured in official tutorials, guides, or API examples.  Not that the Angular d00ds have all the ideas or do everything right &#8211; it just isn&#8217;t a pattern I see widely accepted or used.</p>

<p>These days, I don&#8217;t namespace my controller attributes, and I don&#8217;t recommend it.</p>

<p>So what do you think?  Do you write your controllers this way?  Good idea?  Bad idea?  What are some alternative methods you&#8217;ve found to balance template reuse with readability?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Behavior of CoffeeScript Fat Arrow]]></title>
    <link href="http://jaketrent.com/post/behavior-of-coffeescript-fat-arrow/"/>
    <updated>2013-07-01T07:39:00-06:00</updated>
    <id>http://jaketrent.com/post/behavior-of-coffeescript-fat-arrow</id>
    <content type="html"><![CDATA[<p>In CoffeeScript there are two different types of arrows for defining functions:  arrow (<code>-&gt;</code>) and fat arrow or hash rocket (<code>=&gt;</code>).  Usually, you&#8217;ll use the regular arrow.  But sometimes you&#8217;ll want the special behavior of the fat arrow.</p>

<p><img src="http://i.imgur.com/nGd04zX.jpg" alt="CoffeeScript fat arrow" /></p>

<!--more-->


<h2>Function Binding</h2>

<p>In JavaScript, the keyword <code>this</code> within a function refers to the thing that the function is attached to.  Since functions can be invoked in various ways in an average application, what <code>this</code> actually references will change.</p>

<p>For instance, if a function is invoked as a callback in an event handler, <code>this</code> within that handler will likely reference <code>window</code> in JavaScript running within a web browser.  Often, this is not the desired reference.</p>

<p>The solution in vanilla JavaScript is to save a reference to the context the function is defined within and then use that reference in lieu of the <code>this</code> keyword.  My favorite name to save the <code>this</code> reference into is called <code>self</code>.  In JavaScript, that might look like:</p>

<figure class='code'><figcaption><span>manual-reference.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">myVal</span> <span class="o">=</span> <span class="s2">&quot;my val&quot;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myFn</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">myVal</span><span class="p">);</span> <span class="c1">// will print &quot;my val&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>CoffeeScript Function Binding</h2>

<p>CoffeeScript understands this basic need and makes the reference saving even easier.  When you use the fat arrow, or hash rocket, it will perform function binding.  It uses a variable called <code>_this</code> automatically.</p>

<h3>CoffeeScript Binding Rules</h3>

<ol>
<li>When a fat arrow is used to bind a function, a <code>_this</code> reference is saved in the same context as the function that was declared.</li>
<li>When properties of <code>this</code> are accessed inside the bound function, they will use the saved <code>_this</code> reference (e.g., <code>@myVal</code> would compile to <code>_this.myVal</code>).</li>
<li>When fat arrows are used to bind functions nested within bound functions, the <code>_this</code> reference from the top-level bound function context is used in the nested bound functions.</li>
<li>The deepest non-bound function context will be used to save a <code>_this</code> reference when a bound function is declared.</li>
</ol>


<h2>When to use Fat Arrow</h2>

<p>Given that, here are the every day rules on when to use the fat arrow:</p>

<ol>
<li>If the context of <code>this</code> in you function could change based on how it was invoked but properties of <code>this</code> need to always reference the context where the function was created, declare the function with a fat arrow.</li>
<li>If nested functions exhibit the same need as in rule #1, declare them with the fat arrow.</li>
<li>Don&#8217;t bind, then not bind, then bind again in nested functions.  The inner binding will clobber the <code>_this</code> reference and will likely not be what you expect in the outer context (see the last example below).</li>
</ol>


<h2>A Swirl of Examples</h2>

<p>Here are a bunch of examples of bound and non-bound functions.  The first code snippet is the CoffeeScript source.  The second code snippet is the compiled JavaScript.</p>

<h3>No Bound Functions</h3>

<p>Just regular CoffeeScript function declarations.</p>

<figure class='code'><figcaption><span>non-bound.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">myVal: </span><span class="s">&#39;my val&#39;</span>
</span><span class='line'><span class="nv">myNonBoundFn: </span><span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">@myVal</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>non-bound.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">({</span>
</span><span class='line'>  <span class="nx">myVal</span><span class="o">:</span> <span class="s1">&#39;my val&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">myNonBoundFn</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">myVal</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Bound Function</h3>

<p>Introduced the fat arrow</p>

<figure class='code'><figcaption><span>bound.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">myVal: </span><span class="s">&#39;my val&#39;</span>
</span><span class='line'><span class="nv">myBoundFn: </span><span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">@myVal</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>bound.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">({</span>
</span><span class='line'>  <span class="nx">myVal</span><span class="o">:</span> <span class="s1">&#39;my val&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">myBoundFn</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">_this</span><span class="p">.</span><span class="nx">myVal</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Bound, Non-bound Inner Function</h3>

<p>Notice the inner function is not bound, and defaults back to just referencing <code>this</code>.</p>

<figure class='code'><figcaption><span>non-bound-inner.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">myVal: </span><span class="s">&#39;my val&#39;</span>
</span><span class='line'><span class="nv">myBoundFn: </span><span class="o">=&gt;</span>
</span><span class='line'>  <span class="nv">myInnerNonBoundFn = </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">@myVal</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>non-bound-inner.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">({</span>
</span><span class='line'>  <span class="nx">myVal</span><span class="o">:</span> <span class="s1">&#39;my val&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">myBoundFn</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">myInnerNonBoundFn</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">myInnerNonBoundFn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">myVal</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Bound Within Bound Functions</h3>

<p>Inner bound function uses top-level <code>_this</code>.</p>

<figure class='code'><figcaption><span>bound-in-bound.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">myVal: </span><span class="s">&#39;my val&#39;</span>
</span><span class='line'><span class="nv">myBoundFn: </span><span class="o">=&gt;</span>
</span><span class='line'>  <span class="nv">myInnerBoundFn = </span><span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">@myVal</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>bound-in-bound.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">({</span>
</span><span class='line'>  <span class="nx">myVal</span><span class="o">:</span> <span class="s1">&#39;my val&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">myBoundFn</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">myInnerBoundFn</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">myInnerBoundFn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">_this</span><span class="p">.</span><span class="nx">myVal</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Bound, Non-bound, then Bound Functions</h3>

<p>When <code>myVeryInnerBoundFn</code> uses the fat arrow inside of <code>myInnerNonBoundFn</code>, which does not, <code>_this = this</code> is generated again.  And when <code>myOtherBoundFn</code> is called, the <code>@what</code> property will be <code>undefined</code>.</p>

<figure class='code'><figcaption><span>clobber-this.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">myVal: </span><span class="s">&#39;my val&#39;</span>
</span><span class='line'><span class="nv">what: </span><span class="s">&#39;is this?&#39;</span>
</span><span class='line'><span class="nv">myBoundFn: </span><span class="o">=&gt;</span>
</span><span class='line'>  <span class="nv">myInnerNonBoundFn = </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">myVeryInnerBoundFn = </span><span class="o">=&gt;</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">@myVal</span>
</span><span class='line'><span class="nv">myOtherBoundFn: </span><span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">@what</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>clobber-this.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">({</span>
</span><span class='line'>  <span class="nx">myVal</span><span class="o">:</span> <span class="s1">&#39;my val&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">what</span><span class="o">:</span> <span class="s1">&#39;is this?&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">myBoundFn</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">myInnerNonBoundFn</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">myInnerNonBoundFn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">myVeryInnerBoundFn</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">myVeryInnerBoundFn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">_this</span><span class="p">.</span><span class="nx">myVal</span><span class="p">);</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">myOtherBoundFn</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">_this</span><span class="p">.</span><span class="nx">what</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
