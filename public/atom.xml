<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jake Trent]]></title>
  <link href="http://jaketrent.com/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2012-12-14T09:28:43-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Npm Install Local Files]]></title>
    <link href="http://jaketrent.com/post/npm-install-local-files/"/>
    <updated>2012-12-14T08:23:00-07:00</updated>
    <id>http://jaketrent.com/post/npm-install-local-files</id>
    <content type="html"><![CDATA[<p>Sometimes you&#8217;ll want to use <a href="http://npmjs.org/">npm</a> to install a package that doesn&#8217;t exist in the official npm registry for some reason.  Maybe you&#8217;re developing the package yourself.  Maybe it&#8217;s an internal use-only package. Maybe the package writer never published it.  Here are a few ways to install a local package with npm.</p>

<p><img src="http://i.imgur.com/xnDMm.jpg" alt="Node Package Manager" /></p>

<!--more-->


<h2>Link the Local Node Package</h2>

<p>If you&#8217;re developing a package locally, you&#8217;re likely making lots of changes to the source.  You don&#8217;t want to publish after each change in order to install this package as a dependency elsewhere.  Npm has provided the <a href="http://npmjs.org/doc/link.html">link</a> keyword.</p>

<p>This allows your put a global label on your package that tells your local npm cache about it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> &lt;pkg_dir&gt;;
</span><span class='line'>npm link;
</span></code></pre></td></tr></table></div></figure>


<p>And then go to the local project that you&#8217;re using the package in and point to the dependency by package name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> &lt;project_dir&gt;;
</span><span class='line'>npm link &lt;pkg_name&gt;;
</span></code></pre></td></tr></table></div></figure>


<p>Now you have symlinked a directory called <code>&lt;pkg_name&gt;</code> in the project&#8217;s node_modules directory.  Changes you make in your package will appear and be usable from within your project.</p>

<h2>Tarball the Local Node Package</h2>

<p>Npm can <a href="https://npmjs.org/doc/install.html">install</a> either a path or url to a local tarball.  To create a tarball that npm will like, you want to run npm <a href="https://npmjs.org/doc/pack.html">pack</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> &lt;pkg_dir&gt;;
</span><span class='line'>npm pack
</span></code></pre></td></tr></table></div></figure>


<p>This will create a tarball a la <code>&lt;pkg_name&gt;-&lt;pkg_ver&gt;.tgz</code>.  Now just store your new tarball somewhere like a local filesystem or server that is accessible when you run npm install on your dependant project.</p>

<p>You can ask for the tarball manually:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install http://localServer/my-pkg-0.0.1.tgz
</span></code></pre></td></tr></table></div></figure>


<p>Or put the reference in your package.json for later:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;dependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;my-pkg&quot;</span><span class="o">:</span> <span class="s2">&quot;http://localServer/my-pkg-0.0.1.tgz&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You probably have a node package that&#8217;s only available locally for a reason.  To guarantee that it&#8217;s not accidentally published to the world via the npm registry, add this beaut to your package.json:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="s2">&quot;private&quot;</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Replicate the Npm Registry</h2>

<p>If you&#8217;re going all out, like creating a corporate npm registry, you always have the option of <a href="https://npmjs.org/doc/registry.html#Can-I-run-my-own-private-registry">replicating</a> the Npm registry internally.  It&#8217;s CouchDb, and &#8217;<a href="http://www.imdb.com/title/tt0120029/quotes?qt=qt0192627">replication</a>&#8217; is its Chinese neighbor&#8217;s middle name.  You can publish your own packages there so they&#8217;re still private to your and your organization.  And you also get local references to the public packages.</p>

<h2>The Glory of Npm</h2>

<p>Npm is great.  The ability to install published or local packages is an example of its flexibility and usefulness.  What are the other ways that you&#8217;ve found to make non-public packages installable &#8211; for instance, that package that the writer just never bothered to publish to npm?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IntelliJ 12 Review]]></title>
    <link href="http://jaketrent.com/post/intellij-12-review/"/>
    <updated>2012-12-12T15:33:00-07:00</updated>
    <id>http://jaketrent.com/post/intellij-12-review</id>
    <content type="html"><![CDATA[<p>I&#8217;ve used IntelliJ since version 6.  Now we&#8217;re version 12.  It&#8217;s just gotten better.  Version 12 is definitely an incremental release.  There&#8217;s nothing too whiz bang here that I care about, but the quality overall is increased.</p>

<p><img src="http://i.imgur.com/RM3Q1.jpg" alt="IntelliJ 12" /></p>

<!--more-->


<h2>IntelliJ 12 New Core Features</h2>

<p>The highlights of the <a href="http://www.jetbrains.com/idea/whatsnew/index.html">&#8220;What&#8217;s New&#8221;</a> list include Java 8 support, Spring tools update, Play 2.0 support, and Android UI designer.  All positives, but not really things I care very deeply about and will probably never use.  There&#8217;s a bit more on the list, but there&#8217;s nothing that is a huge, &#8220;Now IntelliJ can do ______&#8221; item.</p>

<h2>IntelliJ 12 Quality of Life</h2>

<p>During my evaluation, however, I have been very pleased with the quality of life it has afforded me.  IntelliJ has always treated me very well in comparison to the competition.  IntelliJ 12 just makes that good experience a little bit sweeter.</p>

<h4>Darkula Theme</h4>

<p>This has to be inspired by the rise of <a href="http://www.sublimetext.com/">Sublime Text</a>, which has a dark theme as its default.  More and more devs I know are using Sublime extensively.  Overall, I like the look of the Darkula theme.  It&#8217;s a bit easier on the eyes.  The icons got a fun, retro overhaul.  In some cases, I&#8217;ve noticed things that my eyes have grown so accustomed to that they have ignored for some time.  It&#8217;s also taken a bit to get used to it and start to expect things and see them faster.  I find it interesting that soooo much of this release has been focused on this UI theme.</p>

<h4>Popup Dialogs are Faster</h4>

<p>It seems that when a non-main window is told to appear that it does so a bit quicker now.  Intellisense seems a bit more snappy, and the &#8220;recent files&#8221; switcher doesn&#8217;t lag as it seemed to in the past sometimes.  It&#8217;s fun, and it lets me go faster.</p>

<h4>Better OSX Shortcuts</h4>

<p>When I switched to OSX from Linux, I was immediately disappointed by the lack of keyboard shortcuts in comparison to Linux.  The most egregious omission was the lack of alt-* combos to press buttons in the UI via the keyboard.  Alt-p to engage the &#8216;push&#8217; button in the Git push dialog has been a long time coming.</p>

<p><img src="http://i.imgur.com/FYe1O.jpg" alt="P for Push" /></p>

<h4>Git Integration is better</h4>

<p>For performance and UI reasons, I would often just use Git on the command line instead of from within IntelliJ.  Now the Git integration is better than ever.  It seems waaaay fast.  I&#8217;m a little puzzled at <em>how</em> the git push could be so much faster in comparison to the previous version.</p>

<h4>Project Type Support</h4>

<p>Small thing, but I like the new &#8220;New Project&#8221; dialog.  It&#8217;s simplified and easier to navigate.  It is fast and simple.  It doesn&#8217;t take you through options that don&#8217;t apply.  I&#8217;m in that dialog a lot, and I like the change.</p>

<h2>The Right Direction</h2>

<p>Really, there&#8217;s not a ton new here.  It&#8217;s such a solid tool to start.  It&#8217;s where I spend most of my day though, so even incremental quality improvement is welcome.</p>

<p>Let&#8217;s see, what&#8217;s not there that I wish for?:</p>

<ul>
<li>Live debug the JavaScript running in Chrome (not just Firefox)</li>
<li>Run and debug Grunt and other Node-based cli apps</li>
</ul>


<p>Does IntelliJ already do those things?  Probably, and I just don&#8217;t yet know how to bend it to my will.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Impressions of Grunt]]></title>
    <link href="http://jaketrent.com/post/impressions-of-grunt/"/>
    <updated>2012-12-12T14:24:00-07:00</updated>
    <id>http://jaketrent.com/post/impressions-of-grunt</id>
    <content type="html"><![CDATA[<p>Grunt is a great build tool for JavaScript projects.  It comes with a lot out of the box, and you can write your own custom tasks.  It joins a world fraught with many, glorious build tool options.  So, a bit has been made of the decision to have Grunt join the fray.  Perhaps most prominently, Miller Medeiros had <a href="http://blog.millermedeiros.com/node-js-ant-grunt-and-other-build-tools/">a few problems with Grunt</a>.  And in response, Ben Alman gave his reasoning on <a href="http://benalman.com/news/2012/08/why-grunt/">why he wrote it</a>.  Having used it for a bit, I have a few impressions.  Here they are so far.</p>

<p><img src="http://i.imgur.com/4773D.jpg" alt="Grunt impressions" /></p>

<!--more-->


<h2>Community</h2>

<p>There will probably never be any build tool that gains more mass than what already exists as just a bash or a make script.  And really nothing needs to.  Healthy-sized communities have been built up around different build tool options where those that used it liked the style, it fit their platform, and they found it useful.  Grunt feels like it&#8217;s on track to become a highlight build tool in the Js community.  There are many using it <a href="https://github.com/gruntjs/gruntjs.com/issues/9">already</a> and more <a href="https://github.com/angular/angular.js/pull/1544">on the way</a>.</p>

<h2>Declarative vs. Procedural</h2>

<p>Which style of project configuration is better?  Declarative or procedural?  Wars have been started with lesser words.  I don&#8217;t feel like it&#8217;s a question of better.  It&#8217;s just a matter of style.  There are pros and cons.  Where you do the many of same things as everyone else, declarative works just fine.  When you have to do new, original things, you have to write code to support that.  You might wrap that in a grunt plugin to encapsulate it then write declarative options to feed it.  But, you still own the plugin implementation.</p>

<h2>JavaScript Build for JavaScript Project</h2>

<p>Maybe obviously, the sweet spot for Grunt is building JavaScript projects.  Js projects are becoming more complex all the time.  Often, complementary build tools are lacking.  There are other projects that are named <a href="https://github.com/280north/jake">awesomely</a>, though they are mostly dead.  Grunt fills a gap for JavaScript projects.  It seems that the advantages of writing client <em>and</em> server js apply here as well:  Js build tools take advantage of the Js (Node) environment.  You can use your Js skills here.  The context switching is diminished.</p>

<h2>Synchronous Exec for JavaScript Build</h2>

<p>One of the main sellings points for NodeJs is that it is built from the ground up for using in asychronous environments and problems.  Build scripts aren&#8217;t generally asynchronous.  Usually, it&#8217;s quite the opposite.  Step 1 leads to step 2 and so on.  You can&#8217;t skip, and future steps rely upon completion of the previous.</p>

<p>So, you can try <a href="http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback">child_process.exec</a>, but it&#8217;s asynchronous.  So, make it synchronous and try <a href="https://github.com/jeremyfa/node-exec-sync">exec-sync</a>.  But it has <a href="https://github.com/jeremyfa/node-exec-sync/issues/8">problems</a> vanilla exec doesn&#8217;t.  The best synchronous exec for JavaScript I&#8217;ve found so far is <a href="http://documentup.com/arturadib/shelljs#command-reference/exec-command-options-callback">shelljs.exec</a>.</p>

<p>In this way, NodeJs/Grunt seems like an awkward fit as a build tool.</p>

<h2>Shell Commands in Grunt</h2>

<p>When I end up doing custom things in my Grunt build, it tends to be that I&#8217;m trying to get to the shell and execute something.  If I have a shell script, I can just execute it with <a href="https://github.com/jharding/grunt-exec">grunt-exec</a>.  If I&#8217;m trying to keep all logic in Grunt, I&#8217;ll use <a href="https://github.com/arturadib/shelljs">shelljs</a>.  The thing that gets me with both of these solutions is that I&#8217;m in Node, constantly trying to get out of Node to run something in the shell, like a git command.  So my code ends up looking like lots of these:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">shell</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;shelljs&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nx">writeln</span><span class="p">(</span><span class="s1">&#39;Cloning repo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">shell</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="s1">&#39;git clone &#39;</span> <span class="o">+</span> <span class="nx">opts</span><span class="p">.</span><span class="nx">repo</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&#8217;s a bit of cruft to recreate bash in Node.  It&#8217;s not as clean and does not read as well as a vanilla shell script might:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;Cloning repo&#39;</span>;
</span><span class='line'>git clone <span class="nv">$repo</span>
</span></code></pre></td></tr></table></div></figure>


<h2>New APIs</h2>

<p>Grunt does quite a bit for you.  It&#8217;s now up to me to go figure out all the cool stuff it can do.  Once I found the <a href="https://github.com/gruntjs/grunt/wiki/grunt.file">file API</a>, I was excited and retained a touch of the nagging feeling I just mentioned related to shell commands.</p>

<h2>JavaScript Build Scripts are Cross-OS Compatible</h2>

<p>One of the main reasons you would choose to write JavaScript for a build script instead of a .sh or a .bat file is that you can use it multiple OS&#8217;es.  Node <a href="https://github.com/jeremyfa/node-exec-sync/pull/6">should</a> :) execute the same on each platform it supports &#8211; essentially Windows, Linux, and Osx.</p>

<h2>Builds Scripts as Plugins</h2>

<p>When you come up with a new Grunt task that is obviously useful for someone else out in the world, you&#8217;ll likely generalize it and publish it to npm.  There already a good number of <a href="https://npmjs.org/browse/keyword/gruntplugin">&#8216;gruntplugin&#8217;</a>s out there.  This is a great sharing mechanism that not every build tool environment will give you.  I&#8217;m grateful for the good Grunt plugins shared out there.</p>

<h2>Grunt Configuration</h2>

<p>Grunt, by default, has a declarative configuration style.  This means lots of json, often long and nested.  It&#8217;s all organized by task names, so it&#8217;s fairly easy to find stuff.  But the bottom line is that there is a fair bit to navigate in the average grunt file.</p>

<h2>Breaking Changes in Grunt API</h2>

<p>As of this writing, Grunt 0.4 is on the verge of release.  By all accounts it will make things better, and it looks promising.  They have a mostly-straightforward <a href="https://github.com/gruntjs/grunt/wiki/Upgrading-from-0.3-to-0.4">migration guide</a>.  The thing that has been the most painful is the lack of backward compatibility.  My current, working builds rely on Grunt plugins that are not 0.4 compliant, so I have two choices:  Help each of those plugins upgrade or wait until 0.4 reaches critical mass &#8211; ie, most worthy plugins are upgraded.</p>

<h2>Grunt is Fast</h2>

<p>Grunt is faster than Pumba being chased by a hyena.  Previous to Grunt, we were using Maven to do similar tasks.  Now we do more (Grunt has made it easy for us to incorporate more good practices &#8211; eg, linting), and the build is done is a serious fraction of the time.  The speed is super dependant on what operations the build actually performs, but my impression for my builds is that Grunt is fast.</p>

<h2>The Grunt Logo</h2>

<p>Yes, it&#8217;s superficial, and it&#8217;s even a lame reason, but I like Grunt because they have a great logo.  Wild boar for logo?  Instant win.  (That is what it is, right?)</p>

<p>So, is Grunt helping you out?  What are your impressions?  Or are you using something else entirely?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RequireJs Paths in Prod, Test, and Build]]></title>
    <link href="http://jaketrent.com/post/requirejs-paths-in-prod-test-build/"/>
    <updated>2012-12-07T11:18:00-07:00</updated>
    <id>http://jaketrent.com/post/requirejs-paths-in-prod-test-build</id>
    <content type="html"><![CDATA[<p>RequireJs makes dependency management on the client mostly better.  Once it&#8217;s setup, it&#8217;s nice.  Getting the patterns of your paths to work correctly can be difficult to setup, depending on the constraints of your system.  Making the same paths work in a prod, test, and build environment can be even more adventuresome.  In my case, there were a few extra hoops.  My scenario might not fully match yours, but perhaps you can apply this solution to your own needs.</p>

<p><img src="http://i.imgur.com/xZqm5.png" alt="Alt Text" /></p>

<!--more-->


<h2>Prod: Loading Modules From a Different Server</h2>

<p>Recently, we built a portal.  It contains a bunch of widgets that are served from domains different from the host page.  The portal requested these widget js files via <a href="http://requirejs.org/">RequireJs</a>.</p>

<p>Because the widgets live on other domains, those widgets&#8217; subdependencies needed a path that would be relative to that other widget domain and not the portal domain.  In order to accomplish this, widget dependencies were specified in this way:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;./widgetDependency.js&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">dep</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// my widget code</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>.js</code> extension tells RequireJs to load the dependency <a href="https://github.com/jrburke/r.js/blob/2.1.1/require.js#L1521">as a URL</a>.  The <code>./</code> makes the URL relative to the widget domain.</p>

<h2>Test: RequireJs Paths in Testacular</h2>

<p>When you go to test your modules in a test environment, you may not want to load your modules as URLs.  Such was the case for me, <a href="http://jaketrent.com/post/test-requirejs-testacular/">running Testacular</a>, where the source code is requested into the context of the test server already.</p>

<p>In prod, I needed the <code>.js</code> extension.  But, in test I didn&#8217;t want to load modules from URLs.  So, I need to make the test environment ignore the extension.  The solution?  Override the regular expression that checks for the extension in my test runner to be something that was never matched:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">jsExtRegExp</span> <span class="o">=</span> <span class="sr">/^pileOTest/</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows RequireJs to load the module by module name.</p>

<h4>RequireJs Adds Double .js Extension</h4>

<p>It&#8217;s getting better in the test environment, but we still haven&#8217;t totally appeased RequireJs.  It turns out that when it loads a module by name, it still has to <a href="https://github.com/jrburke/r.js/blob/2.1.1/require.js#L1526">convert that name to a path</a>.</p>

<p>Given my constraints (widgets from another domain on a portal), my name actually includes a <code>.js</code> extension.  This isn&#8217;t usually the case.  RequireJs doesn&#8217;t test for this again (remember, we overrode the regex that did), so it just adds a <code>.js</code> extension on the end, creating two: <code>.js.js</code>.</p>

<p>But there is one final way to trick it out:  Add a &#8216;?&#8217; to the name.  This rule was meant to apply to URLs that represented dynamic scripts (and would thus take query strings) as opposed to static js files.  That&#8217;s not why we&#8217;ll add it, but it will help us nonetheless.</p>

<p>So now your module dependencies will look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;./widgetDependency.js?&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">dep</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// my widget code</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in your test environment they will load, and you will be happy.  Until&#8230;</p>

<h2>Build: Module Names for Optimization</h2>

<p>When you go to <a href="http://requirejs.org/docs/optimization.html#basics">optimize your RequireJs modules</a> you&#8217;ll again need RequireJs to load your modules by module name instead of url.  If you don&#8217;t, you&#8217;ll get nice messages like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt; Tracing dependencies for: MyModule
</span><span class='line'>&gt;&gt; Cannot optimize network URL, skipping: nls/str.js?
</span><span class='line'>&gt;&gt; Error: ENOENT, no such file or directory
</span><span class='line'>&gt;&gt; '/Users/.../style.css?'
</span><span class='line'>&gt;&gt; In module tree:
</span><span class='line'>&gt;&gt;     MyModule</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>You may cry a little, but we&#8217;re almost there.  Remember, your module dependency paths worked just fine in prod.  You only changed them to accommodate the test environment.  So, it&#8217;s time to change them back when you optimize your module into one file for production use.</p>

<p>The <code>r.js</code> configuration in <code>app.build.js</code> includes an function called <code>onBuildRead()</code>&#8217;.  Call it to transform the code as it goes out the door for optimization.  We want to strip out the &#8216;?&#8217; question marks from our dependency arrays.  Stripping out all &#8216;?&#8217;s might be a bit too dangerous.  So, let&#8217;s make a benign adjustment that will help us identify exactly what we&#8217;re trying to strip out and replace our &#8216;?&#8217; string in our dependency paths with &#8216;?test&#8217;, finally:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;./widgetDependency.js?test&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">dep</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// my widget code</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And <a href="https://github.com/jrburke/r.js/blob/2.1.1/build/example.build.js#L417">implement <code>onBuildRead</code></a> as:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">onBuildRead</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">moduleName</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">contents</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">contents</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\?test/g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>&#8220;Shut off all the garbage smashers on the detention level!&#8221;</h4>

<p>Take a deep breath.  That was a little much to make all that work.  You have made your RequireJs paths happy in 3 contexts:</p>

<ol>
<li>In production, where modules are served from domains different from the host page and must be loaded by URL.</li>
<li>In test, where your modules must be loaded by module name.</li>
<li>In the optimization build, where modules must be loaded by module name.</li>
</ol>


<p>I fill like I&#8217;ve tricked out RequireJs a bit to make this work.  How could we adjust the solution to be more straightforward?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Environment Specific Variables in NodeJs]]></title>
    <link href="http://jaketrent.com/post/environment-variables-in-node/"/>
    <updated>2012-12-05T16:12:00-07:00</updated>
    <id>http://jaketrent.com/post/environment-variables-in-node</id>
    <content type="html"><![CDATA[<p>Sometimes things change in different environments.  For one, I wear a tie to church but try not to otherwise.  In Node, you might want variables to change per environment.  And it turns out people have wanted this exact thing, creating marvels of code for us to use as we please.  Enter, nconf.</p>

<p><img src="http://i.imgur.com/5rZ8H.png" alt="Environment variables in Node" /></p>

<!--more-->


<h2>Nconf</h2>

<p><a href="https://github.com/flatiron/nconf">Nconf</a> provides &#8220;hierarchical node.js configuration with files, environment variables, command-line arguments, and atomic object merging.&#8221;  It is a great little package provided by the folks at <a href="http://nodejitsu.com/">NodeJitsu</a>.</p>

<p>To install, run a little:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install nconf</span></code></pre></td></tr></table></div></figure>


<h4>Environment Variables in Node</h4>

<p>Often, NodeJs environments are specified through the aptly-named environment variables.  These are the variables that are set on a system level, available to yours and other applications.  In Unixy environments, you&#8217;d set one with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export NODE_ENV=production</span></code></pre></td></tr></table></div></figure>


<p>And it turns out that <code>NODE_ENV</code> is the single most-used environment variable of them all.  Really, it&#8217;s the big kahuna that triggers other environment variables or code for activation.</p>

<p>For instance, in an <a href="http://expressjs.com/">Express</a> app, you&#8217;ll see this a lot:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="s1">&#39;production&#39;</span> <span class="o">==</span> <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;env&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;dbUri&#39;</span><span class="p">,</span> <span class="s1">&#39;n.n.n.n/prod&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Actually, you see <a href="http://expressjs.com/api.html#app.configure"><code>configure()</code></a>, but it&#8217;s all just sugar around a check to <code>process.env.NODE_ENV</code>.</p>

<h4>Set NODE_ENV and Start Node</h4>

<p>If you want to start node and set the environment variable all in a one liner, try:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export NODE_ENV=production && node app.js</span></code></pre></td></tr></table></div></figure>


<h4>Multiple, Variable Sources</h4>

<p>You could just grab all your variables out the process environment, but the cool thing that nconf gives you is a hierarchy.  The <a href="https://github.com/flatiron/nconf">docs</a> give the probable example of the following hierarchy:</p>

<ol>
<li>Command-line arguments</li>
<li>Environment variables</li>
<li>A file</li>
</ol>


<p>One could access these sources in code with this beaut:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">nconf</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;nconf&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">nconf</span><span class="p">.</span><span class="nx">argv</span><span class="p">()</span>
</span><span class='line'>     <span class="p">.</span><span class="nx">env</span><span class="p">()</span>
</span><span class='line'>     <span class="p">.</span><span class="nx">file</span><span class="p">({</span> <span class="nx">file</span><span class="o">:</span>
</span><span class='line'>       <span class="s1">&#39;config.json&#39;</span>
</span><span class='line'>     <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could even have a config file specific to each environment that ships with your app and load it with a slightly spiffier:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">nconf</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;nconf&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">nconf</span><span class="p">.</span><span class="nx">argv</span><span class="p">()</span>
</span><span class='line'>     <span class="p">.</span><span class="nx">env</span><span class="p">()</span>
</span><span class='line'>     <span class="p">.</span><span class="nx">file</span><span class="p">({</span> <span class="nx">file</span><span class="o">:</span>
</span><span class='line'>       <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">+</span> <span class="s1">&#39;.json&#39;</span>
</span><span class='line'>     <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Using the Data</h4>

<p>Finally, after loading, just access your environment variables and incorporate them in your code as you will:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">nconf</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;NODE_ENV&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Declare some variables per environment.  Likely candidates are database connection strings or web service endpoints or feature flags.  These will help you avoid as many nasty if-else branches in your code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Count Attributes in JavaScript Object]]></title>
    <link href="http://jaketrent.com/post/count-javascript-object-attributes/"/>
    <updated>2012-11-29T13:11:00-07:00</updated>
    <id>http://jaketrent.com/post/count-javascript-object-attributes</id>
    <content type="html"><![CDATA[<p>Sometimes it may be useful to know how many attributes a JavaScript object has.  There&#8217;s not a fantastic way to do this.  Or maybe there is.  Do you know one?  Could cut out IE8 support.  Or, for what it&#8217;s worth, here&#8217;s a way.</p>

<p><img src="http://i.imgur.com/54smb.jpg" alt="Count attributes in js object" /></p>

<!--more-->


<h2>Which Objects have a Length</h2>

<p>If instantiate a new object, it does <em>not</em> have a built-in length attribute:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="kc">undefined</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">length</span>
</span><span class='line'><span class="kc">undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>If I add an arbitrary property that object, it still doesn&#8217;t affect the length:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">prop1</span> <span class="o">=</span> <span class="s2">&quot;adsf&quot;</span>
</span><span class='line'><span class="s1">&#39;adsf&#39;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">length</span>
</span><span class='line'><span class="kc">undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>If I instantiate a new array, it has a built-in length attribute:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="kc">undefined</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span>
</span><span class='line'><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>But an array is an object whose attributes are numbers, right?  So, if I put an arbitrary property on it, does it affect length:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">prop1</span> <span class="o">=</span> <span class="s2">&quot;asdf&quot;</span>
</span><span class='line'><span class="s1">&#39;asdf&#39;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span>
</span><span class='line'><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>No, this <code>arr</code> array still just has the two items we previously pushed onto it.</p>

<h2>Just Iterating</h2>

<p>So, how do you find out how many attributes are in an object (not array)?  Just iterate on it:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">numAttrs</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">key</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">++</span><span class="nx">count</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">count</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I found this a bit painful to write.  There should be a better way, right?  Do you know what it is?</p>

<h2>A Better Way for Better Browsers</h2>

<p>If your in a <a href="http://kangax.github.com/es5-compat-table/">Modern JavaScript environment</a>, give this a whirl:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">).</span><span class="nx">length</span>
</span></code></pre></td></tr></table></div></figure>


<p>Way nicer.  Don&#8217;t try in &lt;= IE8.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Read Request Body in Spring Bean]]></title>
    <link href="http://jaketrent.com/post/http-request-body-spring/"/>
    <updated>2012-11-27T14:10:00-07:00</updated>
    <id>http://jaketrent.com/post/http-request-body-spring</id>
    <content type="html"><![CDATA[<p>Spring is a great addition to your Java stack.  It helps you access the request for inside your Spring beans easily.  Maybe I&#8217;m doing it wrong, but reading the request body seems blasted verbose after that.  It takes a surprising amount of code.</p>

<p><img src="http://i.imgur.com/w8Ezm.jpg" alt="Happy Spring" /></p>

<!--more-->


<h2>Access the Request</h2>

<p>Spring&#8217;s bread and butter, of course, is inversion of control.  So, to get to the request object itself is no big deal.  Just inject it (canonical packages shown for… fun, mostly):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="nd">@javax.inject.Inject</span>
</span><span class='line'>  <span class="n">javax</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">HttpServletRequest</span> <span class="n">req</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now for the pile of non-abstracted code.</p>

<h2>Parse the Body</h2>

<p>Number one, the body is accessed from the <a href="http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html"><code>HttpServletRequest</code></a> object it a place that wasn&#8217;t obvious to me: <code>request.getReader()</code>.  Heads up, we&#8217;ve got a BufferedReader here.  Hey, at least we don&#8217;t get a stream that we have to wrap in more than one reader!</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="nf">getBody</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">body</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="na">getMethod</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;POST&quot;</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>        <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>        <span class="n">BufferedReader</span> <span class="n">bufferedReader</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">bufferedReader</span> <span class="o">=</span>  <span class="n">req</span><span class="o">.</span><span class="na">getReader</span><span class="o">();</span>
</span><span class='line'>          <span class="kt">char</span><span class="o">[]</span> <span class="n">charBuffer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="mi">128</span><span class="o">];</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">bytesRead</span><span class="o">;</span>
</span><span class='line'>          <span class="k">while</span> <span class="o">((</span><span class="n">bytesRead</span> <span class="o">=</span> <span class="n">bufferedReader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">charBuffer</span><span class="o">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">charBuffer</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">bytesRead</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// swallow silently -- can&#39;t get body, won&#39;t</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">bufferedReader</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">bufferedReader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// swallow silently -- can&#39;t get body, won&#39;t</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">body</span> <span class="o">=</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">body</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code.  There is to much.  Let me sum up.  There&#8217;s only going to be a body if you are doing a post.  Otherwise, don&#8217;t worry about it.  If there is data, pull it into a string.  Everything else is for (not) handling errors.</p>

<p>There&#8217;s a bit there.  It&#8217;s not the worst.  But after getting used to <a href="http://expressjs.com/api.html#req.body">Express&#8217; bodyParser</a>, it was hard to see this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cons of CSS Preprocessors]]></title>
    <link href="http://jaketrent.com/post/cons-css-preprocessors/"/>
    <updated>2012-11-14T09:20:00-07:00</updated>
    <id>http://jaketrent.com/post/cons-css-preprocessors</id>
    <content type="html"><![CDATA[<p>If you have any sizeable stylesheet these days, you should use a CSS preprocessor.  They&#8217;re awesome, but they come with a few cons.  The pros still definitely out-weigh the cons.  Use the preprocessor.  The cons are just things you&#8217;ll want to look out for to make your experience with CSS preprocessors better.</p>

<p><img src="http://i.imgur.com/Mzozm.jpg" alt="CSS Preprocessors" /></p>

<!--more-->


<h2>CSS Preprocessors are Popular</h2>

<p>Chris Coyier recently <a href="http://css-tricks.com/poll-results-popularity-of-css-preprocessors/">took a poll on the usage of CSS preprocessors</a>.  About half use one of the preprocessor options available to them.  Of the languages used, <a href="http://lesscss.org/">LESS</a> is the most popular.  (<a href="http://learnboost.github.com/stylus/">Stylus</a> is my current favorite.  I like the HAML-style syntax.)</p>

<p>This means that half of the people who write CSS aren&#8217;t, in fact, writing CSS.  They&#8217;re writing in <a href="http://net.tutsplus.com/tutorials/html-css-techniques/sass-vs-less-vs-stylus-a-preprocessor-shootout/">some language</a> that transpiles to CSS.  So, half of these developers are getting the pros, but there&#8217;s a bit of baggage too.</p>

<h2>Cons of a CSS Preprocessor</h2>

<h4>File Size is Deceiving</h4>

<p>When you&#8217;re writing in a higher-level styling language, it&#8217;s often much smaller than the generated CSS will be.  Thus, you could be deceiving yourself thinking that your resulting CSS will be just as a small as what you&#8217;re editing.  Why?</p>

<ol>
<li>Hiearchy will be flattened in the resulting CSS.  And the tree of selectors will be duplicated for every selector.</li>
<li>You can loop in a preprocessor, generating n items where you only see one.  All those items will be listed in the final, static CSS file.</li>
<li>In some of these languages, you don&#8217;t have to write vendor prefixes.  This is a fantastic feature, but it makes you tend to forget that one attribut will expand into 5 or 6 in the resulting CSS. (Stylus&#8217; <a href="https://github.com/visionmedia/nib">nib</a> is great for this, btw.)</li>
</ol>


<p>Maybe not a big deal.  Remove an image from your site, and you&#8217;ve made up the difference in bits on the wire.</p>

<h4>More Process</h4>

<p>Because you usually won&#8217;t be deploying your .less or .styl file, you&#8217;ll need to have a point in your development lifecycle where the .css gets generated.  This can potentially slow you down, but there are great tools like <a href="https://github.com/gruntjs/grunt-contrib-stylus/">Grunt</a> or <a href="http://incident57.com/codekit/">CodeKit</a> to make this quite automagic.  These tools have good, logical defaults, but still require configuration for your specific project.</p>

<h4>Hard to Go Back</h4>

<p>After working with Stylus or another language for a while, you&#8217;ll meet a project that is straight CSS, and the RoI on conversion to a preprocessor is small.  So, you&#8217;ll be back in CSS land.  This will be hard.  You&#8217;ll realize how nice you&#8217;ve had it.  The mechanisms you&#8217;ve grown to rely on won&#8217;t be there.</p>

<h4>Variety of Syntax</h4>

<p>Each CSS Processor&#8217;s syntax is different.  The features largely overlap, but they&#8217;re implemented differently.  It&#8217;s a polyglot world, so it&#8217;s no big deal.  Still, it can be confusing switching between projects that have different styling syntax.  You&#8217;ll write your styles twice after you realize that Stylus syntax doesn&#8217;t work in a LESS file.</p>

<h4>Team Coordination</h4>

<p>You need to get everyone on your team on board when using a CSS preprocessor.  If someone starts editing a .css file, their changes will be overwritten.  Minify the generated .css.  That should make it less savory to edit.  It&#8217;ll be a deterrent, but I can almost guarantee someone will edit it anyway. :)  Make the stylesheet workflow very clear.</p>

<h2>The Native Future</h2>

<p>We really only have these CSS preprocessors because CSS is too strict, flat, unflexible, and verbose for the amazing things being written for the web today.  Wouldn&#8217;t it be nice if these styling languages or some new, similar version of CSS was available natively in the browser?</p>

<p>Meanwhile, we&#8217;ll use these tools.  What have you found your greatest challenge to be using a CSS preprocessor?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress vs. WordPress]]></title>
    <link href="http://jaketrent.com/post/octopress-vs-wordpress/"/>
    <updated>2012-11-12T16:42:00-07:00</updated>
    <id>http://jaketrent.com/post/octopress-vs-wordpress</id>
    <content type="html"><![CDATA[<p>Why would one choose Octopress over WordPress?  What are the pros and cons?  I&#8217;ve recently implemented a blog &#8211; this blog &#8211; in WordPress.  It was a difficult decision for me.  At the time, I looked at Octopress, but I was jazzed by the success of others on WordPress, and I wanted to try it out.  I&#8217;m glad that I did try it out, but now I&#8217;m glad that I&#8217;ve switched to Octopress.  Here&#8217;s why.</p>

<p><img src="http://i.imgur.com/uACBn.jpg" alt="Octopress" /></p>

<!--more-->


<h2>Just Posts</h2>

<p>Octopress is so dead simple, it just makes sense.  The post is a file in a folder.  I edit it in my current favorite MarkDown editor, <a href="http://mouapp.com/">Mou</a>.  The workflow is thus very easy.  I&#8217;m not transferring my post which I wrote offline to a web interface only available online.</p>

<h2>Nerd Cred</h2>

<p>Nerd cred or geek cred?  I don&#8217;t know, but Octopress bumps it right up.  As it says, it&#8217;s a &#8220;blogging framework for hackers&#8221;.  Given that I&#8217;m a creator of software and that&#8217;s the main topic of my blog, it seems fitting, doesn&#8217;t it.  Plenty of coders have WordPress sites, I suppose.  Still, I didn&#8217;t feel super awesome about running a WordPress PHP site as my home base.</p>

<h2>Performance</h2>

<p>The whole idea of a generated static site seems genius.  It&#8217;s blazing fast.  I&#8217;m on Heroku.  Currently, my site experiences very low volume traffic.  With one dyno, when the site goes without traffic for a certain amount of time, Heroku will power down the dyno.  WordPress takes a fair bit to come back up on the first request after that.  Octopress, no problem.  Pops back like it was never gone.  And why not?  There&#8217;s really nothing to spin up.</p>

<h2>No Reinvention</h2>

<p>I landed on Octopress for one of the same reasons I initially chose WordPress for this new blog.  It is a ready-made blogging platform.  I don&#8217;t need to reinvent the wheel.  It works, and it works well.</p>

<h2>A Bit of Customization</h2>

<p>I chose WordPress for the blog because I wanted to write blog posts, not tinker with the innards of the site.  (I do that plenty elsewhere.)  But it turns out that I couldn&#8217;t quite bare just using an out-of-the-box theme.  I literally needed to add my own flair and customizations.  I still want to keep that to a minimum.  Octopress&#8217; classic theme (the only one?) is fantastic &#8211; clean and crisp.  When I want to make a few changes, it&#8217;s a much more straight-forward task to find the place that needs editing and get it done.</p>

<h2>Ruby</h2>

<p>I&#8217;ve hardly done any Ruby.  Octopress is an easy little touch of Ruby.  I don&#8217;t have to mess with it unless I want to.  Ruby is much more appealing to me than PHP.</p>

<h2>Plugin Pluses</h2>

<p>When I chose WordPress, I figured that if there was any feature that I desired, there was probably already a plugin for it.  And that turned out to be true.  Octopress certainly <a href="https://github.com/imathis/octopress/wiki/3rd-party-plugins">has fewer options</a>.  But on the whole, I think they cater well to the coder crowd.</p>

<h2>For Now</h2>

<p>So, for now, I&#8217;m on Octopress.  It&#8217;s nice to think that my data is just a folder of files that I could really recreate anywhere.  So, we&#8217;ll see how long this lasts.  So far, it&#8217;s a blogging platform for this hacker, and I&#8217;m liking it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Responsive Table with Scrolling]]></title>
    <link href="http://jaketrent.com/post/responsive-table-with-scrolling/"/>
    <updated>2012-11-07T17:06:00-07:00</updated>
    <id>http://jaketrent.com/post/responsive-table-with-scrolling</id>
    <content type="html"><![CDATA[<p>Sometimes a <code>table</code> element is the most semantic element one can use in markup.  It is true.  If you&#8217;re displaying tabular data, a <code>table</code> is a likely option.  If you&#8217;re on a responsive site, however, you&#8217;ll cringe at this option.  It turns out that tables aren&#8217;t very responsive web design-friendly.  One way to create a more responsive table is with scrolling.</p>

<p><img src="http://i.imgur.com/GeuZe.png" alt="Responsive Table with Scrolling" /></p>

<!--more-->


<h2>Responsive Table Options</h2>

<p>I love the article by Chris Coyier that describes <a href="http://css-tricks.com/responsive-data-tables/">responsive tables</a>.  Some of his ideas and those of the commenters on his post a great at thinking outside the box on what the options include for responsive tables:</p>

<ol>
<li>Orient the table vertically when there&#8217;s not enough room for all the columns.</li>
<li>Replace tabular data with a graphic, such as a pie graph, that communicates the same gist.</li>
<li>Replace the table with a link that opens a scrollable view large enough for the regular-sized table.</li>
</ol>


<p>My favorite option is the first.  But, in my case, it didn&#8217;t seem to work extremely well because I have two headers.  The example had column headers only.  I have row headers as well.  After a bit more looking, I ran across this <a href="http://www.zurb.com/playground/playground/responsive-tables/">Zurb scrolling table css and js example</a>.  The best solution, it seemed for now, was scrolling.  (My example code is based on the markup and styles of the Zurb code with a few things taken out and a few things added.)</p>

<h2>Table Horizontal Scrolling</h2>

<p>On the web, vertical scrolling is a part of the full meal deal.  So, the only thing to solve is the horizontal scrolling.  Normally, we don&#8217;t want content flowing off the right side of the screen when browsing.  So, we when there&#8217;s scrolling required, we&#8217;re going to do it within the table only and for the columns we want.</p>

<h4>Divide table in two</h4>

<p>We want some columns to scroll and others to remain pinned whilst scrolling.  We&#8217;ll duplicate the table in the markup and wrap each, a la:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;table-wrapper&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;pinned&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- table here with pinned columns only--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;scrollable&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- table here with scrollable columns only--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Line up the rows</h4>

<p>Now we have two tables.  The flexibility we&#8217;ve given ourself is that we can make some columns stick and others scroll easily.  Our new challenge is keeping the row height lined up so the two tables look like one.</p>

<p>Put the two tables next to each other with a float left and a float right.  Make the widths percentage-based as with any <a href="http://en.wikipedia.org/wiki/Responsive_web_design">rwd</a>.</p>

<p>Now we have a few options to make our rows line up:</p>

<ol>
<li>Explicitly set all table cells to the same height</li>
<li>Use JavaScript to make each cell in a row be the same height as the tallest cell in that row</li>
<li>Put similar content in each cell on a row (eg, just text with the same attributes that will not wrap for longer text)</li>
</ol>


<p>Turns out that I will choose option 1 for the table cells (<code>td</code>) and option 3 for the table headers (<code>th</code>).</p>

<p>This is my least favorite feature of this solution.  Anyone have a better idea on lining up the rows?</p>

<h4>Set column width</h4>

<p>I want some of my columns to have a set width.  Well, as <em>set</em> as anything is in rwd.  An html <code>table</code> will usually expand and contract columns across the table to give optimum spacing based on the content.</p>

<p>I want to make my pinned table columns allow extra-long content, but I don&#8217;t want their widths to change at all.  A bit of StackOverflow love yielded this answer on why <code>overflow: hidden</code> doesn&#8217;t work when <a href="http://stackoverflow.com/a/7570613/118561">constraining table cell width</a>.</p>

<p>In short, the solution is to wrap the content inside of the <code>td</code> with two <code>divs</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;outer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;inner&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    Row 4 longer than lotr
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And sprinkle with a bit of stylesheet:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">td</span> <span class="nc">.outer</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">td</span> <span class="nc">.inner</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">overflow</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span>
</span><span class='line'>  <span class="k">white-space</span><span class="o">:</span> <span class="k">nowrap</span><span class="p">;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This style will let the column width remain and the content overflow.  It will also keep the cell text on one line, and it will be hidden as it flows off the right-hand side of the cell.  To wrap and hide as it flows off the bottom of the cell, remove the <code>white-space: nowrap</code> attribute.</p>

<h2>Responsive Table with Scrolling</h2>

<p>For the final result, check out the <a href="http://codepen.io/jaketrent/pen/CcboI">CodePen for the responsive table</a> below:</p>

<pre class="codepen" data-height="400" data-type="result" data-href="CcboI" data-user="jaketrent"><code></code></pre>


<script async src="http://codepen.io:/assets/embed/ei.js"></script>


<p>What are your suggestions for making this better?  How have you solved the responsive table challenge?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grunt and Testacular]]></title>
    <link href="http://jaketrent.com/post/grunt-and-testacular/"/>
    <updated>2012-11-06T17:05:00-07:00</updated>
    <id>http://jaketrent.com/post/grunt-and-testacular</id>
    <content type="html"><![CDATA[<p><a href="http://vojtajina.github.com/testacular/">Testacular</a> is a test runner for running browser tests.  Once you have it <a href="http://jaketrent.com/post/test-requirejs-testacular/">up and running</a>, you may want to integrate it with your <a href="http://gruntjs.com/">Grunt</a> build process.  This will allow Testacular to be started and your tests to be run from Grunt.</p>

<p><img src="http://i.imgur.com/zze56.jpg" alt="Grunt and Testacular" /></p>

<!--more-->


<h2>grunt-testacular</h2>

<p>Lucky for us, <a href="https://npmjs.org/package/grunt-testacular">Friedel Ziegelmayer</a> has created a nice little plugin, <a href="https://npmjs.org/package/grunt-testacular">grunt-testacular</a>.</p>

<p>To install:</p>

<pre><code>$ npm install grunt-testacular
</code></pre>

<p>Add the current version to your <code>package.json</code> for the future:</p>

<pre><code>"grunt-testacular": "0.2.x"
</code></pre>

<p>Import the plugin in your <code>grunt.js</code> file:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-testacular&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally, in <code>grunt.js</code>, specify your tasks:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">testacularServer</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">unit</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">keepalive</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">configFile</span><span class="o">:</span> <span class="s1">&#39;testacular.conf.js&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nx">testacularRun</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">unit</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">runnerPort</span><span class="o">:</span> <span class="mi">9100</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Two Tasks</h4>

<p>Grunt-testacular provides two tasks:</p>

<ol>
<li>testacularServer - starts the Testacular server (equivalent to <code>testacular start</code>)</li>
<li>testacularRun - runs your tests against an already-started server (equivalent to <code>testacular run</code>)</li>
</ol>


<h4>A grunt-testacular Oddity</h4>

<p>If you don&#8217;t have <code>keepalive: true</code> set for grunt-testacular, the Testacular server will shutdown before it has a chance to capture browsers or run your tests.  I&#8217;m really not sure why this is even an option.  The false case behavior doesn&#8217;t seem to be useful.  With the <code>singleRun</code> ability of Testacular, the plugin should just call start on the server and let the server configuration decide when it&#8217;s appropriate to shut down.</p>

<p><strong>Update:</strong>
I logged an <a href="https://github.com/Dignifiedquire/grunt-testacular/issues/3#issuecomment-10234529">issue for grunt-testacular</a> that Grunt tasks listed after <code>testacularServer</code> weren&#8217;t being run.  Friedal responded that <code>keepalive: true</code> was the problem.  If it is specified true, then it has to be the last task in the list.  So, if you have tasks after <code>testacularServer</code> specified, remove <code>keepalive: true</code> and add <code>watch</code> to the end of your task list.</p>

<h2>Grunt and Testacular Work Flow</h2>

<p>Of course, your work flow is up to you, and Grunt and Testacular give you enough flexibility to decide your own, but I think you&#8217;ll run your tests in two main scenarios: development and continuous integration.</p>

<h4>Development</h4>

<p>For development, I like to start up the Testacular server and keep it running.  Then, I go write tests and update source code.  Testacular will notice my changes and automatically re-run my tests.</p>

<p>To set this up, make sure your grunt-testacular task has this option:</p>

<pre><code>keepalive: true
</code></pre>

<p>This will keep the server up even after the tests have completed.</p>

<p>And make sure your <code>testacular.conf.js</code> file includes:</p>

<pre><code>autoWatch = true;
</code></pre>

<p>This will force Testacular to re-run your tests if anything in your source or tests change (specifically, if anything in testacular.conf.js&#8217;s <code>files</code> array changes).</p>

<h4>Continuous Integration</h4>

<p>For continuous integration, you just want your automated build to be able to verify the source code integrity prior to deploying.</p>

<p>We don&#8217;t want tests to re-run automatically based on our changes, so we turn off <code>autoWatch</code> in <code>testacular.conf.js</code>:</p>

<pre><code>autoWatch = false;
</code></pre>

<p>And we set one more value in <code>testacular.conf.js</code> to:</p>

<pre><code>singleRun = true;
</code></pre>

<p>This will allow the <code>testacularServer</code> task to be run once, have Testacular run all the tests, and then make the server shut down.</p>

<p>Finally, remember to keep <code>keepalive: true</code> set in <code>grunt.js</code>.  Odd, right?</p>

<h2>Multiple Testacular Configurations</h2>

<p>To manage the options that are distinct to these two work flows, one could just create two separate <code>testacular.conf.js</code> files.  But, that would be overkill, because there&#8217;d be a lot of overlap between the two files.</p>

<p>Instead, the grunt-testacular plugin gives you override ability on a per-variable basis.  To support the development and integration scenario, the grunt multiTask might look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">testacularServer</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">unit</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">keepalive</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">configFile</span><span class="o">:</span> <span class="s1">&#39;testacular.conf.js&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">integration</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">keepalive</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">configFile</span><span class="o">:</span> <span class="s1">&#39;testacular.conf.js&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">autoWatch</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">singleRun</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Following this same pattern, you could create a separate config for automated functional or end-to-end tests as well.</p>

<p>Note that the <code>options</code> object is strictly for the plugin.  The other variables at that level feed straight into Testacular as overrides.</p>

<h2>Integrated Testing</h2>

<p>Process and product maturity are increased as tests are integrated into the build process.  Grunt and Testacular make integrating your browser tests a snap.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test RequireJs Code in Testacular]]></title>
    <link href="http://jaketrent.com/post/test-requirejs-testacular/"/>
    <updated>2012-10-31T17:04:00-06:00</updated>
    <id>http://jaketrent.com/post/test-requirejs-testacular</id>
    <content type="html"><![CDATA[<p>Did you write your source code as JavaScript AMD modules in <a href="http://requirejs.org/">RequireJs</a>?  Do you want to test them in real browsers?  Do you want the flexibility of using <a href="http://visionmedia.github.com/mocha/">Mocha</a> or <a href="http://pivotal.github.com/jasmine/">Jasmine</a>?  This is the moment you&#8217;ve been waiting for.</p>

<p><a href="http://vojtajina.github.com/testacular/">Testacular is a &#8220;spetacular test runner for JavaScript&#8221;</a> that was written to support the <a href="http://angularjs.org/">AngularJs</a> project.  It is valuable because it will run your tests in real browsers.  This is important for front-end code that relies on browser globals such as <code>window</code> (eg, if you use jQuery) or that manipulates the DOM (which could vary browser to browser).</p>

<p>Client-side JavaScript testing is a somewhat crazy space.  Some have even called it <a href="http://rzrsharp.net/2012/08/01/client-side-testing-insanity.html">&#8220;insane&#8221;</a> and taken drastically different routes than what follows.  But we&#8217;re gonna see if we can power through, and Testacular will help us get the job done.</p>

<p><img src="http://i.imgur.com/7gh40.jpg" alt="Testacular Javascript Testing" /></p>

<!--more-->


<h2>RequireJs Modules</h2>

<p>We wrote our source code using RequireJs-implemented AMD modules.  This gives us:</p>

<ul>
<li>Clean code organization</li>
<li>Namespaced code (not global)</li>
<li>Explicit dependency management</li>
<li>Source optimized via the RequireJs build</li>
</ul>


<p>Unfortunately, it also makes our source a bit more tricky to test.</p>

<h2>Testacular RequireJs Support</h2>

<p><a href="https://groups.google.com/forum/?fromgroups=#!topic/testacular/CRsf8Ig4bgE">RequireJs support was just barely added</a> to Testacular, so it only lives in the canary channel (master).  To install with npm:</p>

<pre><code>npm install -g testacular@canary
</code></pre>

<p>This will currently install version <del datetime="2012-11-05T14:38:54+00:00">0.5.1</del> 0.5.2.  This is the first version of Testacular with RequireJs support.  So your <code>package.json</code> should include an entry like:</p>

<pre><code>"testacular": "&gt;=0.5.2"
</code></pre>

<p>If <a href="https://npmjs.org/package/testacular">Testacular</a> has moved to >=0.6.0, you can use the stable channel.</p>

<h2>Configure Testacular For RequireJs</h2>

<h4>Directory Setup</h4>

<p>For clarity in the example configuration files and test below, the directory structure upon which these are based looks like this:</p>

<pre><code>project/
    lib/
        jquery.js #etc
    node_modules/
        chai/ #etc
    src/
        MyModule.js
    test/
        MyModule.test.js
        test-main.js
testacular.conf.js
</code></pre>

<h4>Initialize Testacular</h4>

<p>Testacular comes with a nice utility for generating a config file (default name: &#8216;testacular.conf.js&#8217;) that it needs in order to run.  In your terminal, type:</p>

<pre><code>testacular init
</code></pre>

<p>This will give you a series of prompts for things such as paths to source and tests and which browsers to capture.  <del datetime="2012-11-05T14:38:54+00:00">These prompts do not include the option to add RequireJs support automatically, so you&#8217;ll need to add those lines manually to your <code>testacular.conf.js</code> (see below).</del>  As of testacular 0.5.2, <code>testacular init</code> will prompt for usage of the RequireJs adapter.</p>

<h4>Testacular Include</h4>

<p>Testacular 0.5.1, while adding RequireJs support, has added a new concept of &#8220;included&#8221; to the files listed in your config.  This is because RequireJs will balk about a the module not being loaded correctly (ie, loaded synchronously in the <code>&lt;head/&gt;</code> tag of the runner).  From the <a href="http://requirejs.org/docs/errors.html#mismatch">RequireJs docs</a>:</p>

<blockquote><p>&#8220;Be sure to load all scripts that call define() via the RequireJS API. Do not manually code script tags in HTML to load scripts that have define() calls in them.&#8221;</p></blockquote>

<h4>RequireJs Shim</h4>

<p>Not immediately apparent is the fact that the &#8216;shim&#8217; config from RequireJs 2.x does not work from within Testacular.  I haven&#8217;t yet figured out why.  For instance, I was constantly getting &#8220;&#8216;Backbone&#8217; is not defined&#8221; messages even though it was specified in the &#8216;shim&#8217; config and required in the test.  I could have been doing something wrong.  My solution thus far has been to list each of the non-RequireJs modules and their dependencies in the &#8216;files&#8217; attribute of <code>testacular.conf.js</code>.</p>

<h4>testacular.conf.js</h4>

<p>The final point is that the RequireJs main module for your test runner should be the last file listed.</p>

<p>So, finally, here is the &#8216;file&#8217; excerpt of <code>testacular.conf.js</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">files</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="nx">MOCHA</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">MOCHA_ADAPTER</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">REQUIRE</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">REQUIRE_ADAPTER</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// !! libs required for test framework</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">pattern</span><span class="o">:</span> <span class="s1">&#39;node_modules/chai/chai.js&#39;</span><span class="p">,</span> <span class="nx">included</span><span class="o">:</span> <span class="kc">false</span><span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// !! put what used to be in your requirejs &#39;shim&#39; config here</span>
</span><span class='line'>  <span class="s1">&#39;lib/jquery.js&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;lib/underscore.js&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;lib/backbone.js&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;lib/handlebars.js&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// !! put all libs in requirejs &#39;paths&#39; config here (included: false)</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">pattern</span><span class="o">:</span> <span class="s1">&#39;lib/**/*.js&#39;</span><span class="p">,</span> <span class="nx">included</span><span class="o">:</span> <span class="kc">false</span><span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// !! all src and test modules (included: false)</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">pattern</span><span class="o">:</span> <span class="s1">&#39;src/**/*&#39;</span><span class="p">,</span> <span class="nx">included</span><span class="o">:</span> <span class="kc">false</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">pattern</span><span class="o">:</span> <span class="s1">&#39;test/**/*.test.js&#39;</span><span class="p">,</span> <span class="nx">included</span><span class="o">:</span> <span class="kc">false</span><span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// !! test main require module last</span>
</span><span class='line'>  <span class="s1">&#39;test/test-main.js&#39;</span>
</span><span class='line'><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>This config is awesome.  It replaces an html test runner that you would otherwise have to build.</p>

<h2>RequireJs Main Module</h2>

<p>Just like any RequireJs project, you need a main module to bootstrap your tests.  In the main module, you setup the <a href="http://requirejs.org/docs/api.html#config"><code>require.config</code></a>.</p>

<h4>Testacular &#8216;/base&#8217; Directory</h4>

<p>Testacular serves files under the &#8216;/base&#8217; directory.  So, on the server, requests to files will be served up under &#8216;http://localhost:9876/base/*&#8217;.  The RequireJs config for <code>baseUrl</code> gives a starting context for modules that load with relative paths.  When setting this value for the Testacular server, it will need to start with &#8216;/base&#8217;.  I want my baseUrl to be at the root of my &#8216;/src&#8217; directory so relative requires in the source won&#8217;t need to change.  My baseUrl has the value of &#8216;/base/src&#8217;.</p>

<h4>Require Each Test File</h4>

<p>One of the things I hate is having to update a master list of all tests to run every time I add a test.  Unfortunately, that&#8217;s what I currently have.  The test main module has to specifically require each of the test modules.  I would love it if I could add a <code>*.test.js</code> file to the test directory and just have it run the next time the tests run.</p>

<h4>Asynchronously Run Testacular</h4>

<p>Because the RequireJs require statements are asynchronous, Testacular needs to wait until they&#8217;re done (the code is loaded and ready) before it starts the tests.</p>

<p>The <code>main-test.js</code> file ends up looking like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">require</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// !! Testacular serves files from &#39;/base&#39;</span>
</span><span class='line'>  <span class="nx">baseUrl</span><span class="o">:</span> <span class="s1">&#39;/base/src&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">paths</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">require</span><span class="o">:</span> <span class="s1">&#39;../lib/require&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;../lib/text&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">},</span> <span class="p">[</span><span class="s1">&#39;../test/MyModule.test&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">__testacular__</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>RequireJs Test in Testacular</h2>

<p>All the setup thus far has been in preparation for the code to follow.  The test can now be setup as a RequireJs module.  It can require the source code under test.  It can use <a href="http://visionmedia.github.com/mocha/">Mocha</a> (or whatever framework there is a Testacular adapter for).</p>

<p>I will also use <a href="http://chaijs.com/">Chai</a> in order to get the <a href="http://chaijs.com/guide/styles/">&#8216;should&#8217; BDD-style assertions</a>.  Note that by using RequireJs and running in the browser, we can&#8217;t just <code>require('chai')</code>.  It has to be required using the asynchronous callback to avoid <a href="http://requirejs.org/docs/errors.html#notloaded">this error</a>:</p>

<blockquote><p>Uncaught Error: Module name &#8220;../node_modules/chai/chai&#8221; has not been loaded yet for context: _. Use require([])</p></blockquote>

<p>And finally, <code>should()</code> must be invoked to be available in the test.</p>

<p>So, a simple test will look like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;../node_modules/chai/chai&#39;</span><span class="p">,</span> <span class="s1">&#39;MyModule&#39;</span><span class="p">],</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">chai</span><span class="p">,</span> <span class="nx">MyModule</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">assert</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">expect</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">expect</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">should</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">should</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;MyModule&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;#initialize()&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be a stinkin object&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">yippee</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyModule</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">yippee</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">an</span><span class="p">(</span><span class="s1">&#39;object&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Run the Tests in Testacular</h2>

<p>There are a couple options set in <code>testacular.conf.js</code> that will describe how your tests can be run:</p>

<ul>
<li><strong>singleRun</strong> - Start Testacular server, capture browsers, run all tests, shutdown server</li>
<li><strong>autoWatch</strong> - Have the server run tests every time a source or test file changes (and requires you to turn off singleRun)</li>
</ul>


<p>To start the Testacular server:</p>

<pre><code>testacular start
</code></pre>

<p>Finally, if your Testacular server is already running and you want to kick off the tests, type:</p>

<pre><code>testacular run
</code></pre>

<h2>Now to Test</h2>

<p>Thank you to <a href="https://github.com/vojtajina">Vojta Jina</a> and the rest of the AngularJs crew and other contributors for making an awesome test runner.  I&#8217;m very happy that RequireJs support was added.  Vojta has also provided an <a href="https://github.com/vojtajina/testacular/tree/master/test/e2e/requirejs">end-to-end example</a> with code on Github.</p>

<p>How do you see that we could improve this configuration or testing process?</p>

<p>Now to test some sweet code!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Environment-specific Grunt Build]]></title>
    <link href="http://jaketrent.com/post/an-environment-specific-grunt-build/"/>
    <updated>2012-10-28T17:03:00-06:00</updated>
    <id>http://jaketrent.com/post/an-environment-specific-grunt-build</id>
    <content type="html"><![CDATA[<p>Does your project use GruntJs as a build tool?  Have you ever to customize your build to the environment you&#8217;re deploying to?  It&#8217;s handy to be able to specify certain commands to run or keep from running.  It&#8217;s likely essential to be able to change environment-specific variables via Grunt.  It&#8217;s not bad.  Most of the leg-work has been done by earlier generations &#8211; that is, if Grunt is old enough to have earlier generations yet.</p>

<p><img src="http://i.imgur.com/4773D.jpg" alt="Grunt JS" /></p>

<!--more-->


<h2>Grunt-context Plugin</h2>

<p>Jonathan Barnett has created a nice little grunt plugin that called <a href="https://npmjs.org/package/grunt-context">grunt-context</a>.  With grunt-context, you can easily specify environment-specific overrides to your grunt tasks.  The <a href="https://github.com/indieisaconcept/grunt-context">github page for grunt-context</a> can provide you with the basics on how to configure your grunt build.</p>

<p>Let&#8217;s try a concrete config.  Let&#8217;s say that I want to run the <a href="http://jaketrent.com/post/run-requirejs-with-gruntjs/">RequireJs optimizer</a> only when I deploy to my test environment or to production but not for my local build.</p>

<p>First, install the plugin:</p>

<pre><code>npm install grunt-context
</code></pre>

<p>Second, fix up your grunt.js file to include:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'>    <span class="cm">/* ... */</span>
</span><span class='line'>    <span class="c1">// &#39;requirejs&#39; task REQUIRED to be listed first at root level config</span>
</span><span class='line'>    <span class="nx">requirejs</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">compile</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// !! all app.build.js standard requirejs options here</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">context</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// !! list each of your desired environments/contexts here</span>
</span><span class='line'>      <span class="nx">local</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">tasks</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// !! &#39;requirejs&#39; task left out</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span> <span class="s1">&#39;lint test&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">test</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">tasks</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// !! put &#39;requirejs&#39; in default task list</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span> <span class="s1">&#39;requirejs lint test&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">prod</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//  !! re-list the &#39;requirejs&#39; task to override its behavior for this context</span>
</span><span class='line'>        <span class="nx">requirejs</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">compile</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// !! override the standard requirejs options for something</span>
</span><span class='line'>              <span class="c1">// special in prod build only</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">tasks</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span> <span class="s1">&#39;requirejs lint test&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// !! load the plugin</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-context&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, run the grunt build and target a specific context.  If you want to build locally and not have requirejs run, type:</p>

<pre><code>grunt context:local
</code></pre>

<p>If you want to build for test, where requirejs will optimize, type:</p>

<pre><code>grunt context:test
</code></pre>

<p>Notice in the &#8216;prod&#8217; context that I also can override the actual variables for running the requirejs build.  So, it will not only run things or not run things, but you can run tasks in specific ways per environment.</p>

<h2>The Cons</h2>

<p>The plugin works well most of the time, but I haven&#8217;t had a stellar performance in all cases.  It could be that I&#8217;m unknowingly using it wrong.  I&#8217;ve tried many different methods to try and work out some of my issues with it.</p>

<p>For instance, I cannot get it to override functions set to the <a href="https://npmjs.org/package/grunt-exec">grunt-exec</a> <code>command</code> attribute.  It will override string commands just fine, but it has problems with functions.  This could be because it has to assemble task lists for execution within a context and calculate overrides.  My guess is that the implementation may just be lacking in this area.</p>

<h2>Best Option So Far</h2>

<p>For environment-specific grunt builds, <a href="https://npmjs.org/package/grunt-context">grunt-context</a> is the best solution I&#8217;ve found so far.  It&#8217;s not the best, but it usually gets the job done.  I&#8217;ve bent it to my will thus far.</p>

<p>What have you found that works well for environment-specific JavaScript builds?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run RequireJs with GruntJs]]></title>
    <link href="http://jaketrent.com/post/run-requirejs-with-gruntjs/"/>
    <updated>2012-10-28T17:02:00-06:00</updated>
    <id>http://jaketrent.com/post/run-requirejs-with-gruntjs</id>
    <content type="html"><![CDATA[<p>RequireJs features a fantastic optimization tool, <a href="http://requirejs.org/docs/optimization.html">r.js</a>, that utilizes <a href="https://github.com/mishoo/UglifyJS">UglifyJs</a> to minimize and concatenate your JavaScript code.  <a href="http://gruntjs.com/">Grunt</a> is a build tool that is great for standardizing your build configuration and coordinating multiple build steps &#8211; amongst its other wonders.  Hopefully you get to use both on your project, because they&#8217;ll both make your development process smoother and leave you to the funnerest stuff &#8211; writing sweet apps.</p>

<p><img src="http://i.imgur.com/4773D.jpg" alt="Grunt JS" /></p>

<!--more-->


<h2>Vanilla RequireJs</h2>

<p>To use <a href="http://requirejs.org/docs/optimization.html#wholeproject">vanilla RequireJS to optimize your project</a>, you&#8217;ll need to do two things:</p>

<ol>
<li><strong>Create app.build.js</strong>  - This file contains the configuration for how your want RequireJs react to your source code.  Among other things, paths to source directories and output files are specified.</li>
<li><strong>Run the optimizer</strong> - via the command <code>node r.js -o app.build.js</code></li>
</ol>


<p>Grunt has essentially the same steps, but they&#8217;re specified in the standard grunt config file and will integrate better with the rest of your build process steps that are in grunt.</p>

<h2>Grunt RequireJs Configuration</h2>

<p>An easy way to get Grunt to run your RequireJs build is to use the <a href="https://npmjs.org/package/grunt-contrib-requirejs"><code>grunt-contrib-requirejs</code></a> plugin.</p>

<p>Install the plugin:</p>

<pre><code>npm install grunt-contrib-requirejs
</code></pre>

<p>Add the requirejs config to your grunt.js file:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'>    <span class="cm">/* ... */</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// !! This is the name of the task (&#39;requirejs&#39;)</span>
</span><span class='line'>    <span class="nx">requirejs</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">compile</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// !! You can drop your app.build.js config wholesale into &#39;options&#39;</span>
</span><span class='line'>        <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">appDir</span><span class="o">:</span> <span class="s2">&quot;src/&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">baseUrl</span><span class="o">:</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">dir</span><span class="o">:</span> <span class="s2">&quot;target/&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">optimize</span><span class="o">:</span> <span class="s1">&#39;uglify&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">mainConfigFile</span><span class="o">:</span><span class="s1">&#39;./src/main.js&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">modules</span><span class="o">:</span><span class="p">[</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>              <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;MyModule&#39;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">],</span>
</span><span class='line'>          <span class="nx">logLevel</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">findNestedDependencies</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">fileExclusionRegExp</span><span class="o">:</span> <span class="sr">/^\./</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">inlineText</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/* ... */</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// !! This loads the plugin into grunt</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-requirejs&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And run the task:</p>

<pre><code>grunt requirejs
</code></pre>

<p>You should get the regular RequireJs build output that you&#8217;re used to seeing, and you&#8217;ll be able to verify that it worked.</p>

<h2>Solid Optimization</h2>

<p>RequireJs does a great build.  Grunt is flexible and easy to work with.  They go well together thanks to the <a href="https://npmjs.org/package/grunt-contrib-requirejs">grunt-contrib-requirejs</a> plugin, which gives a solid performance.  You&#8217;ll have your JavaScript code done up so tight; it&#8217;ll be denser than lead &#8211; which is obviously what you&#8217;ve always dreamed of.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GruntJs Access to package.json]]></title>
    <link href="http://jaketrent.com/post/gruntjs-access-to-package-dot-json/"/>
    <updated>2012-10-25T17:02:00-06:00</updated>
    <id>http://jaketrent.com/post/gruntjs-access-to-package-dot-json</id>
    <content type="html"><![CDATA[<p>Have you used GruntJs to build your JavaScript project yet?  It&#8217;s a great tool.  Often as a part of the build configuration, you&#8217;ll want to access your package.json with grunt.  Grunt has some built-in support for this.  Some bits can be a little tricky, and some plugins have limited support.  Here are some ways around all that.</p>

<p><img src="http://i.imgur.com/4773D.jpg" alt="Grunt JS" /></p>

<!--more-->


<h2>Grunt JSON Directive</h2>

<p>Grunt supports a number of <a href="https://github.com/gruntjs/grunt/blob/master/docs/helpers_directives.md">directives</a> out of the box.  These are callable from within you <code>grunt.js</code> file.  The gruntfile template uses one of these directives like so:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">pkg</span><span class="o">:</span> <span class="s1">&#39;&lt;json:package.json&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="cm">/* ... */</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is making the contents of your <code>package.json</code> file available to your grunt config.  And this is what we wanted!  So, if I want to put the version of my app into some grunt task config, I can use it like so:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">someTask</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">options</span><span class="o">:</span> <span class="s1">&#39;doStuff &lt;%= pkg.version %&gt;&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This would already be enough &#8211; it it worked all the time!  Turns out it doesn&#8217;t [tear].</p>

<h2>grunt.template</h2>

<p>This syntax (&#8220;&lt;%= someVar %>&#8221;) is referred to as a grunt.template.  It is based on  <a href="http://underscorejs.org/#template">underscore&#8217;s template</a> function.</p>

<h2>Grunt Plugin Support</h2>

<p>It turns out that all plugins are not created equal.  Some plugins do not support this syntax at all.  I wrestled with mainly two plugins</p>

<ul>
<li><a href="https://npmjs.org/package/grunt-exec">grunt-exec</a> - for executing scripts/commands in the shell</li>
<li><a href="https://npmjs.org/package/grunt-jade">grunt-jade</a> - for compiling jade templates</li>
</ul>


<p>As far as I can tell, neither plugin supports <code>grunt.template</code>.  Lameo.  In the case of <code>grunt-jade</code>, I actually switched plugins to <a href="https://npmjs.org/package/grunt-contrib-jade"><code>grunt-contrib-jade</code></a>, which states explicit support for <code>grunt.template</code> in the docs.  Other than the docs or trying it out, I otherwise don&#8217;t know how to determine support.</p>

<h2>Access package.json Directly</h2>

<p>Where I couldn&#8217;t find a plugin that explicitly supported <code>grunt.template</code>, I needed another solution.  Guided by the power of Google, I ran across a good Stack Overflow post on <a href="http://stackoverflow.com/questions/12408535/how-to-pass-in-package-json-array-to-grunt-js">getting <code>package.json</code> values into the <code>grunt.js</code> file</a>.</p>

<p>The post illuminated my dim mind:  Grunt runs in node.  Do what you would do in node.</p>

<p>Thusly, I just require the <code>package.json</code> file, and it is available.  Voila.  Who needs a stinkin template directive?  And it looks like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">pkgJson</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./package.json&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* use as desired */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">version</span> <span class="o">=</span> <span class="nx">pkgJson</span><span class="p">.</span><span class="nx">version</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>My one departure from the Stack Overflow suggestion was to use a different variable name on the require statement (&#8216;package&#8217; -> &#8216;pkgJson&#8217;).  &#8216;package&#8217; is a keyword that doesn&#8217;t pass linting.</p>

<h2>Grunt access package.json</h2>

<p>As it turns out, Grunt has not problem accessing <code>package.json</code>.  Grunt was already a venerable build tool option.  Now, it running Javascript, speaking to your Javascript project descriptor (<code>package.json</code>) is pure genius.  And genius that is easily accomplished? &#8211; noteworthy indeed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog Topics]]></title>
    <link href="http://jaketrent.com/post/blog-topics/"/>
    <updated>2012-10-22T17:01:00-06:00</updated>
    <id>http://jaketrent.com/post/blog-topics</id>
    <content type="html"><![CDATA[<p>I was inspired by <a href="http://jaketrent.com/post/platform-book-review/">Michael Hyatt&#8217;s book, Platform,</a> to start writing this blog.  As he suggested, I just started writing.  But also as he suggested, I&#8217;ve been percolating over what my blog topics will be.  I&#8217;ve just been writing for several weeks.  I&#8217;ve finally settled in on a number of categories that will help me focus a bit.  But each are plenty broad to be able to write on most any and all things related to software.</p>

<p><img src="http://farm1.staticflickr.com/1/2612308_456907e315_z.jpg" alt="Categories" />
http://flic.kr/p/eoxN</p>

<!--more-->


<h2><a href="http://jaketrent.com/post/category/code/">Code</a></h2>

<p>I&#8217;m a coder.  This is probably my favorite category.  This is what I wake up in the morning and do.  Posts in this category will be heavy on the code snippets.  They will sometimes link to demos.  These will be the most technical of the posts</p>

<h2><a href="http://jaketrent.com/post/category/software-design/">Design</a></h2>

<p>I have a desire to use and expand my design skills.  I&#8217;ll probably never commit enough time to really be a fantastic designer like many that I know, but here I&#8217;ll post my own feeble designs and talk about all things having to do with look and feel and user experience.</p>

<h2><a href="http://jaketrent.com/post/category/productivity/">Productivity</a></h2>

<p>Software is such a malleable medium.  It is an art in many ways.  Thus there are many ways to make it happen.  Some methods work better for others.  Some processes improve upon those of the past.  Some ways are better than others to make a team work well.  Ideas similar to these will be posted here.</p>

<h2><a href="http://jaketrent.com/post/category/reviews/">Reviews</a></h2>

<p>The world of software and technology is rich with resources and activity.  With so much to choose from, sometimes its helpful to have a suggestion or two on where to (or not to) focus some time and energy.  Software, books, and conferences are subjects we&#8217;ve seen so far.  The reviews are worth the price of admission.  Get them here.</p>

<h2><a href="http://jaketrent.com/post/category/announcement/">Announcements</a></h2>

<p>Public service announcements will include things about me or the blog in particular that are informational but not to any end.  This post fits in this category.  Where a full review is not offered, tidbits about the software world in general might fit here.</p>

<h2>Blog Topics</h2>

<p>It turns out that it&#8217;s somewhat hard to choose topics to write about on one&#8217;s blog.  At least it is for me.  The tech world is changing quickly.  I&#8217;m one that likes to change it and and change with it.  So, these topics may evolve.  They seem broad enough to continue to be applicable.</p>

<p>If you were to choose my next post, which category would it fit into?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile Designers]]></title>
    <link href="http://jaketrent.com/post/agile-designers/"/>
    <updated>2012-10-15T17:00:00-06:00</updated>
    <id>http://jaketrent.com/post/agile-designers</id>
    <content type="html"><![CDATA[<p>The Agile method of software creation contains many principles of development that will help create good software.  Some of my most successful projects have had as a key feature an agile designer.  As Jobs said, design <em>is</em> how it works, and that means that to really deliver well in an agile environment, design <em>and</em> development have to be on the agile train together.</p>

<p><img src="http://i.imgur.com/GOXzL.jpg" alt="Blueprint design" />
http://flic.kr/p/bpV8UA</p>

<!--more-->


<h2>K-man Keeps it Alive</h2>

<p>I work with a fantastic designer, the one and only <a href="http://www.composition3.com/">Kendall Chadwick</a>.  He has many great qualities of an agile designer:</p>

<ol>
<li><strong>He&#8217;s available</strong> - He lives with the cross-functional team.  He is there to participate in discussions.  It&#8217;s not hard to get a hold of him, so answers to questions flow more freely.</li>
<li><strong>He listens</strong> - He asks a lot of questions.  He&#8217;s not stuffy about his design sense.  He realizes that many needs are represented in a project and product.  He attends discussion meetings not necessarily focused on design but on the details of the product or process.</li>
<li><strong>He&#8217;s fully engaged</strong> - He knows his task doesn&#8217;t end when he clicks save in Photoshop.  He owns his designs and ideas all the way through the project, helping evolve them as we go. One of the most important things a software team member can do is remain fully engaged right up until the product ships.</li>
</ol>


<h2>Agile Experience Design</h2>

<p>I just finished a book called &#8221;<a href="http://www.amazon.com/Agile-Experience-Design-Designers-Continuous/dp/0321804813">Agile Experience Design</a>&#8221; by Lindsay Ratcliffe and Marc McNeill.  I&#8217;ve read a fair bit on agile methods and currently live in a quasi-agile (hehe, let&#8217;s actually call it mini-waterfalls) shop.  This book was intriguing as its authors are speaking to designers as they try to integrate better in an agile environment.</p>

<p>Of note was their Agile Design Manifesto:</p>

<p>Agile experience design is
Inclusive rather than elitist
Emergent with direction rather than up front
Integrated and collborative rather than handed over the fence
Considerate of customer, business, and technology needs rather than biased toward a single factor.</p>

<p>As a passing review:  The book won&#8217;t provide too much that is new to someone familiar with agile.  It speaks in terms that I suppose are probably more well related to by designers.  It&#8217;s a somewhat lengthy and dense book.  At times, it was hard to maintain reading momentum.  The book is beautiful &#8211; perhaps it had some real designers laying it out?</p>

<h2>The Power of Design</h2>

<p>It&#8217;s amazing how much depends on solid design.  The design will define the users&#8217; experience with the software.  It will never not matter.  To a great design in a software product is a difficult thing.  Good people in the design discipline who are fully engaged in adapting to the changing landscape of software creation are invaluable.  Agile designers rock.  Find one and figure out how to get him on your project.</p>

<p>What have your best designers done to make great software on your teams?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The JakeTrent.com Logo]]></title>
    <link href="http://jaketrent.com/post/the-jaketrent-dot-com-logo/"/>
    <updated>2012-10-15T16:59:00-06:00</updated>
    <id>http://jaketrent.com/post/the-jaketrent-dot-com-logo</id>
    <content type="html"><![CDATA[<p>A logo is an essential part of a brand or image.  For me, I like something iconic that is captured through an eye catching image that is simple and elegant.  Logos have to be one of the visual elements that I enjoy watching others&#8217; creativity in the most.  For JakeTrent.com, one of the goals has been to <a href="http://jaketrent.com/post/why-i-chose-a-wordpress-blog/">write on it more and customize it less</a>.  So, far I&#8217;ve met that goal.  But I really couldn&#8217;t let this otherwise nice <a href="http://wordpress.org/extend/themes/living-journal">LivingJournal</a> theme sit without adding a bit of pizazz of my own.  So, here&#8217;s how I created the logo.</p>

<p><img src="http://i.imgur.com/Hy8OR.jpg" alt="Logo progression" /></p>

<!--more-->


<h2>Inspiration</h2>

<p>I would say that my logo is a confluence of 3 other logos.</p>

<ol>
<li>The <a href="http://trentwalton.com/">Trent Walton</a> logo - It is minimalistic.  Initials for personal sites seems to be all the rage anyway.  It seems to be fitting
2.<a href="http://thenextweb.com/">The Next Web</a>logo - I loved how the type connected.  It&#8217;s very clean.  I almost went with red, but the site here has an accent color of yellow.  So in the end I went with that instead.</li>
<li>Another conference or software logo - I really can&#8217;t remember which it is.  Perhaps you can help me.  It&#8217;s similar to The Next Web logo except that its letters are blue, and they&#8217;re loopier.  And it runs in my mind that it&#8217;s a single word split over multiple lines.  If this is ringing a bell for you, let me know in the comments.</li>
</ol>


<h2>Sketching</h2>

<p><img src="http://i.imgur.com/mJPLW.jpg" alt="JT sketch" /></p>

<p>I&#8217;m a doodler at heart.  I really like it.  And typography art has been one of my favorites since elementary school.  So, this little project was fun and natural for me once I decided on just doing some initials.</p>

<p>In general, most of my designs are clean, modern, and minimalistic.  (At least those are the <em>good</em> words that come to mind. :)  So I was surprised when I decided I liked this design best.  After I drew it, I made a list of the things it reminded me of.  In order, they were: Tape worm, Christmas candy, measuring tape, bow on a present.  Hehe, what a logo, eh?!</p>

<h2>Illustrator</h2>

<p>I didn&#8217;t have access to a scanner at the time, and my digital camera was out of juice, so I didn&#8217;t make this sketch digital until later.  I just set to work in Illustrator with the pen tool.  I don&#8217;t feel very comfortable in Illustrator.  I feel much more adept at Photoshop.  But, I&#8217;ve been determined to better myself with the Pen tool especially and learn the Illustrator environment.  Given that, I&#8217;m happy with the paths that I drew.</p>

<p><img src="http://i.imgur.com/SqUDw.png" alt="JT paths" /></p>

<p>I only had one total restart.  This is version 2.  In planning for the gradients and just wanting to break up the path to make it easier to manage, I split the glyph into 3 separate paths.  I was just eye-balling the sketch, so it&#8217;s not entirely faithful.  Most obvious, the loop on the J has a much more tight, oval loop than in the sketch.  I can&#8217;t decide if I like that more or less.</p>

<h2>Final Polish</h2>

<p>With 3 separate paths, it was much easier to apply some cool-looking gradients to help give the shape some depth.  I chose yellow as the base color and orange as the shadow color.  Again, this was to match the theme.  And it is also reminiscient of a &#8220;dynaLink&#8221; logo that I did once upon a time.</p>

<p>It was a fun project.  I hope it adds a bit to the site and my other online identities (see <a href="https://twitter.com/jaketrent">Twitter</a> and <a href="https://plus.google.com/115032056022257436849/">Google Plus</a>).</p>

<p>It&#8217;s not perfect, but I wanted to ship it.  What do you like about it the most?  Or what suggestions might you have?  I&#8217;m also interested in which logos have given you the most inspiration in your work.</p>

<p><img src="http://i.imgur.com/HCjNf.png" alt="JT logo final" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paper by FiftyThree]]></title>
    <link href="http://jaketrent.com/post/paper-by-fiftythree/"/>
    <updated>2012-10-14T16:58:00-06:00</updated>
    <id>http://jaketrent.com/post/paper-by-fiftythree</id>
    <content type="html"><![CDATA[<p>Have you ever showed up in the App Store looking for an app in a particular category and been overwhelmed at the number of choices present?  This is certainly the case for the drawing and art app category.  But, there is at least one art app that stands out clearly from the others: <a href="http://www.fiftythree.com/paper">&#8220;Paper&#8221; by FiftyThree</a>.</p>

<p><img src="http://i.imgur.com/M0kYA.jpg" alt="Paper brushes" /></p>

<!--more-->


<h2>Best Brush</h2>

<p>The best feature of Paper is the one you get for free: the fountain pen.  It is easily the best brush I&#8217;ve used on any art app.  I&#8217;ve tried Sketchbook and Sketchbook Ink.  They are no where close.  It has the most beautiful tapered edges.  It responds best to speed and direction.  It comes the closest to a real fountain pen.</p>

<h2>Gestures</h2>

<p>The rewind/undo feature is invaluable when drawing.  It is immediately available by using two fingers.  You can activate it anywhere on screen.  This makes for very fast iterations on a drawing.  It&#8217;s both intuitive and fun.</p>

<h2>Flair</h2>

<p>The app has a great style.  It&#8217;s minimalistic and focused.  The notebook collection is fun.  The page flip is fun.  The UI is simple and powerful.  The focus remains on the drawing, where it should be.</p>

<h2>Sharing</h2>

<p>Sharing is straightforward and fast.  Exporting your drawings into your photo library is easy.  It&#8217;s just as easy to share on the web.  Tweet with &#8220;#MadeWithPaper&#8221; and you&#8217;ll show up on their <a href="http://madewithpaper.fiftythree.com/">blog</a>.</p>

<h2>Pricing</h2>

<p>I get the fountain pen brush for free, and I&#8217;m happy.  You pay $2 to get each of their 4 other brushes.  The next coolest is definitely the water color brush.  It totally makes sense to pay for these top-notch brushes.  Each brush takes considerable time and effort to develop.  Other apps &#8211; I&#8217;m looking at your Sketchbook &#8211; might include a pile of brushes at a lower price, but they are simply not as good.</p>

<h2>Wish List</h2>

<p>There are a few things that I think the app is lacking:</p>

<ol>
<li>The color palette is too simple.  I would love more options.  Apparently this is in the works.  There are many interesting <a href="http://support.fiftythree.com/fiftythree/topics/colour_palette">suggestions for expanding the palette</a> made on their forum.  <strong>Update:</strong> The latest update has a <a href="http://www.fastcompany.com/3002676/magical-tech-behind-paper-ipads-color-mixing-perfection">sweet color mixing tool</a>.</li>
<li>A zoom feature would be nice.  The difficult thing would be mapping it to an intuitive gesture, especially differentiating it from the super-awesome rewind gesture.  The resolution is high (2048x1536), but it sometimes doesn&#8217;t feel very high given that detail work is hard without a zoom.</li>
<li>Being able to change background/paper options would be awesome.  At this point, all you start with is a plain, off-white background with no texture.  The app is called &#8220;Paper&#8221;, afterall.  Wouldn&#8217;t it be nice to have some more options here?</li>
</ol>


<p>The product features are well-thought and the FiftyThree team obviously has a design philosophy.  So, my pining for new features is patient.  I love what they have thus far.</p>

<h2>Magical</h2>

<p>Using Paper really has been one of the magical moments of using the iPad.  It gives a slick experience that gets me drawing fast.  There are masterful, well-honed tools that make my art look good.  The use of gestures makes great use of the direct input ability of the touch device.  I&#8217;ve enjoyed many hours using Paper, and I look forward to more products from FiftyThree.</p>

<p>What is your favorite feature of Paper?  Or of another art/drawing app?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SORT Conf 2012]]></title>
    <link href="http://jaketrent.com/post/sort-conf-2012/"/>
    <updated>2012-10-10T16:57:00-06:00</updated>
    <id>http://jaketrent.com/post/sort-conf-2012</id>
    <content type="html"><![CDATA[<p>The sky lightens with the rising sun.  Wheels are on the road.  Friends are in the car.  The leaves are changing on the towering Wasatch mountains.  Finally, we pull up to the University of Utah Institute building.  Stepping out of the car, the October air is fresh and clear, high in the Rockies.  It&#8217;s a good day for a tech conference.  It&#8217;s a good day for SORT.</p>

<p><img src="http://i.imgur.com/q1cr5.jpg" alt="Wasatch mountains" />
http://flic.kr/p/bDP2fF</p>

<!--more-->


<p>SORT is an annual tech conference put on by the LDS Church.  The IT shops of the Church are all represented, including ICS, Family Search, the BYUs, CES, and probably a couple more.  Attendance last year, I think, was about 1200.</p>

<h2>Something For Everyone</h2>

<p>A unique feature of the conference is that there are soooo many subjects covered.  It&#8217;s really kind of a joke the number of tracks that are represented:</p>

<ol>
<li>EIM</li>
<li>Architecture</li>
<li>Design</li>
<li>Engineering</li>
<li>Partner Summit</li>
<li>Infrastructure</li>
<li>Leadership</li>
<li>PM</li>
<li>QA</li>
<li>Requirements</li>
<li>Security</li>
<li>Sharepoint/CRM</li>
<li>Solution Mgmt</li>
<li>Other (misc)</li>
</ol>


<p>Holy cow!  That&#8217;s a little nuts.  It started out as an engineering-only conference in 2009.  Since then, it&#8217;s blossomed.  I feel like it has been a double-edged sword:  The whole office is invited and should have something to soak up there, but it feels like the engineering track has been watered down a bit.</p>

<h2>Mostly Intro</h2>

<p>The topics are varied.  It&#8217;s often the case that there&#8217;s so much going on that you don&#8217;t know what to pick for each hour.  That is awesome!  Out of the presentations offered in the engineering track, I would love to see more intermediate or advanced topics.  More deep dives would be fun to geek out about.  I think we touch that in some cases, but in general, I feel that the presentations could be categorized as cursory introductions to topics.</p>

<h2>Free-flowing Sugar</h2>

<p>I am never lacking for ATP at SORT.  The day starts with a great breakfast.  Lunch is also delicious.  This year, both were provided by Kneaders bakery.  Between every session, there are plentiful mounds of various snack foods and refreshing beverages.  And being a conference put on by the Church, the drinks are top notch, ready for the Church membership. :)</p>

<h2>Entry to Speaking</h2>

<p>I have presented at SORT for each of the last 4 years.  You already know the bar can&#8217;t be that high.  If you submit a paper, you&#8217;ll probably be accepted.  I was 2 for 3 this year. :)  Some might worry that this would lower the quality of the conference material and presentation.  Yes, it probably does.  But, just like any conference, if you are a little careful in your schedule selection, you&#8217;ll find some fantastic speakers and super-compelling content.</p>

<h2>A Yearly Highlight</h2>

<p>In all, SORT is a fantastic experience.  I look forward to it next year.  It&#8217;s fun to review what I&#8217;ve learned and presented on in the past (Django, then jQuery plugins, then TDD on MarkLogic, this year BackboneJs).</p>

<p>It&#8217;s at a great, close location.  The company is fantastic.  The topics are varied and interesting.  The two days are time well-spent to me.  I feel tired (a sign of lots of fire hose drinking).  I&#8217;m inspired to learn a few new things:</p>

<ol>
<li>Do more CoffeeScript</li>
<li>Try SocketStream</li>
<li>Use Postgres&#8217; row_to_json</li>
<li>Try LawnChair and IndexDb</li>
<li>Do some user media capture</li>
</ol>


<p>Did any of you go this year?  What do you appreciate the most about SORT or your most recent conference?</p>
]]></content>
  </entry>
  
</feed>
