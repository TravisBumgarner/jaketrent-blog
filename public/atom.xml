<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jake Trent]]></title>
  <link href="http://jaketrent.com/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2016-05-04T10:06:03-06:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Depending on a Shared Lib]]></title>
    <link href="http://jaketrent.com/post/depending-on-shared-lib/"/>
    <updated>2016-05-04T09:49:00-06:00</updated>
    <id>http://jaketrent.com/post/depending-on-shared-lib</id>
    <content type="html"><![CDATA[<p>You build a product.  Someone else builds a shared lib.  You want to use the shared lib in your app for its apparent utility.  There come <em>new</em> features that the product team wants to adjust and add to your product.  The shared lib provides utility that is <em>related</em> to these new features but does not provide these new features per se.</p>

<p><img src="http://i.imgur.com/6TDbI7O.png" alt="a shared lib" /></p>

<!--more-->


<h2>Wishing the Shared Lib Did More</h2>

<p>You think to yourself, &#8220;I wish this shared lib did this for me too.&#8221;</p>

<p>You might even go further to start adjusting your expectations and timeline around the shared lib. &#8220;I might just <em>wait</em> until the shared lib does this for me.  It&#8217;s already doing stuff in this area.  It should do it the related stuff too.&#8221;</p>

<p>After all, you have a lot of other stuff you&#8217;d rather do.</p>

<h2>The Feature I Need</h2>

<p>If you wait, you may get lucky and get what you want.  Or, by the nature of the lib being shared, other constituents of the shared lib may have their own sway on it, pushgin it in a direction that doesn&#8217;t match the feature you need.   Or, the designer of the shared lib might not <em>want</em> to add in the new features that are expedient for your product, thinking them ill-fitting of the shared lib.</p>

<h2>Independence to Move</h2>

<p>You&#8217;re already waiting, and you say, &#8220;Let&#8217;s give the shared lib <em>more</em> to do.&#8221;  This seems like an equation for waiting more and shipping less.  You&#8217;re putting your product in the hands of someone else.  That someone else may mean well, and you may trust him to eventually deliver on what you want in your product.  But you are reducing your independence by simply relying on the shared lib and its author.</p>

<p>You&#8217;re already waiting.  There&#8217;s probably a reason for that.  What makes you think that if you continue <em>or increase</em> reliance on this lib that you&#8217;ll be waiting <em>less</em> in the future?  In practice, many shared libs have simply less manpower than full product teams.</p>

<p>Is it possible for you to affect the development timeline by your own effort and contribution to the shared lib?  If you&#8217;re willing and have time to contribute to the shared lib, why not use that time and effort to further the needs of your specific product?  If you&#8217;re not willing, then you really shouldn&#8217;t be picky about what you get and when you get it, right?</p>

<h2>Owning Your Product</h2>

<p>In the end you own and ship a product.  End users don&#8217;t care if you use this shared lib.  You can get the job done many ways.  A shared lib that solves some of your problems isn&#8217;t on the hook to solve all your future problems.  It&#8217;s <em>your</em> project.  Owning it is a mindset:  &#8220;I&#8217;m going to ship this thing as well and as quickly as I can.  I&#8217;ll do what I can to gather helpful resources, such shared libs, and ask for help in order to make this happen.  But in the end, I&#8217;ll make it work one way or another.&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[react-dnd With Text Drag Preview]]></title>
    <link href="http://jaketrent.com/post/react-dnd-text-drag-preview/"/>
    <updated>2016-04-21T08:04:00-06:00</updated>
    <id>http://jaketrent.com/post/react-dnd-text-drag-preview</id>
    <content type="html"><![CDATA[<p><a href="http://gaearon.github.io/react-dnd/">react-dnd</a> is a fantastic library for implementing drag and drop features in a React application.  In browsers, you have the ability to specify a drag preview for the thing your dragging.  Images are easy.  Text takes more work &#8211; because you need to generate an image.</p>

<p><img src="http://i.imgur.com/E5NwBek.png" alt="react-dnd text drag previews" /></p>

<!--more-->


<p>I love the abstractions in react-dnd.  They seem very elegant.  We&#8217;re going to need another abstraction here, because there&#8217;s a short list of things that we need to do in order to get a text-based drag preview showing up in our app.  These things are required because drag previews in browsers only support images.  Thus we will need to take source text from our app code and convert it into an image in order to hand it off to the drag and drop api.</p>

<h2>Drag Text from a Canvas</h2>

<p>To convert text to an image, we must:</p>

<ol>
<li>Create a canvas element</li>
<li>Fit the canvas to our text</li>
<li>Style the canvas</li>
<li>Create a new image element with the canvas data as src</li>
</ol>


<h4>Create a Canvas Element</h4>

<p>We choose a canvas element because we can write text onto it and eventually export its bytes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;canvas&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s1">&#39;2d&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Fit Canvas to the Text</h4>

<p>We want the drag preview to be dynamically sized.  This is because the text can change in length.   The key to our success is available on the <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/measureText">Canvas 2D context as <code>measureText</code></a>.  This function is available in IE9+.  In case you don&#8217;t have access to this function, you can attempt a crude fallback.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">getTextWidth</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">fontSize</span><span class="p">,</span> <span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">measureText</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">measureText</span><span class="p">(</span><span class="nx">text</span><span class="p">).</span><span class="nx">width</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">perCharWidth</span> <span class="o">=</span> <span class="nx">fontSize</span> <span class="o">/</span> <span class="mf">1.7</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span> <span class="o">*</span> <span class="nx">perCharWidth</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Style the Canvas</h4>

<p>Once you know how big to make your drag preview, draw a rectangle upon which you can then draw your text.</p>

<p>In addition to drawing the main content, there are also other stylistic adjustments that you can make via <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D">attributes on <code>CanvasRenderingContext2D</code></a>.  Attributes like <code>fillStyle</code>, <code>strokeStyle</code>, and <code>font</code> are available.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">ctx</span><span class="p">.</span><span class="nx">rect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">rectWidth</span><span class="p">,</span> <span class="nx">rectHeight</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ctx</span><span class="p">.</span><span class="nx">save</span><span class="p">()</span>
</span><span class='line'><span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="nx">backgroundColor</span>
</span><span class='line'><span class="nx">ctx</span><span class="p">.</span><span class="nx">strokeStyle</span> <span class="o">=</span> <span class="nx">borderColor</span>
</span><span class='line'><span class="nx">ctx</span><span class="p">.</span><span class="nx">fill</span><span class="p">()</span>
</span><span class='line'><span class="nx">ctx</span><span class="p">.</span><span class="nx">stroke</span><span class="p">()</span>
</span><span class='line'><span class="nx">ctx</span><span class="p">.</span><span class="nx">restore</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Create a new Image Element</h4>

<p>Remember, drag preview requires an image to render when the user is dragging.  Set the <code>src</code> of the image to the data from the canvas.  This will transfer everything you just created in the canvas into an image.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">img</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Image</span><span class="p">()</span>
</span><span class='line'><span class="nx">img</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">toDataURL</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This image should be ready to use in react-dnd&#8217;s <a href="http://gaearon.github.io/react-dnd/docs-drag-source-connector.html"><code>connect#dragPreview</code></a>.</p>

<h2>A Library to Help</h2>

<p>When making a React drag and drop app, I usually don&#8217;t look forward to using the sometimes-arcane API of the <code>canvas</code> element.  So, I wrapped it up so I wouldn&#8217;t have to look at it as often.</p>

<p>If you think this might help you, take a look at <a href="http://npm.im/react-dnd-text-dragpreview">react-dnd-text-dragpreview</a>.</p>

<p><a href="http://npm.im/react-dnd-text-dragpreview"><img src="http://i.imgur.com/glegZVc.gif" /></a></p>

<p>How do you go about doing text-based drag previews?  Any other good tips?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make Your Project Fun]]></title>
    <link href="http://jaketrent.com/post/make-your-project-fun/"/>
    <updated>2016-04-06T07:16:00-06:00</updated>
    <id>http://jaketrent.com/post/make-your-project-fun</id>
    <content type="html"><![CDATA[<p>You work every day.  It&#8217;s a part of life.  It&#8217;s a good part of life, and you have the power to make it better.  Ever since you were  young child, you knew what the magic ingredient was: fun!</p>

<p><img src="http://i.imgur.com/ACkhQQK.jpg" alt="Fun" /></p>

<!--more-->


<p>Making software is a creative endeavor.  It allows situations for lots of free thinking.  It comes with the satisfaction of creating something from nothing.  It allows stretching of your cognitive ability.  This is all made more enjoyable by having a mental affinity for fun.</p>

<p>Fun people create fun work.  Fun people are fun to work with.  It&#8217;s fun to look at fun people&#8217;s work.  Fun, fun, fun.  [We can&#8217;t keep doing this, Bob.]</p>

<p>So look for ways to make your project fun.  Here are a few ideas.</p>

<h2>404 Page</h2>

<p>I love the creative outlet that 404 pages have become.  There are blogs of the &#8220;Top 25 Funniest 404 Pages&#8221; and the like.  It is now common to have companies try to make the most uncommon of &#8220;page not found&#8221; pages.  You look up to the sites that take the time to make a witty 404 page.  Make one yourself.  If your brand isn&#8217;t funny (maybe it should be!), at least flirt with funny and push the envelope on happy as much as you can &#8211; and then one step more.</p>

<p>Here&#8217;s a 404 page that our team made before the designers had come to a conclusion on a recent project.  It&#8217;s still there.  It&#8217;s one of my favorite additions to the site.</p>

<p><img src="http://i.imgur.com/HobT77O.png" alt="Doge 404" /></p>

<p>You&#8217;ll find that fun projects also present opportunities to do things that you wouldn&#8217;t usually otherwise do.  For instance, I spent half an hour drawing vectorized Doge &#8211; again, a favorite experience in my memory.</p>

<h2>Animate Things</h2>

<p>I am drawn to almost any page that includes some sort of data visualization.  I love making those pages.  Part of the reason is that there&#8217;s always room to add a bit of your own flair to the thing.  Designers rarely get to the point where they start defining animations, and I love animations, so I get to experiment with what I like and fill that in later.  And animation is usually impressive to users later, so the payoff is nice.</p>

<p>Here is a fun animation of a gauge that I made for a project that was meant to evoke a car engine revving at startup:</p>

<p data-height="279" data-theme-id="1749" data-slug-hash="eloGk" data-default-tab="result" data-user="jaketrent" data-preview="true" class="codepen">See the Pen <a href="http://codepen.io/jaketrent/pen/eloGk/">D3 Gauge</a> by Jake Trent (<a href="http://codepen.io/jaketrent">@jaketrent</a>) on <a href="http://codepen.io">CodePen</a>.</p>


<script async src="http://jaketrent.com//assets.codepen.io/assets/embed/ei.js"></script>


<h2>Don&#8217;t Use the Prebuilt</h2>

<p>At this point in the UI design timeline, there are many, many prebuilt widgets for today&#8217;s current look that you can just slap on the page.  You might get done early, but it won&#8217;t look original.  Your site will just look like many, many other sites.  In my opinion, this is an unwelcome trend in web and mobile app design today &#8211; everything seems to be converging.  But this just makes original designs all the more special and appreciated.</p>

<p>In a recent project, I could have thrown in any of a host of prebuilt loading spinners, but I wanted to do something different and quirky.  We had charts that relied on async data coming from a server, so we had the UI show a chart loading state.  Here&#8217;s what I came up with for the line chart:</p>

<p><img src="http://i.imgur.com/5gCGnzk.gif" alt="Line chart loading" /></p>

<p>It&#8217;s meant to evoke a heart monitor.  And for the bar chart:</p>

<p><img src="http://i.imgur.com/7WetiZ8.gif" alt="Bar chart loading" /></p>

<p>I was going to speed it up to make it more equalizer-ish, but then slowed it down so-as to be less busy.  Feel free to <a href="https://github.com/jaketrent/react-chart-loading">download and use it</a> yourself.</p>

<h2>Have Some Fun Team Spirit</h2>

<p>I&#8217;ve previously already mentioned my love for team and project <a href="http://jaketrent.com/post/in-favor-codenames/">codenames</a>.  You should get one, and it should come from a universe of thought that&#8217;s original or exciting and fun to you.  This is to please you and your team, not anyone else.  Make T-shirts.  I&#8217;ve thought about this often, but have never produced my own, so this suggestion is for me.  For one of my teams, I even picked a <a href="https://www.youtube.com/watch?v=0gC7bmIDQjY">theme song, Moliendo café,</a> to go with our team code name, Ranchero.  Those are happy memories of good times.</p>

<p>Make a logo.  Choose something that will be fun.  Imagine it as a sticker on the back of a laptop lid.  Will in be awesome there?  When measured in logos, the coolest frontend web framework available today is <a href="http://emberjs.com/">Ember</a>:</p>

<p><img src="http://i.imgur.com/dwho9tp.png" alt="Ember logo" /></p>

<p>When measured in logos, the coolest tech conference of the past year was <a href="http://www.reactrally.com/">React Rally</a>:</p>

<p><img src="https://d13yacurqjgara.cloudfront.net/users/700730/screenshots/2171778/evilsquid_1x.png" alt="React Rally logo" /></p>

<p>Who doesn&#8217;t think a bespectacled (Tom) hamster or a nuclear-powered squid aren&#8217;t the funnest logos one could plaster on his laptop?  We need more mascots.</p>

<p>In short, have fun.  Don&#8217;t wait for your project to become fun.  Make it fun.  Make your project fun.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Change Default NPM License]]></title>
    <link href="http://jaketrent.com/post/change-default-npm-license/"/>
    <updated>2016-03-24T15:45:00-06:00</updated>
    <id>http://jaketrent.com/post/change-default-npm-license</id>
    <content type="html"><![CDATA[<p>Npm has a fantastic init tool for creating the descriptor for your project.  It will gladly provide defaults for you.  These are sometimes helpful.  Wouldn&#8217;t it be more better to define your own defaults?</p>

<p><img src="http://i.imgur.com/P34k4L5.png" alt="NPM" /></p>

<!--more-->


<h2>Npm Init</h2>

<p>If you&#8217;re doing any JavaScript development, NPM is likely a helpful tool for your toolbox.  To add a descriptor with meta information, including things like 3rd-party project dependencies, you need a <code>package.json</code> for your project.  To get this file, you can edit it by hand or have one generated for you.  To generate it, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm init</span></code></pre></td></tr></table></div></figure>


<p>You will then be prompted to answer a series of relevant questions, such as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>name: (hello-riot)
</span><span class='line'>version: (1.0.0)
</span><span class='line'>description:
</span><span class='line'>entry point: (index.js)
</span><span class='line'>test command:
</span><span class='line'>git repository:
</span><span class='line'>keywords:
</span><span class='line'>author:
</span><span class='line'>license: (ISC)
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>The values in parenthesis are the defaults.  Defaults are determined from things like the directory you&#8217;re in, the git repository you&#8217;re in, etc.</p>

<h2>Set Npm Init Defaults</h2>

<p>Some defaults are just the NPM-provided conventions.  They don&#8217;t know much more to provide.  But you can provide your own defaults for your system by editing <code>~/.npmrc</code>.  Or you can use the cli to add to this file from the terminal.  For instance, the two I like to change are my author name and the license:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm config set init-author-name "jaketrent"
</span><span class='line'>npm config set init-license "MIT"</span></code></pre></td></tr></table></div></figure>


<p>Now, you can init and just take the defaults without pressing enter to answer the question with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm -y</span></code></pre></td></tr></table></div></figure>


<p>And what you get are the defaults you&#8217;ve already decided you like.</p>

<p>To know what other things you can change as defaults, use <code>npm help 7 config</code> and grep for <code>init-</code>-prefixed values.  Happy npm&#8217;ing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selecting a Directory in Electron]]></title>
    <link href="http://jaketrent.com/post/select-directory-in-electron/"/>
    <updated>2016-03-21T10:12:00-06:00</updated>
    <id>http://jaketrent.com/post/select-directory-in-electron</id>
    <content type="html"><![CDATA[<p>Electron will help you make some sweet native desktop apps using web tech.  Now that you&#8217;re on the desktop, one of the cool things you can do is access the filesystem.  There are a couple ways to access the filesystem via the file open dialog using user input events.</p>

<p><img src="http://i.imgur.com/Vp8Zuix.jpg" alt="Electron" /></p>

<!--more-->


<h2>From HTML</h2>

<p>In Electron, you use HTML for your views.  Thus, if you want the user to select a directory from the UI, you can use a <code>&lt;input type="file" /&gt;</code>, just like in a normal web app.</p>

<h4>Select Only Directories</h4>

<p>To select only directories, there is an attribute you can add to the <code>input</code> tag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;file&quot;</span>
</span><span class='line'>       <span class="na">webkitdirectory</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This wouldn&#8217;t be reliable in a cross-browser environment.  But since, on Electron, you&#8217;re only targeting Chrome, you&#8217;re golden with whatever Chrome has available to you.</p>

<h4>Bonus: Programmatically click on <code>input[type="file"]</code></h4>

<p>As a bonus, Electron doesn&#8217;t have the sandbox security restrictions that you would have in a standalone browser like Chrome.  In browsers, sometimes the file open dialog will fail if anything triggers the dialog besides the user clicking with their own mouse on the file input field.  Sometimes getting at the contents of the file will fail.  I&#8217;m too lazy to test which browsers do what at this point, but sad past experience has determined that this is unreliable.</p>

<p>But in Electron, you are again liberated.  For instance, <code>input[type="file"]</code> is ugly and sometimes hard to style into exactly what you want.  So, it&#8217;s often that you&#8217;ll want to create a custom widget, that when <em>it&#8217;s</em> clicked, the <code>input[type="file"]</code> is clicked and the file open dialog is popped.</p>

<p>Given:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&quot;party&quot;</span> <span class="na">class=</span><span class="s">&quot;very-sweet-looking&quot;</span><span class="nt">&gt;</span>Open<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;business&quot;</span> <span class="na">type=</span><span class="s">&quot;file&quot;</span> <span class="na">style=</span><span class="s">&quot;display: none&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This totally works:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;party&#39;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">_</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;business&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">()</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>From Electron API</h2>

<p>In the main process, you have access to an Electron API, <code>dialog</code>.  <a href="http://electron.atom.io/docs/v0.37.2/api/dialog/#dialogshowopendialogbrowserwindow-options-callback"><code>dialog#showOpenDialog</code></a> is a programmatic API that allows you to open the same open file dialog that you&#8217;re used to in the browser.  What&#8217;s even better is that here you can set that only directories should be openable rather easily:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// mainWindow is your instance of BrowserWindow</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">electron</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;electron&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">dialog</span> <span class="o">=</span> <span class="nx">electrong</span><span class="p">.</span><span class="nx">dialog</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">selectDirectory</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">dialog</span><span class="p">.</span><span class="nx">showOpenDialog</span><span class="p">(</span><span class="nx">mainWindow</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">properties</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;openDirectory&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to integrate this main process code with user interaction, we need to do a few things.</p>

<p>First, export the code from your main process module:</p>

<figure class='code'><figcaption><span>main.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">selectDirectory</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// dialog.showOpenDialog as before</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then in the renderer process, capture user events as before and call the main process function, <code>selectDirectory</code>:</p>

<figure class='code'><figcaption><span>renderer.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">electron</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;electron&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">remote</span> <span class="o">=</span> <span class="nx">electron</span><span class="p">.</span><span class="nx">remote</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">mainProcess</span> <span class="o">=</span> <span class="nx">remote</span><span class="p">.</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./main&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;party&#39;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">_</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">mainProcess</span><span class="p">.</span><span class="nx">selectDirectory</span><span class="p">()</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Works pretty nicely, but feels weird that you have to go back to the main process to access a view-related API (as of Electron 0.37).</p>

<p>So, if there are two ways to do this, there has to be another, right?  What are you doing to select a directory in Electron?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Determining the Health of Your Culture]]></title>
    <link href="http://jaketrent.com/post/determine-health-of-culture/"/>
    <updated>2016-03-21T08:59:00-06:00</updated>
    <id>http://jaketrent.com/post/determine-health-of-culture</id>
    <content type="html"><![CDATA[<p>Culture will emerge after a group of people attempt to solve problems again and again in a certain way.  This &#8220;way&#8221; becomes the culture.  If you are deliberate in your choices on how to solve problems, you will be deliberate in creating a culture.  Once you have a culture in mind and are working toward it or trying to maintain it, how do you determine how healthy it is?  Clay Christensen has a simple question you can ask yourself.</p>

<p><img src="http://i.imgur.com/Y1WvMlu.jpg" alt="Healthy culture" /></p>

<!--more-->


<h2>How Will You Measure Your Life?</h2>

<p>Clay Christensen wrote a book called <a href="http://amzn.to/1RgjFWA">&#8220;How Will You Measure Your Life?&#8221;</a>.  The book applies some of Christensen&#8217;s theories that might have originally pertained to business to one&#8217;s life and family.  It is a thought-provoking book.</p>

<p>In it, he talks about how to check and see if your culture &#8211; whether in family or business &#8211; is what you hope it might be.  He writes:</p>

<blockquote><p>You can tell the health of a company&#8217;s culture by ask, &#8220;When faced with a choice on how to do something, <strong>did employees make the decision that the culture &#8216;wanted&#8217; them to make?</strong>  And was the <strong>feedback they receive consistent with that?</strong>&#8221;  If these elements aren&#8217;t actively managed, then a single wrong decision or wrong outcome can quite easily send a firm&#8217;s culture down entirely the wrong path.</p></blockquote>

<h2>Two Good Questions</h2>

<p>There are only two questions, and they&#8217;re easy to remember.  The first question assumes that were you or other culture leaders and exemplars to look at a decision, you&#8217;d make a certain choice.  Between each other, you likely wouldn&#8217;t make the exact same choice, but you&#8217;d favor certain types of responses.  You would hope people at your company would respond in a similar way.  You&#8217;ve thought about it.  You care.  You do things deliberately.  There definitely will be a diversity of opinion and approaches in your company.  But in the major, defining areas that you and your company care deeply about, you hope for a certain type of response and would like to avoid others.</p>

<p>The second question assumes that you&#8217;re actively managing the culture at your company.  It means that you are engaged in the company.  You see decisions being made.  You make and you see other people making decisions.  You don&#8217;t make decisions for them, but you are nearby, and you care.  You talk to your people.  You ponder what you have observed.  You help people fall into the pit of success, guided by the culture.  You talk up the culture in theory, stating your values, and in practice, giving specific feedback to people.</p>

<h2>A Mental Survey</h2>

<p>So how is your culture?  Thinking into the recent past or anticipating the future, are your teammates making the decisions the culture &#8216;wanted&#8217; them to make?  Is your feedback reinforcing the values of the culture?</p>

<p>Here are a few situations you might ponder:</p>

<ul>
<li>How was a system-wide architectural decision recently made?</li>
<li>How was an expenditure recently discussed with a team member?</li>
<li>How were lunch breaks recently discussed and treated?</li>
<li>How was a potential candidate recently treated in the hiring pipeline?</li>
<li>How was somebody treated when recently fired?</li>
<li>How was work quality recently measured and discussed?</li>
<li>How did a product team decide on what features to build next?</li>
<li>How was a goal recently defined for a team or team member?</li>
</ul>


<p>In these situations, where decisions were made, think about who was involved, how they acted, what was communicated and enforced &#8211; especially relating to your own involvement.  Compare what you remember and have considered with what you think about the culture.  Is the stated company culture reinforced by recent events at the company?  Are recent events and decisions at odds with what most everyone is <em>saying</em> the culture is?  How might you be able to close the gap?</p>

<p>Be willing to admit the truth where you find it.  No culture is perfect.  No team member is perfect.  Be ready with some humility and a growth mindset.  Appreciate what your culture can add to your company and to your personal happiness enough to ask the questions and improve your approach.  Be willing to ask for forgiveness where you have deviated from your stated cultural values.</p>

<p>What have you found to be helpful in determining the health of your own company or team&#8217;s culture?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bring Your Listeners With You]]></title>
    <link href="http://jaketrent.com/post/bring-your-listeners-with-you/"/>
    <updated>2016-03-20T09:03:00-06:00</updated>
    <id>http://jaketrent.com/post/bring-your-listeners-with-you</id>
    <content type="html"><![CDATA[<p>Remember that last time that you spoke at a conference and really felt like you had connected with your audience?  You were able to keep them with you for the length of your journey.  You felt like they grew and were enlightened with you.  There&#8217;s a certain magic to that, and there&#8217;s also some deliberate thought you can give the experience that will help it happen more often.</p>

<p><img src="http://i.imgur.com/keI6970.jpg" alt="Speaking" /></p>

<!--more-->


<h2>Set Expectations</h2>

<p>Start settings expectations in the abstract for your talk.  If you set accurate expectations, you&#8217;ll be more likely to get the right audience.  I&#8217;m all for fun descriptions.  Also make sure it is very clear what the subject is, the format of the talk, and the desired outcome.  Use keywords that will be tipoffs, such as &#8220;with code&#8221;, &#8220;high-level concepts&#8221;, &#8220;preview of pre-release tech&#8221;, or &#8220;soft skill&#8221;.</p>

<p>Set expectations at the beginning of the talk.  This will help focus the learners on what is to be accomplished.  Even if your talk wasn&#8217;t what they had originally imagined, they will be able to adjust to a mindset more aligned with the topics that you are to cover.  They&#8217;ll setup a mental bin for the new information to go in.  They&#8217;ll create mental hooks that they can connect the new information you&#8217;re sharing to their previous experience.</p>

<p>Set expectations in the topic or activity transitions.  When you change gears, state that you&#8217;re doing so.  By doing this, you&#8217;ll be less likely to lose learners along the way.  Just as in the beginning, you&#8217;ll set up a context for what&#8217;s coming.</p>

<h2>Clear Definitions</h2>

<p>The ground that you&#8217;re about to cover in your talk will be very alien to some.  They may have no background in your topic.  The broad spectrum of learner backgrounds is a challenge in any talk.  If you want to bring as many learners as possible into unknown territory, be willing to take a moment and establish clear definitions.  You don&#8217;t have to teach advanced topics from the ground up every time.  Again, expectations in your talk&#8217;s abstract will help with this.  But if you want to allow new learners the opportunity to file away as much useful information as possible, give some basic definitions to serve as a mental foundation.</p>

<p>Even though it may be repetitive for the advanced learner, it may still be useful for them as a reminder or showing some nuance in your own perspective that they didn&#8217;t have before.  Once you establish the definitions and use that language consistently as you glob on new concepts in your talk, it will be easier to listeners to keep up and associate concepts more easily.</p>

<h2>Show Variety</h2>

<p>You will need to be able to keep attention in addition to just sharing pure information.  If people aren&#8217;t willing to put down their twitter stream and pay attention, the information you are speaking into the air will go straight to /dev/null.</p>

<p>There is an entertainment value that can increase the total effectiveness of your talk.  It shouldn&#8217;t usually be the core of your talk or main reason for people to come hear you, but it can help.  Be light-hearted.  Help people laugh.  Smiling, laughing people learn better.  Vary your voice in volume, speed, and expression to recapture attention.  Spend time on engaging visual aids (the good ones really do take a fair amount of time to produce).</p>

<h2>Let Them Go</h2>

<p>Your learners must trust you to come with you to the conceptual place that you&#8217;re going.  Be worthy of that trust.  Get to assigned room and start on time.  When the session time is over, end.  This is the respectful thing to do.  Prepare for the eventuality of bad timing estimates or technical difficulties or venue problems.  Have your material available online for later.</p>

<p>It is good to say, &#8220;I&#8217;m over time.  We have just a little more to cover.  You can get up and leave if you&#8217;d like.  It&#8217;ll be ok.  I&#8217;m going to go quickly.&#8221;  It&#8217;s better to say, &#8220;We&#8217;re at time.  The material is available at jaketrent.com/blogPost.  Please talk to me afterward and on Twitter @jaketrent.  Thank you for coming.&#8221;  When time is up, wrap it up and end.</p>

<p>Being able to take listeners with you on a mutual teaching and learning experience is a great privilege.  It takes preparation, work, and a bit of jit magic.  These are a few ideas.  What other ideas do you have for helping learners come along with you in that experience?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fluent Conf Review]]></title>
    <link href="http://jaketrent.com/post/fluent-conf-review/"/>
    <updated>2016-03-15T06:37:00-06:00</updated>
    <id>http://jaketrent.com/post/fluent-conf-review</id>
    <content type="html"><![CDATA[<p>I went to my first <a href="http://conferences.oreilly.com/fluent/javascript-html-us">Fluent conf</a> this year.  It was a generally good experience.  I enjoyed the company and the topics.  Maybe I&#8217;ll go again.</p>

<p><img src="http://i.imgur.com/aG1CC3U.jpg" alt="Fluent Conf" /></p>

<!--more-->


<h2>Training</h2>

<p>I went to the one-day training before the conference, where there were half and quarter day sessions around a single topic.  I went to an awesome &#8220;Building a desktop app with Electron&#8221; training, where the content was great, the teacher, Steve Kinney, was exceptional, and I felt accomplished as we learned new things and got to create something together with my own typing fingers.  It went very quickly and probably could have been a bit more solid with even a full day of training.</p>

<p>I did two other trainings that weren&#8217;t nearly as good.  The people were smart, imparting what obviously took some brains to figure out, but they weren&#8217;t engaging as teachers and couldn&#8217;t capture my attention well enough to make me feel like I was along for the ride.  Pre-conference prep material suggested that we&#8217;d be producing something together in these sessions as in the Electron session.  That would have been awesome.  I am a kinetic learner.  Unfortunately, there was no attempt to build upon pre-session work, and both other sessions felt dull in comparison to the morning&#8217;s ride.</p>

<h2>Keynotes</h2>

<p>The mix of keynotes was great at the conference.  There were some heavy hitters: Brendan Eich and Doug Crockford.  There were some new, refreshing faces and topics from the likes of Laurie Voss and Alex Russell.  The keynotes were shorter than others I&#8217;ve seen &#8211; shorter than even the other sessions.  They felt almost like lightning talks, but from big web tech personalities.  The content was varied.  The delivery was all very good.  These were high points in the conference.</p>

<h2>Sessions</h2>

<p>The sessions were mostly good.  I have a general like-dislike relationship with conference talks.  I have to remember that the point is not to be permanently changed at the end of the talk or to have immediately picked up some great new skill.  The probable best place that I can be at the end of a session is inspired, pointed in a new, interesting direction, with enough information to know what I don&#8217;t know and go figure it out.</p>

<p>There was a ton of content, with 6 tracks most hours.  Some of the highlight talks that I went to were: &#8220;This talk is not available offline&#8221;, by Alex Rickabaugh, talking about &#8220;Progressive Web Apps&#8221;, Service Workers, and how to create a more native-like web experience; &#8220;How to write a worthwhile test&#8221;, by Justin Searls, which was chock full of valuable insight for test creation and tooling; and &#8220;Building our reactive future&#8221;, by Matthew Podwysocki, talking about Rx.js and how Observables are expressive coding constructs &#8211; he was hilarious too.  I&#8217;m sure I missed some other great ones.  Should I have bought that expensive &#8220;watch the recorded videos later&#8221; package?</p>

<p>I did attend a few less-than-stellar sessions, during which I read all the docs on <a href="http://cycle.js.org/">Cycle.js</a> and worked through all the examples.  It&#8217;s a super interesting framework and fit in with a large tech theme from the conference, <a href="http://reactivex.io/documentation/observable.html">Observables</a>.</p>

<h2>Venue</h2>

<p>San Fransisco is a fun city.  I love walking around the city.  It was unfortunately unusually overcast and drizzly weather while we were there.  We had less rain than was forecast, so that was good, and we were able to get out into the city at night.  Perhaps because of all the cloud cover, it seemed like it was always super late by the time we got out.</p>

<p>The conference was all held inside the Marriot Marquee.  It was held in the basement.  There were no windows.  Thankfully, they had good HVAC to mostly evacuate all the nerd smell.  It was funny going in the first time, because you go down about 3 flights of escalators, making it feel like you&#8217;re on your way to the subway.  I don&#8217;t know how many 1000+ attendees there were, but it was amazing that the hotel had that much space.  The basement must have extended underground underneath the adjoining plaza.  The Marriot was nice.  The staff were very friendly.  There was the strict policing of badge checking at most entrances &#8211; that was annoying.</p>

<p>Getting to and from San Fransisco proved laborious with a hefty layover on the way in and a hefty delay getting out, due to weather.  This task alone made me consider just buying the virtual conference option next time.  It was fun to meet a bunch of people from all over the globe though.  Perhaps they could all come visit me in the Rocky Mountains next time, and we could party here.</p>

<h2>Food</h2>

<p>Lunches were good.  The food was good and interesting.  The lines went quickly, especially on day 2, where it seemed that they had 12 independent lines for lunch.  That was awesome.  Apparently I just got lucky the first day.  There were enough people that a proper dinner and after party didn&#8217;t happen.  There was a reception the first night, which consisted of an hour of other people drinking alcohol.  I had a water.  Water from Norway never tasted so good.</p>

<h2>Swag</h2>

<p>The conference gave out water bottles.  They were on a shelf in the hall.  Oh, and they gave out name tags.  Beyond that, there was an exhibition hall with vendors giving out the usual &#8211; stickers, t-shirts, and trinkets.  I love a good sticker and found quite a few.  Github had the best.  Codeschool had some awesome ones too, such as 80s neon &#8220;Staying Sharp with Angular&#8221;.  So good.  I also replenished my summer wardrobe of T-shirts.  Heroku did go beyond T-shirts, which is a trend we should encourage, and now I have some rockin&#8217; purple socks.</p>

<h2>Going Again</h2>

<p>Fluent was a great experience and a highlight web conference for the year.  I&#8217;ve heard it has been even better in years past.  It&#8217;s probable that I&#8217;d go again to try it out again and hope for an even better experience.  Thanks, Fluent, and I&#8217;ll see you next time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Console.log Deep Objects]]></title>
    <link href="http://jaketrent.com/post/console-log-deep-objects/"/>
    <updated>2016-03-14T15:13:00-06:00</updated>
    <id>http://jaketrent.com/post/console-log-deep-objects</id>
    <content type="html"><![CDATA[<p>With deep object structures, <code>console.log</code> can leave you wondering what&#8217;s down in the depths of the objects you&#8217;re printing out.  Here&#8217;s a quick help from Node stdlib.</p>

<p><img src="http://i.imgur.com/00WAox4.jpg" alt="console.log deep objects" /></p>

<!--more-->


<p>You can usually see the objects that you&#8217;re <code>console.log</code>ing, and life is good:</p>

<p>Given:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">stickers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">are</span><span class="o">:</span> <span class="s1">&#39;fun&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;stickers&#39;</span><span class="p">,</span> <span class="nx">stickers</span><span class="p">)</span>
</span><span class='line'><span class="c1">// Outputs: stickers { are: &#39;fun&#39; }</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can see the whole object, and we&#8217;re happy.  We can even do objects up to a depth of 3 sub objects, and it works great:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">stickers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">are</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">even</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">more</span><span class="o">:</span> <span class="s1">&#39;fun&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;stickers&#39;</span><span class="p">,</span> <span class="nx">stickers</span><span class="p">)</span>
</span><span class='line'><span class="c1">// Outputs: stickers { are: { even: { more: &#39;fun&#39; } } }</span>
</span></code></pre></td></tr></table></div></figure>


<p>If, however, we have a potentially deeply-nested object, we&#8217;ll get some of our data truncated:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">stickers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">are</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">even</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">more</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">than</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">outrageously</span><span class="o">:</span> <span class="s1">&#39;fun&#39;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;stickers&#39;</span><span class="p">,</span> <span class="nx">stickers</span><span class="p">)</span>
</span><span class='line'><span class="c1">// Outputs: stickers { are: { even: { more: [Object] } } }</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>[Object]</code>s are cool and all, but not very informative.</p>

<p>To get at this information, use <a href="https://nodejs.org/api/util.html#util_util_inspect_object_options"><code>util.inspect</code></a> from the <a href="https://nodejs.org/api/util.html#util_util_inspect_object_options">stdlib</a>.  Here, you can set a depth option to be higher, letting you peer into those deep objects in the console:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">util</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;util&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">stickers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">are</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">even</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">more</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">than</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">outrageously</span><span class="o">:</span> <span class="s1">&#39;fun&#39;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;stickers&#39;</span><span class="p">,</span> <span class="nx">util</span><span class="p">.</span><span class="nx">inspect</span><span class="p">(</span><span class="nx">stickers</span><span class="p">,</span> <span class="p">{</span> <span class="nx">depth</span><span class="o">:</span> <span class="mi">4</span> <span class="p">}))</span>
</span><span class='line'><span class="c1">// Outputs: stickers { are: { even: { more: { than: { outrageously: &#39;fun&#39; } } } } }</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your data is yours again!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitignore System Files]]></title>
    <link href="http://jaketrent.com/post/gitignore-system-files/"/>
    <updated>2016-03-14T14:43:00-06:00</updated>
    <id>http://jaketrent.com/post/gitignore-system-files</id>
    <content type="html"><![CDATA[<p>There are many files that you don&#8217;t want to store in your project&#8217;s Git repo.  Some of these are even specific to the project.  Some are definitely not.  How do you ignore these that aren&#8217;t related to the project?</p>

<p><img src="http://i.imgur.com/ZYiky6R.png" alt="Git ignore" /></p>

<!--more-->


<h2>.gitignore For the Project</h2>

<p>In your project directory, you likely have a <code>.gitignore</code> file.  Here, you keep things that might show up in that directory out of the project&#8217;s version-controlled source tree.  There&#8217;s not much to it.  On each line of the file, list the file names, directory names, or partial patterns that you don&#8217;t want Git to track or even know about.</p>

<p>For instance, if you&#8217;re doing a Node.js project, you probably want to track all your own <code>.js</code> files, found in <code>src/</code>.  But you don&#8217;t want to track all those 3rd-party modules in <code>node_modules</code>.  You probably don&#8217;t want to track your code compiled for distribution either.  So, your project&#8217;s <code>.gitignore</code> file might look like this:</p>

<figure class='code'><figcaption><span>project/.gitignore</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>node_modules
</span><span class='line'>dist
</span></code></pre></td></tr></table></div></figure>


<h2>.gitignore For Your System</h2>

<p>Everything that goes in the project&#8217;s <code>.gitignore</code> file should relate to the project.  And it should relate to everyone.</p>

<p>There are many people and systems interacting with your project.  For instance, some developers might be on Mac OSX and get those nasty Finder thumbnail files, <code>.DS_Store</code> that end up popping up all over the place.  Others on the project might use the venerable Jetbrains editors which drop an <code>.idea/</code> directory in every project they edit.  These facts should be transparent to your project.  Every time someone picks up a new editor or switches an OS, the project shouldn&#8217;t have another commit updating the <code>.gitignore</code> with yet another thing.</p>

<p>You can make Git ignore files that appear on your system but are unrelated to the project.</p>

<p>Edit your top-level <code>~/.gitgnore</code>.  Add all your system-related things there.  It might end up look like:</p>

<figure class='code'><figcaption><span>~/.gitignore</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>.DS_Store
</span><span class='line'>.idea
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working More Might Not Help Our Team]]></title>
    <link href="http://jaketrent.com/post/work-more-might-not-help/"/>
    <updated>2016-02-18T16:50:00-07:00</updated>
    <id>http://jaketrent.com/post/work-more-might-not-help</id>
    <content type="html"><![CDATA[<p>Some have surmised that working more will help their team.  It may.  It may not.  It depends.  Here&#8217;s just one collection of thoughts on how working significantly <em>more</em> than the <em>rest</em> of our team might not help and may actually hinder.</p>

<p><img src="http://i.imgur.com/xRlumnh.jpg" alt="Rise together as a team" /></p>

<!--more-->


<h2>What is &#8220;More&#8221;?</h2>

<p>Working &#8220;more&#8221; than the team may mean many things.  Perhaps it means <em>more time</em> &#8211; more time in the office, more time in certain worthy activities.  Perhaps it means <em>more skill</em> &#8211; more productive, better at the things I care about.  Perhaps it means <em>more quality</em> &#8211; produce better work at better rates.  Perhaps it means <em>more commitment</em> &#8211; more focus, more sense of purpose, more of an innate sense of urgency.</p>

<p>&#8220;More&#8221;, for purposes of these thoughts also means <em>unevenly</em> more &#8211; as in one person or subset of the team doing significantly more than the rest of the team.  I won&#8217;t address it further here, but I think that generally if the whole team can do <em>more together</em>, within their capabilities, teams will get more better [sic].</p>

<h2>Carrying the Burden of the Team</h2>

<p>When we work significantly more than others, it can be easy to feel like we&#8217;re carrying the brunt of the workload of the team.  The team has work to do, and we&#8217;re doing the most of it.  We come in first.  We leave last.  Others on the team come and go in between.</p>

<p>If we were to work similar hours to the reset of the team, we&#8217;d be less likely to feel that we were unduly burdened.  If we looked less at when people were in their seats, we&#8217;d feel less like a bean-counting manager.  We&#8217;d allow others to make their own time management choices.  We&#8217;d allow ourselves to focus more on our purpose for being on the team.</p>

<h4>What Can We Do?</h4>

<p>Each situation likely requires thought and consideration of the team and those involved.  But here are some ideas on how we might overcome issues of uneven team contribution.</p>

<ul>
<li>If we must count, count hours less, count contribution more.  Hard.</li>
<li>Focus on ourselves.  Put expectations on ourselves.  We can control those things.</li>
<li>Life&#8217;s never fair.  Sometimes we <em>do</em> carry more burden.  Sometimes we are carried.</li>
<li>Share what we&#8217;re doing on the team.  Transparency may help dispel myth.</li>
</ul>


<h2>Rise Together</h2>

<p>Part of our purpose for being on the team is to help the <em>entire</em> team be better.  If the team completes the work together and we need every person on the team, sometimes we need to specifically focus on helping our team grow in capability, focus, happiness, quality, output, or whatever it is that we feel the team is lacking.</p>

<p>We may not really be addressing the issue that needs addressed &#8211; whether a real challenge of the team or something we have conjured in our mind &#8211; by just hammering out more work.  If we take this course of just pressing on with greater speed, time commitment, and effort, we may actually make the problem worse, encouraging ourselves to believe more deeply that we are carrying the weight of the team.</p>

<h4>What Can We Do?</h4>

<ul>
<li>Consider how we might lift the total capability of the team.</li>
<li>Be constructive and helpful to others.  In order to get here, we need to stop feeling sorry for ourselves.</li>
<li>Sometimes we might slow down and invest in the team itself.</li>
</ul>


<h2>False Heroism</h2>

<p>Once we are working significantly more than the rest of the team, we can come to believe that the team relies on us above all others.  We may attract praise and be singled out.  This may lead us to do more of the thing &#8211; the potentially unhealthy thing &#8211; that we&#8217;re doing in order to attract more praise.</p>

<p>Soon, to keep up this pattern of addictive praise incoming, we may begin to create more situations where we can swoop in, do significantly more than others and hopefully be held up as an example of adoration for others to aspire to.  This is a cycle that makes things worse.</p>

<p>Lifting ourselves above our teammates leads to rampant comparison.  We cultivate pride in ourselves.  We start to feel like we need to prove our continuing contribution.  We speak up about what we individually have done to save and push forward our projects.  We use a lot of &#8220;I&#8230;&#8221;-subject phrases.  We are quick to point out after-hours or extended contributions.  The focus becomes me instead of the team.  The product becomes my own personal activities instead of the team output.</p>

<h4>What Can We Do?</h4>

<ul>
<li>Make comparisons for the purpose of helping and filling the deficit of others.</li>
<li>See our strengths as opportunities to help others weak in those areas, not a chance to shine above them.</li>
<li>Be judicious in public praise.  We get more of the thing we praise.  Praise can have side effects.</li>
</ul>


<h2>Stories We Tell Ourselves</h2>

<p>When we&#8217;re so focused on ourselves, it&#8217;s easy to be very out of touch with others.  We&#8217;re often uncomfortable in approaching others about our shared contribution because, of course, we believe that we&#8217;re doing so much than the rest of the group and are likely upset in some ways with the team.</p>

<p>So we&#8217;re left to ourselves.  We tell ourselves stories about why the rest of the team just can&#8217;t or won&#8217;t keep up.  We create reasons in our mind to explain the source of their lesser commitment.  Some of it actually might be true, but the story is left to us to tell, and it&#8217;s likely embellished and unfair.</p>

<h4>What Can We Do?</h4>

<ul>
<li>Notice when we&#8217;re telling ourselves things in our mind that we don&#8217;t actually know are true.  Practice distinguishing actual fact from yet-unproved fact.</li>
<li>Give people the benefit of the doubt.  Trust in usually-good intentions.</li>
<li>Talk with others.  Tell them our concerns.  Hear their perspective.  We&#8217;ll probably be surprised with new appreciation.</li>
</ul>


<h2>It is a &#8220;We&#8221; Problem</h2>

<p>I use &#8220;we&#8221; in this article because I believe we all can suffer at different times and degrees from this malady.  We value what we bring to the table, and we should.  It&#8217;s the comparison with our teammates that&#8217;s the problem.  Pride is universal.</p>

<p>I also use &#8220;we&#8221; because this problem and its children problems are issues that we, <em>as a team</em>, need to help one another overcome.  I also believe that every one of us has the ability, hopefully with the help of help of our concerned teammates, to overcome this and other problems that keep us from being better teams.</p>

<h2>Great Teams Aren&#8217;t Perfect</h2>

<p>I hope everyone has some number of opportunities to work with great teams.  It&#8217;s an awesome feeling to feel united in a purpose.  It&#8217;s awesome to feel supported by others around us.  It&#8217;s awesome to see our efforts magnified in a greater whole.</p>

<p>Even great teams have troubles.  It&#8217;s never going to be perfect.  Don&#8217;t lose heart.  Great teams will be able to have patience, see each other as human beings doing their best, and find a way to make it work and work well.</p>

<p>I think some of this has felt familiar as we&#8217;ve read through it together.  We are all still growing on our teams.  What have you done to make your teams work better together and not make any one person feel overburdened?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Smart and Dumb Components in React]]></title>
    <link href="http://jaketrent.com/post/smart-dumb-components-react/"/>
    <updated>2016-02-17T08:55:00-07:00</updated>
    <id>http://jaketrent.com/post/smart-dumb-components-react</id>
    <content type="html"><![CDATA[<p>Dan Abramov coined the terms <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0">Smart and Dumb components</a>.  Later, he called them Container and Presentational components.  I still call them Smart and Dumb.  It&#8217;s shorter and sits in my mind easier.  How do you identify them?  Why would you want a separation?  What might that separation look like?  Here are a few ideas.</p>

<p><img src="http://i.imgur.com/9VKyXtu.png" alt="Smart and Dumb React components" /></p>

<!--more-->


<h2>Smart vs Dumb Components</h2>

<p>So what sets these components apart?  Smart means &#8220;container&#8221; or &#8220;app-level&#8221;.  Some have compared it to the &#8220;C&#8221; in MVC.  Dumb means &#8220;presentational&#8221; or &#8220;ui only&#8221;, possibly comparable to the &#8220;V&#8221; in MVC.  Here&#8217;s a breakdown of a few key characteristics:</p>

<h3>Smart Component Characteristics</h3>

<ul>
<li>Describe <em>how things work</em></li>
<li>Provide no DOM markup or styles</li>
<li>Provide application data, do data fetching</li>
<li>Call Flux actions</li>
<li>Named *Container by convention</li>
</ul>


<h3>Dumb Component Characteristics</h3>

<ul>
<li>Describe <em>how things look</em></li>
<li>Have no app dependencies</li>
<li>Receive only props, providing data and callbacks</li>
<li>Rarely have own state, when they do, it&#8217;s just UI state</li>
<li>Named anything that&#8217;s a UI noun</li>
</ul>


<p>Apparently you need each class of components because obviously your app has to smart to be interesting.  But if it&#8217;s more dumb, it&#8217;s more simple.  So split it.  You need both.</p>

<p>If you separate concerns, your app will be easier to reason about, complexity will be mostly localized around the Smart components, and you should be left with more simple components.  UI components will be more reusable.</p>

<h2>Where to Split Smart and Dumb Components?</h2>

<p>If you keep all Smart characteristics on one side and the Dumb characteristics on the other, you will have made the separation and be following the guiding principles.</p>

<p>But how should you make that split?  Here are a couple ideas.  These are observations of how I&#8217;ve found myself making the split and what it ends up looking like.</p>

<h3>Deep Split</h3>

<p>&#8220;Deep&#8221; describes what I usually observe when I split components this way.  There&#8217;s one Smart component that splits to one Dumb component.  There&#8217;s a 1:1 relationship.  This seems simple, and it is in a way.  It probably works better if the components are small, because many of the smarts from the Smart component end up getting passed down to the Dumb component.  This makes for a lot of props on the Dumb component.</p>

<p>If the Dumb component does anything interesting, it usually will fan out at that point and start farming <code>props</code> off to the child components that actually need them.  Thus, the hierarchy deepens before it actually ends up doing work.</p>

<p><img src="http://i.imgur.com/scfodt6.png" alt="Deep component split" /></p>

<h3>Broad Split</h3>

<p>&#8220;Broad&#8221; describes the transition from Smart to Dumb happening sooner.  There is one Smart component that has many Dumb component children.  There aren&#8217;t necessarily fewer interesting things here or props to pass, but they&#8217;re scattered out, going straighter to the components that need them instead of going through some Monolith Proxy Dumb component (all the bad words together).</p>

<p><img src="http://i.imgur.com/hxusLJ2.png" alt="Broad component split" /></p>

<p>A highlight advantage here is that there is much readier access to the Smart component&#8217;s smarts &#8211; store data, event handlers, and actions.  You don&#8217;t feel like you&#8217;re passing props <em>through</em> components only to get them to the components that really use them.</p>

<p>A golden quote from Dan Abramov that highlights this is:</p>

<blockquote><p>When you notice that some components don’t use the props they receive but merely forward them down and you have to rewire all those intermediate components any time the children need more data, it’s a good time to introduce some container components.</p></blockquote>

<h2>Nodes as props</h2>

<p>In his quote, Dan recognizes the time to introduce container components.  In my mind, &#8220;container&#8221; means Smart.  Here, I don&#8217;t think we necessarily require a Smart Container, because we usually like to get as Dumb as we can as fast as we can.  So, how about a Dumb component that just provides <em>containment</em>?</p>

<p>We can provide DOM markup, component grouping, layout, or other UI abstractions with components that take <code>props.children</code>.  These children are usually components, of type <code>React.PropTypes.node</code>.  Doubtless we&#8217;ve all realized by now that there&#8217;s just one <code>props.children</code>.  But component can only wrap one thing, right?  Well, this is in the syntax of markup/JSX, but this isn&#8217;t true <em>inside</em> the Component.  We could have more attributes that pass <code>PropTypes.node</code> arguments.  This allows for <em>containing more</em> nodes and having convenient handles on them within components.</p>

<p>This thought was revelatory at the time it occurred to me.  Looking back, it seems obvious.  But for some reason, probably because I still think of it as HTML sometimes, it feels funny to write something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">Dumb</span> <span class="nx">aProp</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">AnotherDumb</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then inside the Dumb component, we can display those attributes directly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Dumb</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">css</span><span class="p">.</span><span class="nx">awesomeLayout</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">aProp</span><span class="p">}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>What to Pass as Props?</h2>

<p>If we have a split we like, now we have to decide what <code>props</code> to send from the parent to the child components.</p>

<h3>Send Them All</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">Dumb</span> <span class="p">{...</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, you could just send all the parent&#8217;s props to the child.  I would do this when the parent feels just like a wrapper.  It&#8217;s a passthrough.  Perhaps it adds something small and targeted.  It&#8217;s a higher-order component.</p>

<h3>Pass the Reducer/Selector</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">Dumb</span> <span class="nx">reducerName</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">reducer</span><span class="p">}</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can pass the whole nested reducer state, sure.  Almost every time I feel myself wanting to do this, I think it&#8217;s motivated by laziness.  It has a potential downside of tying the reducer format to the view in more places than required.  Of course, if you have custom selectors for everything anyway, you make your break from reducer format coupling there.</p>

<h3>Pass New Variables</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">Dumb</span> <span class="nx">newVar</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="kd">var</span><span class="p">}</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is most commonly what passing variables to children components looks like.  These values are usually primitives, but they can you can send down entire new object structures as well.  It has the advantages of being explicit and traceable.  It also avoids the coupling of passing entire nested reducers.</p>

<h2>Rule of Thumb</h2>

<p>In all design decisions, it&#8217;s good to have some quick guidelines in mind when making decision.  So relative to splitting Smart and Dumb components, here&#8217;s a rule of thumb.</p>

<p>On many of my projects recently, I use two decorators that help identify Smart and Dumb components:</p>

<p>For Smart, the <a href="https://www.npmjs.com/package/redux-react-connect-by-name">redux-react-connect-by-name</a> component facilitates data fetching from the redux store.  This is equivalent to using redux&#8217;s vanilla <code>connect</code> with some built-in niceties.</p>

<p>For Dumb, the <a href="http://npmjs.com/react-styleable">react-styleable</a> component allows passing CSS modules into React components.  This is how I like to give my components styling information.</p>

<p>If one is for Smart and the other for Dumb, then I can usually identify a potential split if I ever see them <em>together</em>.  For example, this is what that antipattern might look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">connect</span> <span class="nx">from</span> <span class="s1">&#39;redux-react-connect-by-name&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">styleable</span> <span class="nx">from</span> <span class="s1">&#39;react-styleable&#39;</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="nx">connect</span><span class="p">([</span><span class="nx">someSelector</span><span class="p">])</span>
</span><span class='line'><span class="err">@</span><span class="nx">styleable</span><span class="p">(</span><span class="nx">someCss</span><span class="p">)</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">MyComponent</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Split that up!</p>

<h2>This Isn&#8217;t Dogma</h2>

<p>The idea of Smart vs. Dumb components is, itself, just a guideline &#8211; a Pirates&#8217; Code-level of guideline.  Keep it and use it where it helps your project.  This is an art form.  No one has the best answer for how to organize your React views.  Do the best you can.  Then, next week, when you find a better way, advance to that.</p>

<p>What are some other observations that you&#8217;ve made when splitting your views into Smart and Dumb components?</p>

<p><em>Adapted from a meetup talk:</em></p>

<script async class="speakerdeck-embed" data-id="26cce4743e5540b48188a35f49de3c4d" data-ratio="1.33333333333333" src="http://jaketrent.com//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Node Skills to Explore]]></title>
    <link href="http://jaketrent.com/post/node-skills-explore/"/>
    <updated>2016-01-26T10:00:00-07:00</updated>
    <id>http://jaketrent.com/post/node-skills-explore</id>
    <content type="html"><![CDATA[<p>We are hiring a bunch of Node.js developers at the moment.  You may be as well.  I&#8217;m sure you have a good list of skills that you&#8217;re looking for in developers that join your posse.  Here are a few <em>technical</em> things I think about when getting the opportunity  to sit down with a Node developer.</p>

<p><img src="http://i.imgur.com/9WglUIw.jpg" alt="Exploring Node Skills" /></p>

<!--more-->


<p>What might you add to the list?</p>

<h2>Async Programming</h2>

<ul>
<li>What are options for async flow control?  Favorites?  Least?  Pros?  Cons?</li>
<li>Node event loop &#8211; How does it work?  What applications does it fit?</li>
</ul>


<h2>Error Handling</h2>

<ul>
<li>Limitations/advantages in handling async errors?</li>
<li>Handle errors in Promises?</li>
<li>Handle errors in callbacks?</li>
<li>What errors should be thrown?</li>
</ul>


<h2>Functional</h2>

<ul>
<li>What is immutability?  Why want it?</li>
<li>Basic Array.prototype methods?</li>
<li>What does shared state give you?</li>
<li>Advantages to pure functions?</li>
<li>Applications of higher-order functions?</li>
</ul>


<h2>API</h2>

<ul>
<li>Specifically, how does CORS work?</li>
<li>Familiar with which request and response formats?  Favorite?  Worst?  Why?</li>
<li>How does middleware work?  When do you like to use it?</li>
</ul>


<h2>Ops</h2>

<ul>
<li>How can you use all CPUs on a server?</li>
<li>How to associate logs together with a single request path?</li>
<li>How to recover from fatal errors?</li>
<li>How do you load per-environment configuration?</li>
<li>How do you handle versioning of your apps and libs?</li>
</ul>


<h2>Modules</h2>

<ul>
<li>Why use modules?</li>
<li>How do you organize your API apps&#8217; modules?</li>
<li>Flavors of exports?  When do use each?</li>
</ul>


<h2>ES Next</h2>

<ul>
<li>Which new features have you used?  Like, not like?</li>
<li>async/await - Used instead of what?</li>
<li>Object literal extensions - How used?</li>
<li>Spread operator - Helpful usecases?</li>
<li>Arrow functions - What do they help with?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test APIs Failing from Client]]></title>
    <link href="http://jaketrent.com/post/test-apis-failing-from-client/"/>
    <updated>2016-01-25T13:54:00-07:00</updated>
    <id>http://jaketrent.com/post/test-apis-failing-from-client</id>
    <content type="html"><![CDATA[<p>In the case where you can&#8217;t edit a local version of your APIs in order to cause them to fail, you need to be able to edit your client so that it <em>looks</em> like the API request fails.  Here&#8217;s a quick code change that should make this easy for you.</p>

<p><img src="http://i.imgur.com/8Fm1cn2.jpg" alt="We have a problem" /></p>

<!--more-->


<p>This is one of many possible manual testing techniques.  This allow you to see the change in your running app as you work through it.  For instance, I like to use this as I&#8217;m testing through the error alerting features that are common in an app when an API request fails.</p>

<p>Go to the point in your app where your bits touch the network.  This is usually the place where you use your HTTP wrapper or, if you&#8217;re a free spirit, call some XHR goodness yourself.  These days, I like using the venerable <a href="https://github.com/mzabriskie/axios">axios</a> library.  Axios is promise based, so that means that we can use async/await as well, which is like a fine chocolate next to a warm fire in winter (which is good).</p>

<p>So, all my http code might look in essence like this:</p>

<figure class='code'><figcaption><span>api.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">axios</span> <span class="nx">from</span> <span class="s1">&#39;axios&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kr">const</span> <span class="nx">fetch</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// deserialize, etc ...</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">axios</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;get&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">url</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, this <code>request</code> function returns a Promise.  The logic around the request might look like:</p>

<figure class='code'><figcaption><span>actions.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">api</span> <span class="nx">from</span> <span class="s1">&#39;./api&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">async</span> <span class="kd">function</span> <span class="nx">fetchWater</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="p">{</span> <span class="nx">request</span><span class="p">}</span> <span class="o">=</span> <span class="nx">api</span><span class="p">.</span><span class="nx">fetch</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">request</span><span class="p">(</span><span class="s1">&#39;/my/own/home&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// ... handle success response</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ... handle error response, where failure code should execute (what we want to TEST!)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To make this request fail, we need only make the Promise fail, rejecting it like a mouthful of stewed tomatoes.  So, just change <code>api.js</code>:</p>

<figure class='code'><figcaption><span>api.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">axios</span> <span class="nx">from</span> <span class="s1">&#39;axios&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kr">const</span> <span class="nx">fetch</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">reject</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">status</span><span class="o">:</span> <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">errors</span><span class="o">:</span> <span class="p">[{</span> <span class="nx">detail</span><span class="o">:</span> <span class="s1">&#39;Shere Khan is back!&#39;</span> <span class="p">}]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now note that you must be aware of what your format HTTP library, in this case axios, uses in its responses.  What you <code>reject</code> manually must be exactly the same format that usually is returned in an error situation (eg, <code>status</code> and <code>data</code>).  You must also know what your server is designed to return as an error response (eg, <code>errors</code>).  The above application code is using the <a href="http://jsonapi.org/format/#error-objects">JSON API</a> format.</p>

<p>What other little tricks do you find useful in getting APIs to fail?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What React Stateless Components are Missing]]></title>
    <link href="http://jaketrent.com/post/react-stateless-components-missing/"/>
    <updated>2016-01-04T12:59:00-07:00</updated>
    <id>http://jaketrent.com/post/react-stateless-components-missing</id>
    <content type="html"><![CDATA[<p>Stateless React components got a new syntax in React 0.14.  It&#8217;s much simpler.  It&#8217;s just a function call.  Besides it just looking simpler, there are some major differences in what is available in a stateless component written this way.  There are some things missing &#8211; purposefully not included &#8211; that you may be used to.  Let&#8217;s look at a few things.</p>

<p><img src="http://i.imgur.com/DXuSNbw.png" alt="http://i.imgur.com/DXuSNbw.png" /></p>

<!--more-->


<p>Stateless components are now specifically not just components where you don&#8217;t use <code>this.state</code>.  They&#8217;re componets that are written in the form of a function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Chips</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">In</span> <span class="nx">the</span> <span class="nx">secret</span> <span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">place</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The observations made in this article will not apply to components that are created using the <code>class Chips extends React.Component</code> or <code>React.createClass</code> syntax, whether they use state or not.</p>

<h2>No Backing Instance</h2>

<p>A React component&#8217;s backing instance is the object in memory that represents the node in the view.  This backing instance is the place where state is usually stored (using React&#8217;s <code>this.state</code>).  Well now there&#8217;s no <code>this</code> in stateless components.  Thus, there&#8217;s not going to be a place for <code>this.state</code>.  Stateless, remember?  Data just passes through the pure function and into the resulting view.</p>

<h2>No Lifecycle Methods</h2>

<p>Because there&#8217;s no backing instance as a place to put hooks for your code in the component lifecycle, you can not use any of the lifecycle methods from <code>React.Component</code>.  Methods such as <code>componentDidMount</code> and <code>componentWillReceiveProps</code> are out.  And since the stateless component is a pure function that just reproduces its view state on <code>props</code> change, why would you need lifecycle methods anyway?</p>

<h2>No Reference to the Component</h2>

<p>Often when testing, it&#8217;s useful to get a reference to the component itself.  In the case of stateless components, they&#8217;re just fired and forgotten, rendered into the view without the ability to get a handle on them.  They&#8217;re just UI at this point, just in the DOM.  You can go to the DOM to do your testing.</p>

<p>Depending on your test environment setup, you may want to wrap your stateless components in a <code>class</code>-based component you <em>can</em> get a reference to.</p>

<p>Note that for stateless components, <code>ReactDOM.render</code> and <code>TestUtils.renderIntoDocument</code> will return <code>null</code>.</p>

<h2>No refs</h2>

<p>Stateless components can&#8217;t be the target of a <code>ref</code>.  There&#8217;s no backing instance.  You can&#8217;t have <code>refs</code> internally to children either.  Remember, <code>this</code> and <code>this.refs</code> aren&#8217;t around.  If your stateless component has a child that is a <code>class</code>-based component, <em>it</em> may have <code>refs</code>.  <a href="https://facebook.github.io/react/docs/more-about-refs.html">The docs</a> are another good reference on <code>refs</code>.</p>

<h2>Updated: Null Returns</h2>

<p>As of <a href="https://facebook.github.io/react/blog/2016/04/07/react-v15.html#functional-components-can-now-return-null-too">react@15.0.0</a>, now stateless component functions <em>can</em> return null.</p>

<p><del>A <code>class</code>-based component may return <code>null</code> as its value in the view.  But a stateless component may not.  To get around this, return <code>&lt;noscript&gt;&lt;/noscript&gt;</code>.  This will be fully invisible in the view.</del></p>

<p>So what else have you found that is unavailable in stateless functions?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug Locally in Elm]]></title>
    <link href="http://jaketrent.com/post/debug-locally-elm/"/>
    <updated>2015-11-28T14:39:00-07:00</updated>
    <id>http://jaketrent.com/post/debug-locally-elm</id>
    <content type="html"><![CDATA[<p>Debugging in Elm is easy once you know where to look.  You need an in-browser tool to help you.  It&#8217;s almost as simple as just calling <code>console.log</code>, but you can&#8217;t just put your logging statement anywhere.</p>

<p><img src="http://i.imgur.com/1c6FH0f.png" alt="elm debug locally" /></p>

<!--more-->


<h2>The Online Option</h2>

<p>There&#8217;s a debugger available online as a part of the elm-lang site at <a href="http://debug.elm-lang.org/">debug.elm-lang.org</a>.  This page explains the principles behind why the debugger works and has the properties it does.  The <a href="http://debug.elm-lang.org/try">debugger is found</a> via clicking the &#8220;Debug&#8221; button in the top-right corner.</p>

<p>But you don&#8217;t want to paste your code into the Try Elm page in order to walk through your Elm code.  You need a local option.</p>

<h2>Debugging Locally</h2>

<p>Thankfully you already have the tools to debug locally after you&#8217;ve <a href="http://elm-lang.org/install">installed Elm</a> on your machine.   It comes with <code>elm-reactor</code>.</p>

<p>In order to run your Elm code, go to your shell, <code>cd</code> into your project directory, and type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ elm reactor</span></code></pre></td></tr></table></div></figure>


<p>This will serve up your project directory at <code>http://localhost:8000</code> by default.</p>

<p><img src="http://i.imgur.com/yE93W9g.png" alt="screenshot of elm reactor" /></p>

<p>You will be able to see the project files listed.  There are two links for each Elm program.  Unfortunately, the debug mode link is pretty subtle, looked over by me as just a bullet in the UI.</p>

<ol>
<li>Click the file name, get the run mode</li>
<li>Click the wrench to the left of the file name, get the debug mode</li>
</ol>


<p>Alternately, type your own <code>?debug</code> at the end of any Reactor url to enter debug mode for that file.</p>

<p>Once in debug mode, you should see your code in action in the browser as usual, now with a sidebar for the debugger overlayed on your UI.</p>

<h2>Setting up Watches</h2>

<p>Poor man&#8217;s debugging has traditionally been logging. When variables are in scope, interrogate them and print the value on the screen.  Elm&#8217;s debugging story feels about like that, with some cool bells and whistles around it &#8211; like <em>time-traveling</em> debugging, oh my.</p>

<p>In time-travel mode, your debug method of choice will probably be <code>Debug.watch</code>.  In the <a href="http://package.elm-lang.org/packages/elm-lang/core/2.0.1/Debug#watch">docs</a>, it is shown to take 2 arguments:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>watch : String -&gt; a -&gt; a</span></code></pre></td></tr></table></div></figure>


<p>The first argument is the label for the watched data in the debugger.  The second argument is the actual data value.  If I wanted to watch a dimensions tuple, I could write:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Debug.watch "myDimensions" (w, h)</span></code></pre></td></tr></table></div></figure>


<p>Also note that you have to make your debug expression compile wherever you end up writing it.  I find that the easiest place to put a debug statement into my already-working code is in a <code>let</code> expression.  (Well, &#8220;already-working&#8221; is used loosely here &#8211; we&#8217;re debugging after all.)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let
</span><span class='line'>  log = Debug.watch "myDimensions" (w, h)
</span><span class='line'>in
</span><span class='line'>  doStuff myDimensions</span></code></pre></td></tr></table></div></figure>


<p>Now the watched value will show up in the debugger sidebar.</p>

<p><img src="http://i.imgur.com/PlI83Kq.png" alt="screenshot of elm watched code" /></p>

<p>If you pause the debugger and step backward, you can see the value as it has changed over time.  It&#8217;s pretty neat, and now you&#8217;re debugging Elm on your own box!</p>

<p>What other Elm debug tips do you have?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update Body Class in React]]></title>
    <link href="http://jaketrent.com/post/update-body-class-react/"/>
    <updated>2015-09-23T15:31:00-06:00</updated>
    <id>http://jaketrent.com/post/update-body-class-react</id>
    <content type="html"><![CDATA[<p>React gives us a great component abstraction.  Each of these components represents a node in the DOM.  Each component is self contained, doesn&#8217;t talk up the component hierarchy directly and passes explicit data and code down the hierarchy.  But what about when you have a React app that wants to reach out and modify something it doesn&#8217;t control?</p>

<p><img src="http://i.imgur.com/DXuSNbw.png" alt="react modify body tag" /></p>

<!--more-->


<h2>A Couple Use Cases</h2>

<p>There are potentially a few use cases for this.  For instance, modals that need to render outside your application&#8217;s potentially <code>position: relative</code> containers.  Or, as we&#8217;ll see below, your app wants to modify the <code>body</code> tag in your html document.</p>

<p>The most common reason I&#8217;ve found for messing with the body tag is to provide some style attribute.  It&#8217;s not uncommon to have full-page style differences between pages in our apps.  If you have a &#8220;single page&#8221; js app in the browser, you need to be able to modify the body tag in code.</p>

<p>Let&#8217;s use an example where on some pages in your app, the theme is &#8220;dark&#8221;, where the body background color should be black.  On other pages, the entire body background color should be the default white.  We&#8217;ll make a component that lives high in the hierarchy and takes an <code>isDark</code> property to determine if the rendered page is dark or light.</p>

<h2>Body is Outside Your React App</h2>

<p>You can&#8217;t mount your React app directly on <code>document.body</code>, at least without warnings.  This is considered bad practice, because other scripts or browser plugins often modify the document body directly.  So you&#8217;ll have to reach <em>out</em> of your React app and modify the body directly.</p>

<h2>Tie Into the React Lifecycle</h2>

<p>First, you just need a point in time in your app&#8217;s lifecycle where you know you want to modify the <code>body</code> class.  React has a bunch of <a href="https://facebook.github.io/react/docs/component-specs.html">lifecycle hooks</a> that will come in handy.  A great early-lifecycle hook for modifying the DOM is <code>componentDidMount</code>.  Usually, we would be accessing DOM nodes that are children of our Component.  Again, in this case, we&#8217;re reaching out beyond where a React component usually should.  The usual <code>React.findDOMNode</code> functions will not be needed, because React isn&#8217;t managing the body node.  Instead, we&#8217;ll just use the <code>document.body</code> api directly.</p>

<h2>Use JavaScript to Modify the Class</h2>

<p>If you have some utility for modifying class names, use it.  If not, it&#8217;s small and simple enough in <a href="http://jaketrent.com/post/addremove-classes-raw-javascript/">plain old JavaScript</a>.</p>

<p>With these two bits in hand, you have the pieces necessary for your body-modifying component:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">BodyColor</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">static</span> <span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">isDark</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">bool</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kr">static</span> <span class="nx">defaultProps</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">isDark</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">toggle</span><span class="p">(</span><span class="s1">&#39;darkClass&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">isDark</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">componentWillReceiveProps</span><span class="p">(</span><span class="nx">nextProps</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">toggle</span><span class="p">(</span><span class="s1">&#39;darkClass&#39;</span><span class="p">,</span> <span class="nx">nextProps</span><span class="p">.</span><span class="nx">isDark</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">componentWillUnmount</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="s1">&#39;darkClass&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use, pass an <code>isDark</code> attribute to activate the <code>darkClass</code> class on the body tag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;BodyColor</span> <span class="na">isDark=</span><span class="s">{true}</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>A Very Dark App<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;/BodyColor&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Are there any other ways you&#8217;ve found to reach out of React and modify the DOM directly.  What have been your use cases?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In Favor of Codenames]]></title>
    <link href="http://jaketrent.com/post/in-favor-codenames/"/>
    <updated>2015-09-03T09:29:00-06:00</updated>
    <id>http://jaketrent.com/post/in-favor-codenames</id>
    <content type="html"><![CDATA[<p>It seems to be a recurring discussion in the companies I have worked for: should we use a codename for this project or not?  These are software projects.  The codenames are used on things as basic as the repository name or slack channel.  Later, they might be used in many other project-related things like the build server configuration.  The alternative for a codename is calling the thing exactly what it is.  Where&#8217;s the fun in that?</p>

<p><img src="http://i.imgur.com/gpqydff.jpg" alt="project codenames" /></p>

<!--more-->


<h2>The Argument Against Codenames</h2>

<p>The argument is that if you call the project what it is, people will know what you&#8217;re referring to when you talk about it or when you see it in your version control or on the build server or hear about it at lunch.</p>

<h2>It&#8217;s Fun</h2>

<p>I think codenames are fun.  They add identity and character to your project.  They contribute to team spirit.  You have marketing options in a codename via logos, mascots, and themes.  Most things you can do to increase the cohesiveness of a team around a shared identity, sense of belonging, and to increase their enthusiasm will be worth it.  Why not let codenames help you with this?</p>

<p>An environment where codenames are enjoyed is one that is <em>not</em> sterile and colorless.  There are people and product markets that specifically enjoy things and places that are not organized in clean, labelled boxes.  Bring some color to your environment, learn to stop worrying, and love having fun together.</p>

<h2>They Encourage Learning</h2>

<p>When you hear a codename for the first time, you might not know what it means.  Is that an unusual or bad thing?  Not knowing what it means should encourage you to ask what it means or look it up.</p>

<p>After you do, you&#8217;ll then have learned it.  You&#8217;ll have connected with people that know about it.  You&#8217;ll have found the documentation detailing what it <em>really</em> is, not just what you can fit into a name.  I like the idea of each project having a root readme file that describes the core &#8216;What&#8217; and &#8216;Why&#8217; of the project.</p>

<h2>They&#8217;re Short</h2>

<p>Codenames are usually shorter than any presumably more descriptive name.  This is great because we usually are talking about our projects or teams <em>all</em> the time.  Thus something long and descriptive, like a bloated government agency name, is likely to be shortened into an acronym instead (which is just a codename constrained by odd letter combinations).  Worse still, as people tire of saying the longer name, they start making up their own easier-to-get-out versions which will not be consistent.</p>

<h2>We Speak a Specialized Language With Each Other</h2>

<p>Codenames are great for the usually-specialized teams that end up working together.  These teams speak a common language that they learn because of the domain they all work in together.  It&#8217;s a specialized language.  This is common for other technical and specialized groups: For example, air traffic controllers speaking to pilots on the radio will use terse, specific terms that others outside the domain don&#8217;t necessarily recognize but which the two parties have learned to use together.  If your teams are cross-functional, you should learn the lingo common to your domain.</p>

<h2>They Need Discoverability Help</h2>

<p>Codenames do not help with discoverability.  In the age of search, however, this point is lessened.  We often put important domain-related keywords next to content.  I&#8217;m all for including bylines next to codenames as a one-line explanation of what it is.  Using a combo like this when it makes sense will give you the best of both words: exact consistency via the codename and some discoverable verbiage via an accompanying byline.</p>

<h2>They&#8217;re New Words</h2>

<p>A codename a variable name.  It&#8217;s an abstraction.  It represents a project, team, codebase, or something else.  It hides the internals.  It will outlive your company&#8217;s pivot from the original project scope and meaning so you can keep your codename even as your mission changes.  It usually doesn&#8217;t leak the internal implementation details.</p>

<p>Codenames are singletons within the universe of your company.  No one else will have the same team name, repo name, or slack channel.  Codenames are the keys in the dictionary of values.</p>

<p>After you learn a codename once, when it&#8217;s mentioned, you&#8217;ll know what it is.  Nbd.</p>

<h2>They&#8217;re All Around Us</h2>

<p>Codenames are all around us, thankfully.  Who really wants to call Kleenex, &#8220;facial tissue&#8221;, anyway?</p>

<p>You&#8217;ve heard of Python, React, maybe even <a href="https://github.com/Netflix/SimianArmy/wiki/Chaos-Monkey">Chaos Monkey</a> (and check it out, they even have a &#8216;What&#8217; and &#8216;Why&#8217; in their readme!).  You&#8217;ve probably also heard of Microsoft SQL Server.  Blegh.  Doesn&#8217;t that fill your soul with the emptiness of corporate sterility.  Though, there are codenames in their too, right?  &#8220;Microsoft&#8221;.  &#8220;SQL&#8221; (one of those weird descriptive-things-turned-acronym).</p>

<p>So, embrace codenames.  You use them anyway.  It&#8217;ll be more fun for most.  It&#8217;ll bring color to your world.  It&#8217;ll bring life and character to your team identity and the discussions you have about what you do.</p>

<p>What are some of your favorite codenames, and what are some of your favorite reasons for using them?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Rally Review]]></title>
    <link href="http://jaketrent.com/post/react-rally-review/"/>
    <updated>2015-08-27T09:03:00-06:00</updated>
    <id>http://jaketrent.com/post/react-rally-review</id>
    <content type="html"><![CDATA[<p>React Rally is a developer conference created around the library of <a href="http://facebook.github.io/react/">React.js</a> and the community that uses it.  It was the first of its name.  It was the first React-centric conference in Salt Lake City.  I had a great time.  Here are a few of reasons I liked it.</p>

<p><img src="http://i.imgur.com/B8fFS4J.jpg" alt="react rally" /></p>

<!--more-->


<h2>People Breakouts</h2>

<p>It was a happy conference.  A great mood was set by <a href="https://twitter.com/jergason">Jamison</a> on stage, who MC&#8217;ed most of the conference.  He&#8217;s a fun, quirky guy who&#8217;s not self-important and who did a great job putting speakers and the audience at ease.  There were a ton of participants and attendees at the conference that also fit this (good!) description.  This led to great conversation between sessions.  There were plenty of breaks, some 30 or 60 minutes at a time.  They were well-spaced, allowing plenty of time.  There was a pleasant <a href="http://rangle.io/">Rangle.io</a>-sponsored lounge to gather in.</p>

<p>There were no on-stage questions and answers portions at the end of the talks.  I wondered how I&#8217;d like this, since who doesn&#8217;t like answer to their questions, right?  It turned out to be refreshing.  Speakers finished their talks at the appointed time.  No one had to wait around uncomfortably wondering when either the speaker or the audience would let everyone else off the hook.  No embarrassing questions.  It was nice.  All the speakers were great anyway, but I think this feature also helped prime the conversations that were expected to happen after the talks in the breakouts, giving extra motivation for everyone to be available and approachable.</p>

<h2>The Spoken Word</h2>

<p>I was excited going into the conference because of the solid lineup of speakers.  Not all the talks were the best I had heard or the best treatment of every subject.  There were some highlights thought, and on the whole it was really, really good.  Each of the speakers had obviously prepared a great deal and had taken their time on stage seriously (or not seriously in the case of <a href="https://twitter.com/djsmith42">Dave Smith</a>, whose talk was memorable and awesome as well, btw).</p>

<p>The conference wasn&#8217;t wholly about React.  There&#8217;s just so much <em>around</em> React that is exciting.  The community is pushing boundaries all over the place.  (And <em>still</em> all the content in the conference was appropriate, yay! :)  For instance, there were a great many mentions of <a href="http://elm-lang.org/">Elm</a>.  For my part, I spent much of the conference tinkering with that very thing.</p>

<h2>Fun Design</h2>

<p>It&#8217;ll reveal how much art does for me, but when I first learned about the conference, one of the things that excited me the most was the <a href="http://www.reactrally.com/">website</a>.  It had a fun design!  There were illustrations, interesting colors, and it looked like a fun theme.  (Of course, at the time there was literally nothing else to be excited about outside the mailing list input box.)</p>

<p>We need more illustrations.  We need more mascots.  A menacing purple squid with a React symbol on its forehead?  Yes, please!  My previously bare brushed metal laptop lid is now bestickered with the sweetest conference stickers I have.  So fun!</p>

<p>I&#8217;m still not sure what the theme was intended to be.  My interpretation was Creatures of the Black Lagoon in Space.  Right?!</p>

<h2>Feels Like the First Time</h2>

<p>The organizers did a great job.  The preparation was obvious.  They assured me they were putting out fires for the duration of the two days.  That was not apparent.  The thing went off without a hitch.  I can only poke at the annoying AV glitch of a blinky project screen in some talks.</p>

<p>Everything seemed in its place.  The conference was small, about 250 participants, and it seemed like a large house party most of the time.  The venue was prepped very well.  I&#8217;m glad they opened up the downstairs lounge.  The food was great.  The breakfast trucks were a wonderful touch, especially <a href="http://saturdayswaffle.com/">Saturdays Waffles</a> day.  Mmmmm, waffles.  The gift card for lunch was a thoughtful touch.  <a href="http://www.yelp.com/biz/atlantic-caf%C3%A9-and-market-salt-lake-city-4">Atlantic Cafe</a> provided my delicious cevapi sausage on the 2nd day.</p>

<p>I have many thanks for the great speakers, the effort of the organizers, and everyone in between that made the 2 days great.  I felt inspired.  I left more informed.  I met a group of fantastic people.  It&#8217;s been my favorite conference in Salt Lake City so far.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Love CSS Modules]]></title>
    <link href="http://jaketrent.com/post/i-love-css-modules/"/>
    <updated>2015-08-25T11:03:00-06:00</updated>
    <id>http://jaketrent.com/post/i-love-css-modules</id>
    <content type="html"><![CDATA[<p>I heard a fantastic yesterday by <a href="https://twitter.com/glenmaddern">Glen Maddern</a> where Interoperable CSS was well-illustrated as the fantastic CSS language advancement that it is.  I was happy to hear hushed ooo&#8217;s and ahh&#8217;s from the audience as they realized the power of what they were seeing.  I have been enjoying the benefits of CSS modules myself and my team and would share some of my favorite features in hopes that others will be inclined to use this feature as well.  Cleanse the world of global stylesheets!</p>

<p><img src="http://i.imgur.com/MtjAduk.jpg" alt="i love css modules" /></p>

<!--more-->


<h2>Local Variables</h2>

<p>With CSS modules, your selector names are truly local.  They are FRD local variables!  They won&#8217;t clash with any var names outside your module.  For You don&#8217;t have to invent a giant namespace.  There&#8217;s no BEM-style naming to describe a hierarchy.  There&#8217;s no repetition in those names.  You can name it something much more simple, just related to what the component is.</p>

<p>For instance, if you&#8217;re creating <code>Link</code> component, you&#8217;d previously have something like <code>.nav__item__link</code> selectors to apply style.  Knowledge of global markup structure would seep into your component through this selector and its name.  Now with a combination of encapsulated components and css modules,  you don&#8217;t have to worry about the outside world.</p>

<p>Now, what would you call your <code>Link</code> component&#8217;s outer-most <code>a</code> tag?  Well, maybe <code>.link</code> or <code>.root</code>&#8230;  Nothing fancy.  Just what it is.  You aren&#8217;t required to think about the global stylesheet.  You can focus your mind on just the component stylesheet at hand.  The naming game, which can already be challenging, is made much easier.</p>

<h2>Explicit Dependencies</h2>

<p>Now that all the CSS you write is, by default, local to the module you write it in, you have to explicitly pull in dependencies.  You have to explicitly import the stylesheet you are writing where you&#8217;ll eventually want to use it.  You can write styles without fear that it might influence something else &#8211; until you explicitly ask it to!</p>

<h2>Still CSS</h2>

<p>I&#8217;ve tried some of the inlining styling techniques and libraries that are being made popular in the React community.  <a href="https://github.com/FormidableLabs/radium">Radium</a> is my favorite there.  What makes me happy about CSS modules is that they&#8217;re still CSS.  It&#8217;s a language that was invented in order to create declarative styles.  It&#8217;s not wonderful in many ways, but it&#8217;s still the best tool available for this.</p>

<p>You can use all the selectors, strategies, and css abilities you&#8217;re used to.  Pseudo selectors are all available.  Media queries work as expected.  Keyframe animations are easy to declare.  There is also a great ecosystem of CSS enhancements and transforms available from the PostCSS community.  No one should ever write a vendor prefix again with <a href="https://github.com/postcss/autoprefixer">autoprefixer</a>.</p>

<h2>Consistency for Components</h2>

<p>Another thing I&#8217;d like to see in the web component community, specifically React for now, is a pattern around how to override CSS in reusable components.  This pattern would be well-used by component developers and well-known by component consumers.  This would help components be more immediately useful &#8211; default styles could be included with components and custom styles would be easily applied.</p>

<p>My favorite solution to this so far is <a href="https://github.com/pluralsight/react-styleable">react-styleable</a> &#8211; full disclosure, I helped write it.  (Anything like this that gains steam, has broad appeal, and is used by many will make me happy.)  I love that CSS modules enable this and provide a foundation for this consistency.  I&#8217;ll likely write more about this in the future.</p>

<p>CSS modules have changed the styling game for me.  It makes it so, so much better.  Who knows, maybe it&#8217;ll change the world.</p>

<p>So, how have CSS modules changed your life?  What do you love?  What could still be better?</p>

<h2>Course on Styling React Components with CSS Modules</h2>

<p>I&#8217;ve published a <a href="https://www.pluralsight.com/courses/react-styling-components">course on Pluralsight on CSS Modules in React</a>.  In the course, you&#8217;ll learn the supporting toolset.  You&#8217;ll experience the difference of using CSS modules in a project compared to other solutions with a hands-on demo.  If you&#8217;re interested, <a href="https://www.pluralsight.com/courses/react-styling-components">check it out</a>.  Hopefully it&#8217;s helpful for you.</p>

<p><img src="http://i.imgur.com/3mxagk7.png" alt="Styling React Components course screenshot" /></p>

<p><a href="https://www.pluralsight.com/courses/react-styling-components">Styling React Components course</a></p>
]]></content>
  </entry>
  
</feed>
