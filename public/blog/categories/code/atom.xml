<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2014-12-24T16:14:11-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[D3 Class Operations]]></title>
    <link href="http://jaketrent.com/post/d3-class-operations/"/>
    <updated>2014-12-24T10:58:00-07:00</updated>
    <id>http://jaketrent.com/post/d3-class-operations</id>
    <content type="html"><![CDATA[<p>D3 has operations for class name manipulation that you're used to from jQuery.  These include addClass, removeClass, hasClass, and toggleClass.  They just go by different names.</p>

<p><img src="http://i.imgur.com/94JQ8N8.jpg" alt="d3 class names" /></p>

<!--more-->


<h2>selection.classed</h2>

<p>The magic all comes in the form of the <code>selection.classed</code> method from d3.  It is going to be the api that is used to accomplish all the operations listed below.  From the <a href="https://github.com/mbostock/d3/wiki/Selections#classed">docs</a>:</p>

<blockquote><p>This operator is a convenience routine for setting the "class" attribute; it understands that the "class" attribute is a set of tokens separated by spaces. Under the hood, it will use the classList if available, for convenient adding, removing and toggling of CSS classes.</p></blockquote>

<p>It knows how to handle one or many classes on an element, and it will be performant.</p>

<p>Also note that this method is only available on a selection.</p>

<h2>d3 addClass</h2>

<p>To add a class, the second parameter to <code>classed</code> must be true, as in this code:</p>

<p><code>js
d3.selectAll(".bar")
 .classed("my-selector", true);
</code></p>

<h2>d3 removeClass</h2>

<p>To remove a class, the second parameter to <code>classed</code> must be false.</p>

<p><code>js
d3.selectAll(".bar")
  .classed("my-selector", false);
</code></p>

<h2>d3 hasClass</h2>

<p>To check for the existence of a class, just leave off the second parameter and pass the class name you're querying for.  This will return true if it exists, false if it does not.</p>

<p><code>js
d3.selectAll(".bar")
 .classed("my-selector");
</code></p>

<p>This will return true if any element in the selection has the class.  Use <code>d3.select</code> for single element selection.</p>

<h2>d3 toggleClass</h2>

<p>To flip a class to the opposite state  -- remove it if it exists already, add it if it does not yet exist -- you can do one of the following.</p>

<p>For a single element, the code might look like this:</p>

<p><code>js
var oneBar = d3.select(".bar")
oneBar.classed("my-selector", !oneBar.classed("my-selector"));
</code></p>

<p>For multiple elements, one will want to pass in a callback.  The callback function takes as parameters <code>d</code>, the datum, <code>i</code>, the index in the selection, and <code>this</code> is the current DOM element.</p>

<p>It's also important to note that the <a href="https://github.com/mbostock/d3/wiki/Selections#classed">docs</a> inform us that:</p>

<blockquote><p>The function's return value is then used to assign or unassign the specified class on each element.</p></blockquote>

<p>The code for toggling multiple elements in a selection at once might look like this:</p>

<p>```js
d3.selectAll("bar")
  .classed("my-selector", function (d, i) {</p>

<pre><code>return !d3.select(this).classed("my-selector");
</code></pre>

<p>  });
```</p>

<p>Here's a <a href="http://jsbin.com/qeyawa/1/edit?html,js,output">jsbin</a> that provides some toggle functionality.  Ees for fun.</p>

<p><a class="jsbin-embed" href="http://jsbin.com/qeyawa/1/embed?output">d3 toggleClass</a><script src="http://static.jsbin.com/js/embed.js"></script></p>

<h2>Bonus: A note on single active classes</h2>

<p>Here's a fun tip for that oft-encountered situation where you want a single element in a selection to have a class, like an <code>active</code> class, and the rest of the selection should not:</p>

<p>Make sure that you detect the active class in the selection previous to the clearing of the active classes.</p>

<p>A sample of what that might look like could be:</p>

<p>```js
d3.selectAll(".bar").on("click", function () {
  var activeClass = "active";
  var alreadyIsActive = d3.select(this).classed(activeClass);
  svg.selectAll(".reports-chart__bar")</p>

<pre><code>.classed(activeClass, false);
</code></pre>

<p>  d3.select(this).classed(activeClass, !alreadyIsActive);
});
```</p>

<p>Now, unleash the power of your creativity!  Kazaam!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A JSON API Errors Serializer in Rails]]></title>
    <link href="http://jaketrent.com/post/jsonapi-errors-serializer-in-rails/"/>
    <updated>2014-12-04T10:11:00-07:00</updated>
    <id>http://jaketrent.com/post/jsonapi-errors-serializer-in-rails</id>
    <content type="html"><![CDATA[<p>The default serialization of error states in Rails might not be what you want for your app.  In that case, it'd be worth knowing how to write a custom serialization format for your needs.  In my case, I am trying to match the <a href="http://jsonapi.org/format/#errors">JSON API format for errors</a>.  Here's a potential implementation...</p>

<p><img src="http://i.imgur.com/XOUecnw.jpg" alt="Rails jsonapi errors" /></p>

<!--more-->


<h2>JSON API Errors Format</h2>

<p>JSON API is cool because it is a standard format for REST APIs to serialize data.  It would be even cooler if it was well-established and it was standardized more than it currently is.  As it is, it's a standard that seems to fluctuate a fair bit.  Nevertheless, it has many worthy ideas and might be worth using as a format on your app.</p>

<p>The <a href="http://jsonapi.org/format/#errors">errors format</a> specifically asks for JSON that looks something like this:</p>

<p>```json
{
  "errors": [</p>

<pre><code>{
  "id": "name",
  "title": "Name cannot be empty"
} // ...
</code></pre>

<p>  ]
}
```</p>

<p>There must be an <code>errors</code> root attribute.  Its value is an array.  That array has individual errors that may include a number of different attributes.  Here, I have highlighted just two -- <code>id</code>, a unique id of the problem and <code>title</code>, the human-readable error message.</p>

<h2>Rails Default Error Serialization</h2>

<p>A common place for errors to be reported are in the HTTP responses for requests to the resources in your REST API.  For instance, in your model for your resource -- in this case, let's say it's a book -- you may have some validation rules for what constitutes a well-formed book.  That model might look like:</p>

<p><code>ruby book.rb
class Book &lt; ActiveRecord::Base
  validates :title, presence: true
end
</code></p>

<p>Thus, if I try to create a new book without a title, I should get some sort of error.  And indeed, I do.  If I have a <code>books_controller.rb</code> that looks like this:</p>

<p>```ruby books_controller.rb
class BooksController &lt; ApplicationController
  def create</p>

<pre><code>book = Book.new(book_params)
if book.save
  render json: book
else
  render json: book.errors  # Allowing default serialization
end
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def book_params</p>

<pre><code>params.permit(:title)
</code></pre>

<p>  end
end
```</p>

<p>By default, Rails 4 will return an error serialization that looks like this:</p>

<p>```json
{
  "title": [</p>

<pre><code>"can't be blank"
</code></pre>

<p>  ]
}
```</p>

<h2>Custom Error Serializer in Rails</h2>

<p>But I wrote a client that doesn't consume errors in the default Rails format, so I want a custom error serialization format -- specifically one to match the JSON API specs.</p>

<p>On the line in <code>books_controller.rb</code> that was returning <code>book.errors</code>, now we'll introduce a new function to call:</p>

<p><code>ruby
render: json: ErrorSerializer.serialize(book.errors)
</code></p>

<p>We're going to write the serializer method in a separate file, <code>error_serializer.rb</code>, so it can be used in many controllers.  To gain access to it in our controller, we need to include the line:</p>

<p><code>ruby
include ErrorSerializer
</code></p>

<p>The contents of your <code>error_serializer.rb</code> can be whatever fits your use case.  For my simple JSON API implementation, it looks like:</p>

<p>```ruby error_serializer.rb
module ErrorSerializer</p>

<p>  def ErrorSerializer.serialize(errors)</p>

<pre><code>return if errors.nil?

json = {}
new_hash = errors.to_hash(true).map do |k, v|
  v.map do |msg|
    { id: k, title: msg }
  end
end.flatten
json[:errors] = new_hash
json
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Note the format includes an <code>errors</code> root attribute and an <code>id</code> and <code>title</code> for each error object.</p>

<p>Now, the errors serialization format from the API in the case of an error appears like:</p>

<p>```json
{
  "errors": [</p>

<pre><code>{
  "id": "title",
  "title": "Title can't be blank"
}
</code></pre>

<p>  ]
}
```</p>

<p>Just what we wanted.</p>

<p>I'm sure there are better places to put your error serialization logic, ways to call it, or great libraries you've worked with that do a similar thing.  Any suggestions?  Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Destroy Duplicate Tests]]></title>
    <link href="http://jaketrent.com/post/destroy-duplicate-tests/"/>
    <updated>2014-11-05T16:59:00-07:00</updated>
    <id>http://jaketrent.com/post/destroy-duplicate-tests</id>
    <content type="html"><![CDATA[<p>As soon as we begin to write a test for our code, it is natural for us to think that we are doing a good thing, and often, we are.  Yet, I believe there are times that we’re writing tests when we’re hurting more than helping — and, of course, this is not on purpose.  To clarify, I’m an advocate for testing in general, and this is a short thought on how to make it better.</p>

<p><img src="http://i.imgur.com/ozzuTNQ.png" alt="Double tests are not fine" /></p>

<!--more-->


<p>As soon as we begin to write a test for our code, it is natural for us to think that we are doing a good thing, and often, we are.  Yet, I believe there are times that we’re writing tests when we’re hurting more than helping — and, of course, this is not on purpose.  To clarify, I’m an advocate for testing in general, and this is a short thought on how to make it better.</p>

<h2>Verify It, and Be Done</h2>

<p>One of the main goals of testing is to verify that what you have written is correct.  So, if we’ve met that goal, there’s no need to go around the track one more time and see the checkered flag again.  The second time around produces no extra glory and no extra benefit.</p>

<p>If we cover a section of code many times, it isn’t more helpful than the first time we covered it.  To verify twice isn’t to verify any better.  If the second attempt does happen to verify the same thing in an obviously better way, remove the first attempt and keep the second.</p>

<p>If it’s a variation of a certain case that you’re verifying, that’s different.  Adding new cases based on slight permutations of previous cases can be a good thing.  But covering the exact same thing provides no value.  In fact, multiple verification of code is just a type of debt.  It should be a smell in your test code that alerts you to clean things up.</p>

<h2>The Debt of Duplicate Tests</h2>

<p>If you have multiples of something, it just increases the maintenance over time.  Why would you want to update two tests instead of one?  Now that you have duplicate tests, you also have to keep them in sync.  Of course, if they cover the exact same case, if you change source code to fix the one test, the other will still be broken and be apparent and easy to fix.</p>

<p>The more tests you have, the longer your feedback loop in development or in a continuous build environment will be.  Multiply that extra wait time across your life on the project, and it has the possibility of being a non-trivial product.  Of course we need to wait for the tests that are needful and provide added value, but we shouldn’t wait needlessly.</p>

<p>Sometimes you do see duplicate tests within the same file — for instance, within the same unit.  This might happen when different developers approach the unit at different times to add tests.</p>

<p>I think it’s probably more often the case that duplicate tests are found across test classes -- meaning across the different types of tests.  For instance, a developer might write a unit test that covers a case.  Later, someone else might add an integration test that adds the same case.  Later still, someone else might add a functional test that adds the same case yet again.  All these developers are well-intentioned in adding tests.  They all need to think, communicate, investigate, and coordinate a little more to avoid the duplicate test problem.</p>

<h2>Deleting Duplicate Tests</h2>

<p>When duplicate tests are found, we should delete them.  Again, this might require some thinking.  We might want to consider which of the duplicate cases is the best test and therefore the one to keep.  This consideration might include which test is most stable, runs the fastest, is most readable, best designed, latest, earliest, etc.</p>

<h2>Avoiding Duplicate Tests</h2>

<p>The best scenario would be the one where we avoid duplicate tests.  Teams with clear guidelines will be able to coordinate better.  Useful information might include which classes of tests exist in the project and what each is intended for.  We might describe which kinds of tests we prefer, in which order, for certain kinds of verifications.  Having clean, well-organized tests will also encourage the team to read each others’ tests and familiarize themselves with what’s already written and know where to find existing cases and where to properly categorize new cases.</p>

<p>So have fun testing, and destroy the duplicate tests!  Yay for test doubles, but boo for double tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expose HTTP Headers in CORS]]></title>
    <link href="http://jaketrent.com/post/expose-http-headers-in-cors/"/>
    <updated>2014-09-15T09:42:00-06:00</updated>
    <id>http://jaketrent.com/post/expose-http-headers-in-cors</id>
    <content type="html"><![CDATA[<p>For APIs, it seems more and more data is making its way into the HTTP headers.  Recently, whilst adding a <code>Link</code> header, for paging data, into the HTTP response, I realized that my browser code couldn't see it.  Who was the culprit?  CORS, of course.</p>

<p><img src="http://i.imgur.com/JAce7py.jpg" alt="Cors" /></p>

<!--more-->


<h2>Headers in Browser</h2>

<p>It was just another day, and I was developing in my browser of choice, Chrome, known, in part, for its unequaled developer tools.  The <code>Link</code> header that I had added onto my HTTP responses for my API were viewable from the Network tab.  It looked good.  The browser could see it, curl could even see it.</p>

<p>In the browser client code, I was using <code>superagent</code>, but the code failed to see it.  I'd run:</p>

<p><code>js
var request = require('superagent')
request.get('myApi').end(function (err, res) {
  res.xhr.getResponseHeader('Link') // nothing
  res.headers.link // nothing
})
</code></p>

<p>And the header was not coming through.  I ran the same command in the console, <code>res.xhr.getResponseHeader('Link')</code>, and got the error response:</p>

<p><code>
Refused to get unsafe header ‘Link’
</code></p>

<p>These are a classic CORS symptoms.</p>

<h2>CORS Spec</h2>

<p>Well, a few great <a href="http://blog.import.io/tech-blog/exposing-headers-over-cors-with-access-control-expose-headers">google results</a> later, I ended up at the <a href="http://www.w3.org/TR/cors/#simple-response-header">CORS spec</a>, which drones on that only simple headers are allowable in CORS requests by default.  These headers include:</p>

<ul>
<li>Cache-Control</li>
<li>Content-Language</li>
<li>Content-Type</li>
<li>Expires</li>
<li>Last-Modified</li>
<li>Pragma</li>
</ul>


<p><code>Link</code> is definitely not on that list.  So, how to add it?</p>

<h2>Access-Control-Expose-Headers in rack-cors</h2>

<p>Like the other CORS headers, the <code>Access-Control-</code> prefix is present.  The one you're looking for is <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS"><code>Access-Control-Expose-Headers</code></a>.  It is a comma-separated list of header names. You can add this header manually to your response, or depending on the library you're using, it might be added differently.</p>

<p>I was using <code>rack-cors</code>.  Thus, my addition ended up looking something like:</p>

<p>```ruby config/application.rb</p>

<h1>...</h1>

<p>config.middleware.use Rack::Cors do
  allow do</p>

<pre><code>origins '*'
resource '*', :headers =&gt; :any, :methods =&gt; [:get, :post, :put, :delete, :options], :expose =&gt; ['Link']
</code></pre>

<p>  end
end
```</p>

<p>Can you see that the <code>expose</code> key was the key for me?  Once that was added, the browser let the client code read the link, and all was safe and well.</p>

<h2>Bonus:</h2>

<p>As a bonus, here's a great client library for consuming a <a href="https://developer.github.com/v3/#link-header">GitHub API-style</a> <code>Link</code> header, called <a href="https://www.npmjs.org/package/parse-link-header">parse-link-header</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Send Props to Children in React]]></title>
    <link href="http://jaketrent.com/post/send-props-to-children-react/"/>
    <updated>2014-08-12T16:55:00-06:00</updated>
    <id>http://jaketrent.com/post/send-props-to-children-react</id>
    <content type="html"><![CDATA[<p>In React, you're always making components.  Sometimes components are standalone.  Other times, you'll have components that can nest children components.  Sometimes you'll want to send properties to the children components from the parent as often as a doting parent wants to send packages to a child missionary.  It's possible, it's simple, and it's not documented super well.  Here's one method.</p>

<p><img src="http://i.imgur.com/DXuSNbw.png" alt="React" /></p>

<!--more-->


<h2>Children Components</h2>

<p>When parent components are rendered, they have access to a special property, <code>this.props.children</code>.  It's like an Angular <code>ng-transclude</code> or an Ember <code>yield</code>.  Children components are generally rendered something like this:</p>

<p>```js
React.createClass({
  render: function () {</p>

<pre><code>return (
  &lt;div id="iAmParentHearMeRoar"&gt;
    {this.props.children}
  &lt;/div&gt;
)
</code></pre>

<p>  }
})
```</p>

<p>The generic example above shows simply how to render children, <code>props</code> untouched, within a parent component.  Sometimes, however, a parent wants to bequeath its children with extra properties.  How will we make that happen?</p>

<h2>Setting Child Props</h2>

<p><code>props</code> are meant to be immutable.  But, in order for us to send <code>props</code> values to our children, we're going to essentially loop through our children and set props on them as a part of our parent <code>render</code> function.</p>

<p>Deep breath.  It's ok.  The children that we'll loop through aren't mounted component instances.  They are, instead, <a href="http://facebook.github.io/react/blog/2014/07/17/react-v0.11.html#descriptors">descriptors</a>.  These descriptors have all the <code>props</code> attributes that we've declared should be put on the components, but they haven't been rendered yet.  Because of this, we can change props, and it's ok.  We're not mutating what has rendered.  The data still hasn't flowed to the children.  We're still effectively still riffing on the logic of what the children components should really be when they're eventually mounted.</p>

<h2>Looping on Children Components</h2>

<p><code>this.props.children</code> is a funny property.  It's special in more ways than one.  The things that might trip us up in looping is that even though it sounds like a plural thing, meaning an array, sometimes it's a singular object.  To help avoid potential problems, React gives us a helper, <code>React.Children</code>.  It has a few functions for array iteration, such as <code>map</code> and <code>forEach</code> that help account for the potential forms of <code>this.props.children</code>.</p>

<h2>Functional Modifications</h2>

<p>Immutable data is a big part of functional programming.  This means that when we 'mutate' the props, we want to mutate on a clone of the child component without affecting the original.  There's an input, there's an output, and the input is untouched.  Once we have our cloned children components as we want them, we'll render those instead.  React offers another great helper for cloning components and setting properties in a single function, <code>React.addons.cloneWithProps</code>.  Note that in order to use this function, you need to <code>require('react/addons')</code>.</p>

<h2>Checking Child Type</h2>

<p>It's a generally-useful thing to be able to tell what the React class type of a component object is.  It's an applicable skill in terms of looping through child components because we might not want to modify the properties of all types of children.  Each React component class has a <code>type</code> attribute accessible via <code>MyComponent.type</code>.  This attribute is also available on component descriptors.</p>

<h2>A Child CheckOption Example</h2>

<p>To bring this all together and illustrate the concepts, let's say we created a <code>RadioGroup</code> component that could take one or many <code>RadioOption</code> child components.  In raw html, which is what our component will eventually render, <code>input</code>s with type <code>checkbox</code> need to all have the same <code>name</code> attribute value to work well as toggles within the group.  But this is something that React can help us not have to duplicate.  We'll instead put a <code>name</code> property on the parent <code>RadioGroup</code> and have it transfer it as a property on all its children.  The implementation might look like this:</p>

<p>```js
/<em>* @jsx React.DOM </em>/</p>

<p>var React = require('react/addons')</p>

<p>var RadioOption = React.createClass({
  render: function () {</p>

<pre><code>return (
  &lt;label&gt;
    &lt;input type="radio" value={this.props.value} name={this.props.name} /&gt;
    {this.props.label}
  &lt;/label&gt;
)
</code></pre>

<p>  }
})</p>

<p>var RadioGroup = React.createClass({
  renderChildren: function () {</p>

<pre><code>return React.Children.map(this.props.children, function (child) {
  if (child.type === RadioOption.type)
    return React.addons.cloneWithProps(child, {
      name: this.props.name
    })
  else
    return child
}.bind(this))
</code></pre>

<p>  },
  render: function () {</p>

<pre><code>return (
  &lt;div class="radio-group"&gt;
    {this.renderChildren()}
  &lt;/div&gt;
)
</code></pre>

<p>  }
})</p>

<p>var WhereImUsingRadioGroups = React.createClass({
  render: function () {</p>

<pre><code>return (
  &lt;RadioGroup name="blizzard-games"&gt;
    &lt;RadioOption label="Warcraft 2" value="wc2" /&gt;
    &lt;RadioOption label="Warcraft 3" value="wc3" /&gt;
    &lt;RadioOption label="Starcraft 1" value="sc1" /&gt;
    &lt;RadioOption label="Starcraft 2" value="sc2" /&gt;
  &lt;/RadioGroup&gt;
)
</code></pre>

<p>  }
})
```</p>

<p>In this example, where the parent <code>RadioGroup</code> has the <code>name</code> prop, it will be given to each of the children so their <code>name</code> prop will match and the radio group will work as expected.  Thus, the hearts of the children are turned toward their fathers.</p>

<p>Is there a better way to do this?  How have you been sending <code>props</code> to children?</p>
]]></content>
  </entry>
  
</feed>
