<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2013-06-24T08:43:59-06:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Remove Mobile Safari Click Delay]]></title>
    <link href="http://jaketrent.com/post/remove-mobile-safari-click-delay/"/>
    <updated>2013-06-24T08:04:00-06:00</updated>
    <id>http://jaketrent.com/post/remove-mobile-safari-click-delay</id>
    <content type="html"><![CDATA[<p>Did you know that Mobile Safari and other mobile browsers are delaying your click events?  If you've been testing your mobile site, and it feels sluggish in Mobile Safari, this could be one of the reasons.  Disable the click delay and rejoice at a bit more snappy response.</p>

<p><img src="http://i.imgur.com/PH8Zosr.png" alt="mobile browser delay" /></p>

<!--more-->


<h2>Sandbagging?</h2>

<p>Why would a browser vendor build in this "functionality"?  Are they purposefully sandbagging their web experience so consumers will be more drawn to a device-specific app instead?  As if that could ever happen.</p>

<p>Google, as with most things, has an answer.  From a <a href="https://developers.google.com/mobile/articles/fast_buttons?hl=de-DE.">Google Developer article</a>:</p>

<blockquote><p>The reason for [the 300ms delay] is that the browser is waiting to see if you are actually performing a double tap.</p></blockquote>

<p>As with the apps Google was developing, the buttons that we're designing don't really need this check for double taps.  We really just want fast buttons.</p>

<h2>FastClick</h2>

<p>Really, most of the work for this problem is figuring out where the slowness is coming from.  I spent days and days trying to optimize a single-page web app that had a bunch of buttons with click events that seemed slow for some reason.  I came up with all sorts of theories and wasted a lot of time.</p>

<p>Now that you know what your problem is, just download and use a library to solve it.  Of the most fantastic, <a href="https://github.com/ftlabs/fastclick">FastClick</a>.  It's easy to use.</p>

<p><strong>Step 1</strong>
Include the script in the <code>head</code> tag:</p>

<p>```html</p>

<script type="text/javascript" src="fastclick.js"></script>


<p>```</p>

<p><strong>Step 2</strong>
Attach FastClick to all links on the page (or subset if you wish):</p>

<p><code>coffeescript a-whole-new-world.coffee
window.addEventListener 'load', -&gt;
  FastClick.attach document.body
, false
</code></p>

<p>Just like that, you'll see marked improvements.  Thank you Apple.  Thank you FastClick.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ngStyle Background]]></title>
    <link href="http://jaketrent.com/post/ngstyle-background/"/>
    <updated>2013-06-19T07:08:00-06:00</updated>
    <id>http://jaketrent.com/post/ngstyle-background</id>
    <content type="html"><![CDATA[<p><code>ngStyle</code> is the directive used to set inline style attributes with AngularJs.  Most of the time, it's straightforward to use.  <code>background</code> css attributes can be just slightly trickier.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="AngularJs" /></p>

<!--more-->


<h2>ngStyle Objects</h2>

<p>The <code>ngStyle</code> directive requires an object for input.  The object key is the css attribute name.  The resultant value for the key is the value of the css attribute.</p>

<p><code>ngStyle</code> is obviously used to set dynamic styles, because static styles are more easily and efficient set using the standard html <code>style</code> attribute.</p>

<h2>A Dynamic Style Example</h2>

<p>So let's setup a controller that sets a dynamic color based on something as useful as the time.  Useful, right?</p>

<p>```coffeescript colorCtrl.coffee
angular.module('colorly').controller 'colorCtrl', ($scope) ->
  $scope.getColor = -></p>

<pre><code>if new Date().getTime() % 2 is 0 then "red" else "blue"
</code></pre>

<p>```</p>

<p>We could use this <code>getColor</code> function in our app:</p>

<p>```haml app.jade
html(ng-app="colorly")
  head</p>

<pre><code>//- ... include Angular, etc
</code></pre>

<p>  body(ng-controller="colorly")</p>

<pre><code>p(ng-style="{ color: getColor() }")
  | The text will be one of two colors
</code></pre>

<p>```</p>

<h2>A Background Example</h2>

<p>If we have a dynamic value that needs to go in a css <code>background</code> or <code>background-image</code> attribute, it can be just a bit more tricky to specify.</p>

<p>Let's say we have a <code>getImage()</code> function in our controller.  This function returns a string formatted similar to this: <code>url(icons/pen.png)</code>.  If we do, the <code>ngStyle</code> declaration is specified the exact same way as before:</p>

<p><code>haml
ng-style="{ 'background-image': getImage() }"
</code></p>

<p>Make sure to put quotes around the <code>background-image</code> key name.  Remember, this must be formatted as a valid Javascript object key.</p>

<h2>Another Background Example</h2>

<p>That example was easy.  Often, however, you don't have data stored in your models that's formatted like <code>url(icons/pen.png)</code>.  Instead you often have a field that represents the image path only.  In this case, you must do some JavaScript inside your <code>ngStyle</code> declaration:</p>

<p>```coffeescript colorCtrl.coffee
angular.module('colorly').controller 'colorCtrl', ($scope) ->
  $scope.tool =</p>

<pre><code>name: 'Pen'
icon: 'icons/pen.png'
</code></pre>

<p>```</p>

<p><code>haml
ng-style="{ 'background-image': 'url(' + tool.icon + ')' }"
</code></p>

<p>Remember that it's just Javascript, and you'll setup the string concatenation to work just fine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mongoose Population]]></title>
    <link href="http://jaketrent.com/post/mongoose-population/"/>
    <updated>2013-06-18T07:39:00-06:00</updated>
    <id>http://jaketrent.com/post/mongoose-population</id>
    <content type="html"><![CDATA[<p><a href="http://mongoosejs.com">Mongoose</a> is an object modeler for <a href="http://mongodb.org">MongoDb</a>.  It has a particularly great feature, called <a href="http://mongoosejs.com/docs/populate.html">population</a>.  Population allows you to include other objects in a specified object.  It makes the process a lot easier and more automatic.</p>

<p><img src="http://i.imgur.com/pezEyw7.jpg" alt="Mongoose" /></p>

<!--more-->


<h2>Document Design</h2>

<p>Document databases provide a lot of flexibility in how data is modeled.  Just as the name suggests, data will often mimic real-world documents.  MongoDb isn't a document database per se, but it has enough flexibility to be treated as one.  Mongoose population can help.</p>

<p>A document is often optimized for reads.  All the data is included, such as it would be on a real-world piece of paper.</p>

<p>In Mongo, data is divided into collections.  Mongoose helps define discrete schemas for data in each.  This separates and makes data fields explicit.  This helps with data organization, storage, and writing.  Population helps bring data from different collections back together again easily.  From the <a href="http://mongoosejs.com/docs/populate.html">docs</a>:</p>

<blockquote><p>Population is the process of automatically replacing the specified paths in the document with document(s) from other collection(s).</p></blockquote>

<p>So, let's try it out with a couple examples.</p>

<h2>Data Definition</h2>

<p>Mongo will add a primary surrogate key to each object, called <a href="http://docs.mongodb.org/manual/reference/object-id/">ObjectId</a>, referenced as <code>_id</code> in the data.  This will be the key used to refer to objects in other collections.  If I wanted to model players in leagues -- foosball leagues of course --  I might create schemas like this:</p>

<p>```coffeescript player.coffee
mongoose = require 'mongoose'
Schema = mongoose.Schema</p>

<p>playerSchema = new mongoose.Schema
  display_name: String
  leagues: [</p>

<pre><code>type: Schema.Types.ObjectId
ref: 'League'
</code></pre>

<p>  ]</p>

<p>Player = mongoose.model 'Player', playerSchema
```</p>

<p>```coffeescript league.coffee
mongoose = require 'mongoose'
Schema = mongoose.Schema</p>

<p>leagueSchema = new mongoose.Schema
  display_name: String
  created_by:</p>

<pre><code>type: Schema.Types.ObjectId
ref: 'Player'
</code></pre>

<p>  players: [</p>

<pre><code>type: Schema.Types.ObjectId
ref: 'Player'
</code></pre>

<p>  ]</p>

<p>League = mongoose.model 'League', leagueSchema
```</p>

<p>A few points of interest:</p>

<ul>
<li>Since we are using <code>_id</code> to refer to other objects, we use the <code>ObjectId</code> type in the Mongoose definition.  You can use other fields.  Just make sure the type matches.</li>
<li>The <code>ref</code> attribute must match <em>exactly</em> the model name in your model definition.  Otherwise you'll get something like this little beauty: <code>MissingSchemaError: Schema hasn't been registered for model "Player".</code>.</li>
<li>Note that <code>League.players</code> is an array.  Just surround the field definition in square brackets to get this functionality.</li>
</ul>


<h2>Data Read</h2>

<p>Reading data is where Mongoose population really shines.  This is the magic that makes reads of documents very straightforward, easy, and fast.  The magic is in the <code>populate()</code> function.</p>

<h3>Populate One Field</h3>

<p>If I want to populate a single field in the query for an object, I specify the name of that field in a string to the <code>populate</code> function:</p>

<p><code>coffeescript
Player
  .findOne({ _id: 'abc123' })
  .populate('leagues')
  .exec (err, player) -&gt; #...
</code></p>

<p><code>leagues</code> will be populated with an array of full <code>League</code> objects when the resulting json returned, just like magic.</p>

<h3>Populate Multiple Fields</h3>

<p>Populating multiple referenced objects is similarly easy:</p>

<p><code>coffeescript
League
  .find()
  .populate('created_by players')
  .exec (err, league) -&gt; #...
</code></p>

<p>Just separate the field names in your <code>populate</code> parameter with spaces.  This query will return an array of <code>League</code> with the <code>created_by</code> and <code>player</code> fields populated with the associated <code>Player</code> objects.</p>

<h3>Populate Partial Objects</h3>

<p>Populating objects like this can quickly bloat your payload size.  To limit included objects to only a subset of fields, you can specify exactly what parts you want populated.  For instance, if my client UI only needed to show a list of leagues that a player belongs to, I could ask for just the <code>display_name</code> of the included <code>League</code> object by using a 2nd parameter:</p>

<p><code>coffeescript
Player
  .findOne({ _id: 'abc123' })
  .populate('leagues', 'display_name')
  .exec (err, player) -&gt; #...
</code></p>

<p>For listing multiple parts, separate the attribute names with spaces.</p>

<h3>Forget to Populate</h3>

<p>You might get so used to having objects populated for some of your queries that you might wonder why they're not populated in your latest query.  You probably just forgot to call <code>populate()</code> in your query.  You must do this explicitly to get the inclusions you desire.  Otherwise, you the data you query will just include the <code>_id</code> values.</p>

<h3>Explicitly Exclude Field</h3>

<p>It might not be that you forgot to populate, but that on some queries you don't want to populate.  In these cases, you might not want to be sending around unneeded <code>_id</code> values, especially if they make up a large portion of your data size.  You can explicitly exclude such fields.  For instance, if you wanted all <code>Player</code> models but weren't going to populate <code>leagues</code>, you might query:</p>

<p><code>coffeescript
Player
  .find()
  .select('-leagues')
  .exect (err, players) -&gt; #...
</code></p>

<p>Note the <code>-</code> sign in the <code>select</code> clause.  This removes the field from the results.</p>

<h2>Data Write</h2>

<p>When you go to read the data, it's quick, easy, and automatic.  But that's because some work was done previously to reference the correct objects and make sure these references are saved.  Therefore, the naturally more work-intensive part of the population story is the data writing.</p>

<p>When we write to our example models, we need to save the proper references.  For instance, when a new <code>League</code> is created, let's say it automatically needs a <code>created_by</code> <code>Player</code> reference saved and the creating <code>Player</code> will automatically join the league:</p>

<p>```coffeescript
league =
  display_name: myLeagueName
  created_by: currentPlayer._id</p>

<p>League.create league, (err, league) ->
  if err?</p>

<pre><code># ... do smart things that are never shown in a tutorial
</code></pre>

<p>  else</p>

<pre><code>Player.update { _id: currentPlayer._id },
  $push:
    leagues: league._id
, (err, numberAffected, raw) -&gt;
  if err?
    # you know...
  else
    res.json league
</code></pre>

<p>```</p>

<p>A few points of interest:</p>

<ul>
<li>Lowercase <code>league</code> is just the json to populate a <code>League</code> model.  <code>league</code> is also the shadowed variable name in the <code>League.create</code> callback.</li>
<li><code>currentPlayer</code> is just an imagined <code>Player</code> reference that has an <code>_id</code> that you will use to associate <code>Player</code> to this <code>League</code>.</li>
<li><a href="http://docs.mongodb.org/manual/reference/operator/push/"><code>$push</code></a> is a special <code>update</code> attribute that appends new elements to a model's array.</li>
</ul>


<p>Depending on how complex your model relationships become, you may opt for a difference code strategy besides nesting callbacks.  Don't like your pyramid of doom?  Try the awesome <a href="https://github.com/caolan/async">async.js</a>.</p>

<p>I don't know if Mongoose population is going to change your life, but I was very happy when I found this feature.  I had been doing junk like this manually.  What are some other great use cases that you've found?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Vertical Height of Text]]></title>
    <link href="http://jaketrent.com/post/css-text-vertical-height/"/>
    <updated>2013-06-03T07:36:00-06:00</updated>
    <id>http://jaketrent.com/post/css-text-vertical-height</id>
    <content type="html"><![CDATA[<p>Setting text elements on a page to be a specific height is usually straight forward.  Here are the specs for a couple textual situations you'll encounter.</p>

<p><img src="http://i.imgur.com/hxw13Yp.png" alt="CSS height" /></p>

<!--more-->


<p><strong>Note:</strong> Experiments were done in Chrome 27, but this should be pretty consistent over browsers</p>

<h2>Text in a Div</h2>

<p>Text is likely most common just plastered across your site.  Lucky for us all, this is the most straightforward way to calculate and guarantee a vertical height.</p>

<p><img src="http://i.imgur.com/cy3HTWW.png" alt="Text height css" /></p>

<p>The formula is simple.  Here, vertical height is calculated by:</p>

<blockquote><p>vertical height = margin + border + padding + (line-height || height)</p></blockquote>

<p><code>line-height</code> or <code>height</code> will determine the height of the main body of the text container, such as a <code>div</code>.  Either one will do.</p>

<p>I will guess that most of the time you'll want your text centered vertically in the container.  But for those times you want it hugging the top or bottom, add a line-height that's either smaller or larger than the height, respectively, to move the text vertically within the container.</p>

<h2>Text in an Input</h2>

<p>Text appearing within an input field is much more tricky and has a quite a few more caveats.  There are two main different modes that vertical height will be determined by: without a <code>height</code> or with a <code>height</code> specified:</p>

<p><img src="http://i.imgur.com/4UdHhF4.png" alt="Input height css" /></p>

<h3>No Height Specified</h3>

<p>If the <code>height</code> is not set, traditional attributes, combined, create the total vertical height.  This formula becomes:</p>

<blockquote><p>height = margin + border + padding + (line-height || font-size)</p></blockquote>

<p>Some observations and caveats:</p>

<ul>
<li><code>font-size</code> only affects vertical height as it approaches or exceeds the <code>line-height</code>.</li>
<li><code>padding</code>, <code>border</code>, and <code>margin</code> always affect the vertical height, no matter their value.</li>
<li>If <code>font-size</code> is small enough to not affect <code>line-height</code>, <code>line-height</code> can be used for an exact vertical height sum.</li>
<li>If <code>font-size</code>, instead of <code>line-height</code> is affecting the vertical height, the px value of the <code>font-size</code> will not be usable to guarantee height.  Each font has different heights.  A per-font calculation will have to be made.</li>
</ul>


<h3>Height Specified</h3>

<p>If <code>height</code> is set, the input's vertical height formula will always</p>

<blockquote><p>vertical height = height + margin</p></blockquote>

<p>Some observations and caveats:</p>

<ul>
<li>If <code>margin</code>, <code>border</code>, and <code>padding</code> add up to be greater than <code>height</code>, then that becomes new height.</li>
<li><code>line-height</code> and <code>font-size</code> don't contribute the vertical height, no matter the <code>height</code> attribute.</li>
<li><code>margin</code>, <code>border</code>, and <code>padding</code> attributes don't contribute at all to the vertical height if their sum height is less than the actual <code>height</code> attribute.</li>
<li>Once <code>line-height</code> exceeds <code>height</code>, the text in the input moves vertically downward, eventually becoming hidden.</li>
<li>As <code>font-size</code> approaches <code>height</code>, the text will eventually become hidden.</li>
<li><code>border</code> will not affect vertical height, but it will still affect horizontal width.</li>
<li><code>vertical-align</code>, as in most things, does nothing.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember Parent Templates]]></title>
    <link href="http://jaketrent.com/post/ember-parent-templates/"/>
    <updated>2013-05-29T07:02:00-06:00</updated>
    <id>http://jaketrent.com/post/ember-parent-templates</id>
    <content type="html"><![CDATA[<p><a href="http://emberjs.com">Ember</a>'s convention of template hierarchy is very specific.  Learn it once, and you'll know it every time.</p>

<p><img src="http://i.imgur.com/x5HT4FN.jpg" alt="Ember and Handlebars" /></p>

<!--more-->


<p><strong>Note:</strong> Code examples use <a href="http://emblemjs.com/">Emblem</a> templates and <a href="http://coffeescript.org">CoffeeScript</a>.  Vanilla Handlebars and JavaScript would work just as well.</p>

<h2>Outlets</h2>

<p>Ember templates make use of a special helper called <code>outlet</code>.  You can have one main, unnamed outlet or many named outlets.  The main thing to remember is that a child template will always render inside its parent's outlet -- so always put outlets in templates that have children.</p>

<h2>Application Template</h2>

<p>There is a top-most template that all of your templates will render inside of.  This is called the application template.  It is specified in one of two ways.  If you are including your templates as script tags, simply create a script tag that doesn't have a <code>data-template-name</code> or <code>id</code> attribute, a la:</p>

<p>```html</p>

<script type="x-emblem">
  h1 My Application
  == outlet
</script>


<p>```</p>

<p>If you are <a href="/post/precompile-ember-templates">precompiling your Ember templates</a>, which you should, you have a directory for templates.  You will put your file, called <code>application.emblem</code> in the root of that directory.  The contents of <code>templates/application.emblem</code> would be the same:</p>

<p><code>jade
h1 My Application
== outlet
</code></p>

<h2>Route Templates</h2>

<p>If you have a top-level route, it will have a top-level template.  Your route's template will have only the application template as its parent.  So, your about route:</p>

<p><code>coffeescript
App.Router.map -&gt;
  @route 'about'
</code></p>

<p>Will have an about template at <code>templates/about.emblem</code> and you could define a route as <code>AboutRoute</code>.  It will render inside of <code>application.emblem</code>'s outlet.</p>

<h2>Resource Templates</h2>

<p>Resources are interesting because you can nest other routes inside them.  Nesting routes will also result in nesting templates.  If I defined a <code>league</code> resource with a nested route for creating new leagues, it might look something like this:</p>

<p>```coffeescript
App.Router.map ->
  @resouce 'league', -></p>

<pre><code>@route 'new'
</code></pre>

<p>```</p>

<p>There are two leaf routes (and thus templates) that are created here:</p>

<ul>
<li><code>LeagueIndexRoute</code>, which uses <code>templates/league/index.emblem</code></li>
<li><code>LeagueNewRoute</code>, which uses <code>templates/league/new.emblem</code></li>
</ul>


<p>Note that you create a <code>league</code> directory inside your <code>templates</code> directory for nesting these templates.  Precompiled templates will be created at:</p>

<ul>
<li><code>Ember.TEMPLATES["league/index"]</code></li>
<li><code>Ember.TEMPLATES["league/new"]</code></li>
</ul>


<p>If you wanted to use the <code>linkTo</code> helper in a template to link to these routes, you would use this syntax:</p>

<p><code>jade
linkTo 'league.index' | List Leagues
linkTo 'league.new' | New League
</code></p>

<p>And now as far as templates, there is <em>one more</em> that we're missing.  There is a root league template that these two league leaf templates render inside of.  It should live at <code>templates/league.emblem</code>.  This template would be useful for showing UI elements that are common to all league resource things.  In the case where there is no such need, this template will probably only contain a single outlet:</p>

<p><code>jade
== outlet
</code></p>

<p>So the final template hierarchy for <code>league.new</code>, for example, is <code>application.emblem &gt; league.emblem &gt; league/new.emblem</code>.</p>

<p>There is a bit of a chatter on the Githubs about whether the root resource template is good form or not.  As in, why would you create a file that contains nothing but an empty outlet?  Couldn't the framework infer that if it was missing?</p>

<h2>Children Need All Parents</h2>

<p>Create all parents in your template chain, from the application template to the leaves.  The worst thing that can happen if you don't is that nothing will render at all, and no error messages will be displayed (pretty bad and unhelpful).</p>

<p>Most of the time, Ember will try to be helpful and give you a console warning:</p>

<blockquote><p>WARNING: The immediate parent route ('a') did not render into the main outlet and the default 'into' option ('p') may not be expected</p></blockquote>

<p>In other words: You're trying to render a child template that either doesn't have a parent template it needs or the parent template does not specify a main outlet.</p>
]]></content>
  </entry>
  
</feed>
