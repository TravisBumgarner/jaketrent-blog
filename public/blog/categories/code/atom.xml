<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2014-03-10T08:55:51-06:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing Express Validator]]></title>
    <link href="http://jaketrent.com/post/testing-express-validator/"/>
    <updated>2014-03-10T07:37:00-06:00</updated>
    <id>http://jaketrent.com/post/testing-express-validator</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/ctavan/express-validator">Express-validator</a> is a <a href="http://expressjs.com/api.html#middleware">middleware for Express</a> on Node.js that can help you validate user input.  It's a lovely library.  Here's a pattern for testing code that uses it.</p>

<p><img src="http://i.imgur.com/ZfK9bv4.png" alt="express-validator" /></p>

<!--more-->


<h2>Install</h2>

<p>To get <code>express-validator</code> in your project, install with npm:</p>

<p><code>bash
npm install express-validator --save
</code></p>

<h2>Plug in the Middleware</h2>

<p>To use the middleware in your code, crack open the part of your app that sets up Express middlewares, and add in a reference to this lil beaut:</p>

<p>```coffeescript
expressValidator = require 'express-validator'</p>

<h1>...</h1>

<p>app.use express.json()
app.use expressValidator()
```</p>

<p>Note that you should insert the new <code>express-validator</code> middleware directly after the <code>json</code> middleware.  Also note that the <code>json</code> middleware, used in conjunction with <code>urlencoded</code> now <a href="http://andrewkelley.me/post/do-not-use-bodyparser-with-express-js.html">replace <code>bodyParser</code></a> to avoid deprecation warnings on startup.</p>

<h2>Validate Something</h2>

<p>Let's say you're writing a validator for new posts to a blog.  That code might look like this.</p>

<p>```coffeescript blog-new-validator.coffee
module.exports = (req) -></p>

<p>  req.checkBody('title', 'Title is required').notEmpty()
  req.checkBody('body', 'Body is required').notEmpty()</p>

<p>  !req.validationErrors() or req.validationErrors().length is 0
```</p>

<p>It checks to see if there is a title and a body given.  If there is not, the validator will return false, and there will be a validation errors array on the <code>req</code> object.  There are many <a href="https://github.com/chriso/validator.js">other assertions (provided internally by validator.js)</a> besides <code>notEmpty</code> that you can use.</p>

<h2>Validating the Validator</h2>

<p>First, setup a test helper that stubs the request, <code>req</code>, for validation:</p>

<p>```coffeescript req.coffee
expressValidator = require('express-validator')()</p>

<p>exports.stubForValidation = (done) ->
  req =</p>

<pre><code>query: {}
body: {}
params: {}
param: (name) -&gt;
  @params[name]
</code></pre>

<p>  expressValidator req, {}, -></p>

<pre><code>done(req)
</code></pre>

<p>```</p>

<p>There's nothing too incredibly special here.  It's just abstracted out of your test into a reusable helper.  The <code>req</code> object has empty objects to slap fixture data onto in your tests.  It includes a stubbed <code>param</code> function that can return params by name.  Finally, the <code>express-validator</code> middleware is called with the stubbed <code>req</code> object.</p>

<p>Now, in your test, you can simply:</p>

<ol>
<li>Stub the request before each test</li>
<li>Setup your fixture data to make the test pass (or not)</li>
<li>Assert validation errors' existence and messages</li>
</ol>


<p>```coffeescript blog-new-validator.spec.coffee
stubReq = require('req').stubForValidation
validateNew = require 'blog-new-validator'</p>

<p>describe 'blog-new-validator', -></p>

<p>  req = null</p>

<p>  beforeEach (done) -></p>

<pre><code>stubReq (r) -&gt;
  req = r
  done()
</code></pre>

<p>  it 'is invalid without title', -></p>

<pre><code>validateNew(req).should.be.false
req.validationErrors(true).title.msg.should.eql 'Title is required'
</code></pre>

<p>  it 'is invalid without body', -></p>

<pre><code>validateNew(req).should.be.false
req.validationErrors(true).body.msg.should.eql 'Body is required'
</code></pre>

<p>  it 'is valid with title and body', -></p>

<pre><code>req.body.title = 'New Blog Title'
req.body.body = 'The body of the blog.'
validateNew(req).should.be.true
</code></pre>

<p>```</p>

<p>What do you think?  Is there an easier way?  A way to get better assertions?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Permit Array in Rails Strong Parameters]]></title>
    <link href="http://jaketrent.com/post/permit-array-rails-strong-parameters/"/>
    <updated>2014-01-22T11:19:00-07:00</updated>
    <id>http://jaketrent.com/post/permit-array-rails-strong-parameters</id>
    <content type="html"><![CDATA[<p>Rails 4 introduced the pattern of strong parameters at the controller layer.  As a best practice, you will explicitly list the parameters that an endpoint should accept in payloads.  Arrays are specified just slightly different.</p>

<p><img src="http://i.imgur.com/XOUecnw.jpg" alt="Rails" /></p>

<!--more-->


<h2>Strong Parameters</h2>

<p>You don't want those blackhats to update any field they want on your poor models.  Raise the shields -- strong parameters!  In ye olden days, <code>attr_accessible</code> could add some protection to your models.  Since Rails 4, it has been best practice to move this responsibility to the controller.  At that layer, you can make adjustments and allowances on a per-endpoint basis (eg, admin functionality has more power over a particular model than the layman user).</p>

<p>So, create a private function in your controller where you can filter your params for your model.  It might look like:</p>

<p>```ruby
private</p>

<p>def luchador_params
  params.require(:luchador).permit(:favorite_move, :weight)
end
```</p>

<p>You have two main methods to use:</p>

<ul>
<li><code>require</code> - ensures that the parameter is present (as in this root <code>luchador</code> key)</li>
<li><code>permit</code> - whitelist filters the parameters to the set specified</li>
</ul>


<h2>Arrays in <code>permit</code></h2>

<p>The most standard use case for <code>permit</code> is to pass it a collection of :symbols.  These keys must represent scalar values (string, number, that sort) only.  But what about arrays?  They're represented differently by an empty array:</p>

<p><code>ruby
params.require(:luchador).permit(:favorite_move, :weight, wins: [])
</code></p>

<p>But wait -- one more problem, and I don't like the answer here.  My client might send back a <code>nil</code> instead of an array (ie, when the luchador has no <code>wins</code>).  If this happens, cue ugly error:</p>

<p><code>text
Unpermitted parameter: wins
</code></p>

<p>To fix, default to empty array:</p>

<p><code>ruby
params[:luchador][:wins] ||= []
params.require(:luchador).permit(:favorite_move, :weight, wins: [])
</code></p>

<p>What have you done that looks better?  Please! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grunt-init Exercism.io]]></title>
    <link href="http://jaketrent.com/post/grunt-init-exercism-io/"/>
    <updated>2014-01-03T07:07:00-07:00</updated>
    <id>http://jaketrent.com/post/grunt-init-exercism-io</id>
    <content type="html"><![CDATA[<p><a href="http://exercism.io">Exercism.io</a> has a great set of JavaScript exercises.  They could be made better by a better test setup and runner.  I've created a small grunt-init template to help in that setup.</p>

<p><img src="http://i.imgur.com/4773D.jpg" alt="Grunt and Exercism" /></p>

<!--more-->


<h2>Exercism.io</h2>

<p>For those unfamiliar, <a href="http://exercism.io">Excercism.io</a> is a great tool that helps coders and potential coders learn and expand their knowledge in several programming languages.  Currently, among the 9 language choices, JavaScript is one.  The JavaScript exercises come with a pre-built <a href="https://github.com/mhevery/jasmine-node">jasmine_node</a> test suite.  The point of the exercise is to write code that will make all the corresponding tests pass.  For more on Excercism.io, see my <a href="/post/exercism-review/">review</a>.</p>

<h2>Vanilla jasmine_node</h2>

<p>As the <a href="http://exercism.io/help/setup/javascript">Exercism JavaScript docs</a> indicate, you can setup your JavaScript environment like this:</p>

<p><code>bash
npm install -g jasmine_node
</code></p>

<p>And then run your tests like this:</p>

<p><code>bash
jasmine_node bob_test.spec.js
</code></p>

<p>This does work perfectly well.  But, we want something more.  Of course.</p>

<h2>Grunt watch</h2>

<p>We want the test suite to re-run as soon as we make a change and save either our test file or our file under test.  Well, it turns out that <a href="http://gruntjs.com">Grunt</a> is a great little command-line tool that has plugins for file watching.</p>

<p>Grunt needs to be told to use a plugin.  Then it needs to be told that we want to run the task that watches our files.  All of this is indicated to Grunt via a local <code>Gruntfile.js</code> or <code>Gruntfile.coffee</code> file.  You could create this file by yourself, but wouldn't it be nice if there was a <code>Gruntfile.js</code> created somewhere for you already that worked well with Exercism?</p>

<h2>Grunt-init</h2>

<p>It turns out that there is a great, separate utility called <a href="http://gruntjs.com/project-scaffolding">grunt-init</a> that you can use to create your <code>Gruntfile.js</code> (and many other things) with a pre-built template.</p>

<p>To install this tool, run:</p>

<p><code>bash
npm install -g grunt-init
</code></p>

<p>To use a grunt-init template, you need to have a local copy.  This template copy could live anywhere, but grunt-init can reference these templates purely by name if you put them in <code>~/.grunt-init/</code>.</p>

<p>To get the <a href="https://github.com/jaketrent/grunt-init-exercism">Exercism grunt-init template</a>, clone it like so:</p>

<p><code>bash
git clone git@github.com:jaketrent/grunt-init-exercism.git ~/.grunt-init/exercism
</code></p>

<p>Then change into your specific Exercism directory, init your <code>Gruntfile.js</code>, and follow the other commands:</p>

<p><code>bash
cd ~/dev/exercism/javascript/bob
grunt-init exercism
npm init
npm install
</code></p>

<p>The <code>npm init</code> will flush out the rest of the generated <code>package.json</code>.  The <code>npm install</code> will install all dependencies that we said Grunt needed to do its job.</p>

<p>Finally, activate Grunt to watch your files with:</p>

<p><code>bash
grunt watch
</code></p>

<p>Now as you write your Exercism code to fulfill tests, you will see the tests get run automatically and become greenlit as your code increases in awesomeness.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Zerigo DNS to Heroku]]></title>
    <link href="http://jaketrent.com/post/add-zerigo-dns-to-heroku/"/>
    <updated>2013-12-31T07:03:00-07:00</updated>
    <id>http://jaketrent.com/post/add-zerigo-dns-to-heroku</id>
    <content type="html"><![CDATA[<p>Once upon a time, I could setup DNS super easily on Heroku using their Zerigo DNS addon.  Lately, I tried again using the same pattern and failed.  Here's an updated step-by-step guide.</p>

<p><img src="http://i.imgur.com/6DUwRKt.png" alt="Heroku and Zerigo" /></p>

<!--more-->


<h2>Back in the Day</h2>

<p>It used to be that all you had to do was setup the nameservers on your domain registrar, add the Zerigo addon on Heroku's end with a few commands, and you were rocking in minutes.  The latest DNS setup on Heroku caused me a bit more grief.  Something has changed.  But there is hope.  The new steps are almost just as brief.  You'll just have to take care to get it just right.</p>

<h2>Cedar, not Bamboo</h2>

<p>These days new deployments on Heroku are going to favor using the Cedar stack as the new option.  The Bamboo stack was the original and older Ruby stack.  And so it troubled me after setting up my DNS as I used to that I got an error message (<a href="https://devcenter.heroku.com/articles/error-codes#h70-access-to-bamboo-http-endpoint-denied">h70</a>) similar to this in my logs:</p>

<p><code>bash
2010-10-06T21:51:07-07:00 heroku[router]: at=error code=H70 desc="Access to bamboo HTTP endpoint denied" method=GET path=/ host=foo.myapp.com fwd=17.17.17.17 dyno= connect= service= status=503 bytes=
</code></p>

<p>Lame, lame, lame, lame, lame.  Now, who did you contact?</p>

<p>Running <code>heroku info</code> reveals that I'm indeed using the Cedar stack on this project, so what gives?  It turns out my DNS was messed up.</p>

<h2>The New Zerigo/Heroku Setup</h2>

<p>The <a href="https://devcenter.heroku.com/articles/zerigo_dns">Heroku devcenter docs for Zerigo</a> are pretty good, but as of this writing, they're a little inaccurate.  Here is the step-by-step that worked for me:</p>

<h4>1. Nameservers</h4>

<p>Setup your domain via your registrar's site to point to these nameservers:</p>

<p><code>
a.ns.zerigo.net
b.ns.zerigo.net
c.ns.zerigo.net
d.ns.zerigo.net
e.ns.zerigo.net
</code></p>

<h4>2. Zerigo Addon</h4>

<p>Add the Zerigo addon via the Heroku cli:</p>

<p><code>bash
heroku addons:add zerigo_dns
</code></p>

<h4>3. Zerigo Config</h4>

<p>Open Zerigo addon for configuration:</p>

<p><code>bash
heroku addons:open zerigo_dns
</code></p>

<p>Navigate to the Zerigo site for your app and press the "Add Snippet" button.  From the snippets available, select "Heroku".  This snippet contains a CNAME entry and a URL redirect entry.  Add the snippet.  Now, you'll need to adjust the CNAME entry.  The <code>data</code> field probably reads <code>proxy.heroku.com</code>.  This has been deprecated.  Instead, change the CNAME entry to point to <code>yourapp.herokuapp.com</code>.</p>

<p>Note also that the URL redirect entry is moving all traffic from yourapp.com to http://www.yourapp.com.  Apparently now the "www." subdomain is required and you can't setup a naked domain on Heroku.  If someone knows otherwise, I'd love to here about it, because I used to do this all the time.</p>

<h4>4. Add Domains on Heroku</h4>

<p>Via the Heroku cli, type:</p>

<p><code>bash
heroku domains:add www.yourapp.com
</code></p>

<p>Note that we do <em>not</em> want to add <code>yourapp.com</code> (no "www") to in this manner.  If you do that, the tool adds multiple A records to Zerigo, which the Zerigo docs clearly state you don't want.  These A records are what will activate routing through the Bamboo stack, which you want to avoid.</p>

<p>This should be the point at which you can refresh your browser at "yourapp.com".  You should see the redirect happen, moving you to "www.yourapp.com".  The routing should be happy on Heroku's end.  It sometimes takes more time for this to propagate, so if you don't see results immediately, be a bit patient before your start changing your configuration, thinking it's not working.</p>

<p>Has anyone else run into this?  Is there a better way to set this up?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Define Methods Dynamically in Ruby]]></title>
    <link href="http://jaketrent.com/post/define-dynamic-methods-ruby/"/>
    <updated>2013-11-26T07:28:00-07:00</updated>
    <id>http://jaketrent.com/post/define-dynamic-methods-ruby</id>
    <content type="html"><![CDATA[<p>In Ruby, it's common to see new methods defined dynamically or on the fly for your class.  And who doesn't want to have a piece of that metaprogramming?</p>

<p><img src="http://i.imgur.com/Z7WWtL0.jpg" alt="Ruby" /></p>

<!--more-->


<h2>An Example</h2>

<p>For example, I just finished an <a href="/post/exercism-review/">exercism code exercise</a> where I felt like there was a fair bit of code duplication.  I had a bunch of convenience functions that would show the conversion of a time in earth time to a time specific to a planet.  So, the API required something that looked something like this:</p>

<p>```ruby
class SpaceAge</p>

<p>  def on_earth</p>

<pre><code>seconds_on_planet :earth
</code></pre>

<p>  end</p>

<p>  def on_mercury</p>

<pre><code>seconds_on_planet :mercury
</code></pre>

<p>  end</p>

<p>  def on_venus</p>

<pre><code>seconds_on_planet :venus
</code></pre>

<p>  end</p>

<p>  # ...
end
```</p>

<p>Feeling that this might be an excessive number of similarly pattern methods, I considered ways that the API might stay in tact but the effort of maintenance of these many functions might be decreased.</p>

<h2><code>define_method</code></h2>

<p>We could collapse these methods quite a bit in the visual code by defining them dynamically, using <code>define_method</code>:</p>

<p>```ruby
class SpaceAge
  def self.on_planets(*planets)</p>

<pre><code>planets.each do |planet|
  define_method "on_#{planet}" do
    seconds_on_planet planet
  end
end
</code></pre>

<p>  end</p>

<p>  on_planets :earth, :mercury, :venus, :mars, :jupiter, :saturn, :uranus, :neptune
end
```</p>

<p>The exact same code would be generated.  It's better! But it's worse!  It's actually less readable than before.  <code>on_planets</code> as a new helper API might be nice.  But, we're not currently using this anywhere else.  The code is probably more maintainable, but it's also more stiff.  Previously, each of the methods was separate and therefore separately modifiable and customizable.  Now, there's one implementation of an "on_#{planet}" method.  This could be easier/harder to deal with, depending.  I think the readability is better because of the smaller amount of code, but the readability is worse because of the increased complexity and eye parsing required.  In the end, for my code, I stayed with the original solution for its 5-star readability.</p>

<p>But the ability to define methods dynamically is super awesome.  When do you find yourself using this super power?</p>
]]></content>
  </entry>
  
</feed>
