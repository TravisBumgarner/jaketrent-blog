<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2013-03-19T08:14:37-06:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Https Redirect for Node on Heroku]]></title>
    <link href="http://jaketrent.com/post/https-redirect-node-heroku/"/>
    <updated>2013-02-26T07:33:00-07:00</updated>
    <id>http://jaketrent.com/post/https-redirect-node-heroku</id>
    <content type="html"><![CDATA[<p>When your app requires users to be using the <code>https</code> protocol to make requests and get responses, it's helpful to have an automatic redirect so the user is always in the right place.  Here's how to do that for a Node Express app on Heroku.</p>

<p><img src="http://i.imgur.com/5rZ8H.png" alt="NodeJs Https Redirect" /></p>

<!--more-->


<h2>Secure Express Requests</h2>

<p>The <a href="http://expressjs.com">Express</a> request object has a bunch of great information.  One of its attributes is <code>secure</code>.  It's a boolean.  Usually, <code>secure == true</code> will mean that you're on <code>https</code>.  When that is not true, you're ready for a redirect.</p>

<p>Unfortunately for apps hosted on Heroku, <code>request.secure</code> will always be false.  The way that Heroku routing works, it will just never be set.</p>

<h2>Heroku Https Header</h2>

<p>Instead, Heroku forwards an http header that allows us to do the same "is secure" test.  On Heroku, <code>request.header('x-forwarded-proto')</code> will contain the actual protocol string (eg, 'http' or 'https').</p>

<h2>Express Middleware SSL Redirect</h2>

<p>If you're using the Express framework on Node, then you have it easy.  There's already a great middleware mechanism for you to send any or all requests through.  If you set your Express app (v3) up like this:</p>

<p><code>coffeescript
app = express()
</code></p>

<p>Then you can use the <code>app.use</code> functionality to specify a middleware.  Since I only have certificates and want the redirect to happen in the production environment, I will likewise wrap this middleware inside <code>app.configure</code> for prod (it inspects <code>NODE_ENV</code> for you).  This redirect will be pretty rudimentary, but it's just that simple, so here it goes:</p>

<p>```coffeescript
app.configure 'production', ->
  app.use forceSsl(req, res, next) -></p>

<pre><code>if req.header 'x-forwarded-proto' != 'https'
  res.redirect "https://#{req.header 'host'}#{req.url}"
else
  next()
</code></pre>

<p>```</p>

<p>If it's not <code>https</code> already, redirect the same url on <code>https</code>.  If it is, that's what I want, and you can pass on through my middleware function.  Note that this middleware will protect <em>all</em> urls on the site with an <code>https</code> redirect.  Your middleware could be more selective.  You could even create this as a stacked middleware per route if you wanted.  We could even enhance our middleware to use inspect both the http header <em>and</em> the <code>secure</code> flag.</p>

<p>Heroku threw us a for a minor, unexpected loop, but it was nothing that we couldn't easily code for.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serve Json from Sinatra]]></title>
    <link href="http://jaketrent.com/post/serve-json-from-sinatra/"/>
    <updated>2013-02-26T07:18:00-07:00</updated>
    <id>http://jaketrent.com/post/serve-json-from-sinatra</id>
    <content type="html"><![CDATA[<p>By default, Sinatra knows how to serve up a rendered html page.  With a slight tweak, we can make it spit out Json too!</p>

<p><img src="http://i.imgur.com/ZyCgi56.jpg" alt="JSON on Sinatra" /></p>

<!--more-->


<h2>Data Format of the Web</h2>

<p>Json is my favorite data format for web applications.  Really, who wouldn't want their webservice to expose Json?  It's mucho useful.</p>

<p>First, add a line to the <code>Gemfile</code> that makes a Json helper method available to Sinatra:</p>

<p><code>ruby
gem "sinatra-contrib"
</code>
Next, all you need to do is query the data that you want to return and actually return it, as in:</p>

<p>```ruby
require "sinatra/json"</p>

<p>get "/my-models" do
  json MyModel.all
end
```</p>

<p>The <code>json</code> helper will then serialize your objects into Json, much to the delight of your clients!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pass Values From the Page to AngularJs]]></title>
    <link href="http://jaketrent.com/post/pass-values-from-page-to-angular/"/>
    <updated>2013-02-22T07:10:00-07:00</updated>
    <id>http://jaketrent.com/post/pass-values-from-page-to-angular</id>
    <content type="html"><![CDATA[<p>There are simple mechanisms for passing data from your web page to AngularJs.  One directive is called <code>ngInit</code>.  You may well need it.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="Angular data passing" /></p>

<!--more-->


<h2>The Use Cases</h2>

<p>The use cases don't make a ton of sense without a concrete example.  There are several ways to implement even the most simple example.  If the solution doesn't seem to fit the problem, try another way.</p>

<p>For our purposes, let's say that we're displaying a list of comments on the screen.</p>

<h4>Angular Requests Data</h4>

<p>It's easy to put data into scope for AngularJs to use if Angular is the one to request the data initially.  This often will look something like this:</p>

<p>```coffeescript
$http.get('/comments')
  .success((comments) -></p>

<pre><code>$scope.comments = comments
</code></pre>

<p>  )
```</p>

<p>Then your template will automatically have the data in scope.  And the template (<a href="http://slim-lang.org">Slim</a> syntax used below) can look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h1</span> <span class="no">Comments</span>
</span><span class='line'><span class="n">ul</span>
</span><span class='line'>  <span class="n">li</span> <span class="n">ng</span><span class="o">-</span><span class="n">repeat</span><span class="o">=</span><span class="s2">&quot;comment in comments&quot;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;| {{ comment }}</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now when we add a new comment via Ajax, we can push it right into the comment collection, and the page is updated by Angular with the appropriate data.  Or if we want to perform an operation on a pre-existing comment, it's easy to do via an AJAX operation and display the result.</p>

<h4>Server Renders Data Initially</h4>

<p>Sometimes it'll make sense for the server to render the data.  Often this kind of data will be the main content on the page.  When the client receives the page, we want the data display to be immediate.  We don't want them to load a page with a spinner for the main content, then wait and watch it spin while the real content is requested secondarily.</p>

<p>If the server was to initially print the comments, like so:</p>

<p>```ruby
h1 Comments
ul
  - comments.each do |comment|</p>

<pre><code>li 
  = comment
</code></pre>

<p>```</p>

<p>We still might want to do AJAX'y things with a comment, such as like it.  When I like it, I don't want the browser to have to refresh, so I want to make Angular do this for me.</p>

<h2>ngInit Passes Angular Server Data</h2>

<p>Angular provides a nice directive, <code>ngInit</code> for passing Angular data.  It's a mechanism by which you can bootstrap your scripts with the data they need to function.  A mixture of server rendering and client-side AJAX requests on the same data will probably mean that you're going to use this directive.</p>

<p>From the <code>ngInit</code> docs:</p>

<blockquote><p> The ngInit directive specifies initialization tasks to be executed before the template enters execution mode during bootstrap.</p></blockquote>

<p>Our server/client mixture code might look something like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h1</span> <span class="no">Comments</span>
</span><span class='line'><span class="n">ul</span>
</span><span class='line'>  <span class="o">-</span> <span class="n">comments</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">comment</span><span class="p">,</span> <span class="n">i</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;li ng-init=&quot;commentLikeCount[i]=</span><span class="si">#{</span><span class="n">comment</span><span class="o">.</span><span class="n">likeCount</span><span class="si">}</span><span class="sr">&quot;</span>
</span><span class='line'><span class="sr">  = comment</span>
</span><span class='line'><span class="sr">  | Likes for this comment: {{commentLikeCount[i]}}</span>
</span><span class='line'><span class="sr">  a ng-click=&quot;like(commentLikeCount[i])&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It's important to realize where data is coming from in this example.  The syntax <code>=</code> as in <code>= comment</code> and <code>#{}</code> as in <code>#{comment.likeCount}</code> are server-rendered bits.  As you know, the curlies and the ng attribute syntax is for Angular's client side rendering.</p>

<p>So how has this mixture bought us anything?</p>

<ol>
<li>The server renders the comments initially.  This makes the display immediate when the browser loads the page.</li>
<li>We init the value of <code>commentLikeCount</code>, making it available for Angular to display once the client compiles the template.</li>
<li>Since Angular has a count of the likes, it can easily update it and redisplay without a page reload after calling <code>like()</code> to increment the count.</li>
</ol>


<p>Frankly, the mixture feels a little bit odd to me.  I've seen it work.  I know there are different ways to get this done.  I think there are probably better ways.  What has worked well for you in similar use cases?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJs Find Element in Context]]></title>
    <link href="http://jaketrent.com/post/angularjs-find-element-in-context/"/>
    <updated>2013-02-21T17:35:00-07:00</updated>
    <id>http://jaketrent.com/post/angularjs-find-element-in-context</id>
    <content type="html"><![CDATA[<p>Finding an element in context means that I can select a node from the dom within a certain range -- specifically either a node or any of its children nodes.  Is there an "Angular way" to do this?</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="AngularJs find in context" /></p>

<!--more-->


<h2>Angular's Element() API</h2>

<p>Angular provides jqLite for doing basic CSS selections.  As far as I can tell, it does not give you the ability to specify a context node.  Sure, you can specify a more specific selector, but you can't pass a context programmatically.  The best you could do would look something like:</p>

<p><code>js
angular.element('.my-preknown-context .element-to-find')
</code></p>

<p>If that's sufficient for your use case, this would be the most "Angular way" to make an element selection.</p>

<h2>jQuery's API</h2>

<p>If you need to make CSS selections within a given context, you'll need to use jQuery.  jQuery's selector will be used in place of jqLite if it is loaded previous to the <code>DOMContentLoaded</code> event firing.  In other words, import jQuery in the <code>head</code> tag.</p>

<p>With jQuery, you can do things like this:</p>

<p><code>js
$('.element-to-find', $('.my-preknown-context'))
</code></p>

<p>But we could already do that with the above <code>angular.element</code> function.  If a constraint of our use case is that we don't yet know the selector of the context, then we need to  use this same jQuery API to do what we couldn't before.  For instance, if we want to find a child element of an element that was clicked, the inside of the click handler might look like this:</p>

<p><code>js
$('.element-to-find', $(event.currentTarget))
</code></p>

<p>We could also write it like this:</p>

<p><code>js
$(event.currentTarget).find('.element-to-find')
</code></p>

<p>Well, why not use <code>angular.element().find()</code>?  Because it is limited to querying children by tagName only.  Oh boy.  That's not all that useful.  Interesting/weird constraint.  Oh well, maybe someday.</p>

<h2>jQuery, Meet Angular</h2>

<p>So, using full jQuery is probably not the most "Angular way".  So, what's the best you can do?  Use Angular to get the context reference.  In a click handler, use the <code>$event</code> service which references the event object:</p>

<p><code>js
$('.element-to-find', $event.currentTarget)
</code></p>

<p>In a controller, use the <code>$element</code> service which references the dom node the controller is attached to:</p>

<p><code>js
$('.element-to-find', $element)
</code></p>

<p>This method uses jQuery to fill in for something it seems Angular can't do yet.  And it uses Angular where possible, since it has access to these dom references already.</p>

<p>What do you think?  Is there a more "Angular way" to do this?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serve CoffeeScript from Sinatra]]></title>
    <link href="http://jaketrent.com/post/serve-coffeescript-with-sinatra/"/>
    <updated>2013-02-20T16:39:00-07:00</updated>
    <id>http://jaketrent.com/post/serve-coffeescript-with-sinatra</id>
    <content type="html"><![CDATA[<p>Sinatra is nice because it's super lightweight.  This will allow you to make it do exactly what you want, nothing more.  This is the opposite of Ruby on Rail's convention.  Likewise, it takes just a bit more configuration to make Sinatra serve CoffeeScript as compared to Rails.</p>

<p><img src="http://i.imgur.com/Ta27Zd4.jpg" alt="Sintra and CoffeeScripting" /></p>

<!--more-->


<h2>Sinatra and CoffeeScript</h2>

<p>Surprisingly, there are no fantastic gems, at least that I could churn up in a few Google searches, that make serving CoffeeScript bone head easy.  I found a few, such as the Sinatra Assetpack.  It looked like serious overkill, and my Sinatra app is very small, so I wanted a quick and easy way to serve the static goods.</p>

<h4>CoffeeScript Gem</h4>

<p>Sinatra needs a Gem to compile the CoffeeScript.  Put this line in your <code>Gemfile</code>:</p>

<p><code>
gem "coffee-script"
</code></p>

<p>And run a:</p>

<p><code>
$ bundle install
</code></p>

<h4>Public Directory</h4>

<p>In my app, <code>web.rb</code> is the main controller file.  Next to that file, I have a directory structure like this:</p>

<p><code>
public/
  js/
  coffee/
web.rb
</code></p>

<p>By default, Sinatra will serve static assets out of this <code>public</code> directory.</p>

<h4>CoffeeScript Handler</h4>

<p>I created the <code>coffee</code> directory separate from the <code>js</code> directory so that I could write this little handler in <code>web.rb</code>:</p>

<p><code>ruby
get "/coffee/*.js" do
  filename = params[:splat].first
  coffee "../public/coffee/#{filename}".to_sym
end
</code></p>

<p>This handler will pick up requests that match "/coffee/*.js", find the associated <code>.coffee</code> file, compile it to JavaScript and serve it.  I kept the file extension as <code>.js</code> to help avoid handling any potential mime-type setting requirements.  Obviously, this handler is simple and won't handle complicated cases.  But that is also a plus.</p>

<h4>CoffeeScript in Templates</h4>

<p>In my <a href="http://">Slim</a> template, if I wanted to get the compiled contents of the file named <code>myscripts.coffee</code>, I would write a script tag like this:</p>

<p><code>ruby
script src="http://jaketrent.com/coffee/myscripts.js"
</code></p>

<p>Sinatra.  Coffee.  Bam.</p>
]]></content>
  </entry>
  
</feed>
