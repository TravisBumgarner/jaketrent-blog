<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2013-07-10T18:41:09-06:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Namespacing Angular Controller Attributes]]></title>
    <link href="http://jaketrent.com/post/namespacing-angular-controller-attributes/"/>
    <updated>2013-07-10T18:17:00-06:00</updated>
    <id>http://jaketrent.com/post/namespacing-angular-controller-attributes</id>
    <content type="html"><![CDATA[<p>Usually attributes of your Angular controllers are not namespaced.  But you can namespace them.  But you might not want to.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="AngularJs controller namespacing" /></p>

<!--more-->


<h2>Angular Controllers Usually Attach Attributes to Scope</h2>

<p>Usually attributes in an Angular controller, such as functions and variables, are attached to the <code>$scope</code> object.  That looks like this:</p>

<p>```coffeescript my-ctrl.coffee
angular.module('myapp').controller 'MyCtrl', ($scope) ->
  $scope.myVar = 'myVal'
  $scope.myFn = -></p>

<pre><code>console.log 'does stuff'
</code></pre>

<p>```</p>

<p>Then in my template I don't know, nor do I need to know, where the attribute comes from.  I just reference it:</p>

<p>```haml my-app.jade
html(ng-app="myapp")
  body(ng-controller="MyCtrl")</p>

<pre><code>h1 My Var: 
button(ng-click="myFun()") Does Stuff
</code></pre>

<p>```</p>

<h2>Namespaced Angular Controller Attributes</h2>

<p>In this simple example, this is no big deal.  But as your app grows in complexity with many, nested controllers and templates, it can become difficult to read the code.  If you have common function names, it might be hard to tell which controller's function is referenced in your templates.  To make this less of a problem and the code more clear, you might namespace your controller attributes in the template.</p>

<p>To do this, you can write your controllers to attach attributes to the controller instead of scope and then put the controller itself on scope.  That looks like this:</p>

<p>```coffeescript my-ctrl.coffee
angular.module('myapp').controller 'MyCtrl', ($scope) ->
  @myVar = 'myVal'
  @myFn = -></p>

<pre><code>console.log 'does stuff'
</code></pre>

<p>  $scope.MyCtrl = @
```</p>

<p>Then your template changes to look like this:</p>

<p>```haml my-app.jade
html(ng-app="myapp")
  body(ng-controller="MyCtrl")</p>

<pre><code>h1 My Var: 
button(ng-click="MyCtrl.myFun()") Does Stuff
</code></pre>

<p>```</p>

<p>It's kind of nice for the reasons stated above.  I saw this strategy referenced on the Interwebs at one point and thought it seemed like a good idea.</p>

<h2>Why You Might Avoid This</h2>

<p>Maybe you love the idea.  Maybe you don't.  I thought I did.  I have been writing controllers this way for a while.  Now I don't.  Here's why:</p>

<h3>1. It Makes Templates Less Reusable</h3>

<p>It's quite probable that I'll have templates that I don't want permanently attached to a specific controller.  An example I ran into recently was on a profile page.  I had two pages to show profiles: one for my profile and one for an arbitrary person in the system.  They looked the same in the UI.  They had the same basic functions.  But the source of data for the variables and the implementation of the functions was different in the two scenarios.  Thus, I had to refactor to remove the namespacing to be able to reuse the template across pages.</p>

<h3>2. It's More Typing</h3>

<p>It's silly.  It adds up.  The less superfluous typing I can do, the more I consider that solution.</p>

<h3>3. The Creators Don't Do It</h3>

<p>I haven't seen this strategy featured in official tutorials, guides, or API examples.  Not that the Angular d00ds have all the ideas or do everything right -- it just isn't a pattern I see widely accepted or used.</p>

<p>These days, I don't namespace my controller attributes, and I don't recommend it.</p>

<p>So what do you think?  Do you write your controllers this way?  Good idea?  Bad idea?  What are some alternative methods you've found to balance template reuse with readability?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Behavior of CoffeeScript Fat Arrow]]></title>
    <link href="http://jaketrent.com/post/behavior-of-coffeescript-fat-arrow/"/>
    <updated>2013-07-01T07:39:00-06:00</updated>
    <id>http://jaketrent.com/post/behavior-of-coffeescript-fat-arrow</id>
    <content type="html"><![CDATA[<p>In CoffeeScript there are two different types of arrows for defining functions:  arrow (<code>-&gt;</code>) and fat arrow or hash rocket (<code>=&gt;</code>).  Usually, you'll use the regular arrow.  But sometimes you'll want the special behavior of the fat arrow.</p>

<p><img src="http://i.imgur.com/nGd04zX.jpg" alt="CoffeeScript fat arrow" /></p>

<!--more-->


<h2>Function Binding</h2>

<p>In JavaScript, the keyword <code>this</code> within a function refers to the thing that the function is attached to.  Since functions can be invoked in various ways in an average application, what <code>this</code> actually references will change.</p>

<p>For instance, if a function is invoked as a callback in an event handler, <code>this</code> within that handler will likely reference <code>window</code> in JavaScript running within a web browser.  Often, this is not the desired reference.</p>

<p>The solution in vanilla JavaScript is to save a reference to the context the function is defined within and then use that reference in lieu of the <code>this</code> keyword.  My favorite name to save the <code>this</code> reference into is called <code>self</code>.  In JavaScript, that might look like:</p>

<p><code>javascript manual-reference.js
this.myVal = "my val"
var self = this
var myFn = function () {
  console.log(self.myVal); // will print "my val"
}
</code></p>

<h2>CoffeeScript Function Binding</h2>

<p>CoffeeScript understands this basic need and makes the reference saving even easier.  When you use the fat arrow, or hash rocket, it will perform function binding.  It uses a variable called <code>_this</code> automatically.</p>

<h3>CoffeeScript Binding Rules</h3>

<ol>
<li>When a fat arrow is used to bind a function, a <code>_this</code> reference is saved in the same context as the function that was declared.</li>
<li>When properties of <code>this</code> are accessed inside the bound function, they will use the saved <code>_this</code> reference (e.g., <code>@myVal</code> would compile to <code>_this.myVal</code>).</li>
<li>When fat arrows are used to bind functions nested within bound functions, the <code>_this</code> reference from the top-level bound function context is used in the nested bound functions.</li>
<li>The deepest non-bound function context will be used to save a <code>_this</code> reference when a bound function is declared.</li>
</ol>


<h2>When to use Fat Arrow</h2>

<p>Given that, here are the every day rules on when to use the fat arrow:</p>

<ol>
<li>If the context of <code>this</code> in you function could change based on how it was invoked but properties of <code>this</code> need to always reference the context where the function was created, declare the function with a fat arrow.</li>
<li>If nested functions exhibit the same need as in rule #1, declare them with the fat arrow.</li>
<li>Don't bind, then not bind, then bind again in nested functions.  The inner binding will clobber the <code>_this</code> reference and will likely not be what you expect in the outer context (see the last example below).</li>
</ol>


<h2>A Swirl of Examples</h2>

<p>Here are a bunch of examples of bound and non-bound functions.  The first code snippet is the CoffeeScript source.  The second code snippet is the compiled JavaScript.</p>

<h3>No Bound Functions</h3>

<p>Just regular CoffeeScript function declarations.</p>

<p><code>coffeescript non-bound.coffee
myVal: 'my val'
myNonBoundFn: -&gt;
  console.log @myVal
</code></p>

<p>```javascript non-bound.js
({
  myVal: 'my val',
  myNonBoundFn: function() {</p>

<pre><code>return console.log(this.myVal);
</code></pre>

<p>  }
});
```</p>

<h3>Bound Function</h3>

<p>Introduced the fat arrow</p>

<p><code>coffeescript bound.coffee
myVal: 'my val'
myBoundFn: =&gt;
  console.log @myVal
</code></p>

<p>```javascript bound.js
var _this = this;
({
  myVal: 'my val',
  myBoundFn: function() {</p>

<pre><code>return console.log(_this.myVal);
</code></pre>

<p>  }
});
```</p>

<h3>Bound, Non-bound Inner Function</h3>

<p>Notice the inner function is not bound, and defaults back to just referencing <code>this</code>.</p>

<p>```coffeescript non-bound-inner.coffee
myVal: 'my val'
myBoundFn: =>
  myInnerNonBoundFn = -></p>

<pre><code>console.log @myVal
</code></pre>

<p>```</p>

<p>```javascript non-bound-inner.js
var _this = this;
({
  myVal: 'my val',
  myBoundFn: function() {</p>

<pre><code>var myInnerNonBoundFn;
return myInnerNonBoundFn = function() {
  return console.log(this.myVal);
};
</code></pre>

<p>  }
});
```</p>

<h3>Bound Within Bound Functions</h3>

<p>Inner bound function uses top-level <code>_this</code>.</p>

<p>```coffeescript bound-in-bound.coffee
myVal: 'my val'
myBoundFn: =>
  myInnerBoundFn = =></p>

<pre><code>console.log @myVal
</code></pre>

<p>```</p>

<p>```javascript bound-in-bound.js
var _this = this;
({
  myVal: 'my val',
  myBoundFn: function() {</p>

<pre><code>var myInnerBoundFn;
return myInnerBoundFn = function() {
  return console.log(_this.myVal);
};
</code></pre>

<p>  }
});
```</p>

<h3>Bound, Non-bound, then Bound Functions</h3>

<p>When <code>myVeryInnerBoundFn</code> uses the fat arrow inside of <code>myInnerNonBoundFn</code>, which does not, <code>_this = this</code> is generated again.  And when <code>myOtherBoundFn</code> is called, the <code>@what</code> property will be <code>undefined</code>.</p>

<p>```coffeescript clobber-this.coffee
myVal: 'my val'
what: 'is this?'
myBoundFn: =>
  myInnerNonBoundFn = -></p>

<pre><code>myVeryInnerBoundFn = =&gt;
  console.log @myVal
</code></pre>

<p>myOtherBoundFn: =>
  console.log @what
```</p>

<p>```javascript clobber-this.js
var _this = this;
({
  myVal: 'my val',
  what: 'is this?',
  myBoundFn: function() {</p>

<pre><code>var myInnerNonBoundFn;
return myInnerNonBoundFn = function() {
  var myVeryInnerBoundFn,
    _this = this;
  return myVeryInnerBoundFn = function() {
    return console.log(_this.myVal);
  };
};
</code></pre>

<p>  },
  myOtherBoundFn: function() {</p>

<pre><code>return console.log(_this.what);
</code></pre>

<p>  }
});
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Access Model in Ember View]]></title>
    <link href="http://jaketrent.com/post/access-model-in-ember-view/"/>
    <updated>2013-07-01T07:39:00-06:00</updated>
    <id>http://jaketrent.com/post/access-model-in-ember-view</id>
    <content type="html"><![CDATA[<p>Ember Views are used for event handling and creating reusable web components.  To make them useful and interesting, model data needs to make it into and out of the view.  Here is an example of how this works.</p>

<p><img src="http://i.imgur.com/RGKiJ0n.jpg" alt="Access model data in Ember View" /></p>

<!--more-->


<h2>Define Your View</h2>

<p>In our example, I'm making a simple dice rolling game.  I want to use a view to represent the die on the screen and to handle the roll event.  Your custom view must simply extend <code>Ember.View</code>:</p>

<p><code>coffeescript die-view.coffee
App.DieView = Ember.View.extend
  templateName: 'die'
</code></p>

<p>This is about the simplest view definition we could make.  We'll make it a bit cooler later.  For now, the view just knows where to get its markup.  The <code>die</code> template can be any valid template.  Ember, by default, uses Handlebars templates.  I prefer <a href="http://emblemjs.com/">Emblem</a> templates:</p>

<p><code>haml die.emblem
li.die = die
</code></p>

<p>This template will simply print the <code>die</code> object in an <code>li</code> with class of <code>die</code>.  (There are an unusual number of 'die' references are in this example.  This is for purely entertainment reasons, nothing more nefarious. :)</p>

<h2>Render Data in Ember View Template</h2>

<p>Next, you need to get your Ember View referenced in your template markup.  In <a href="http://emblemjs.com/syntax/">Emblem</a>, to reference a view, start the line with a capital letter, specifically the name of your view.  In this view, I list the dice in my game controller <code>rolling</code> array and render each die in the <code>DieView</code></p>

<p>```haml dice.emblem
ul.dice
  each die in this.rolling</p>

<pre><code>App.DieView
</code></pre>

<p>```</p>

<p>Using this code, the parent template <code>dice.emblem</code> passes the <code>die</code> variable to the <code>DieView</code>, where its child template, <code>die.emblem</code> renders <code>die</code> data.</p>

<h2>Pass Data Into Ember View</h2>

<p>To pass the <code>die</code> data from <code>dice.emblem</code> into the <code>DieView</code> to be used programatically, however, you need an extra attribute.  Change <code>dice.emblem</code>, adding <code>contentBinding</code>:</p>

<p>```haml dice.emblem
ul.dice
  each die in this.rolling</p>

<pre><code>App.DieView contentBinding="die"
</code></pre>

<p>```</p>

<p>Now you can access the <code>die</code> data via a special Ember View variable named <code>content</code>.  Why might you want to get to this data programatically in the view code?...</p>

<h2>Passing Data from Ember View to Controller</h2>

<p>You might want to pass it somewhere else.  Remember, Ember Views are meant to take primitive UI events and translate them into semantic events, meaningful to your application.  For example, our view might want to translate a die element <code>click</code> on the DOM into a <code>roll</code> event in the application.  We made the modification to <code>dice.emblem</code> to pass the data in.  Now, let's send it to the controller like this:</p>

<p>```coffeescript die-view.coffee
App.DieView = Ember.View.extend
  templateName: 'die'</p>

<p>  click: (evt) -></p>

<pre><code>@get('controller').send 'roll', @get 'content'
</code></pre>

<p>```</p>

<p>We retrieve the <code>content</code> variable (holding the <code>die</code>), and send it to the controller in scope as a roll event.  The controller now must implement a <code>roll</code> function.  Let's say we have a game controller.  That code might look like this:</p>

<p>```coffeescript game-ctrl.coffee
App.GameController = Ember.ObjectController.extend</p>

<p>  roll: (die) -></p>

<pre><code># roll die and advance game accordingly
</code></pre>

<p>```</p>

<p>If the controller doesn't implement this function, the current Ember Route may implement it in its <code>events</code> object.  If neither the controller or the route implement it, an exception is thrown.</p>

<p>In this way, Ember Views show their worth in collecting events and translating them to meaningful verbs that we can act upon in our application.  They become reusable, allowing us to bind different content to them on different occassions.  Do Ember Views help you in this way?  Is there a better way?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When to Use Curlies in Angular Directives]]></title>
    <link href="http://jaketrent.com/post/when-to-use-curlies-in-angular-directives/"/>
    <updated>2013-06-24T17:03:00-06:00</updated>
    <id>http://jaketrent.com/post/when-to-use-curlies-in-angular-directives</id>
    <content type="html"><![CDATA[<p>Angularjs has some sweet built-in directives.  Sometimes it can be confusing when to use the curly braces around expressions in directive attributes and when not to.  Here are a couple rules.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="Angular directive curlies" /></p>

<!--more-->


<h2>Curlies</h2>

<p>By "curlies", I mean curly braces.  The difference of when to use or not use them looks like the following.</p>

<p>Use them:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;element</span> <span class="na">ng-attribute=</span><span class="s">&quot;{{valWithCurlies}}&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Or despise them:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;element</span> <span class="na">ng-attribute=</span><span class="s">&quot;valWithNone&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Two Rules of Thumb</h2>

<p>Here are two rules that will serve you well when deciding whether or not to use curlies.</p>

<ol>
<li>Assume no curlies in Angular directive attribute values.  Most directives don't use them.</li>
<li>If you would conceivably want to mix strings with Javascript code in the attribute, use curlies.</li>
</ol>


<h2>Two Examples with Curlies</h2>

<p>There are only a few examples of directives using curlies in their attributes.  These examples are both relating to pathing.  Apparently that's a common use case for mixing strings with JavaScript-borne values.</p>

<h3>ngSrc</h3>

<p>As in the source of an image, such as:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">ng-src=</span><span class="s">&quot;/images/{{tool.icon_name}}.png&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>ngHref</h3>

<p>As in a link to an html page, such as:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">ng-href=</span><span class="s">&quot;http://google.com?q={{query}}&quot;</span><span class="nt">&gt;</span>See Google Results<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Something more Precise?</h2>

<p>Is there something more precise than these two rules of thumb?  Why does Angular make an exception for these two cases, thus causing us to try to remember our rules of thumb?</p>

<p>As I surmised above, I can only guess that because the pathing use case often wants to mix strings with JavaScript values, the exception was made.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remove Mobile Safari Click Delay]]></title>
    <link href="http://jaketrent.com/post/remove-mobile-safari-click-delay/"/>
    <updated>2013-06-24T08:04:00-06:00</updated>
    <id>http://jaketrent.com/post/remove-mobile-safari-click-delay</id>
    <content type="html"><![CDATA[<p>Did you know that Mobile Safari and other mobile browsers are delaying your click events?  If you've been testing your mobile site, and it feels sluggish in Mobile Safari, this could be one of the reasons.  Disable the click delay and rejoice at a bit more snappy response.</p>

<p><img src="http://i.imgur.com/PH8Zosr.png" alt="mobile browser delay" /></p>

<!--more-->


<h2>Sandbagging?</h2>

<p>Why would a browser vendor build in this "functionality"?  Are they purposefully sandbagging their web experience so consumers will be more drawn to a device-specific app instead?  As if that could ever happen.</p>

<p>Google, as with most things, has an answer.  From a <a href="https://developers.google.com/mobile/articles/fast_buttons?hl=de-DE.">Google Developer article</a>:</p>

<blockquote><p>The reason for [the 300ms delay] is that the browser is waiting to see if you are actually performing a double tap.</p></blockquote>

<p>As with the apps Google was developing, the buttons that we're designing don't really need this check for double taps.  We really just want fast buttons.</p>

<h2>FastClick</h2>

<p>Really, most of the work for this problem is figuring out where the slowness is coming from.  I spent days and days trying to optimize a single-page web app that had a bunch of buttons with click events that seemed slow for some reason.  I came up with all sorts of theories and wasted a lot of time.</p>

<p>Now that you know what your problem is, just download and use a library to solve it.  Of the most fantastic, <a href="https://github.com/ftlabs/fastclick">FastClick</a>.  It's easy to use.</p>

<p><strong>Step 1</strong>
Include the script in the <code>head</code> tag:</p>

<p>```html</p>

<script type="text/javascript" src="fastclick.js"></script>


<p>```</p>

<p><strong>Step 2</strong>
Attach FastClick to all links on the page (or subset if you wish):</p>

<p><code>coffeescript a-whole-new-world.coffee
window.addEventListener 'load', -&gt;
  FastClick.attach document.body
, false
</code></p>

<p>Just like that, you'll see marked improvements.  Thank you Apple.  Thank you FastClick.</p>
]]></content>
  </entry>
  
</feed>
