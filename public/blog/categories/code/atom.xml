<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2013-02-08T07:57:39-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Multiple Yields in an ERB Template]]></title>
    <link href="http://jaketrent.com/post/multiple-yields-in-erb-template/"/>
    <updated>2013-02-08T07:13:00-07:00</updated>
    <id>http://jaketrent.com/post/multiple-yields-in-erb-template</id>
    <content type="html"><![CDATA[<p>When you setup a new Rails project, you'll have a single layout file which has a single default <code>yield</code> block.  This will soon be inadequate, and you'll want another.  Here's how to setup multiple <code>yield</code> blocks per ERB template.</p>

<p><img src="http://i.imgur.com/YqUKEfw.png" alt="Multiple ERB yields" /></p>

<!--more-->


<h2>Layout File</h2>

<p>By default, Rails will create a file at:</p>

<p><code>
app/views/layouts/application.html.erb
</code></p>

<p>In this file, there will be a default <code>yield</code> block similar to this:</p>

<p><code>ruby
&lt;%= yield %&gt;
</code></p>

<p>It has no name.  It's just the default place for templates that use this layout file to put their content.</p>

<p>We can create new <code>yield</code> blocks.  We'll have to give them a distinguishing name.  They look about the same.  If I wanted to create a new <code>yield</code> block where, for instance, alerts could be displayed if the child template had them, I could put this in my layout file:</p>

<p><code>ruby
&lt;%= yield(:alert) %&gt;
</code></p>

<p>Now I would just need something to go in it.</p>

<h2>Child Templates</h2>

<p>A child template that uses the <code>application.html.erb</code> layout file can just start blasting out markup that will go into the default <code>yield</code> block.  This will usually be the main content.  But in our example, there might be more focused content such as alerts that we want to display in a separate area.  Thus, our template could potentially look like this:</p>

<p>```erb</p>

<h1>My main content</h1>


<p>Bacon ipsumâ€¦<p>

<% content_for :alert do %>
  <div class="alert alert-success">
    You created multiple yield blocks!
  </div>
<% end %>
```

Throw down a `content_for` block, matching the name of the `yield` block in your layout file, and you're set.  Order does not matter.  Your specific `content_for` blocks can come before, after, or in the middle of your main content.  Easy as Ruby pie.

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rename Files in Rails Asset Pipeline]]></title>
    <link href="http://jaketrent.com/post/rename-files-in-asset-pipeline/"/>
    <updated>2013-02-06T07:06:00-07:00</updated>
    <id>http://jaketrent.com/post/rename-files-in-asset-pipeline</id>
    <content type="html"><![CDATA[<p>Rails provides a powerful mechanism for preparing your site's static assets for the web.  It's called the asset pipeline.  True to Rails, it has sensible defaults.  Also true to form, it's not immediately clear what's required to change from the defaults.</p>

<p><img src="http://i.imgur.com/HPJDXPB.jpg" alt="Asset Pipeline" /></p>

<!--more-->


<h2>Multiple Compilers</h2>

<p>The asset pipeline has the ability to pass your static assets through multiple compilers.  Thus, they seem much less static than they might be.  The compilers used are determined by the file extension.  For instance, this file:</p>

<p><code>
myscripts.js.coffee.erb
</code></p>

<p>Will go through the Erb compiler first, then the Coffeescript compiler, then finally will output pure JavaScript.</p>

<p>Changing these files are no problem.  Want a new compiler?  Slap on a new file extension.  Don't need one?  Remove it.</p>

<h2>Manifest File</h2>

<p>Manifest files are full of Sprocket directives.  Sprockets will use these files to combine and minify your css and js.  A manifest will look something like this:</p>

<p><code>
//= require vendor/jquery
//= require vendor/angular.min
//= require vendor/angular-cookies
</code></p>

<p>These directives identify what files will eventually be combined, replacing the contents of your manifest file in the final output.</p>

<p>If you change the name of scripts or stylesheets, you need to ensure that your manifest file is changed to match.  Otherwise, asset precompilation will fail.</p>

<p>By default the manifest filenames are these:</p>

<p><code>
app/assets/javascripts/application.js
app/assets/stylesheets/application.css
</code></p>

<h2>Changing Manifest Filenames</h2>

<p>Changing the manifest default filenames will require some tweaking.</p>

<p>For instance, if I change application.js to be split into two separate manifest files, <code>scripts-foot.js</code> and <code>scripts-head.js</code>, the next time I run:</p>

<p><code>
rake assets:precompile
</code></p>

<p>It will succceed, and everything will look like it's just fine.  But when I go to run the app, it will give my an error like:</p>

<p>```
ActionView::Template::Error (scripts-head.js isn't precompiled):</p>

<p>2013-02-04T16:24:05+00:00 app[web.1]: app/views/layouts/application.html.erb:14:in `_app_views_layouts_application_html_erb__3761578772688930207_28706600'
```</p>

<p>When you switch from the default manifest files or when you reference a static asset like a js or css directly from your view, you'll need to mark it as explicitly requiring precompilation.</p>

<p>This is done in an environment file, such as <code>config/environments/production.rb</code>:</p>

<p>```ruby</p>

<h1>Precompile additional assets (application.js, application.css, and all non-JS/CSS are already added)</h1>

<p>config.assets.precompile += %w( scripts-foot.js scripts-head.js )
```</p>

<p>It's that easy.  It's too bad you have to wait until the app runs to discover this is a problem.  But now you're ready.</p>

<p>Now if we could only customize the directory structure under <code>app/assets</code>.  I would much rather use the path <code>js/</code> instead of <code>javascripts/</code>.  Does anyone know how?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run a Pow Server on a VM]]></title>
    <link href="http://jaketrent.com/post/run-pow-server-on-vm/"/>
    <updated>2013-01-31T16:14:00-07:00</updated>
    <id>http://jaketrent.com/post/run-pow-server-on-vm</id>
    <content type="html"><![CDATA[<p>It's really pretty cool how easy <a href="http://pow.cx/">Pow</a> makes running a Rails server.  <a href="https://github.com/rodreegez/powder">Powder</a> makes it even easier.  Here's how to run your Rails server via Pow on a VM in order to test IE.</p>

<p><img src="http://i.imgur.com/XdExdtS.jpg" alt="Pow Server" /></p>

<!--more-->


<h2>Install Pow</h2>

<p>Get your Ruby environment otherwise setup for Rails dev. Then install <a href="http://pow.cx/">Pow</a>.  It's a nice little utility created by the folks at 37 Signals.  They have a short little install script you can run, as <a href="http://pow.cx/">referenced on the Pow site</a>.  Or, you can use a utility created to make it <em>even easier</em> -- <a href="https://github.com/rodreegez/powder">powder</a>.</p>

<p>To install, you'll need <a href="http://rubygems.org">Rubygems</a> installed, and run:</p>

<p><code>
$ gem install powder
</code></p>

<p>Then link your project to Pow via the command:</p>

<p><code>
$ cd &lt;my_proj_dir&gt;
$ powder link
</code></p>

<p>Make sure Pow is running:</p>

<p><code>
$ powder up
</code></p>

<p>And access your Pow-powered site by going to your project's address in your browser:</p>

<p><code>
http://&lt;my_project_dir&gt;.dev
</code></p>

<p>There are other options in the <code>powder link</code> step.  For instance, if you want to access your site through an http address different than <code>&lt;my_proj_dir&gt;</code> you can specify that.</p>

<h2>Install your VM</h2>

<p>There are a few different VM options.  My favorite is <a href="http://virtualbox.org">VirtualBox</a>.  It does hurt a bit seeing the "Oracle" moniker on it, but I've found it to be as responsive as a VM can be and generally stable.</p>

<h2>Install Internet Explorer</h2>

<p>There really wasn't another reason that you wanted a Windows VM was there?</p>

<p>I've had good success with  the project <a href="https://github.com/xdissent/ievms">xdissent/ievms</a>.  To download the IE-ready images, the README invites us to run this script in our shell:</p>

<p><code>
curl -s https://raw.github.com/xdissent/ievms/master/ievms.sh | bash
</code></p>

<p>It will download multiple parts of several Windows/IE VM images into <code>~/.ievms</code> and install them so they're ready to roll with VirtualBox.  Run this way, images for Internet Explorer 6, 7, 8, and 9 are all downloaded.  If you wanted to just download IE 9, you could run:</p>

<p><code>
curl -s https://raw.github.com/xdissent/ievms/master/ievms.sh | IEVMS_VERSIONS="9" bash
</code></p>

<p>Either way, this download takes quite a while to complete, but the shell script that's running it takes pretty good care of you, restarting on the last incomplete download part.</p>

<h2>Access Pow via VirtualBox</h2>

<p>Accessing Pow in the VM isn't bad at all.  Pow makes use of <a href="http://xip.io">xip.io</a>, which provides a wildcard DNS entry used by Pow and thus your app.</p>

<p>For the <a href="http://pow.cx/manual.html#section_2.1.5">next step</a>, take note of your IP by running <code>ifconfig</code>.  Then from IE inside of VirtualBox, point your browser at:</p>

<p><code>
http://&lt;my_proj_dir&gt;.&lt;my_ip&gt;.xip.io
</code></p>

<p>And you should see your project running in the VM just as you do from your better, native OS.  Pow!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Make a Pinterest Webservice]]></title>
    <link href="http://jaketrent.com/post/how-to-make-pinterest-webservice/"/>
    <updated>2013-01-18T07:06:00-07:00</updated>
    <id>http://jaketrent.com/post/how-to-make-pinterest-webservice</id>
    <content type="html"><![CDATA[<p>Pinterest currently does not have an official webservice API.  It seems kind of crazy in this day and age.  They really should have one.  I can't think what the business reasons might be for not having one.</p>

<p>They've not had one for long enough that it's high time we write our own.  It'll be surprisingly easy with a few choice tools</p>

<p><img src="http://i.imgur.com/7cv9d.png" alt="Pinterest API" /></p>

<!--more-->


<h2>Webservice API on NodeJs</h2>

<p><a href="http://nodejs.org/">NodeJs</a> is just a fun platform to write IO-heavy applications for the web.  We're going to write a quick <a href="http://en.wikipedia.org/wiki/Representational_state_transfer">RESTful</a> endpoint using the <a href="http://expressjs.com/">Express</a> library that allows us to consume real Pinterest content that's not available via a pre-existing service.</p>

<h4>Screen Scrape Pinterest</h4>

<p>Given no API, we're left to our own devices.  The data for Pinterest is only exposed via the UI on the website.  We're going to have our service visit that UI and grab the data that we need as a user of a web browser would see it.  This is screen scraping.  There a lot of downsides here, but we wouldn't be trying it if there was an API already.</p>

<p>One down side is that our service will be brittle.  If Pinterest ever changes the layout of the page, our service won't be able to bring back the right data.  Our solution will be simple, so it'll be easy to update, but this should be a red flag not to do anything mission critical via screen scraping unless you're giving it your full attention.</p>

<p>Another down side might be speed.  Screen scraping a UI is not the fastest way to get data.  We'll try and help mitigate this with the fastest tools that we have.  NodeJs is a blasted fast web server.  A library called <a href="https://github.com/MatthewMueller/cheerio">cheerio</a> is supposedly best-in-class for screen scraping (advertised as 8x faster than <a href="https://github.com/tmpvar/jsdom">jsdom</a>).</p>

<h4>Caching</h4>

<p>To make this retrieval even faster for repeat use, caching could be very helpful.  We could cache in our service what we get back from pinterest via some datastore or we could cache in our client.  Best practices here will be very dependent on your use case.  These kind of enhancements have been made over and over again and would only clutter the simple Pinterest interaction, so I will exclude them for now.</p>

<h2>Getting Pinterest Data</h2>

<p>Here's the final solution in all its glory.  This snippet only includes only the code inside the Express route.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// request is a library for making http requests</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// cheerio is a lib for screen scraping</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">cheerio</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;cheerio&#39;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// req and res are express vars for the request and response</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">list</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// this is the actual request to the pinterest page I care about</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">(</span><span class="s1">&#39;http://pinterest.com/jaketrent/pins/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">resp</span><span class="p">,</span> <span class="nx">body</span><span class="p">){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// get ready for scraping</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">$</span> <span class="o">=</span> <span class="nx">cheerio</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">pins</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">$pin</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">$pins</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.pin&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// scraping only the 1st 10 pins;  you could get them all</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">i</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$pin</span> <span class="o">=</span> <span class="nx">$pins</span><span class="p">.</span><span class="nx">eq</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Finding the bits on the page we care about based on class names</span>
</span><span class='line'>  <span class="nx">pins</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">img</span><span class="o">:</span> <span class="nx">$pin</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.PinImageImg&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://pinterest.com&#39;</span> <span class="o">+</span> <span class="nx">$pin</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.ImgLink&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">desc</span><span class="o">:</span> <span class="nx">$pin</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.description&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">()</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// respond with the final json</span>
</span><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">pins</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When I wrote it out for my own use, I was surprised at the brevity.  I love it.  Given, there's no handling of any errors or attempts to make this semi-robust.  This just gets us the data on a good day.</p>

<p>The final json that's exposed at our chosen Express endpoint looks like it this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s2">&quot;img&quot;</span><span class="o">:</span> <span class="s2">&quot;http://myimg.jpg&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;url&quot;</span><span class="o">:</span> <span class="s2">&quot;http://pinterest.com/pin/mypin&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;desc&quot;</span><span class="o">:</span> <span class="s2">&quot;Sweetest pin ever&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It's ready for use by a json-ready client.  So stinkin easy.  We're connecting the web together, and it's awesome!  Now the world will know of the baked goods and flower arrangements that we love the most.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Naming Anonymous JavaScript Functions]]></title>
    <link href="http://jaketrent.com/post/naming-anonymous-javascript-functions/"/>
    <updated>2013-01-17T07:10:00-07:00</updated>
    <id>http://jaketrent.com/post/naming-anonymous-javascript-functions</id>
    <content type="html"><![CDATA[<p>In JavaScript, functions can be defined and used in the same statement.  This makes creation quick, and the functions are considered anonymous because of their inline use and lack of assignment to a local variable.  But, there are a couple reasons you might want to label them.</p>

<p><img src="http://i.imgur.com/uH7E2.jpg" alt="JavaScript Anonymous Functions" /></p>

<!--more-->


<h2>Readability</h2>

<p>A great thing about functions in general is that they will tell you what they're used for.  If I call a function called <code>calculatePi()</code>, I expect it to do just that.  It's a great abstraction.  We can look at the name of the function without having to learn exactly how it does its stated task.</p>

<p>The performance of anonymous functions can often be determined from the calling context, but why not just name it for what it does like all other functions?  Did you know that you can?  Piece of pi.  Where you would normally write this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">doStuff</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;reportingâ€¦&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Additionally label your callback:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">doStuff</span><span class="p">(</span><span class="kd">function</span> <span class="nx">reportResults</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;reportingâ€¦&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Easier Stack Traces</h2>

<p>To make this code actually run, let's add a little bit and stick in a thrown error that should provide us a stack trace:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">doStuff</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">callback</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">doStuff</span><span class="p">(</span><span class="kd">function</span> <span class="nx">reportResults</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;problem&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Another difference between labeled and non-labeled anonymous functions is what they print in a stack trace. Without a label, you are getting line numbers, but the stack trace itself is harder to follow without bring up the source in order to interpret it.</p>

<p>Without named function:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/.../error.js:10&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;problem&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="o">^</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nb">Error</span><span class="o">:</span> <span class="nx">problem</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">at</span> <span class="o">/</span><span class="p">...</span><span class="o">/</span><span class="nx">error</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">10</span><span class="o">:</span><span class="mi">8</span>
</span><span class='line'><span class="nx">at</span> <span class="nx">doStuff</span> <span class="p">(</span><span class="err">/.../error.js:5:4)</span>
</span><span class='line'><span class="nx">at</span> <span class="nb">Object</span><span class="p">.</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">anonymous</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">(</span><span class="err">/.../error.js:8:1)</span>
</span><span class='line'><span class="nx">at</span> <span class="nx">Module</span><span class="p">.</span><span class="nx">_compile</span> <span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">449</span><span class="o">:</span><span class="mi">26</span><span class="p">)</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/.../error.js:8&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;problem&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="o">^</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nb">Error</span><span class="o">:</span> <span class="nx">problem</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">at</span> <span class="nx">reportResults</span> <span class="p">(</span><span class="err">/.../error.js:8:8)</span>
</span><span class='line'><span class="nx">at</span> <span class="nx">doStuff</span> <span class="p">(</span><span class="err">/.../error.js:4:4)</span>
</span><span class='line'><span class="nx">at</span> <span class="nb">Object</span><span class="p">.</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">anonymous</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">(</span><span class="err">/.../error.js:7:1)</span>
</span><span class='line'><span class="nx">at</span> <span class="nx">Module</span><span class="p">.</span><span class="nx">_compile</span> <span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">449</span><span class="o">:</span><span class="mi">26</span><span class="p">)</span>
</span><span class='line'><span class="err">â€¦</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Notice that every frame of the stack is now clearly displaying its name.</p>

<p>And wouldn't this be awesome if everyone did this, including all the people that wrote some of those favorite libraries that you use but that you have occassion to debug through?</p>

<p>What other benefits do you see that might come from naming your anonymous functions?</p>
]]></content>
  </entry>
  
</feed>
