<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2016-04-06T07:18:31-06:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Change Default NPM License]]></title>
    <link href="http://jaketrent.com/post/change-default-npm-license/"/>
    <updated>2016-03-24T15:45:00-06:00</updated>
    <id>http://jaketrent.com/post/change-default-npm-license</id>
    <content type="html"><![CDATA[<p>Npm has a fantastic init tool for creating the descriptor for your project.  It will gladly provide defaults for you.  These are sometimes helpful.  Wouldn't it be more better to define your own defaults?</p>

<p><img src="http://i.imgur.com/P34k4L5.png" alt="NPM" /></p>

<!--more-->


<h2>Npm Init</h2>

<p>If you're doing any JavaScript development, NPM is likely a helpful tool for your toolbox.  To add a descriptor with meta information, including things like 3rd-party project dependencies, you need a <code>package.json</code> for your project.  To get this file, you can edit it by hand or have one generated for you.  To generate it, run:</p>

<p><code>
npm init
</code></p>

<p>You will then be prompted to answer a series of relevant questions, such as:</p>

<p><code>
name: (hello-riot)
version: (1.0.0)
description:
entry point: (index.js)
test command:
git repository:
keywords:
author:
license: (ISC)
...
</code></p>

<p>The values in parenthesis are the defaults.  Defaults are determined from things like the directory you're in, the git repository you're in, etc.</p>

<h2>Set Npm Init Defaults</h2>

<p>Some defaults are just the NPM-provided conventions.  They don't know much more to provide.  But you can provide your own defaults for your system by editing <code>~/.npmrc</code>.  Or you can use the cli to add to this file from the terminal.  For instance, the two I like to change are my author name and the license:</p>

<p><code>
npm config set init-author-name "jaketrent"
npm config set init-license "MIT"
</code></p>

<p>Now, you can init and just take the defaults without pressing enter to answer the question with:</p>

<p><code>
npm -y
</code></p>

<p>And what you get are the defaults you've already decided you like.</p>

<p>To know what other things you can change as defaults, use <code>npm help 7 config</code> and grep for <code>init-</code>-prefixed values.  Happy npm'ing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selecting a Directory in Electron]]></title>
    <link href="http://jaketrent.com/post/select-directory-in-electron/"/>
    <updated>2016-03-21T10:12:00-06:00</updated>
    <id>http://jaketrent.com/post/select-directory-in-electron</id>
    <content type="html"><![CDATA[<p>Electron will help you make some sweet native desktop apps using web tech.  Now that you're on the desktop, one of the cool things you can do is access the filesystem.  There are a couple ways to access the filesystem via the file open dialog using user input events.</p>

<p><img src="http://i.imgur.com/Vp8Zuix.jpg" alt="Electron" /></p>

<!--more-->


<h2>From HTML</h2>

<p>In Electron, you use HTML for your views.  Thus, if you want the user to select a directory from the UI, you can use a <code>&lt;input type="file" /&gt;</code>, just like in a normal web app.</p>

<h4>Select Only Directories</h4>

<p>To select only directories, there is an attribute you can add to the <code>input</code> tag:</p>

<p>```html
&lt;input type="file"</p>

<pre><code>   webkitdirectory /&gt;
</code></pre>

<p>```</p>

<p>This wouldn't be reliable in a cross-browser environment.  But since, on Electron, you're only targeting Chrome, you're golden with whatever Chrome has available to you.</p>

<h4>Bonus: Programmatically click on <code>input[type="file"]</code></h4>

<p>As a bonus, Electron doesn't have the sandbox security restrictions that you would have in a standalone browser like Chrome.  In browsers, sometimes the file open dialog will fail if anything triggers the dialog besides the user clicking with their own mouse on the file input field.  Sometimes getting at the contents of the file will fail.  I'm too lazy to test which browsers do what at this point, but sad past experience has determined that this is unreliable.</p>

<p>But in Electron, you are again liberated.  For instance, <code>input[type="file"]</code> is ugly and sometimes hard to style into exactly what you want.  So, it's often that you'll want to create a custom widget, that when <em>it's</em> clicked, the <code>input[type="file"]</code> is clicked and the file open dialog is popped.</p>

<p>Given:</p>

<p><code>html
&lt;button id="party" class="very-sweet-looking"&gt;Open&lt;/button&gt;
&lt;input id="business" type="file" style="display: none" /&gt;
</code></p>

<p>This totally works:</p>

<p><code>js
document.getElementById('party').addEventListener('click', _ =&gt; {
  document.getElementById('business').click()
})
</code></p>

<h2>From Electron API</h2>

<p>In the main process, you have access to an Electron API, <code>dialog</code>.  <a href="http://electron.atom.io/docs/v0.37.2/api/dialog/#dialogshowopendialogbrowserwindow-options-callback"><code>dialog#showOpenDialog</code></a> is a programmatic API that allows you to open the same open file dialog that you're used to in the browser.  What's even better is that here you can set that only directories should be openable rather easily:</p>

<p>```js
// mainWindow is your instance of BrowserWindow
const electron = require('electron')
const dialog = electrong.dialog
function selectDirectory() {
  dialog.showOpenDialog(mainWindow, {</p>

<pre><code>properties: ['openDirectory']
</code></pre>

<p>  })
}
```</p>

<p>In order to integrate this main process code with user interaction, we need to do a few things.</p>

<p>First, export the code from your main process module:</p>

<p><code>js main.js
exports.selectDirectory = function () {
  // dialog.showOpenDialog as before
}
</code></p>

<p>And then in the renderer process, capture user events as before and call the main process function, <code>selectDirectory</code>:</p>

<p><code>js renderer.js
const electron = require('electron')
const remote = electron.remote
const mainProcess = remote.require('./main')
document.getElementById('party').addEventListener('click', _ =&gt; {
  mainProcess.selectDirectory()
})
</code></p>

<p>Works pretty nicely, but feels weird that you have to go back to the main process to access a view-related API (as of Electron 0.37).</p>

<p>So, if there are two ways to do this, there has to be another, right?  What are you doing to select a directory in Electron?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Console.log Deep Objects]]></title>
    <link href="http://jaketrent.com/post/console-log-deep-objects/"/>
    <updated>2016-03-14T15:13:00-06:00</updated>
    <id>http://jaketrent.com/post/console-log-deep-objects</id>
    <content type="html"><![CDATA[<p>With deep object structures, <code>console.log</code> can leave you wondering what's down in the depths of the objects you're printing out.  Here's a quick help from Node stdlib.</p>

<p><img src="http://i.imgur.com/00WAox4.jpg" alt="console.log deep objects" /></p>

<!--more-->


<p>You can usually see the objects that you're <code>console.log</code>ing, and life is good:</p>

<p>Given:</p>

<p><code>js
const stickers = {
  are: 'fun'
}
console.log('stickers', stickers)
// Outputs: stickers { are: 'fun' }
</code></p>

<p>We can see the whole object, and we're happy.  We can even do objects up to a depth of 3 sub objects, and it works great:</p>

<p>```js
const stickers = {
  are: {</p>

<pre><code>even: {
  more: 'fun'
}
</code></pre>

<p>  }
}
console.log('stickers', stickers)
// Outputs: stickers { are: { even: { more: 'fun' } } }
```</p>

<p>If, however, we have a potentially deeply-nested object, we'll get some of our data truncated:</p>

<p>```js
const stickers = {
  are: {</p>

<pre><code>even: {
  more: {
            than: {
                outrageously: 'fun'
            }
        }
}
</code></pre>

<p>  }
}
console.log('stickers', stickers)
// Outputs: stickers { are: { even: { more: [Object] } } }
```</p>

<p><code>[Object]</code>s are cool and all, but not very informative.</p>

<p>To get at this information, use <a href="https://nodejs.org/api/util.html#util_util_inspect_object_options"><code>util.inspect</code></a> from the <a href="https://nodejs.org/api/util.html#util_util_inspect_object_options">stdlib</a>.  Here, you can set a depth option to be higher, letting you peer into those deep objects in the console:</p>

<p>```js
const util = require('util')
const stickers = {
  are: {</p>

<pre><code>even: {
  more: {
            than: {
                outrageously: 'fun'
            }
        }
}
</code></pre>

<p>  }
}
console.log('stickers', util.inspect(stickers, { depth: 4 }))
// Outputs: stickers { are: { even: { more: { than: { outrageously: 'fun' } } } } }
```</p>

<p>Your data is yours again!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitignore System Files]]></title>
    <link href="http://jaketrent.com/post/gitignore-system-files/"/>
    <updated>2016-03-14T14:43:00-06:00</updated>
    <id>http://jaketrent.com/post/gitignore-system-files</id>
    <content type="html"><![CDATA[<p>There are many files that you don't want to store in your project's Git repo.  Some of these are even specific to the project.  Some are definitely not.  How do you ignore these that aren't related to the project?</p>

<p><img src="http://i.imgur.com/ZYiky6R.png" alt="Git ignore" /></p>

<!--more-->


<h2>.gitignore For the Project</h2>

<p>In your project directory, you likely have a <code>.gitignore</code> file.  Here, you keep things that might show up in that directory out of the project's version-controlled source tree.  There's not much to it.  On each line of the file, list the file names, directory names, or partial patterns that you don't want Git to track or even know about.</p>

<p>For instance, if you're doing a Node.js project, you probably want to track all your own <code>.js</code> files, found in <code>src/</code>.  But you don't want to track all those 3rd-party modules in <code>node_modules</code>.  You probably don't want to track your code compiled for distribution either.  So, your project's <code>.gitignore</code> file might look like this:</p>

<p><code>text project/.gitignore
node_modules
dist
</code></p>

<h2>.gitignore For Your System</h2>

<p>Everything that goes in the project's <code>.gitignore</code> file should relate to the project.  And it should relate to everyone.</p>

<p>There are many people and systems interacting with your project.  For instance, some developers might be on Mac OSX and get those nasty Finder thumbnail files, <code>.DS_Store</code> that end up popping up all over the place.  Others on the project might use the venerable Jetbrains editors which drop an <code>.idea/</code> directory in every project they edit.  These facts should be transparent to your project.  Every time someone picks up a new editor or switches an OS, the project shouldn't have another commit updating the <code>.gitignore</code> with yet another thing.</p>

<p>You can make Git ignore files that appear on your system but are unrelated to the project.</p>

<p>Edit your top-level <code>~/.gitgnore</code>.  Add all your system-related things there.  It might end up look like:</p>

<p><code>text ~/.gitignore
.DS_Store
.idea
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Smart and Dumb Components in React]]></title>
    <link href="http://jaketrent.com/post/smart-dumb-components-react/"/>
    <updated>2016-02-17T08:55:00-07:00</updated>
    <id>http://jaketrent.com/post/smart-dumb-components-react</id>
    <content type="html"><![CDATA[<p>Dan Abramov coined the terms <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0">Smart and Dumb components</a>.  Later, he called them Container and Presentational components.  I still call them Smart and Dumb.  It's shorter and sits in my mind easier.  How do you identify them?  Why would you want a separation?  What might that separation look like?  Here are a few ideas.</p>

<p><img src="http://i.imgur.com/9VKyXtu.png" alt="Smart and Dumb React components" /></p>

<!--more-->


<h2>Smart vs Dumb Components</h2>

<p>So what sets these components apart?  Smart means "container" or "app-level".  Some have compared it to the "C" in MVC.  Dumb means "presentational" or "ui only", possibly comparable to the "V" in MVC.  Here's a breakdown of a few key characteristics:</p>

<h3>Smart Component Characteristics</h3>

<ul>
<li>Describe <em>how things work</em></li>
<li>Provide no DOM markup or styles</li>
<li>Provide application data, do data fetching</li>
<li>Call Flux actions</li>
<li>Named *Container by convention</li>
</ul>


<h3>Dumb Component Characteristics</h3>

<ul>
<li>Describe <em>how things look</em></li>
<li>Have no app dependencies</li>
<li>Receive only props, providing data and callbacks</li>
<li>Rarely have own state, when they do, it's just UI state</li>
<li>Named anything that's a UI noun</li>
</ul>


<p>Apparently you need each class of components because obviously your app has to smart to be interesting.  But if it's more dumb, it's more simple.  So split it.  You need both.</p>

<p>If you separate concerns, your app will be easier to reason about, complexity will be mostly localized around the Smart components, and you should be left with more simple components.  UI components will be more reusable.</p>

<h2>Where to Split Smart and Dumb Components?</h2>

<p>If you keep all Smart characteristics on one side and the Dumb characteristics on the other, you will have made the separation and be following the guiding principles.</p>

<p>But how should you make that split?  Here are a couple ideas.  These are observations of how I've found myself making the split and what it ends up looking like.</p>

<h3>Deep Split</h3>

<p>"Deep" describes what I usually observe when I split components this way.  There's one Smart component that splits to one Dumb component.  There's a 1:1 relationship.  This seems simple, and it is in a way.  It probably works better if the components are small, because many of the smarts from the Smart component end up getting passed down to the Dumb component.  This makes for a lot of props on the Dumb component.</p>

<p>If the Dumb component does anything interesting, it usually will fan out at that point and start farming <code>props</code> off to the child components that actually need them.  Thus, the hierarchy deepens before it actually ends up doing work.</p>

<p><img src="http://i.imgur.com/scfodt6.png" alt="Deep component split" /></p>

<h3>Broad Split</h3>

<p>"Broad" describes the transition from Smart to Dumb happening sooner.  There is one Smart component that has many Dumb component children.  There aren't necessarily fewer interesting things here or props to pass, but they're scattered out, going straighter to the components that need them instead of going through some Monolith Proxy Dumb component (all the bad words together).</p>

<p><img src="http://i.imgur.com/hxusLJ2.png" alt="Broad component split" /></p>

<p>A highlight advantage here is that there is much readier access to the Smart component's smarts -- store data, event handlers, and actions.  You don't feel like you're passing props <em>through</em> components only to get them to the components that really use them.</p>

<p>A golden quote from Dan Abramov that highlights this is:</p>

<blockquote><p>When you notice that some components don’t use the props they receive but merely forward them down and you have to rewire all those intermediate components any time the children need more data, it’s a good time to introduce some container components.</p></blockquote>

<h2>Nodes as props</h2>

<p>In his quote, Dan recognizes the time to introduce container components.  In my mind, "container" means Smart.  Here, I don't think we necessarily require a Smart Container, because we usually like to get as Dumb as we can as fast as we can.  So, how about a Dumb component that just provides <em>containment</em>?</p>

<p>We can provide DOM markup, component grouping, layout, or other UI abstractions with components that take <code>props.children</code>.  These children are usually components, of type <code>React.PropTypes.node</code>.  Doubtless we've all realized by now that there's just one <code>props.children</code>.  But component can only wrap one thing, right?  Well, this is in the syntax of markup/JSX, but this isn't true <em>inside</em> the Component.  We could have more attributes that pass <code>PropTypes.node</code> arguments.  This allows for <em>containing more</em> nodes and having convenient handles on them within components.</p>

<p>This thought was revelatory at the time it occurred to me.  Looking back, it seems obvious.  But for some reason, probably because I still think of it as HTML sometimes, it feels funny to write something like:</p>

<p><code>js
&lt;Dumb aProp={&lt;AnotherDumb /&gt;} /&gt;
</code></p>

<p>Then inside the Dumb component, we can display those attributes directly:</p>

<p>```js
function Dumb(props) {
  return (</p>

<pre><code>&lt;div className={props.css.awesomeLayout}&gt;
  {props.aProp}
&lt;/div&gt;
</code></pre>

<p>  )
}
```</p>

<h2>What to Pass as Props?</h2>

<p>If we have a split we like, now we have to decide what <code>props</code> to send from the parent to the child components.</p>

<h3>Send Them All</h3>

<p><code>js
&lt;Dumb {...this.props} /&gt;
</code></p>

<p>Yes, you could just send all the parent's props to the child.  I would do this when the parent feels just like a wrapper.  It's a passthrough.  Perhaps it adds something small and targeted.  It's a higher-order component.</p>

<h3>Pass the Reducer/Selector</h3>

<p><code>js
&lt;Dumb reducerName={this.props.reducer} /&gt;
</code></p>

<p>You can pass the whole nested reducer state, sure.  Almost every time I feel myself wanting to do this, I think it's motivated by laziness.  It has a potential downside of tying the reducer format to the view in more places than required.  Of course, if you have custom selectors for everything anyway, you make your break from reducer format coupling there.</p>

<h3>Pass New Variables</h3>

<p><code>js
&lt;Dumb newVar={this.props.var} /&gt;
</code></p>

<p>This is most commonly what passing variables to children components looks like.  These values are usually primitives, but they can you can send down entire new object structures as well.  It has the advantages of being explicit and traceable.  It also avoids the coupling of passing entire nested reducers.</p>

<h2>Rule of Thumb</h2>

<p>In all design decisions, it's good to have some quick guidelines in mind when making decision.  So relative to splitting Smart and Dumb components, here's a rule of thumb.</p>

<p>On many of my projects recently, I use two decorators that help identify Smart and Dumb components:</p>

<p>For Smart, the <a href="https://www.npmjs.com/package/redux-react-connect-by-name">redux-react-connect-by-name</a> component facilitates data fetching from the redux store.  This is equivalent to using redux's vanilla <code>connect</code> with some built-in niceties.</p>

<p>For Dumb, the <a href="http://npmjs.com/react-styleable">react-styleable</a> component allows passing CSS modules into React components.  This is how I like to give my components styling information.</p>

<p>If one is for Smart and the other for Dumb, then I can usually identify a potential split if I ever see them <em>together</em>.  For example, this is what that antipattern might look like:</p>

<p>```js
import connect from 'redux-react-connect-by-name'
import styleable from 'react-styleable'
// ...</p>

<p>@connect([someSelector])
@styleable(someCss)
class MyComponent extends React.Component {
  // ...
}
```</p>

<p>Split that up!</p>

<h2>This Isn't Dogma</h2>

<p>The idea of Smart vs. Dumb components is, itself, just a guideline -- a Pirates' Code-level of guideline.  Keep it and use it where it helps your project.  This is an art form.  No one has the best answer for how to organize your React views.  Do the best you can.  Then, next week, when you find a better way, advance to that.</p>

<p>What are some other observations that you've made when splitting your views into Smart and Dumb components?</p>

<p><em>Adapted from a meetup talk:</em></p>

<script async class="speakerdeck-embed" data-id="26cce4743e5540b48188a35f49de3c4d" data-ratio="1.33333333333333" src="http://jaketrent.com//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
</feed>
