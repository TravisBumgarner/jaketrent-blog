<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2015-11-30T09:16:01-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debug Locally in Elm]]></title>
    <link href="http://jaketrent.com/post/debug-locally-elm/"/>
    <updated>2015-11-28T14:39:00-07:00</updated>
    <id>http://jaketrent.com/post/debug-locally-elm</id>
    <content type="html"><![CDATA[<p>Debugging in Elm is easy once you know where to look.  You need an in-browser tool to help you.  It's almost as simple as just calling <code>console.log</code>, but you can't just put your logging statement anywhere.</p>

<p><img src="http://i.imgur.com/1c6FH0f.png" alt="elm debug locally" /></p>

<!--more-->


<h2>The Online Option</h2>

<p>There's a debugger available online as a part of the elm-lang site at <a href="http://debug.elm-lang.org/">debug.elm-lang.org</a>.  This page explains the principles behind why the debugger works and has the properties it does.  The <a href="http://debug.elm-lang.org/try">debugger is found</a> via clicking the "Debug" button in the top-right corner.</p>

<p>But you don't want to paste your code into the Try Elm page in order to walk through your Elm code.  You need a local option.</p>

<h2>Debugging Locally</h2>

<p>Thankfully you already have the tools to debug locally after you've <a href="http://elm-lang.org/install">installed Elm</a> on your machine.   It comes with <code>elm-reactor</code>.</p>

<p>In order to run your Elm code, go to your shell, <code>cd</code> into your project directory, and type:</p>

<p><code>
$ elm reactor
</code></p>

<p>This will serve up your project directory at <code>http://localhost:8000</code> by default.</p>

<p><img src="http://i.imgur.com/yE93W9g.png" alt="screenshot of elm reactor" /></p>

<p>You will be able to see the project files listed.  There are two links for each Elm program.  Unfortunately, the debug mode link is pretty subtle, looked over by me as just a bullet in the UI.</p>

<ol>
<li>Click the file name, get the run mode</li>
<li>Click the wrench to the left of the file name, get the debug mode</li>
</ol>


<p>Alternately, type your own <code>?debug</code> at the end of any Reactor url to enter debug mode for that file.</p>

<p>Once in debug mode, you should see your code in action in the browser as usual, now with a sidebar for the debugger overlayed on your UI.</p>

<h2>Setting up Watches</h2>

<p>Poor man's debugging has traditionally been logging. When variables are in scope, interrogate them and print the value on the screen.  Elm's debugging story feels about like that, with some cool bells and whistles around it -- like <em>time-traveling</em> debugging, oh my.</p>

<p>In time-travel mode, your debug method of choice will probably be <code>Debug.watch</code>.  In the <a href="http://package.elm-lang.org/packages/elm-lang/core/2.0.1/Debug#watch">docs</a>, it is shown to take 2 arguments:</p>

<p><code>
watch : String -&gt; a -&gt; a
</code></p>

<p>The first argument is the label for the watched data in the debugger.  The second argument is the actual data value.  If I wanted to watch a dimensions tuple, I could write:</p>

<p><code>
Debug.watch "myDimensions" (w, h)
</code></p>

<p>Also note that you have to make your debug expression compile wherever you end up writing it.  I find that the easiest place to put a debug statement into my already-working code is in a <code>let</code> expression.  (Well, "already-working" is used loosely here -- we're debugging after all.)</p>

<p><code>
let
  log = Debug.watch "myDimensions" (w, h)
in
  doStuff myDimensions
</code></p>

<p>Now the watched value will show up in the debugger sidebar.</p>

<p><img src="http://i.imgur.com/PlI83Kq.png" alt="screenshot of elm watched code" /></p>

<p>If you pause the debugger and step backward, you can see the value as it has changed over time.  It's pretty neat, and now you're debugging Elm on your own box!</p>

<p>What other Elm debug tips do you have?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update Body Class in React]]></title>
    <link href="http://jaketrent.com/post/update-body-class-react/"/>
    <updated>2015-09-23T15:31:00-06:00</updated>
    <id>http://jaketrent.com/post/update-body-class-react</id>
    <content type="html"><![CDATA[<p>React gives us a great component abstraction.  Each of these components represents a node in the DOM.  Each component is self contained, doesn't talk up the component hierarchy directly and passes explicit data and code down the hierarchy.  But what about when you have a React app that wants to reach out and modify something it doesn't control?</p>

<p><img src="http://i.imgur.com/DXuSNbw.png" alt="react modify body tag" /></p>

<!--more-->


<h2>A Couple Use Cases</h2>

<p>There are potentially a few use cases for this.  For instance, modals that need to render outside your application's potentially <code>position: relative</code> containers.  Or, as we'll see below, your app wants to modify the <code>body</code> tag in your html document.</p>

<p>The most common reason I've found for messing with the body tag is to provide some style attribute.  It's not uncommon to have full-page style differences between pages in our apps.  If you have a "single page" js app in the browser, you need to be able to modify the body tag in code.</p>

<p>Let's use an example where on some pages in your app, the theme is "dark", where the body background color should be black.  On other pages, the entire body background color should be the default white.  We'll make a component that lives high in the hierarchy and takes an <code>isDark</code> property to determine if the rendered page is dark or light.</p>

<h2>Body is Outside Your React App</h2>

<p>You can't mount your React app directly on <code>document.body</code>, at least without warnings.  This is considered bad practice, because other scripts or browser plugins often modify the document body directly.  So you'll have to reach <em>out</em> of your React app and modify the body directly.</p>

<h2>Tie Into the React Lifecycle</h2>

<p>First, you just need a point in time in your app's lifecycle where you know you want to modify the <code>body</code> class.  React has a bunch of <a href="https://facebook.github.io/react/docs/component-specs.html">lifecycle hooks</a> that will come in handy.  A great early-lifecycle hook for modifying the DOM is <code>componentDidMount</code>.  Usually, we would be accessing DOM nodes that are children of our Component.  Again, in this case, we're reaching out beyond where a React component usually should.  The usual <code>React.findDOMNode</code> functions will not be needed, because React isn't managing the body node.  Instead, we'll just use the <code>document.body</code> api directly.</p>

<h2>Use JavaScript to Modify the Class</h2>

<p>If you have some utility for modifying class names, use it.  If not, it's small and simple enough in <a href="http://jaketrent.com/post/addremove-classes-raw-javascript/">plain old JavaScript</a>.</p>

<p>With these two bits in hand, you have the pieces necessary for your body-modifying component:</p>

<p>```js
import React from 'react'</p>

<p>class BodyColor extends React.Component {
  static propTypes = {</p>

<pre><code>isDark: React.PropTypes.bool
</code></pre>

<p>  }
  static defaultProps = {</p>

<pre><code>isDark: false
</code></pre>

<p>  }
  componentDidMount() {</p>

<pre><code>document.body.toggle('darkClass', this.props.isDark)
</code></pre>

<p>  }
  componentWillReceiveProps(nextProps) {</p>

<pre><code>document.body.toggle('darkClass', nextProps.isDark)
</code></pre>

<p>  }
  componentWillUnmount() {</p>

<pre><code>document.body.remove('darkClass')
</code></pre>

<p>  }
  render() {</p>

<pre><code>return this.props.children
</code></pre>

<p>  }
}
```</p>

<p>To use, pass an <code>isDark</code> attribute to activate the <code>darkClass</code> class on the body tag:</p>

<p><code>html
&lt;BodyColor isDark={true}&gt;
  &lt;h1&gt;A Very Dark App&lt;/h1&gt;
&lt;/BodyColor&gt;
</code></p>

<p>Are there any other ways you've found to reach out of React and modify the DOM directly.  What have been your use cases?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Love CSS Modules]]></title>
    <link href="http://jaketrent.com/post/i-love-css-modules/"/>
    <updated>2015-08-25T11:03:00-06:00</updated>
    <id>http://jaketrent.com/post/i-love-css-modules</id>
    <content type="html"><![CDATA[<p>I heard a fantastic yesterday by <a href="https://twitter.com/glenmaddern">Glen Maddern</a> where Interoperable CSS was well-illustrated as the fantastic CSS language advancement that it is.  I was happy to hear hushed ooo's and ahh's from the audience as they realized the power of what they were seeing.  I have been enjoying the benefits of CSS modules myself and my team and would share some of my favorite features in hopes that others will be inclined to use this feature as well.  Cleanse the world of global stylesheets!</p>

<p><img src="http://i.imgur.com/MtjAduk.jpg" alt="i love css modules" /></p>

<!--more-->


<h2>Local Variables</h2>

<p>With CSS modules, your selector names are truly local.  They are FRD local variables!  They won't clash with any var names outside your module.  For You don't have to invent a giant namespace.  There's no BEM-style naming to describe a hierarchy.  There's no repetition in those names.  You can name it something much more simple, just related to what the component is.</p>

<p>For instance, if you're creating <code>Link</code> component, you'd previously have something like <code>.nav__item__link</code> selectors to apply style.  Knowledge of global markup structure would seep into your component through this selector and its name.  Now with a combination of encapsulated components and css modules,  you don't have to worry about the outside world.</p>

<p>Now, what would you call your <code>Link</code> component's outer-most <code>a</code> tag?  Well, maybe <code>.link</code> or <code>.root</code>...  Nothing fancy.  Just what it is.  You aren't required to think about the global stylesheet.  You can focus your mind on just the component stylesheet at hand.  The naming game, which can already be challenging, is made much easier.</p>

<h2>Explicit Dependencies</h2>

<p>Now that all the CSS you write is, by default, local to the module you write it in, you have to explicitly pull in dependencies.  You have to explicitly import the stylesheet you are writing where you'll eventually want to use it.  You can write styles without fear that it might influence something else -- until you explicitly ask it to!</p>

<h2>Still CSS</h2>

<p>I've tried some of the inlining styling techniques and libraries that are being made popular in the React community.  <a href="https://github.com/FormidableLabs/radium">Radium</a> is my favorite there.  What makes me happy about CSS modules is that they're still CSS.  It's a language that was invented in order to create declarative styles.  It's not wonderful in many ways, but it's still the best tool available for this.</p>

<p>You can use all the selectors, strategies, and css abilities you're used to.  Pseudo selectors are all available.  Media queries work as expected.  Keyframe animations are easy to declare.  There is also a great ecosystem of CSS enhancements and transforms available from the PostCSS community.  No one should ever write a vendor prefix again with <a href="https://github.com/postcss/autoprefixer">autoprefixer</a>.</p>

<h2>Consistency for Components</h2>

<p>Another thing I'd like to see in the web component community, specifically React for now, is a pattern around how to override CSS in reusable components.  This pattern would be well-used by component developers and well-known by component consumers.  This would help components be more immediately useful -- default styles could be included with components and custom styles would be easily applied.</p>

<p>My favorite solution to this so far is <a href="https://github.com/pluralsight/react-styleable">react-styleable</a> -- full disclosure, I helped write it.  (Anything like this that gains steam, has broad appeal, and is used by many will make me happy.)  I love that CSS modules enable this and provide a foundation for this consistency.  I'll likely write more about this in the future.</p>

<p>CSS modules have changed the styling game for me.  It makes it so, so much better.  Who knows, maybe it'll change the world.</p>

<p>So, how have CSS modules changed your life?  What do you love?  What could still be better?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Animating a Line in D3]]></title>
    <link href="http://jaketrent.com/post/animating-d3-line/"/>
    <updated>2015-07-27T07:01:00-06:00</updated>
    <id>http://jaketrent.com/post/animating-d3-line</id>
    <content type="html"><![CDATA[<p>You can make some awesome charts in D3.  Animate your charts, and they're made even awesomerer.  To animate lines, such as those found in line charts, try out the following methods.</p>

<p><img src="http://i.imgur.com/94JQ8N8.jpg" alt="d3 line animation" /></p>

<!--more-->


<h2>D3 Transition</h2>

<p>In order to animate in D3, you call the <code>transition</code> function on a <code>d3.selection</code>.  The transition essentially creates a tween from the starting point of the animation to the specified ending point.  So, to specify an animation:</p>

<ol>
<li>Set the starting state</li>
<li>Specify that you are transitioning</li>
<li>Set the ending state</li>
</ol>


<p>Then D3 will handle the animation on the diff between the starting and ending state.</p>

<h2>SVG Line Animation</h2>

<p>An SVG line element has 4 required attributes, <code>x1</code>, <code>y1</code>, <code>x2</code>, and <code>y2</code>.  These required attributes specify where the line begins and ends in a 2D space.  When choosing your coordinates, remember that the SVG coordinate plane starts at (0,0) in the top-left of the SVG element.</p>

<p>For our line animation, we want the line to look like it's being drawing from the beginning to the ending point.  We will follow the general formula for defining a D3 transition as stated above.  Assuming we have an <code>svg</code> element from the DOM selected, the remaining code might look like this:</p>

<p>```js
svg.append('line')
  .attr({</p>

<pre><code>x1: 25,
y1: 15,
x2: 25,
y2: 15
</code></pre>

<p>  })
  .transition()
  .duration(1500)
  .attr({</p>

<pre><code>x2: 400,
y2: 15
</code></pre>

<p>  })
```</p>

<p>In the code above, the line's starting state shows the line beginning and end at the same point, (25, 15).  This is so that the line appears to be <code>15px</code> long when first seen in the UI.  Then, over time it will grow.  Note that the <code>attr</code>s set after the <code>transition</code> call specify the end of the line as being <code>400px</code> to the right.  Thus, over the duration of the transition (set to 1500ms in order to observe it), the line will appear to grow to its final length of 400px in the horizontal direction.</p>

<p data-height="266" data-theme-id="1749" data-slug-hash="Pqyvqo" data-default-tab="result" data-user="jaketrent" class='codepen'>See the Pen <a href='http://codepen.io/jaketrent/pen/Pqyvqo/'>Pqyvqo</a> by Jake Trent (<a href='http://codepen.io/jaketrent'>@jaketrent</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="http://jaketrent.com//assets.codepen.io/assets/embed/ei.js"></script>


<h2>D3 Line Function</h2>

<p>D3 line functions are specified differently than SVG lines.  An SVG line is guaranteed to be a straight edge from the beginning to the ending point.  On the other hand, a D3 line function can describe a line through many different points, and can thus be anything but straight.  Think of a zig-zaggy line chart, and this is what a D3 line function is meant to accomplish.  Thus, a D3 line function is often used to generate the data needed for an SVG <code>path</code>, not a <code>line</code> element.  There will still be an SVG <code>stroke</code> on a path, but we will use a different technique to animate it.</p>

<h4>Strokes with Dashes</h4>

<p>There are two attributes to of a <code>stroke</code> in SVG that we will use:</p>

<ul>
<li><code>stroke-dasharray</code> - a set of 2 numbers.  The first number is the length of the dash.  The second number is the length between the dashes.</li>
<li><code>stroke-dashoffset</code> - a dash pattern is repeated, according to the <code>stroke-dasharray</code> attribute.  But this attribute specifies where to start in that repeating pattern.  In other words, how many pixels offset <em>into</em> that pattern should the first iteration of the pattern begin.  The default is 0px.</li>
</ul>


<p>To see these numbers change and how they affect a line, check out the following SVG lines:</p>

<p data-height="266" data-theme-id="1749" data-slug-hash="GJYaqK" data-default-tab="result" data-user="jaketrent" class='codepen'>See the Pen <a href='http://codepen.io/jaketrent/pen/GJYaqK/'>SVG Stroke Dasharray Grows a Line</a> by Jake Trent (<a href='http://codepen.io/jaketrent'>@jaketrent</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="http://jaketrent.com//assets.codepen.io/assets/embed/ei.js"></script>


<p>In each of the above cases, the <code>stroke-dasharray</code> is set so the dash line length and the dash space length are equal to the total length of the total line.  Note that the <code>stroke-dashoffset</code> is the only attribute that changes between the 3 lines.</p>

<ol>
<li>In the first, the <code>stroke-dashoffset</code> is set to the length of the total line.  This means that the <code>stroke-dasharray</code> pattern begins at the point where the space between the dashes begins.  Thus, the line appears invisible -- it's just the line-length space between the dashes.</li>
<li>In the second, the <code>stroke-dashoffset</code> is set to the mid-length of the total line.  Thus, the 2nd half of the first dash is visible, making the line seem half as long as its total intended length.</li>
<li>Finally, the <code>stroke-dashoffset</code> is set to 0, meaning that the total line-length dash is now fully visible.</li>
</ol>


<h4>Animating with <code>stroke-dasharray</code></h4>

<p>One could imagine that were the <code>stroke-dashoffset</code> to tween from the full line length to 0, the line would appear to grow from the left to the right.  At first, the space between the dash would be fully visible, slowly, backing off the <code>stroke-dashoffset</code> until the pattern, which begins with a dash be fully visible.  Let's try it:</p>

<p>```js
var data = [
  { x: 15, y: 15 },
  { x: 400, y: 15 }
]</p>

<p>var line = d3.svg.line()
  .x(d => d.x)
  .y(d => d.y)</p>

<p>var path = svg.append('path')
  .datum(data)</p>

<pre><code>.attr({
  'd': line,
  'stroke-dasharray': '385 385',
  'stroke-dashoffset': 385
})
</code></pre>

<p>  .transition()</p>

<pre><code>.duration(1500)
.attr('stroke-dashoffset', 0)
</code></pre>

<p>```</p>

<p data-height="266" data-theme-id="1749" data-slug-hash="JdmqRm" data-default-tab="result" data-user="jaketrent" class='codepen'>See the Pen <a href='http://codepen.io/jaketrent/pen/JdmqRm/'>JdmqRm</a> by Jake Trent (<a href='http://codepen.io/jaketrent'>@jaketrent</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="http://jaketrent.com//assets.codepen.io/assets/embed/ei.js"></script>


<p>The above is the simplest possible example of how to make this happen.  In real life, you're going to have:</p>

<ul>
<li>No foreknowledge of the data domain or maybe even the visual space range and will need a d3 scale (eg, <code>d3.scale.linear</code>)</li>
<li>A more complicated set of data which is going to lead to a more complicated line and the actual need for the line function used above</li>
<li>A more complicated line where the length is not immediately obvious and where <code>path.node().getTotalLength()</code> will be useful as a way to use the browser's distance-along-a-path algorithm</li>
</ul>


<p>In the example above, note that the total length of the line is <code>385px</code>.  We make the line dashed.  We set the dash length and the space between the dash length to both be <code>385px</code> using <code>stroke-dasharray</code>.  We define the animation by making the starting state have a <code>stroke-dashoffset</code> of <code>385px</code>, showing nothing but the invisible space between the dash to start.  Then we tween to a <code>stroke-dashoffset</code> of <code>0</code>, causing the offset window to shrink until we see the dash, which is the length of the total line, grow into view.</p>

<p>Frankly, this dash-based solution feels like a hack.  It doesn't seem like someone sat back and thought much about how to animate a non-linear path.  But this solution works well all the times I've used it.</p>

<p>What are some other solutions that you've found for animating lines or creating other interesting line animations?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using JavaScript's Function Bind]]></title>
    <link href="http://jaketrent.com/post/using-javascript-function-bind/"/>
    <updated>2015-06-26T07:51:00-06:00</updated>
    <id>http://jaketrent.com/post/using-javascript-function-bind</id>
    <content type="html"><![CDATA[<p>JavaScript's Function object has a very helpful method, <code>bind</code>.  It is a great tool to give you control of the ever-squirrely <code>this</code> keyword.  Have you ever had trouble predicting what <code>this</code> will be or making equate to what you want?  <code>bind</code> will help you do that with more power and consistency.  It can also help you with partial function application.</p>

<p><img src="http://i.imgur.com/4huM3Xb.jpg" alt="function bind" /></p>

<!--more-->


<h2>The <code>this</code> Keyword</h2>

<p>In JavaScript, what the <code>this</code> keyword refers to changes often.  This can be useful but also unexpected.  Generally <code>this</code>, used within a function, will refer to the context in which that function was called. That calling context might be the global context of <code>window</code> if an event callback is being called in a browser.  That calling context might be an object that contains the function.  For more specific cases, MDN has some <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this">great docs on the variety of contexts referred to by <code>this</code></a>.</p>

<h2>Controlling <code>this</code> with <code>bind</code></h2>

<p>When writing code, I often am thinking of <code>this</code> in the context in which I'm writing.  In other words, if I'm writing an object and use the keyword <code>this</code> in a function, I would normally expect <code>this</code> to refer to the object in which I <em>declared</em> the function.  But, again, it is actually the <em>calling</em> context that actually determines the value of <code>this</code>.</p>

<p>To change this default behavior, I can pre-bind the function's value of <code>this</code> to a value of my choosing.  This will happen at the time of <em>declaration</em>, which is what I more naturally would expect.</p>

<p>For example, in <a href="http://facebook.github.io/react/">React</a> we write UI components.  In interesting UIs, we're often handling events like those that occur with user interaction.  Normally events in the browser are attached to the DOM and are executed in the context of the <code>window</code>.  This being the case, it'll be hard for us to create an event handler function in our React Component that can refer back to anything of use in the React Component itself.</p>

<p>As a simple example, we'll write a <code>handleClick</code> function that wants to call the Component's <code>doLog</code> function for interesting logging:</p>

<p>```js event-handling.js
class MyComponent extends React.Component {
  doLog() {</p>

<pre><code>console.log('Yay, you clicked!')
</code></pre>

<p>  }
  handleClick() {</p>

<pre><code>console.log('this is window?', 
            this == window)
console.log('this is component?',
           this.constructor.name == 'MyComponent')
this.doLog()
</code></pre>

<p>  }
  render() {</p>

<pre><code>return (
  &lt;div&gt;
    &lt;h1&gt;Time to start clicking&lt;/h1&gt;
    &lt;button onClick={this.handleClick}&gt;So, click&lt;/button&gt;
  &lt;/div&gt;
)
</code></pre>

<p>  }
}</p>

<p>React.render(<MyComponent />, document.getElementById('app'))
```</p>

<p><a href="http://jsbin.com/lixayanoso/edit?js,console,output">jsbin of broken state</a></p>

<p>If you click the button, <code>this.doLog</code> is not available as a function.  How could it be?  <code>doLog</code> is defined in <code>MyComponent</code>, not the <code>window</code>, which is the original context in which the event callback is executed.</p>

<p>To fix this, one need only pre-bind the <code>handleClick</code> function.  By changing one line, we can fix this:</p>

<p><code>js
&lt;button onClick={this.handleClick.bind(this)}&gt;So, click&lt;/button&gt;
</code></p>

<p>When this line is executed, it's in the <code>MyComponent#render</code> function, thus the <code>MyComponent</code> context.  So <code>this</code>, at that moment, is <code>MyComponent</code>.</p>

<p>The other detail that makes this work is that <code>bind</code> returns a <em>brand new function</em>.  That's how the pre-binding works.  So, the <code>onClick</code> prop that gets given to the <code>button</code> is a new function where we have said we want to permanently control the value of <code>this</code> to be whatever we bound it to.</p>

<p><a href="http://jsbin.com/luwoxegopu/edit?js,console,output">jsbin of fixed state</a></p>

<h2>Passing Specific Arguments with <code>bind</code></h2>

<p>Another great reason to use <code>bind</code> is to pass specific arguments to a function.  Just as <code>bind</code> can create new functions where the value of <code>this</code> is pre-determined (bound), <code>bind</code> can pre-fill (ie, partially apply) function arguments on the newly-created function.</p>

<p>It may not be immediately intuitive why one would want to create a function with parameters just to turn around and permanently make it so an argument to the function equals a specific value.  It almost feels like hard-coding a wart-ridden value on something that was previously dynamic and beautiful.  Perhaps an example will help.</p>

<p>Again, to the world of React...  As in the previous example, we'll pass an event handler for a click event.  Notice, just as above, that we're passing the function itself (<code>this.handleClick</code> above) instead of the return value of the function (which would look like <code>this.handleClick()</code>).  In this example, we'll have several click handlers, each on a list item, where the button will function as a remove button:</p>

<p>```js
class Item extends React.Component {
  render() {</p>

<pre><code>return (
  &lt;li&gt;
    {this.props.text}
    &lt;button onClick={this.props.onRemove}&gt;Rm&lt;/button&gt;
  &lt;/li&gt;
)
</code></pre>

<p>  }
}</p>

<p>class List extends React.Component {
  constructor(props) {</p>

<pre><code>super(props)
this.state = { items: this.props.initalItems }
</code></pre>

<p>  }
  handleClickRemove(index) {</p>

<pre><code>var clonedItems = this.state.items.slice()
clonedItems.splice(index, 1)
this.setState({ items: clonedItems })
</code></pre>

<p>  }
  render() {</p>

<pre><code>return (
  &lt;ul&gt;
    {this.state.items.map((item, i) =&gt; {
      return &lt;Item text={item} onRemove={this.handleClickRemove.bind(this, i)} key={item} /&gt;
    })}
  &lt;/ul&gt;
)
</code></pre>

<p>  }
}</p>

<p>React.render(<List initalItems={['Do', 'More', 'Reakt']} />, document.getElementById('app'))
```</p>

<p><a href="http://jsbin.com/cinovebasu/edit?js,console,output">A working jsbin</a></p>

<p>In <code>List</code>, we have the event handler, the <code>handleClickRemove</code> function, that takes an <code>index</code> parameter.  In order to make this function work as defined, we are using <code>bind</code> on this line:</p>

<p><code>js
return &lt;Item text={item} onRemove={this.handleClickRemove.bind(this, i)} key={item} /&gt;
</code></p>

<p>This <code>bind</code> call is doing a few things for us:</p>

<ol>
<li>Pre-binding <code>handleClickRemove</code> to the <code>List</code> Component so that <code>this.setState</code> works inside the callback.</li>
<li>Creating a new function that always has <code>i</code> as its first parameter.  Since this line is executed in a loop, <code>i</code> changes.  It will be <code>0</code> for the first item, <code>1</code>, then <code>2</code>.  This is perfect, as we want the first remove button to remove the first item, and so on.</li>
</ol>


<p>Isn't that awesome and useful?</p>

<p>So <code>bind</code> can help make <code>this</code> more predictable for you.  It will help you send new functions with pre-filled parameters.  What else have you used <code>bind</code> for?</p>
]]></content>
  </entry>
  
</feed>
