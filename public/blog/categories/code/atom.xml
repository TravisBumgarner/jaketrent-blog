<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2014-11-05T17:07:20-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Destroy Duplicate Tests]]></title>
    <link href="http://jaketrent.com/post/destroy-duplicate-tests/"/>
    <updated>2014-11-05T16:59:00-07:00</updated>
    <id>http://jaketrent.com/post/destroy-duplicate-tests</id>
    <content type="html"><![CDATA[<p>As soon as we begin to write a test for our code, it is natural for us to think that we are doing a good thing, and often, we are.  Yet, I believe there are times that we’re writing tests when we’re hurting more than helping — and, of course, this is not on purpose.  To clarify, I’m an advocate for testing in general, and this is a short thought on how to make it better.</p>

<p><img src="http://i.imgur.com/ozzuTNQ.png" alt="Double tests are not fine" /></p>

<!--more-->


<p>As soon as we begin to write a test for our code, it is natural for us to think that we are doing a good thing, and often, we are.  Yet, I believe there are times that we’re writing tests when we’re hurting more than helping — and, of course, this is not on purpose.  To clarify, I’m an advocate for testing in general, and this is a short thought on how to make it better.</p>

<h2>Verify It, and Be Done</h2>

<p>One of the main goals of testing is to verify that what you have written is correct.  So, if we’ve met that goal, there’s no need to go around the track one more time and see the checkered flag again.  The second time around produces no extra glory and no extra benefit.</p>

<p>If we cover a section of code many times, it isn’t more helpful than the first time we covered it.  To verify twice isn’t to verify any better.  If the second attempt does happen to verify the same thing in an obviously better way, remove the first attempt and keep the second.</p>

<p>If it’s a variation of a certain case that you’re verifying, that’s different.  Adding new cases based on slight permutations of previous cases can be a good thing.  But covering the exact same thing provides no value.  In fact, multiple verification of code is just a type of debt.  It should be a smell in your test code that alerts you to clean things up.</p>

<h2>The Debt of Duplicate Tests</h2>

<p>If you have multiples of something, it just increases the maintenance over time.  Why would you want to update two tests instead of one?  Now that you have duplicate tests, you also have to keep them in sync.  Of course, if they cover the exact same case, if you change source code to fix the one test, the other will still be broken and be apparent and easy to fix.</p>

<p>The more tests you have, the longer your feedback loop in development or in a continuous build environment will be.  Multiply that extra wait time across your life on the project, and it has the possibility of being a non-trivial product.  Of course we need to wait for the tests that are needful and provide added value, but we shouldn’t wait needlessly.</p>

<p>Sometimes you do see duplicate tests within the same file — for instance, within the same unit.  This might happen when different developers approach the unit at different times to add tests.</p>

<p>I think it’s probably more often the case that duplicate tests are found across test classes -- meaning across the different types of tests.  For instance, a developer might write a unit test that covers a case.  Later, someone else might add an integration test that adds the same case.  Later still, someone else might add a functional test that adds the same case yet again.  All these developers are well-intentioned in adding tests.  They all need to think, communicate, investigate, and coordinate a little more to avoid the duplicate test problem.</p>

<h2>Deleting Duplicate Tests</h2>

<p>When duplicate tests are found, we should delete them.  Again, this might require some thinking.  We might want to consider which of the duplicate cases is the best test and therefore the one to keep.  This consideration might include which test is most stable, runs the fastest, is most readable, best designed, latest, earliest, etc.</p>

<h2>Avoiding Duplicate Tests</h2>

<p>The best scenario would be the one where we avoid duplicate tests.  Teams with clear guidelines will be able to coordinate better.  Useful information might include which classes of tests exist in the project and what each is intended for.  We might describe which kinds of tests we prefer, in which order, for certain kinds of verifications.  Having clean, well-organized tests will also encourage the team to read each others’ tests and familiarize themselves with what’s already written and know where to find existing cases and where to properly categorize new cases.</p>

<p>So have fun testing, and destroy the duplicate tests!  Yay for test doubles, but boo for double tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expose HTTP Headers in CORS]]></title>
    <link href="http://jaketrent.com/post/expose-http-headers-in-cors/"/>
    <updated>2014-09-15T09:42:00-06:00</updated>
    <id>http://jaketrent.com/post/expose-http-headers-in-cors</id>
    <content type="html"><![CDATA[<p>For APIs, it seems more and more data is making its way into the HTTP headers.  Recently, whilst adding a <code>Link</code> header, for paging data, into the HTTP response, I realized that my browser code couldn't see it.  Who was the culprit?  CORS, of course.</p>

<p><img src="http://i.imgur.com/JAce7py.jpg" alt="Cors" /></p>

<!--more-->


<h2>Headers in Browser</h2>

<p>It was just another day, and I was developing in my browser of choice, Chrome, known, in part, for its unequaled developer tools.  The <code>Link</code> header that I had added onto my HTTP responses for my API were viewable from the Network tab.  It looked good.  The browser could see it, curl could even see it.</p>

<p>In the browser client code, I was using <code>superagent</code>, but the code failed to see it.  I'd run:</p>

<p><code>js
var request = require('superagent')
request.get('myApi').end(function (err, res) {
  res.xhr.getResponseHeader('Link') // nothing
  res.headers.link // nothing
})
</code></p>

<p>And the header was not coming through.  I ran the same command in the console, <code>res.xhr.getResponseHeader('Link')</code>, and got the error response:</p>

<p><code>
Refused to get unsafe header ‘Link’
</code></p>

<p>These are a classic CORS symptoms.</p>

<h2>CORS Spec</h2>

<p>Well, a few great <a href="http://blog.import.io/tech-blog/exposing-headers-over-cors-with-access-control-expose-headers">google results</a> later, I ended up at the <a href="http://www.w3.org/TR/cors/#simple-response-header">CORS spec</a>, which drones on that only simple headers are allowable in CORS requests by default.  These headers include:</p>

<ul>
<li>Cache-Control</li>
<li>Content-Language</li>
<li>Content-Type</li>
<li>Expires</li>
<li>Last-Modified</li>
<li>Pragma</li>
</ul>


<p><code>Link</code> is definitely not on that list.  So, how to add it?</p>

<h2>Access-Control-Expose-Headers in rack-cors</h2>

<p>Like the other CORS headers, the <code>Access-Control-</code> prefix is present.  The one you're looking for is <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS"><code>Access-Control-Expose-Headers</code></a>.  It is a comma-separated list of header names. You can add this header manually to your response, or depending on the library you're using, it might be added differently.</p>

<p>I was using <code>rack-cors</code>.  Thus, my addition ended up looking something like:</p>

<p>```ruby config/application.rb</p>

<h1>...</h1>

<p>config.middleware.use Rack::Cors do
  allow do</p>

<pre><code>origins '*'
resource '*', :headers =&gt; :any, :methods =&gt; [:get, :post, :put, :delete, :options], :expose =&gt; ['Link']
</code></pre>

<p>  end
end
```</p>

<p>Can you see that the <code>expose</code> key was the key for me?  Once that was added, the browser let the client code read the link, and all was safe and well.</p>

<h2>Bonus:</h2>

<p>As a bonus, here's a great client library for consuming a <a href="https://developer.github.com/v3/#link-header">GitHub API-style</a> <code>Link</code> header, called <a href="https://www.npmjs.org/package/parse-link-header">parse-link-header</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Send Props to Children in React]]></title>
    <link href="http://jaketrent.com/post/send-props-to-children-react/"/>
    <updated>2014-08-12T16:55:00-06:00</updated>
    <id>http://jaketrent.com/post/send-props-to-children-react</id>
    <content type="html"><![CDATA[<p>In React, you're always making components.  Sometimes components are standalone.  Other times, you'll have components that can nest children components.  Sometimes you'll want to send properties to the children components from the parent as often as a doting parent wants to send packages to a child missionary.  It's possible, it's simple, and it's not documented super well.  Here's one method.</p>

<p><img src="http://i.imgur.com/DXuSNbw.png" alt="React" /></p>

<!--more-->


<h2>Children Components</h2>

<p>When parent components are rendered, they have access to a special property, <code>this.props.children</code>.  It's like an Angular <code>ng-transclude</code> or an Ember <code>yield</code>.  Children components are generally rendered something like this:</p>

<p>```js
React.createClass({
  render: function () {</p>

<pre><code>return (
  &lt;div id="iAmParentHearMeRoar"&gt;
    {this.props.children}
  &lt;/div&gt;
)
</code></pre>

<p>  }
})
```</p>

<p>The generic example above shows simply how to render children, <code>props</code> untouched, within a parent component.  Sometimes, however, a parent wants to bequeath its children with extra properties.  How will we make that happen?</p>

<h2>Setting Child Props</h2>

<p><code>props</code> are meant to be immutable.  But, in order for us to send <code>props</code> values to our children, we're going to essentially loop through our children and set props on them as a part of our parent <code>render</code> function.</p>

<p>Deep breath.  It's ok.  The children that we'll loop through aren't mounted component instances.  They are, instead, <a href="http://facebook.github.io/react/blog/2014/07/17/react-v0.11.html#descriptors">descriptors</a>.  These descriptors have all the <code>props</code> attributes that we've declared should be put on the components, but they haven't been rendered yet.  Because of this, we can change props, and it's ok.  We're not mutating what has rendered.  The data still hasn't flowed to the children.  We're still effectively still riffing on the logic of what the children components should really be when they're eventually mounted.</p>

<h2>Looping on Children Components</h2>

<p><code>this.props.children</code> is a funny property.  It's special in more ways than one.  The things that might trip us up in looping is that even though it sounds like a plural thing, meaning an array, sometimes it's a singular object.  To help avoid potential problems, React gives us a helper, <code>React.Children</code>.  It has a few functions for array iteration, such as <code>map</code> and <code>forEach</code> that help account for the potential forms of <code>this.props.children</code>.</p>

<h2>Functional Modifications</h2>

<p>Immutable data is a big part of functional programming.  This means that when we 'mutate' the props, we want to mutate on a clone of the child component without affecting the original.  There's an input, there's an output, and the input is untouched.  Once we have our cloned children components as we want them, we'll render those instead.  React offers another great helper for cloning components and setting properties in a single function, <code>React.addons.cloneWithProps</code>.  Note that in order to use this function, you need to <code>require('react/addons')</code>.</p>

<h2>Checking Child Type</h2>

<p>It's a generally-useful thing to be able to tell what the React class type of a component object is.  It's an applicable skill in terms of looping through child components because we might not want to modify the properties of all types of children.  Each React component class has a <code>type</code> attribute accessible via <code>MyComponent.type</code>.  This attribute is also available on component descriptors.</p>

<h2>A Child CheckOption Example</h2>

<p>To bring this all together and illustrate the concepts, let's say we created a <code>RadioGroup</code> component that could take one or many <code>RadioOption</code> child components.  In raw html, which is what our component will eventually render, <code>input</code>s with type <code>checkbox</code> need to all have the same <code>name</code> attribute value to work well as toggles within the group.  But this is something that React can help us not have to duplicate.  We'll instead put a <code>name</code> property on the parent <code>RadioGroup</code> and have it transfer it as a property on all its children.  The implementation might look like this:</p>

<p>```js
/<em>* @jsx React.DOM </em>/</p>

<p>var React = require('react/addons')</p>

<p>var RadioOption = React.createClass({
  render: function () {</p>

<pre><code>return (
  &lt;label&gt;
    &lt;input type="radio" value={this.props.value} name={this.props.name} /&gt;
    {this.props.label}
  &lt;/label&gt;
)
</code></pre>

<p>  }
})</p>

<p>var RadioGroup = React.createClass({
  renderChildren: function () {</p>

<pre><code>return React.Children.map(this.props.children, function (child) {
  if (child.type === RadioOption.type)
    return React.addons.cloneWithProps(child, {
      name: this.props.name
    })
  else
    return child
}.bind(this))
</code></pre>

<p>  },
  render: function () {</p>

<pre><code>return (
  &lt;div class="radio-group"&gt;
    {this.renderChildren()}
  &lt;/div&gt;
)
</code></pre>

<p>  }
})</p>

<p>var WhereImUsingRadioGroups = React.createClass({
  render: function () {</p>

<pre><code>return (
  &lt;RadioGroup name="blizzard-games"&gt;
    &lt;RadioOption label="Warcraft 2" value="wc2" /&gt;
    &lt;RadioOption label="Warcraft 3" value="wc3" /&gt;
    &lt;RadioOption label="Starcraft 1" value="sc1" /&gt;
    &lt;RadioOption label="Starcraft 2" value="sc2" /&gt;
  &lt;/RadioGroup&gt;
)
</code></pre>

<p>  }
})
```</p>

<p>In this example, where the parent <code>RadioGroup</code> has the <code>name</code> prop, it will be given to each of the children so their <code>name</code> prop will match and the radio group will work as expected.  Thus, the hearts of the children are turned toward their fathers.</p>

<p>Is there a better way to do this?  How have you been sending <code>props</code> to children?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set State in Callbacks in React]]></title>
    <link href="http://jaketrent.com/post/set-state-in-callbacks-in-react/"/>
    <updated>2014-06-23T08:30:00-06:00</updated>
    <id>http://jaketrent.com/post/set-state-in-callbacks-in-react</id>
    <content type="html"><![CDATA[<p>In React, you can setup components that fetch their own data and set their own state with that data.  Because of the async nature of data fetching, you’ll have to make sure to keep things cleaned up to avoid the error of trying to set state in an unmounted component.</p>

<p><img src="http://i.imgur.com/DXuSNbw.png" alt="React" /></p>

<!--more-->


<h2>React Components setState</h2>

<p>If a React component fetches its own data, it will usually do so in the <code>componentDidMount</code> method.  In the data request callback, it will set its own state via the <code>this.setState</code> method.  (<code>this.state</code> should be treated as immutable.)  State should only be set on mounted components, or those components that are inserted into the dom.</p>

<p>If you attempt to set state on an unmounted component, you'll get an error that looks like this:</p>

<p><code>
Uncaught Error: Invariant Violation: replaceState(...): Can only update a mounted or mounting component.
</code></p>

<p>Others have reported this variation:</p>

<p><code>
Invariant Violation: replaceState(...): Cannot update while unmounting component. This usually means you called setState() on an unmounted component.
</code></p>

<p>Both indicate that you're setting state on a component that is not mounted.  How should one avoid this?  In my case, <code>setState</code> was being called in a callback that was firing after the component that initially started the request had already been unmounted from the dom.  Here are the two ways I addressed the problem...</p>

<h2>Assure Component isMounted</h2>

<p>If the component is mounted, <code>setState</code> is a safe bet.  If it's not mounted, never do it.  If it's not mounted, you probably don't about the state at that point either.  So wrap your state setting in <code>this.isMounted()</code>:</p>

<p>```js
React.createClass({
  componentDidMount: function () {</p>

<pre><code>MyModel.find(function (err, data) {
  if (this.isMounted()) {
    this.setState({ 
      goodiesFrom: data 
    })
  }
}).bind(this)
</code></pre>

<p>  }
  // ...
})
```</p>

<p>It feels a bit like a hack, but it makes the code safe.  Another option...</p>

<h2>Abort the Request</h2>

<p>My asynchronous action is a network request that, when finished, will call the callback function.  When the component unmounts, I can just throw away the request so the callback is never invoked.  To do this, we'll take advantage of another React lifecycle hook, <code>componentWillUnmount</code>:</p>

<p>```js my-component.js
React.createClass({
  componentDidMount: function () {</p>

<pre><code>this.req = MyModel.find(function (err, data) {
  this.setState({})
})
</code></pre>

<p>  },
  componentWillUnmount: function () {</p>

<pre><code>this.req.abort()
</code></pre>

<p>  }
  // ...
})
```</p>

<p>In my model, I'm using the <a href="https://github.com/visionmedia/superagent">superagent</a> library for network requests which provides an <a href="http://visionmedia.github.io/superagent/#aborting-requests">abort</a> method.</p>

<p>```js my-model.js
var request = require(‘superagent')
MyModel.prototype.find = function (done) {
  return request(‘modelUrl’)</p>

<pre><code>.end(function (err, data) {
  if (data) {
    done(err, data.body)
  }
})
</code></pre>

<p>}
```</p>

<p>Also note that in my <code>end</code> function callback, I'm checking for the existence of data.  This is because when a request is aborted, data will come back as undefined.</p>

<p>My favored method for solving the problem is the latter request abort method.  It feels cleaner that we're relying on the lifecycle functions of the component to deal with cleanup, much like we would for <a href="http://facebook.github.io/react/tips/dom-event-listeners.html">events</a>.  How have you dealt with this problem?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Broccoli Ember Emblem]]></title>
    <link href="http://jaketrent.com/post/broccoli-ember-emblem/"/>
    <updated>2014-05-30T07:18:00-06:00</updated>
    <id>http://jaketrent.com/post/broccoli-ember-emblem</id>
    <content type="html"><![CDATA[<p>Make broccoli compile your emblem templates so they're ready for your ember app.</p>

<p><img src="http://i.imgur.com/85v8PQP.png" alt="Broccoli Ember Emblem" /></p>

<!--more-->


<h2>The Libraries</h2>

<p><a href="https://www.npmjs.org/package/broccoli">Broccoli</a> builds your assets quickly.  It makes heavy use of caching so it only has to rebuild affected subtrees when files change.  <a href="http://emblemjs.com/">Emblem</a> is a significant whitespace version of <a href="http://handlebarsjs.com/">Handlebars</a> templates, similar in style to <a href="http://slim-lang.com/">Slim</a> or <a href="http://jade-lang.com/">Jade</a>.  <a href="http://emberjs.com/">Ember</a> is a MVC framework for building browser apps.</p>

<p>Put them all together, and you have something that will help you compile your templates quickly for your browser app.  The <a href="https://github.com/jaketrent/broccoli-ember-emblem">broccoli-ember-emblem</a> plugin for Broccoli will do just that.</p>

<h2>Install</h2>

<p>To use the library, you'll need broccoli installed first.  Then, you'll install the plugin via npm:</p>

<p><code>
npm install --save-dev broccoli-ember-emblem
</code></p>

<h2>Usage</h2>

<p>You'll setup the plugin in your app's <code>Brocfile.js</code>.  That setup might look something like this:</p>

<p>```js
var emblem = require('broccoli-ember-emblem')
var mergeTrees = require('broccoli-merge-trees')
var pickFiles = require('broccoli-static-compiler')</p>

<p>function preprocess (tree) {
  tree = emblem(tree, {</p>

<pre><code>stripPathFromName: 'tmpl/'
</code></pre>

<p>  })
  return tree
}</p>

<p>var tmplTree = 'client/tmpl'
tmplTree = pickFiles(tmplTree, {
  srcDir: '/',
  destDir: '/tmpl'
})
tmplTree = preprocess(tmplTree)</p>

<p>module.exports = mergeTrees([ /<em> other trees, </em>/ tmplTree ])
```</p>

<p>Note a few things:</p>

<ul>
<li>I'm using another plugin, <code>broccoli-static-compiler</code> to move files around in the broccoli build directories.  This is to be able to identify separate trees that both use similar file filters (eg, *.js for both src scripts and templates).</li>
<li>I'm using the one option for the <code>broccoli-ember-emblem</code> plugin, <code>stripPathFromName</code>, which allows me to remove the path name from the template name in output.  For example, if I have a file at <code>tmpl/application.emblem</code>, I want the template name in ember to be <code>application</code>, not <code>tmpl/application</code>.</li>
<li>Final output is merged into a single tree via another plugin, <code>broccoli-merge-trees</code>.</li>
</ul>


<h2>Output</h2>

<p>Broccoli will take care of finding all of your template files.  It will use directories and filenames as the input for template names.  As a few examples, here is input and output as it might happen in the above configuration:</p>

<ul>
<li>File: <code>client/tmpl/application.emblem</code> becomes: <code>Ember.TEMPLATES['application']</code></li>
<li>File: <code>client/tmpl/components/song.emblem</code> becomes: <code>Ember.TEMPLATES['components/song']</code></li>
</ul>


<p>Notice that Ember requires all templates to be registered on the <code>Ember.TEMPLATES</code> object.  Later, at app runtime, they are looked up on that object by name.</p>

<p>So, use the plugin and win.  How does your template compilation for Ember/Emblem differ?  What other features do you wish were supported here?</p>
]]></content>
  </entry>
  
</feed>
