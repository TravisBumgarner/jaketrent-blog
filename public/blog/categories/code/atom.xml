<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2013-11-25T07:27:12-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Call Dynamic Method in Ruby]]></title>
    <link href="http://jaketrent.com/post/ruby-call-dynamic-method/"/>
    <updated>2013-11-25T07:10:00-07:00</updated>
    <id>http://jaketrent.com/post/ruby-call-dynamic-method</id>
    <content type="html"><![CDATA[<p>I love Ruby's syntax for method calls.  The syntax for calling dynamic methods is pretty nice, and it's easily mastered.</p>

<p><img src="http://i.imgur.com/Z7WWtL0.jpg" alt="Ruby" /></p>

<!--more-->


<h2><code>send</code> method</h2>

<p>The <code>send</code> method is one of the best and most basic ways to call a method dynamically on your object.  Let's say we have an object with multiple methods like this:</p>

<p>```ruby
class Fezzik
  def show_sportsmanship
  end</p>

<p>  def be_colossus_for(person_1, person_2=nil, person_3=nil)
  end
end
```</p>

<p>The method you want to call might be represented as a string or a symbol.  The <code>send</code> method can only be called with a symbol.  Just convert your string if you have it.  Your method call might look like this:</p>

<p>```ruby
Fezzik.new.send(:show_sportsmanship)</p>

<h1>or</h1>

<p>Fezzik.new.send("show_sportsmanship".to_sym)
```</p>

<h2>Calling <code>send</code> with parameters</h2>

<p>Now, some of your methods might have parameters.  How are those called?  Simply pass the argument values into the <code>send</code> call as the final argument, which is a variable length argument:</p>

<p><code>ruby
just_one_person = Person.new
Fezzik.new.send(:be_colossus_for, just_one_person)
</code></p>

<p>You can also pass the parameters as a splat array, such as this:</p>

<p><code>ruby
people = [Person.new, Person.new, Person.new]
Fezzik.new.send(:be_colossus_for, *people)
</code></p>

<p>In Ruby, the splat operator destructures the array into parameters, so the above code essentially becomes:</p>

<p><code>ruby
people = [Person.new, Person.new, Person.new]
Fezzik.new.send(:be_colossus_for, people[0], people[1], people[2])
</code></p>

<p>So, <code>send</code> turns out to be pretty easy to deal with and really useful.  Use it, and be happy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Save a Gem to Gemfile from Terminal]]></title>
    <link href="http://jaketrent.com/post/save-gem-to-gemfile-from-terminal/"/>
    <updated>2013-11-18T07:54:00-07:00</updated>
    <id>http://jaketrent.com/post/save-gem-to-gemfile-from-terminal</id>
    <content type="html"><![CDATA[<p>Have you ever wished you could save a gem to your <code>Gemfile</code> straight from the command line?  I wish Rubygems had this built in, but it's easy to add.  After all, there's a gem for that.</p>

<p><img src="http://i.imgur.com/x2I31sl.jpg" alt="Gemrat" /></p>

<!--more-->


<h2>From npm</h2>

<p>Coming from Node/Npm previous to Ruby/Rubygems, I wished I could do something like this:</p>

<p><code>bash
npm install express --save
</code></p>

<p>This would take my specified npm module and append it to the end of my <code>package.json</code> dependencies list.</p>

<p>There is no equivalent for this built into Rubygems.</p>

<h2>Gemrat</h2>

<p>But, there is a mutant beast that skulks through the gem-lined sewers of Rubyland -- and it's name is <code>gemrat</code>!  What a great, image-provoking name.  Once you install <code>gemrat</code>, you will have the power of 20 npms at your fingertips.</p>

<p>First, install it:</p>

<p><code>bash
gem install gemrat
</code></p>

<p>Next, decide what gem you want to save to your <code>Gemfile</code>.  Let's choose a gem of a gem to try called <code>guard</code>:</p>

<p><code>bash
gemrat guard
</code></p>

<p>Now, install the dependencies listed in your <code>Gemfile</code>:</p>

<p><code>bash
bundle install
</code></p>

<p>Kaboom.  You have learned the secrets of the Fire Swamp and could live there for some time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug Ruby and Rails]]></title>
    <link href="http://jaketrent.com/post/debug-ruby-rails/"/>
    <updated>2013-11-14T07:37:00-07:00</updated>
    <id>http://jaketrent.com/post/debug-ruby-rails</id>
    <content type="html"><![CDATA[<p>Interactive debugging can sometimes be faster and more effective in helping you code than a <code>puts</code> statement.  It's easy to get interactive debugging in Ruby or on Rails with the help of a nice gem.</p>

<p><img src="http://i.imgur.com/Z7WWtL0.jpg" alt="Ruby" /></p>

<!--more-->


<h2>No IDE Required</h2>

<p>There are Ruby IDEs that provide interactive debugging capabilities.  My favorite is <a href="http://www.jetbrains.com/ruby/">RubyMine by Jetbrains</a>.  But if you don't have or don't want an IDE, there's still hope.</p>

<h2>Debugger Gem</h2>

<h4>Include the dependency</h4>

<p>My new buddy George showed me a sweet gem simply named <code>debugger</code>.  To use it, I first add the <code>debugger</code> dependency to my <code>Gemfile</code>:</p>

<p>```
source "https://rubygems.org"</p>

<p>gem 'debugger'
```</p>

<h4>Add a breakpoint</h4>

<p>Next, I need to add my "breakpoint" into my code that I'm going to run.  In this case, the breakpoint is defined by calling <code>debugger</code>.  On the same line, we'll also import the <code>debugger</code> library:</p>

<p>```ruby
  # ...
  def is_anagram?</p>

<pre><code>require 'debugger'; debugger
same_length? and different? and has_same_letters?
</code></pre>

<p>  end
```</p>

<h4>Run your code</h4>

<p>In this example, I'm going to break right after I call the <code>is_anagram?</code> method.  From the terminal, now I exercise the code.  In this case, I'll run my unit tests:</p>

<p><code>bash
ruby anagram_test.rb
</code></p>

<h4>Debug like a champ</h4>

<p>And when execution of the script gets to the <code>debugger</code> line, execution will pause and output in my terminal will look something like this:</p>

<p>```ruby
/Users/jake.trent/dev/exercism/ruby/anagram/anagram.rb:13
same_length? and different? and has_same_letters?</p>

<p>[8, 17] in /Users/jake.trent/dev/exercism/ruby/anagram/anagram.rb
   8      @letters2 = @word2.split('')
   9    end
   10
   11    def is_anagram?
   12      require 'debugger'; debugger
=> 13      same_length? and different? and has_same_letters?
   14    end
   15
   16    def has_same_letters?
   17      same_letters = true
(rdb:1)
```</p>

<p>A snippet of my code is shown, an arrow points at line 13, and there's a prompt at the bottom (labeled 'rdb') that you can type in.  <code>debugger</code> gives you a few special commands to type, such as:</p>

<ul>
<li><code>n</code> - next</li>
<li><code>s</code> - step over</li>
<li><code>c</code> - continue</li>
</ul>


<p>These commands should be familiar to almost all debuggers.  The other fabulous thing is that the prompt functions as a sort of <code>irb</code> session from the current context of your code.  So, I can type variable names to see their contents or call functions to see what they'd return.  So, in the case of this code, I could try:</p>

<p><code>bash
(rdb:1) has_same_letters?
true
(rdb:1) @letters2
["s", "t", "a", "n", "d"]
</code></p>

<p>Pretty cool and pretty powerful all for the price of including the library and including a breakpoint in your code.</p>

<p>Are there tools similar to this that you love to use for debugging?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Change Page Title in Angular Route]]></title>
    <link href="http://jaketrent.com/post/change-page-title-angular-route/"/>
    <updated>2013-11-07T07:03:00-07:00</updated>
    <id>http://jaketrent.com/post/change-page-title-angular-route</id>
    <content type="html"><![CDATA[<p>When you change routes in Angular, the page title doesn't change automatically, but this can be done rather simply.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="Angular Router" /></p>

<!--more-->


<h2>Servers and Clients</h2>

<p>Client-side routers are pretty awesome.  A new url is pushed into the browser's history to represent the particular resource that pure client code has produced and displayed.  It's pretty cool.  It's also used widely these days.  Angularjs has a nice little router built into its framework.</p>

<p>Route changes from a server always have the page title set automatically in the <code>head &gt; title</code> tag.  Client-side routing doesn't have that exactly.  Nor does the Angularjs router change the page title via an automatic mechanism.  So, let's add our own.</p>

<h2>Add Page Title to Angular Router</h2>

<p>First, notice that you can add any arbitrary attributes to an angular route that you desire.  In the code below, notice that each route has a <code>title</code> attribute:</p>

<p>```coffeescript app.coffee
angular.module('app', []).config ($routeProvider) -></p>

<p>  $routeProvider</p>

<pre><code>.when '/',
  controller: 'HomeCtrl'
  templateUrl: "/templates/home.html"
  title: 'Home'

.when '/about',
  controller: 'AboutCtrl'
  templateUrl: "/templates/about.html"
  title: 'About'
</code></pre>

<p>```</p>

<p>Then in a place that exists on every route -- something like an <code>AppCtrl</code> -- you can gain access to the <code>current</code> route's <code>title</code> every time the route changes:</p>

<p>```coffeescript app-ctrl.coffee
angular.module('app').controller 'AppCtrl', ($rootScope) ->
  $rootScope.$on '$routeChangeSuccess', (event, current, previous) =></p>

<pre><code>$rootScope.pageTitle = $route.current.title
</code></pre>

<p>```</p>

<p>Now we have put the route's <code>title</code> in <code>$rootScope.pageTitle</code> and can use it in our template:</p>

<p>```html app.html
<html>
  <head></p>

<pre><code>&lt;title ng-bind="pageTitle + ' | MyApp'"&gt;&lt;/title&gt;
</code></pre>

<p>  </head>
  <!-- ... -->
```</p>

<p><code>ng-bind</code> is just like using double curlies, but also acts as if it's surrounded by an ng-cloak as well.  Notice that in the title, I'm even concatenating the <code>pageTitle</code> with my app's overall name.</p>

<p>Props go to <a href="http://github.com/danethurber">@danethurber</a> for putting this title changing logic in our most recent app.</p>

<p>Is this how you change your Angular app's title?  Is there a better way?  Specifically, I wonder if <code>AppCtrl</code> really is the best place to listen for <code>$routeChangeSuccess</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use D3 rangeBands]]></title>
    <link href="http://jaketrent.com/post/use-d3-rangebands/"/>
    <updated>2013-10-17T07:47:00-06:00</updated>
    <id>http://jaketrent.com/post/use-d3-rangebands</id>
    <content type="html"><![CDATA[<p>When building a chart such as a bar chart in d3, you'll want an evenly divided space on your x axis.  You could divide the space up with your own manual calculations, accounting for space available, bar width, and inner and outer padding.  Or, you could have d3 do the calculation for you via a <code>rangeBand</code>.</p>

<p><img src="http://i.imgur.com/JEniNrp.jpg" alt="d3 rangeBand" /></p>

<!--more-->


<h2>Scale</h2>

<p>One of the great features of D3 is the ability it gives you to easily adapt your chart to the space available to you.  This is accomplished with scales.  There are a couple different scales built into D3.  Some for comparative numbers, such as <code>d3.scale.linear</code> and <code>d3.scale.log</code>; some for discrete data sets, such as <code>d3.scale.ordinal</code>.</p>

<p><strong>A scale maps visual space to data space.</strong></p>

<p>The visual space of a scale is the <code>range</code>.  The data space is the <code>domain</code>.  The internals of the scale will map it all for you.</p>

<h2>Manual Space Management</h2>

<p>Previous to realizing some of the things that d3 scales can do for you, I did a lot of space management myself.  Here's an example:</p>

<p>Let's say we have a data domain of all the letters in the alphabet.  Let's say we're building a bar chart.  We'll put the letters on the x-axis, running horizontally along our chart.  We want to space out each letter's bar evenly across the visual space or range.</p>

<p>If we did our own math, it might look like this:</p>

<p>```coffeescript brought-to-you-by.coffee
barOuterPad = 20
barPad = 10</p>

<p>widthForBars = elementWidth - (barOuterPad * 2)
barWidth = widthForBars / data.length - barPad + (barPad / numBars)</p>

<p>barsG = svg.append('g')
  .attr('transform', "translate(#{barOuterPad}, 0)")</p>

<p>barsG.selectAll('rect')
  .data(data)
  .enter().append('rect')</p>

<pre><code>.attr('x', (d, i) -&gt; (barWidth * i) + (i * barPad))
.attr('width', barWidth)
# attrs ...
</code></pre>

<p>```</p>

<p>In the code above, we have bar padding setup.  <code>barOuterPad</code> is the padding on only the far left and right of the entire chart.  <code>barPad</code> is the space between each of the bars.</p>

<p>The <code>barWidth</code> calculation is especially fun.  It splits the <code>widthForBars</code> space evenly over the number of bars.  Then it subtracts the <code>barPad</code> for the space of that bar that won't be able to be used.  Then, finally, we remember that there will be 1 fewer empty pad areas between bars than there will be actual bars.  So, we take that extra <code>barPad</code> space and give a bit of it back to every bar.  Whew.</p>

<p>When we go to place bars, we create a new group, <code>barG</code>, transformed in to take account of <code>barOuterPad</code>.  Then, for each bar in we make sure it's offset into the chart based on what number of bar it is in the set.</p>

<p>There is an easier way.</p>

<h2>d3.scale.ordinal.rangeBands</h2>

<p>There is one particular function of <code>d3.scale.ordinal</code> that is particularly useful.  That is <code>rangeBands</code>.  It will evenly divide a space up for you into bands across the range.</p>

<p>Here's a great graphic from the d3 wiki on <a href="https://github.com/mbostock/d3/wiki/Ordinal-Scales#wiki-ordinal_rangeBands"><code>ordinal.rangeBands</code></a>:</p>

<p><img src="https://f.cloud.github.com/assets/230541/538688/46c298c0-c193-11e2-9a7e-15d9abcfab9b.png" alt="rangeBand diagram" /></p>

<p>It looks like it knows how to take care of everything in our scenario.  It handles outer padding.  It handles between-bar padding.  Let's use it:</p>

<p>```coffeescript made-possible-by.coffee
barOuterPad = .2
barPad = .1</p>

<p>x = d3.scale.ordinal()
  .domain(data.map((d) -> d.letter))
  .rangeRoundBands([0, elementWidth], barPad, barOuterPad)</p>

<p>svg.append('rect')
  .data(data)
  .enter().append('rect')</p>

<pre><code>.attr('x', (d) -&gt; x(d.letter))
.attr('width', x.rangeBand())
# attrs...
</code></pre>

<p>```</p>

<p>Note that our <code>barOuterPad</code> and <code>barPad</code> are now fractions.  This is because d3 expects a number, usually between 0 and 1, that is described as a proportion of the eventual width of the bands.</p>

<p><code>x</code> becomes our scale function, mapping the domain, which is all letters (<code>d.letter</code>), to the range.  The range is specified as bands using <code>rangeRoundBands</code>.  This is different than <code>rangeBands</code> in that all spaces are guaranteed to be integers, avoiding antialiasing on screen.  The signature is as follows:</p>

<p><code>ordinal.rangeBands(interval[, padding[, outerPadding]])</code></p>

<p>We avoid having to use a new <code>barG</code> group to make our math easier.</p>

<p>When we set the <code>x</code> attribute on our bar, it's x offset is determined by passing the singular datum's letter to the <code>x</code> scale function.  And the width is simply the width of all bands, known by calling <code>x.rangeBand()</code>.</p>

<p>So much better.  And so much more concise.</p>

<p>What do you think?  Does this work for you?  What is the even-better way of doing this that I have yet to realize?</p>
]]></content>
  </entry>
  
</feed>
