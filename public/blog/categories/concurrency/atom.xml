<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: concurrency | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/concurrency/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2014-11-28T10:47:31-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ConcurrentModificationException Within One Thread]]></title>
    <link href="http://jaketrent.com/post/concurrentmodificationexception-within-one-thread/"/>
    <updated>2009-05-12T07:35:00-06:00</updated>
    <id>http://jaketrent.com/post/concurrentmodificationexception-within-one-thread</id>
    <content type="html"><![CDATA[<p>I at first thought it odd that a ConcurrentModificationException could be thrown w/in the context of a single Thread.  But, what do you know, it can!  And I seem to be getting better at writing code that does!</p>

<!--more-->


<p>As a part of a recent hack, I wanted to remove a certain element from a list.  As I was iterating over the list, I tried to find an object that met a certain criteria and then remove it, as follows:</p>

<p>```java
void removeStuff() {
   List<Recipient> list = service.populateList();
   for (Recipient r : list) {</p>

<pre><code>  if (r.getProperty().equals(searchProperty)) {
     list.remove(r);
  }
</code></pre>

<p>   }
}
```</p>

<p>Unfortunately, this will throw the ConcurrentModificationException.  From the said Exception's JavaDoc:</p>

<p>"Note that this exception does not always indicate that an object has been concurrently modified by a different thread. If a single thread issues a sequence of method invocations that violates the contract of an object, the object may throw this exception. For example, if a thread modifies a collection directly while it is iterating over the collection with a fail-fast iterator, the iterator will thow this exception."</p>

<p>Perfect.  That too-aptly describes my miserable attempts.  So, it sounds like I just have to wait until iteration is complete to then attempt modification.  So, a quick fix might look something like this:</p>

<p>```java
void removeStuff() {
   List<Recipient> list = service.populateList();
   Recipient toRemove = null;
   for (Recipient r : list) {</p>

<pre><code> if (r.getProperty().equals(searchProperty)) {
     toRemove = r;
  }
</code></pre>

<p>   }
   list.remove(toRemove);
}
```</p>

<p>Interestingly, and it was true in this case, the JavaDoc also states: "ConcurrentModificationException  should be used only to detect bugs."</p>

<h4>Update</h4>

<p>My friend, Steve, found a better way to do this inline w/o the exception that employs a manual iterator:</p>

<p>```java
Beaner beaner = null;
Iterator iter = list.iterator();
while (iter.hasNext()){
   beaner = (Beaner) iter.next();
   if (beaner.getType() == 3){</p>

<pre><code>   iter.remove();
</code></pre>

<p>   }
}
```</p>
]]></content>
  </entry>
  
</feed>
