<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hibernate | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/hibernate/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2017-01-24T07:53:25-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hibernate Bind Variable in OrderBy Clause]]></title>
    <link href="http://jaketrent.com/post/hibernate-bind-variable-orderby-clause/"/>
    <updated>2009-08-24T13:29:00-06:00</updated>
    <id>http://jaketrent.com/post/hibernate-bind-variable-orderby-clause</id>
    <content type="html"><![CDATA[<p>I have spent mucho time trying to get some named parameters working in the "order by" clause of a dynamic sql query that I'm building.  The query isn't even HQL/JPQL.  It's native.  And yet, it turns out that you cannot use bind variables, named or ordered, in an order by clause.</p>

<!--more-->


<p>I was trying to do something like this:</p>

<p>```java
public class Service {
   @PersistenceContext
   private EntityManager em;</p>

<p>   public List&lt;Object[]> search(String sortProperty) {</p>

<pre><code>  Query q = em.createNativeQuery("select col from table order by :sortProperty");
  q.setParameter("sortProperty", sortProperty);
  return q.getResultList();   
</code></pre>

<p>   }
}
```</p>

<p>This will yield something awesome, like this:</p>

<p><code>java
java.sql.SQLException: ORA-01745: invalid host/bind variable name
</code></p>

<p>Seriously, the only way I've found around this is append, similar to this:</p>

<p><code>java
/* ... */
Query q = em.createNativeQuery("select col from table order by " + sortProperty);
/* ... */
</code></p>

<p>Just make sure you've got something scrubbing the data coming in.</p>

<p>Any better suggestions?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inner Joins in JPQL Delete Statements ]]></title>
    <link href="http://jaketrent.com/post/inner-joins-jpql-delete-statements/"/>
    <updated>2009-04-29T11:46:00-06:00</updated>
    <id>http://jaketrent.com/post/inner-joins-jpql-delete-statements</id>
    <content type="html"><![CDATA[<p>I'm working on a project that utilizes JPA/Hibernate as its ORM.  I was writing a few named queries for an JPQL/HQL delete and was getting an SQLGrammarException.  I soon found out that I couldn't use inner joins on a delete statement, even at the SQL level.  Here's the query transformation:</p>

<!--more-->


<p>I originally had this query:</p>

<p>```java
@NamedQuery(name = Queue.REMOVE_ROWS_OF_EARLY_RELEASE_REASON,
   query = "delete from Queue q " +</p>

<pre><code>       "where  q.enabledMember = :enabledMember " +
       "and    q.letter.eventReason.event.type = :eventType " +
       "and    q.letter.eventReason.reason = :reason ")
</code></pre>

<p>```</p>

<p>It had to evolve to this:</p>

<p>```java
@NamedQuery(name = Queue.REMOVE_ROWS_OF_EARLY_RELEASE_REASON,
   query = "delete from Queue q " +</p>

<pre><code>       "where q in (select sq from Queue sq " +
       "            where  sq.enabledMember = :enabledMember " +
       "            and    sq.letter.eventReason.event.type = :eventType " +
       "            and    sq.letter.eventReason.reason = :reason )"
</code></pre>

<p>```</p>

<p>The only solution that I could think of in order to keep the filter that I need was to use a subquery.  Anyone know of any other awesome solutions?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hibernate's @Enumerated Annotation is Brittle]]></title>
    <link href="http://jaketrent.com/post/hibernates-enumerated-annotation-brittle/"/>
    <updated>2009-02-23T08:27:00-07:00</updated>
    <id>http://jaketrent.com/post/hibernates-enumerated-annotation-brittle</id>
    <content type="html"><![CDATA[<p>Hibernate's @Enumerated annotation seems much too brittle in the case of using it with EnumType.ORDINAL.   If you're using EnumType.STRING, I think it works beautifully.  This is because the annotation can use the name of the enum to make the mapping.  In the case of ORDINAL, the value of the enum is used.  This presents a couple problems...</p>

<!--more-->


<ol>
<li>The enumeration has a 0th value place, so you need a PLACEHOLDER in your enum.</li>
<li>The enumeration values are contiguous, so your primary keys on the corresponding lookup table in the database must be as well.</li>
</ol>


<p>The second point is the one that seems most problematic.  If a lookup value becomes obsolete, it cannot be deleted.  If a sequence is used to generate the primary key value in the lookup table, it cannot skip a number without needing to put in extra placeholders equal to the amount of numbers skipped.</p>

<p>At least for me in my solution, to get around this problem I am putting the ENUM_NAME's in the database and in my mapping relating the table, replacing @Enumerated(EnumType.ORDINAL) and then using EnumType.STRING on the Entity representing the lookup table in order to link to my enum.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSF Modal Goodness]]></title>
    <link href="http://jaketrent.com/post/jsf-modal-goodness/"/>
    <updated>2008-11-30T14:12:00-07:00</updated>
    <id>http://jaketrent.com/post/jsf-modal-goodness</id>
    <content type="html"><![CDATA[<p>Meet the new web.  The simpler the better. The cleaner the better.  The more pleasing the colors the better.  The fuzzier feelings the better.  The latest fuzzies have been brought on by a slew of modals.  Previously, we haven't used many modals in our layouts and designs, so here's the first working pattern on how to get this kind of stuff working.</p>

<p>This solution allows content to appear in a modal, validation errors to post back to the modal, edits made in a modal to persist back to the database, and success messages to appear on parent page.</p>

<!--more-->


<p>Meet the new web.  The simpler the better. The cleaner the better.  The more pleasing the colors the better.  The fuzzier feelings the better.  The latest fuzzies have been brought on by a slew of modals.  Previously, we haven't used many modals in our layouts and designs, so here's the first working pattern on how to get this kind of stuff working.</p>

<p>This solution allows:</p>

<ul>
<li>Content to appear in a modal</li>
<li>Validation errors post back to the modal</li>
<li>Edits made in a modal persist back to the database</li>
<li>Success messages appear on parent page</li>
</ul>


<p>Example uses these technologies:</p>

<ul>
<li>JSF/Facelets</li> 
<li>Spring 2.5</li> 
<li>JPA/Hibernate</li> 
<li>Hibernate validators</li> 
<li>Seam</li> 
<li>JQuery</li> 
</ul>


<p>This includes these pieces:</p>

<ul>
<li>Parent JSF</li> 
<li>JQuery for Modal - using <a href="">jQuery</a> and <a href="">jqModal</a></li> 
<li>Modal JSF</li> 
<li>Seam pages.xml for navigation</li> 
<li>View bean</li> 
<li>Model object</li> 
</ul>


<p>Overall, the flow occurs as follows:</p>

<ul>
<li>Nav to parent page</li> 
<li>Trigger modal with link</li> 
<li>Modal appears </li> 
<li>Content is loaded in modal</li> 
<li>Submissions occur via AJAX to the view bean</li> 
<li>View bean logic and Seam determine outcome</li> 
<li>If errors, AJAX re-renders in modal</li> 
<li>If save successful, parent page is re-rendered with message</li> 
</ul>




<br />


<h2>The Parent Page (person-info-personal.xhtml)</h2>




<h3>Javascript for Modal:</h3>


<p>```javascript</p>

<script type="text/javascript" src="#{request.contextPath}/scripts/jquery.pack.js"></script>


<script type="text/javascript" src="#{request.contextPath}/scripts/jqModal.pack.js"></script>


<script type="text/javascript">
    jQuery(document).ready(function() {
        jQuery('#modal-edit-personal').jqm({
            ajax: '#{request.contextPath}/person-info-personal-edit.jsf?personId=#{personDetailsBean.person.id}&amp;conversationId=#{conversation.id}&amp;time=#{personDetailsBean.currentMillis}',
            trigger: '#btn-edit-personal',
            modal: true
        });
    })
</script>


<p>```</p>

<p><strong>Note:</strong></p>

<ul>
<li>The Seam conversation object is just available.  No convenience method required to retrieve it.</li>
<li>Additional url parameter required to get around an IE caching issue.  We just need a unique value so that the AJAX request isn't assumed cached by IE.  In this case, I used the current time in milliseconds (Method on view bean).</li>
</ul>




<h3>Trigger for Modal:</h3>


<p><code>jsp
&lt;a id="btn-edit-personal" class="edit-link-icon edit-link float-right" href="#"&gt;Edit&lt;/a&gt;
</code></p>

<h3>Modal Container:</h3>


<p>```jsp</p>

<div id="modal-edit-personal" class="jqmWindow smallWindow"></div>


<p>```
<strong>Note:</strong>
- Just include this right before the end of the html body.</p>

<h3>Style for Modal</h3>


<p><code>css
.smallWindow {components.css (line 105)
  margin-left:-250px;
  top:15%;
  width:500px;
}
.jqmWindow {components.css (line 84)
  background-color:#FFFFFF;
  border:5px solid #DDDDD3;
  color:#333333;
  display:none;
  left:50%;
  margin-left:-375px;
  padding:5px;
  position:fixed;
  top:8%;
  width:750px;
  z-index:3000 !important;
}
</code></p>

<h3>Success Validation Message</h3>


<p>```jsp
&lt;h:panelGroup rendered="#{param['saveSuccess'] ne null}"></p>

<pre><code>&lt;div id="edit-success" class="alert" style="display: block;"&gt;
    &lt;p&gt;Success: Changes saved for #{personDetailsBean.person.name.fullName}.&lt;/p&gt;
&lt;/div&gt;
</code></pre>

<p>&lt;/h:panelGroup>
```
<strong>Note:</strong></p>

<ul>
<li>The parameter to determine ability to render is just a param[].  It's not bound to the bean, which means it disappears on subsequent requests, which is what we want.</li>
</ul>




<h2>Seam Navigation</h2>




<h3>pages.xml Entry for modal:</h3>


<p>```xml
<page view-id="/person-info-personal-edit.xhtml"></p>

<pre><code>&lt;begin-conversation join="true" flush-mode="MANUAL"&gt;&lt;/begin-conversation&gt;
&lt;param name="personId" value="#{personDetailsBean.personId}"&gt;&lt;/param&gt;
&lt;action execute="#{personDetailsBean.loadPerson}" if="#{personDetailsBean.person eq null}"&gt;&lt;/action&gt;
&lt;navigation&gt;
    &lt;rule if-outcome="saved-person-edit"&gt;
        &lt;redirect view-id="/person-info-personal.xhtml"&gt;
            &lt;param name="personId" value="#{param['personId'] != null ? param['personId'] : personId}"&gt;&lt;/param&gt;
            &lt;param name="saveSuccess" value="true"&gt;&lt;/param&gt;
        &lt;/redirect&gt;
    &lt;/rule&gt;
&lt;/navigation&gt;
</code></pre>

<p></page>
```</p>

<h3>pages.xml Entry for parent:</h3>


<p>```xml
<page view-id="/person-info-personal.xhtml"></p>

<pre><code>&lt;begin-conversation join="true" flush-mode="MANUAL"&gt;&lt;/begin-conversation&gt;
&lt;param name="personId" value="#{personDetailsBean.personId}"&gt;&lt;/param&gt;
&lt;action execute="#{personDetailsBean.loadPerson}" if="#{personDetailsBean.person eq null}"&gt;&lt;/action&gt;
&lt;!-- ... --&gt;
</code></pre>

<p></page>
```
<strong>Note:</strong></p>

<ul>
<li>The "saveSuccess" parameter is the key to showing the success message on the parent page.</li>
</ul>




<h2>The Modal Page (person-info-personal-edit.xhtml)</h2>




<h3>Modal Markup:</h3>


<p>```jsp
&lt;a4j:form id="info-edit-form" ajaxSubmit="true" reRender="alerts"></p>

<pre><code>&lt;a4j:outputPanel id="alerts"&gt;
    &lt;ldsp:alerts /&gt;
&lt;/a4j:outputPanel&gt;

&lt;div class="target"&gt;
    &lt;h2&gt;Edit Personal Information&lt;/h2&gt;

    &lt;p&gt;Please make the necessary changes and press "Save" when finished.&lt;/p&gt;

    &lt;div id="notes"&gt;
        &lt;dl&gt;
            &lt;dt&gt;Official Name&lt;/dt&gt;
            &lt;dd&gt;
                #{personDetailsBean.person.name.fullName}
            &lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class="short-inputs"&gt;
            &lt;dt&gt;Preferred Name&lt;/dt&gt;
            &lt;dd&gt;
                &lt;h:inputText styleClass="input-text pref-name-field" value="#{personDetailsBean.person.preferredFirstName}" required="true" requiredMessage="Preferred first name required." /&gt;
            &lt;/dd&gt;
            &lt;dd&gt;
                &lt;h:inputText styleClass="input-text pref-name-field" value="#{personDetailsBean.person.preferredMiddleName}" required="true" requiredMessage="Preferred first name required." /&gt;
            &lt;/dd&gt;
            &lt;dd&gt;
                &lt;h:inputText styleClass="input-text pref-name-field" value="#{personDetailsBean.person.preferredLastName}" required="true" requiredMessage="Preferred first name required." /&gt;
            &lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl&gt;
            &lt;dt&gt;Blood Type&lt;/dt&gt;
            &lt;dd&gt;
                &lt;h:selectOneMenu value="#{personDetailsBean.person.bloodType}"&gt;
                    &lt;f:selectItem value="#{null}" itemLabel="None given" /&gt;
                    &lt;f:selectItems value="#{personDetailsBean.bloodTypesList}" /&gt;
                &lt;/h:selectOneMenu&gt;
            &lt;/dd&gt;
        &lt;/dl&gt;

        &lt;!--[if IE 6]&gt;
        &lt;dl&gt;
        &lt;dt&gt;&amp;nbsp;&lt;/dt&gt;
        &lt;dd&gt;&amp;nbsp;&lt;/dd&gt;
        &lt;/dl&gt;&lt;![endif]--&gt;

        &lt;p class="buttons"&gt;
            &lt;h:commandButton action="#{personDetailsBean.savePerson}" value="Save" styleClass="button-default" /&gt;
            &lt;input type="button" class="button-nondefault jqmClose" value="Cancel" /&gt;
        &lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>&lt;/a4j:form>
```</p>

<p><strong>Note:</strong></p>

<ul>
<li>&lt;ldsp:alerts /&gt; - custom component to display Alerts.</li>
<li>The ajaxSubmit attribute on the a4j:form must use a capital S for 'Submit'.  (My code renderer on this page is lowercasing that for some reason.)  Same with the 'r' on 'reRender'.</li>

<h2>Server-side Logic</h2>

<h3>Java Model:</h3>
```java
@Entity
public class Person implements Serializable {
    @Column(name = "PREF_FIRST")
    private String preferredFirstName;

    @Column(name = "PREF_MIDDLE")
    private String preferredMiddleName;

    @Column(name = "PREF_LAST")
    private String preferredLastName;

    @Column(name = "BLOOD_TYPE")
    private String bloodType;

    /** ... */
}
```

<h3>View Bean:</h3>
```java
@Controller
@Scope("conversation")
@SuppressWarnings("serial")
public class PersonDetailsBean implements Serializable {
   public String savePerson() {
       String retval = null;
       try {
            personDetailsService.modifiyPerson(getPerson()); // saves missionary
            retval = "saved-person-edit"; 
       } catch (OptimisticLockException e) {
            Alert.addErrorAlert("Optimistic Lock: The object was modified out from under you.");
       }
       return retval;
   }
   // Method to circumvent IE caching issue
   public long getCurrentMillis() {
       return new Date().getTime();
   }
   /* ... */
}
```


  

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Audit History with Hibernate Interceptor]]></title>
    <link href="http://jaketrent.com/post/audit-history-hibernate-interceptor/"/>
    <updated>2008-10-20T14:17:00-06:00</updated>
    <id>http://jaketrent.com/post/audit-history-hibernate-interceptor</id>
    <content type="html"><![CDATA[<p>Our goal is to create a history audit tool that fires automatically, tracks only selected fields, categorizes those fields, and saves old vs. new data.</p>

<p>We'll cover interceptor config, data types, dependency Injection, and alternate EntityListeners.</p>

<p>The one option that I found that met all these requirements was the Hibernate Interceptor.  There may be better alternatives for you if your requirements differ.</p>

<!--more-->


<p>The interceptor configuration:</p>

<h3>persistence.xml</h3>


<p>You'll find many docs that exist online showing how to configure Hibernate Interceptors.  Virtually none described anything that I had available to me.  In this app, we don't control the SessionFactory or Session's, the two most popular methods of registering your Interceptor.  We only configure the EntityManagerFactory.  I found only one <a href="http://www.hibernate.org/hib_docs/entitymanager/reference/en/html/configuration.html">doc</a> that describes the property available.  Here it is implemented:
```xml
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;persistence xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</p>

<pre><code>xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd"
version="1.0"&gt;
&lt;persistence-unit name="com.jtsnake.tracker" transaction-type="JTA"&gt;
    &lt;!-- ... model objects listed ... --&gt;
    &lt;class&gt;com.jtsnake.tracker.model.Person&lt;/class&gt;
    &lt;exclude-unlisted-classes/&gt;
    &lt;properties&gt;
        &lt;property name="hibernate.ejb.interceptor" value="com.jtsnake.tracker.util.HistoryInterceptor" /&gt;
    &lt;/properties&gt;
&lt;/persistence-unit&gt;
</code></pre>

<p></persistence>
```</p>

<h3>HistoryInterceptor.java</h3>


<p>You'll want to notice a few things:</p>

<ul>
<li>The 'instanceof Historical' is merely an optimization (see below).</li>
<li>FacesContext is required as a workaround for dependency injection.  I couldn't get Spring to auto-inject dependencies as normally done in other classes.  If anyone knows another way, please <a href="#commentform">let me know</a>, because I don't like this method.  All of these dependencies were defined as spring beans elsewhere.  You'll only have available to you what you would have on a JSF page via EL, as seen in the "#{springBean}" expressions.</li>
<li>You may not need to save all of this data, which means that you could simplify the logic in this class.</li>
<li>I could not do a regular entity object .save() for the history entry.  It wasn't available.  I had to make a direct table insert.  I did try the JPA method, however, but I kept getting the SequenceGenerator to fire, selecting nextval's again and again, but the history record was never written.  I, therefore, fell back on direct table insertion.</li>
<li>One thing that tripped me up was the SimpleJdbcTemplate.  Previously, I have just used the JdbcTemplate.  Here, you don't have to specify <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/sql/Types.html">Types</a>, but you'll want to make sure that the types (that will be determined automagically by the platform) of the objects you use for parameters in your insert  map strictly to the database column types.  A useful doc was found <a href="http://java.sun.com/j2se/1.5.0/docs/guide/jdbc/getstart/mapping.html">here</a>.</li>
</ul>


<p>```java
package com.jtsnake.tracker.util;</p>

<p>import org.hibernate.CallbackException;
import org.hibernate.EmptyInterceptor;
import org.hibernate.type.Type;
import com.jtsnake.tracker.model.Historical;
import com.jtsnake.tracker.model.PieceOfHistory;
import com.jtsnake.tracker.model.HistoryChangeType;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.TransactionCallbackWithoutResult;
import org.springframework.transaction.support.TransactionTemplate;
import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;
import org.springframework.dao.DataAccessException;</p>

<p>import javax.el.ValueExpression;
import javax.faces.context.FacesContext;
import javax.persistence.Column;
import java.io.Serializable;
import java.lang.reflect.Field;
import java.util.Date;</p>

<p>public class HistoryInterceptor extends EmptyInterceptor {</p>

<pre><code>@Override
public boolean onFlushDirty(Object entity, Serializable id, Object[] currentState, Object[] previousState, String[] propertyNames, Type[] types) throws CallbackException {

    if (entity instanceof Historical) {

        FacesContext fc = FacesContext.getCurrentInstance();

        if(fc == null) {
            throw new RuntimeException("No FacesContext available. HistoryInterceptor currently only works in faces requests.");
        }

        ValueExpression jdbcVe = fc.getApplication().getExpressionFactory().createValueExpression(fc.getELContext(), "#{simpleJdbcTemplate}", SimpleJdbcTemplate.class);
        final SimpleJdbcTemplate simpleJdbcTemplate = (SimpleJdbcTemplate) jdbcVe.getValue(fc.getELContext());

        ValueExpression txVe = fc.getApplication().getExpressionFactory().createValueExpression(fc.getELContext(), "#{transactionTemplate}", TransactionTemplate.class);
        TransactionTemplate transactionTemplate = (TransactionTemplate) txVe.getValue(fc.getELContext());

        /** ... more dependencies ... */

        for (Field f : entity.getClass().getDeclaredFields()) {
            if (f.isAnnotationPresent(PieceOfHistory.class)) {
                String fieldName = f.getName();
                for (int i = 0; i &lt; propertyNames.length; ++i) {
                    if (propertyNames[i].equals(fieldName)) {
                        if (isChanged(currentState[i], previousState[i]))  {
                            HistoryChangeType type = f.getAnnotation(PieceOfHistory.class).type();
                            saveHistoryEntry(simpleJdbcTemplate,
                                             transactionTemplate,
                                             getNullSafeString(previousState[i]),
                                             getNullSafeString(currentState[i]),
                                             username,
                                             type.toString(),
                                             getColumnName(f),
                                             type.getDefaultMessage(),
                                             getNullSafeLong(personId));
                        }
                    }
                }
            }
        }

    }

    return false;
}


String getColumnName(Field f) {
    String colName = f.getName();
    if (f.isAnnotationPresent(Column.class)) {
        colName = f.getAnnotation(Column.class).name();
    }
    return colName;
}

boolean isChanged(Object currentState, Object previousState) {
    return (previousState == null &amp;&amp; currentState != null) // nothing to something
        || (previousState != null &amp;&amp; currentState == null) // something to nothing
        || (previousState != null &amp;&amp; !previousState.equals(currentState)); // something to something else
}

String getNullSafeString(Object obj) {
    return obj != null ? obj.toString() : "NULL";
}

Long getNullSafeLong(Long l) {
    return l != null ? l : 0L;
}

void saveHistoryEntry(final SimpleJdbcTemplate simpleJdbcTemplate,
                      TransactionTemplate transactionTemplate,
                      final String oldValue,
                      final String newValue,
                      final String username,
                      final String changeType,
                      final String columnName,
                      final String changeMessage,
                      final Long personId) {
    transactionTemplate.execute(new TransactionCallbackWithoutResult() {

@Override
public void doInTransactionWithoutResult(TransactionStatus status) {
           java.sql.Date date = new java.sql.Date(new Date().getTime());
           simpleJdbcTemplate.update(
                "insert into mssw.person_history " +
                    "(           person_id " +
                    ",           modified_date " +
                    ",           username " +
                    ",           type " +
                    ",           msg " +
                    ",           old " +
                    ",           new " +
                    ",           col_name " +
                    ") values (  ?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8 ) ",
                    personId, date, username, changeType, changeMessage, oldValue, newValue, columnName);
        }
});
}
</code></pre>

<p>}
```</p>

<p>The interceptor uses some other classes and interfaces to do it's work:  The check for Historical interface is only an optimization, allowing the code inside to only spin on modifications to classes of interest and not all changes.</p>

<h3>Historical.java</h3>


<p>```java
package com.jtsnake.tracker.model;</p>

<p>public interface Historical {</p>

<pre><code>// marker interface only
</code></pre>

<p>}
```</p>

<p>The PieceOfHistory interface (don't you love the names based on cliche's) is to mark those fields that need to have their changes tracked:</p>

<h3>PieceOfHistory.java</h3>


<p>```java
package com.jtsnake.tracker.model;</p>

<p>import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;</p>

<p>@Target({ElementType.FIELD})
@Retention(RetentionPolicy.RUNTIME)
public @interface PieceOfHistory {</p>

<pre><code>HistoryChangeType type();
</code></pre>

<p>}
```</p>

<p>Important pieces of data are marked in the entity models.  Here's one: Person.java.  Here, you can see that the preferredFirstName field was marked with the PieceOfHistory interface, where the type (a HistoryChangeType to show category) of change is specified.</p>

<h3>Person.java</h3>


<p>```java
package com.jtsnake.tracker.model;</p>

<p>@Entity
@Table(name="person")
@SuppressWarnings("serial")
public class Person implements Serializable, Historical {</p>

<pre><code>@Id
@Column(name="id")
private Long id;

@Length(max = 255, message = "Preferred first name length must be between 0 and 255.")
@Column(name = "pref_first")
@PieceOfHistory(type = HistoryChangeType.PREFERRED_NAME_CHANGE)
private String preferredFirstName;

/** ... other fields ... */
</code></pre>

<p>```</p>

<p>Categorizations are made according a previously determined enum type:</p>

<h3>HistoryChangeType.java</h3>


<p>```java
package com.jtsnake.tracker.model;</p>

<p>public enum HistoryChangeType {</p>

<pre><code>PREFERRED_NAME_CHANGE,
TYPE,
STATUS;
</code></pre>

<p>}
```</p>

<p>There it is!  That's all, and you've got one snappin' audit history tracker.</p>

<p>I would only go the Hibernate Interceptor route if you need the old vs. new values.  All other requirements can be met through the less-complicated and more available JPA EntityListeners.</p>
]]></content>
  </entry>
  
</feed>
