<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jsf | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/jsf/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2015-01-15T10:41:37-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Facelets Template Includes and Params]]></title>
    <link href="http://jaketrent.com/post/facelets-template-includes-and-params/"/>
    <updated>2009-03-24T07:36:00-06:00</updated>
    <id>http://jaketrent.com/post/facelets-template-includes-and-params</id>
    <content type="html"><![CDATA[<p>Facelets is a great template framework that sits on top of JSF.  They have some fun template includes and parameters that you can pass into the included templates.  Here is an example with one gotcha pertaining to the parameter name.</p>

<!--more-->


<p>If I want to do an include and pass in some sort of parameter value, I could do this:</p>

<p><code>xml
&lt;ui:include src="inclusion.xhtml"&gt;
  &lt;ui:param name="ilikebeans" value="true" /&gt;
&lt;/ui:include&gt;
</code></p>

<p>Thus, in the inclusion.xhtml file, I could reference #{ilikebeans}, and the value would be "true".</p>

<p>Parameters can also be included on child templates and then read on parent templates.  Here's an example:</p>

<p>Parent:</p>

<p>```xml
&lt;ui:composition>
  <!-- ... -->
  <ul></p>

<pre><code>&lt;li class="#{tab eq 'info' ? 'selected' : ''}"&gt;Info tab&lt;/li&gt;
</code></pre>

<p>  </ul>
&lt;/ui:composition>
```</p>

<p>Child:</p>

<p><code>xml
&lt;ui:composition template="parent.xhtml"&gt;
  &lt;!-- ... --&gt;
  &lt;ui:param name="tab" value="info" /&gt;
&lt;/ui:composition&gt;
</code></p>

<p>Thus, the child template can have certain values that affect the parent.  As seen in the example, this could be useful for showing certain tabs in a list as selected when that particular page (the child) is shown.</p>

<p>One note on my findings for parameter names...  they cannot have hyphens (-) in the name!  Otherwise, the value does not come thru properly.  Beats me!</p>

<p>Have fun with Facelets!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Loop Index in ui:repeat]]></title>
    <link href="http://jaketrent.com/post/loop-index-uirepeat/"/>
    <updated>2009-02-20T13:56:00-07:00</updated>
    <id>http://jaketrent.com/post/loop-index-uirepeat</id>
    <content type="html"><![CDATA[<p>Sometimes it's useful to know what the invariant value is for your loop within a facelets loop.  I use ui:repeat a lot, but have seen <a href="http://aprilandjake.com/content/jsf-wont-submit-null-uirepeat/">some problems</a> with it in the past.   If you want to get the loop index for your ui:repeat, you may be disappointed.  Basically, it requires that you use a different looping mechanism.  A nice alternative is the a4j:repeat, which offers the same functionality, plus more awesomeness...</p>

<!--more-->


<p>Enough talk, let's fight:</p>

<p>```jsp
&lt;a4j:repeat var="email" id="repeatid" rowKeyVar="idx"</p>

<pre><code>     value="#{collection}"&gt;
</code></pre>

<p>   #{idx},
&lt;/a4j:repeat>
```</p>

<p>If you loop four times, you should get 1,2,3,4,.</p>

<p>Another point of interest on these loops:</p>

<p>If you have jsf components within this a4j:repeat and need to know their exact id, the id on the loop will help this id be more predictable and readable.  For instance, in this situation:</p>

<p>```jsp
&lt;h:form id="formid">
   &lt;ui:repeat id="repeatid"></p>

<pre><code>  &lt;h:inputText id="textid" /&gt;
</code></pre>

<p>   &lt;/ui:repeat>
&lt;/h:form>
```</p>

<p>The id of the h:inputText component would be formid:repeatid:textid.  This is nice to know if you're trying to select dom elements by id in javascript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create Custom Facelets Component]]></title>
    <link href="http://jaketrent.com/post/create-custom-facelets-component/"/>
    <updated>2009-02-20T13:06:00-07:00</updated>
    <id>http://jaketrent.com/post/create-custom-facelets-component</id>
    <content type="html"><![CDATA[<p>Facelets is a great addition to jsf.  It is very extensible, and it makes creating custom components even easier.  It's fantastic.  This is almost TOO easy.  If you have a pile of view markup and/or client-side logic, then this is a good option.  And by good, I mean awesome.</p>

<!--more-->


<p>In memory of a good <a href="http://bentanner.blogspot.com/2009/02/lets-talk-about-sandwiches-baby.html">sandwich post</a>, I present this to you al la phases.</p>

<h4>1. Create stub source file</h4>

<p>This custom component is to wrap together a many-to-many picker than I made <a href="http://aprilandjake.com/content/manytomany-relationships-jsf/">earlier</a>.</p>

<p>```jsp
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;!DOCTYPE html</p>

<pre><code>PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
</code></pre>

<p>&lt;html xmlns="http://www.w3.org/1999/xhtml"</p>

<pre><code>xml:lang="en" lang="en"&gt;
</code></pre>

<p>  &lt;ui:component></p>

<pre><code>&lt;!-- everything here will be in the component --&gt;
</code></pre>

<p>  &lt;/ui:component></p>

<p></html>
```</p>

<h4>2. Create Taglib</h4>

<p>```xml
&lt;?xml version="1.0"?>
&lt;!DOCTYPE facelet-taglib PUBLIC</p>

<pre><code>"-//Sun Microsystems, Inc.//DTD Facelet Taglib 1.0//EN"
"http://java.sun.com/dtd/facelet-taglib_1_0.dtd"&gt;
</code></pre>

<p><facelet-taglib></p>

<pre><code>&lt;namespace&gt;http://www.lds.org/records&lt;/namespace&gt;
&lt;tag&gt;
    &lt;tag-name&gt;largeManyToManyPicker&lt;/tag-name&gt;
    &lt;source&gt;components/large-many-to-many-picker.xhtml&lt;/source&gt;
&lt;/tag&gt;
</code></pre>

<p></facelet-taglib>
```</p>

<h4>3. Implement the component</h4>

<p>```jsp
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;!DOCTYPE html</p>

<pre><code>PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
</code></pre>

<p>&lt;html xmlns="http://www.w3.org/1999/xhtml"</p>

<pre><code>xmlns:ui="http://java.sun.com/jsf/facelets"
xmlns:h="http://java.sun.com/jsf/html"
xmlns:f="http://java.sun.com/jsf/core"
xmlns:r="http://www.jtsnake.com/reallycool"
xml:lang="en" lang="en"&gt;
</code></pre>

<p>  &lt;ui:component></p>

<pre><code>&lt;style type="text/css"&gt;
      .selected-list a {
          display: block;
      }
  &lt;/style&gt;

&lt;h:selectOneMenu id="list-choice" converter="#{entityConverter}"&gt;
  &lt;f:selectItems value="#{r:convertSelectItemList(allChoices)}"/&gt;
&lt;/h:selectOneMenu&gt;
&lt;a class="add-link-icon add-btn" href="#" style="text-decoration:none;" title="Add"&gt;&amp;#160;&lt;/a&gt;
&lt;br/&gt;
&lt;h:selectManyListbox id="many-list" value="#{selectedChoices}"
           converter="#{entityConverter}" style="display:none;" required="#{requireSelection}"
           requiredMessage="#{requiredSelectionMsg}"&gt;
  &lt;f:selectItems value="#{r:convertSelectItemList(allChoices)}"/&gt;
&lt;/h:selectManyListbox&gt;

&lt;div class="selected-list"&gt;
  &lt;ui:repeat var="choose" value="#{selectedChoices}"&gt;
    &lt;a id="cit_#{r:getEntityConverterString(choose)}" class="delete-link-icon"
       href="javascript:removeSelection('#{r:getEntityConverterString(choose)}');"&gt;#{choose.label}&lt;/a&gt;
  &lt;/ui:repeat&gt;
&lt;/div&gt;

&lt;script src="#{request.contextPath}/scripts/jquery.selectboxes.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;
  jQuery(document).ready(initLrgManyPicker);

  function initLrgManyPicker() {
    jQuery(".add-btn").click(function() {
      jQuery("[@id=#{idPrefix}:list-choice]").copyOptions("[@id=#{idPrefix}:many-list]");
      jQuery(".selected-list").append(addSelection());
    });
  }

  function addSelection() {
    var val = jQuery("[@id=#{idPrefix}:list-choice]").selectedValues();
    var label = jQuery("[@id=#{idPrefix}:list-choice]").children("[@selected]").text();
    return "&amp;lt;a id=\"cit_" + val + "\" class=\"delete-link-icon\" href=\"javascript:removeSelection('" + val + "');\"&amp;gt;" + label + "&amp;lt;/a&amp;gt;";
  }

  function removeSelection(poldiv) {
    jQuery("[@id=cit_" + poldiv + "]").remove();
    jQuery("[@id=#{idPrefix}:many-list]").deselectOptions(poldiv);
  }
&lt;/script&gt;
</code></pre>

<p>  &lt;/ui:component>
</html>
```</p>

<h4>4. Use the tag</h4>

<p>```jsp</p>

<!-- ... --->


<dl>
  <dt>Recipients</dt>
  <dd>
    <r:largeManyToManyPicker allChoices="#{bean.emailBean.allRecipients}"
                 selectedChoices="#{email.sendToRecipients}"
                 requiredSelection="false"
                 idPrefix="form:emailrepeat:0" />
  </dd>
</dl>


<!-- ... --->


<p>```</p>

<p>We're throwing in page-level scripts and styles.  We're also linking to one external javascript.  That external file must be available at the stated location.  There's nothing special to ensure that this dependency is loaded otherwise.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSF ValidationError with Custom Converters]]></title>
    <link href="http://jaketrent.com/post/jsf-validationerror-custom-converters/"/>
    <updated>2009-02-10T07:27:00-07:00</updated>
    <id>http://jaketrent.com/post/jsf-validationerror-custom-converters</id>
    <content type="html"><![CDATA[<p>Here's an important tidbit...  JSF does not give any default validators for your data if you use a custom converter.  If you're getting a ValidationError exception, overriding equals and hashcode methods might be a good idea.  For more, read on...</p>

<!--more-->


<p>Here was my code:</p>

<p><code>jsp
&lt;h:selectManyCheckbox id="recipients-grp"
   value="#{email.sendToRecipients}"
   converter="#{entityConverter}"
   layout="pageDirection"&gt;
   &lt;f:selectItems id="recip" value="#{r:convertSelectItemList(emailBean.allRecipients)}"/&gt;
&lt;/h:selectManyCheckbox&gt;
</code></p>

<p>I was seeing a lot of this:</p>

<p><code>java
assignmentCreateForm:j_id47:0:recipients-grp: Validation Error: Value is not valid
</code></p>

<p>It <a href="http://www.crazysquirrel.com/computing/java/jsf/converter-validation-error.jspx">turns out</a> that when you're using a custom converter, which I am (entityConverter), there are no default validators provided by JSF.</p>

<p>This means that you are required to prove to JSF that the objects that you're retrieving from the f:selectItems collection will fit into the h:selectManyCheckbox value you have specified.  In order to help JSF determine the compatibility, you must provide a meaningful hashcode and equals method for your <code>f:selectItems</code> object.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSF Won't Submit Null in ui:repeat]]></title>
    <link href="http://jaketrent.com/post/jsf-wont-submit-null-uirepeat/"/>
    <updated>2008-12-11T14:23:00-07:00</updated>
    <id>http://jaketrent.com/post/jsf-wont-submit-null-uirepeat</id>
    <content type="html"><![CDATA[<p>It stinks when your jsf components don't do what they're supposed to or even what they usually do.    This was the case with my h:inputText field when trying to submit a null value -- but!  only within a ui:repeat component.</p>

<!--more-->


<p>It stinks when your jsf components don't do what they're supposed to or even what they usually do.    This was the case with my h:inputText field when trying to submit a null value -- but!  only within a ui:repeat component.</p>

<p>So, the problem was that I could submit values like clockwork from a h:inputText field.  But, once I submitted a value, I could not submit a blank h:inputText to null out the value.  The old value would keep coming back.</p>

<p>The solution is one of those "I don't know why this worked, but it fixed my problem" solutions.  If anyone has further light and knowledge to shed, that would be appreciated.  Once the h:inputText was removed from inside the ui:repeat that it was wrapped in, it worked like a charm.  So, still needing the repeat, I used a tomahawk dataList.  Were it available to me, I would have preferred an a4j:repeat, because I hear that t:dataList has problems of its own.</p>
]]></content>
  </entry>
  
</feed>
