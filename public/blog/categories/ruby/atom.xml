<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2013-11-14T08:04:42-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debug Ruby and Rails]]></title>
    <link href="http://jaketrent.com/post/debug-ruby-rails/"/>
    <updated>2013-11-14T07:37:00-07:00</updated>
    <id>http://jaketrent.com/post/debug-ruby-rails</id>
    <content type="html"><![CDATA[<p>Interactive debugging can sometimes be faster and more effective in helping you code than a <code>puts</code> statement.  It's easy to get interactive debugging in Ruby or on Rails with the help of a nice gem.</p>

<p><img src="http://i.imgur.com/Z7WWtL0.jpg" alt="Ruby" /></p>

<!--more-->


<h2>No IDE Required</h2>

<p>There are Ruby IDEs that provide interactive debugging capabilities.  My favorite is <a href="http://www.jetbrains.com/ruby/">RubyMine by Jetbrains</a>.  But if you don't have or don't want an IDE, there's still hope.</p>

<h2>Debugger Gem</h2>

<h4>Include the dependency</h4>

<p>My new buddy George showed me a sweet gem simply named <code>debugger</code>.  To use it, I first add the <code>debugger</code> dependency to my <code>Gemfile</code>:</p>

<p>```
source "https://rubygems.org"</p>

<p>gem 'debugger'
```</p>

<h4>Add a breakpoint</h4>

<p>Next, I need to add my "breakpoint" into my code that I'm going to run.  In this case, the breakpoint is defined by calling <code>debugger</code>.  On the same line, we'll also import the <code>debugger</code> library:</p>

<p>```ruby
  # ...
  def is_anagram?</p>

<pre><code>require 'debugger'; debugger
same_length? and different? and has_same_letters?
</code></pre>

<p>  end
```</p>

<h4>Run your code</h4>

<p>In this example, I'm going to break right after I call the <code>is_anagram?</code> method.  From the terminal, now I exercise the code.  In this case, I'll run my unit tests:</p>

<p><code>bash
ruby anagram_test.rb
</code></p>

<h4>Debug like a champ</h4>

<p>And when execution of the script gets to the <code>debugger</code> line, execution will pause and output in my terminal will look something like this:</p>

<p>```ruby
/Users/jake.trent/dev/exercism/ruby/anagram/anagram.rb:13
same_length? and different? and has_same_letters?</p>

<p>[8, 17] in /Users/jake.trent/dev/exercism/ruby/anagram/anagram.rb
   8      @letters2 = @word2.split('')
   9    end
   10
   11    def is_anagram?
   12      require 'debugger'; debugger
=> 13      same_length? and different? and has_same_letters?
   14    end
   15
   16    def has_same_letters?
   17      same_letters = true
(rdb:1)
```</p>

<p>A snippet of my code is shown, an arrow points at line 13, and there's a prompt at the bottom (labeled 'rdb') that you can type in.  <code>debugger</code> gives you a few special commands to type, such as:</p>

<ul>
<li><code>n</code> - next</li>
<li><code>s</code> - step over</li>
<li><code>c</code> - continue</li>
</ul>


<p>These commands should be familiar to almost all debuggers.  The other fabulous thing is that the prompt functions as a sort of <code>irb</code> session from the current context of your code.  So, I can type variable names to see their contents or call functions to see what they'd return.  So, in the case of this code, I could try:</p>

<p><code>bash
(rdb:1) has_same_letters?
true
(rdb:1) @letters2
["s", "t", "a", "n", "d"]
</code></p>

<p>Pretty cool and pretty powerful all for the price of including the library and including a breakpoint in your code.</p>

<p>Are there tools similar to this that you love to use for debugging?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Import Erb Into Karma]]></title>
    <link href="http://jaketrent.com/post/import-erb-into-karma/"/>
    <updated>2013-09-20T16:59:00-06:00</updated>
    <id>http://jaketrent.com/post/import-erb-into-karma</id>
    <content type="html"><![CDATA[<p>Rails asset pipeline allows you to use erb helpers in your CoffeeScript.  You'll still need to bring get these files into Karma runner.  It's really easy.  You just need to get to know your Karma config options.</p>

<p><img src="http://i.imgur.com/i5fJT6j.png" alt="erb files in Karma runner" /></p>

<!--more-->


<h2>erb in JavaScripts</h2>

<p>Why in the world would you want to use erb helpers inside your script files?  You might not.  I definitely think this should be a limited practice.  In some cases, it can be very helpful.  For instance, if you use Ruby/Rails (via <a href="https://github.com/rumblelabs/asset_sync"><code>asset_sync</code></a>) to upload your static assets to an external server, such as S3, you can help your scripts know where static assets live after upload.</p>

<p>So your script might use the <code>asset_path</code> helper and end up looking something like this:</p>

<p>```coffeescript app.coffee.erb
angular.module('app', []).config ($routeProvider) -></p>

<p>  $routeProvider</p>

<pre><code>.when '/admin',
  controller: 'AdminIndexCtrl'
  templateUrl: "&lt;%= asset_path('admin/index.html') %&gt;"
</code></pre>

<p>```</p>

<h2>Import erb Files into Karma</h2>

<p>Well, now you have an <code>app.coffee.erb</code> file.  You need to get it into <a href="http://karma-runner.github.io">Karma runner</a>.  Normally <code>*.coffee</code> files will be brought straight in and compiled automatically by the runner as needed.  In this case, however, the Karma defaults won't recognize the <code>.coffee.erb</code> file as a CoffeeScript file need compilation.</p>

<p>To tell Karma to process your erb file as a CoffeeScript file, add this to your config:</p>

<p>```coffeescript karma.conf.coffee
module.exports = (config) ->
  config.set</p>

<pre><code># ...
preprocessors:
  '**/*.coffee.erb': ['coffee']
  '**/*.coffee': ['coffee']
</code></pre>

<p>```</p>

<p>That's it.  That's the key to getting your Erb files processed into JavaScript and ready for Karma to use.</p>

<p>Now, what are your thoughts on putting your CoffeeScripts through the erb filter of the asset pipeline at all?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Access NodeJs App on Xip.io]]></title>
    <link href="http://jaketrent.com/post/nodejs-app-on-xipio/"/>
    <updated>2013-04-23T07:22:00-06:00</updated>
    <id>http://jaketrent.com/post/nodejs-app-on-xipio</id>
    <content type="html"><![CDATA[<p>Xip.io is a DNS wildcard domain that was initially created for use on Ruby projects.  But its application is desirable across platforms.  Recently, I wanted to use Xip.io on a NodeJs project.  It was easy to make happen.</p>

<p><img src="http://i.imgur.com/PJTnZmM.jpg" alt="xip.io" /></p>

<!--more-->


<h2>Update: Proxying is Built Into Pow</h2>

<p>After having a handful of problems with these home-grown proxies, my search eventually led me to know that Pow 0.4.0+ includes proxying as a built-in feature.  So, you don't need your own <code>config.ru</code> any more.  Once you install pow, choose the port that your app will run on and at what pow address you want to access your app, and run one command in your terminal:</p>

<p><code>
echo 3000 &gt; ~/.pow/myapp
</code></p>

<p>Then you'll access your app, running in the background on port 3000 via the web browser at <code>http://myapp.dev</code>.  Way better.  Skip the rest of this article.</p>

<h2>Install Pow and Powder</h2>

<p>Pow is a development server that uses Xip.io.  Powder is a cli that makes working with Pow even easier.  To start, make sure that <a href="http://www.ruby-lang.org/en/downloads/">Ruby</a> is setup with <a href="http://rubygems.org">Rubygems</a> in your environment.  Then install Pow.  They have a short little install script you can run, as <a href="http://pow.cx/">referenced on the Pow site</a>.</p>

<p>Then install Powder:</p>

<p><code>
gem install powder
</code></p>

<h2>Proxy your NodeJs app</h2>

<p>Pow only knows how to handle Rack apps, so we have to create one to be loaded into Pow.  Since we're writing the guts of our app on another platform -- in this case, Node -- we'll just create a proxy Rack app.</p>

<p>I found a bit of <a href="https://github.com/linjunpop/node-with-pow">proxy app code</a>, which you should save in your project root as <code>config.ru</code>, and which I paste here:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;net/http&quot;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class ProxyApp</span>
</span><span class='line'><span class="sr">  def call(env)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">begin</span>
</span><span class='line'>  <span class="n">request</span> <span class="o">=</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Request</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>  <span class="n">headers</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="n">env</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">key</span> <span class="o">=~</span> <span class="sr">/^http_(.*)/i</span>
</span><span class='line'>      <span class="n">headers</span><span class="o">[</span><span class="vg">$1</span><span class="o">]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">http</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">3000</span><span class="p">)</span>
</span><span class='line'>  <span class="n">http</span><span class="o">.</span><span class="n">start</span> <span class="k">do</span> <span class="o">|</span><span class="n">http</span><span class="o">|</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">send_request</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">request_method</span><span class="p">,</span> <span class="n">request</span><span class="o">.</span><span class="n">fullpath</span><span class="p">,</span> <span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">read</span><span class="p">,</span> <span class="n">headers</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span><span class="n">response</span><span class="o">.</span><span class="n">code</span><span class="p">,</span> <span class="n">response</span><span class="o">.</span><span class="n">to_hash</span><span class="p">,</span> <span class="o">[</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="o">]]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ECONNREFUSED</span>
</span><span class='line'>  <span class="o">[</span><span class="mi">500</span><span class="p">,</span> <span class="p">{},</span> <span class="o">[</span><span class="s2">&quot;Server is down, try $npm start&quot;</span><span class="o">]]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">run</span> <span class="no">ProxyApp</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The only change you might have to make is the port number for your app (line 13).  In this case, I'm using port 3000 for my NodeJs app.</p>

<h2>Link Your App</h2>

<p>Now all we have to do is link our app to Pow.  Powder helps us do this easily.  Go to your project root directory and type:</p>

<p><code>
powder link &lt;project_name&gt;
</code></p>

<p>Now run your app with whatever command starts NodeJs.  It's probably something like this:</p>

<p><code>
node app.js
</code></p>

<p>Now you should be able to access your app via your web browser at <code>http://&lt;project_name&gt;.dev</code>.  One of the great things about Xip.io is that it makes running your local app <a href="http://jaketrent.com/post/run-pow-server-on-vm/">extremely easy from a local Virtual machine</a> as well.  To get the address of your app to use in your VM, type this from your native terminal:</p>

<p><code>
powder open --xip
</code></p>

<p>And copy the resulting URL into your VM web browser.</p>

<p>Ah, the fusion of Node and Ruby is pretty sweet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mountain West Ruby Conf 2013 Review]]></title>
    <link href="http://jaketrent.com/post/mountain-west-ruby-conf-2013-review/"/>
    <updated>2013-04-05T15:23:00-06:00</updated>
    <id>http://jaketrent.com/post/mountain-west-ruby-conf-2013-review</id>
    <content type="html"><![CDATA[<p>I recently attended the Mountain West Ruby Conference.  It was my first time going.  I was pleasantly surprised by the quality of the conference.  I would recommend it.</p>

<p><img src="http://i.imgur.com/ABNr5MC.jpg" alt="Mountain West Ruby Conf" /></p>

<!--more-->


<h2>Peeps</h2>

<p>I'm new to the Ruby community.  I get to use it more in my current job than I ever have before.  Whenever entering a new community, it's good to find some friends.  I was pleased to notice that everyone I encountered at the conference was very friendly and welcoming.</p>

<p>About the coolest thing about the community is one of the slogans: MINSWAN, which means "Matz is nice, so we are nice."  How cool is that?  Matz is the Ruby creator.  Wait, who am I kidding.  You already know that.</p>

<p>I was very impressed with the blatant lack of trolling other communities.  This even with the live stream video cameras rolling (people can tend to do weird things when put on camera).</p>

<p>The conference attracted speakers and attendees from as far away as Australia.</p>

<h2>Speakers</h2>

<p>I didn't look too closely at the schedule previous to attending.  Once I got there, I was surprised at the caliber of those people and companies who were represented.  These were big names in the tech community, such as Matz, himself, Github, Heroku, and others.</p>

<p>The conference is single track, so that meant I got to see everyone speak.  I mostly like that but kind of hate that.  I believe it also meant fewer speaking slots, so everyone was pretty top notch.</p>

<p>I was impressed with the stage presence of most speakers.  A few were pretty droning, but in general everyone was very polished, had good slide decks, and shared engaging and useful content.</p>

<p>Devops was the stated subject matter of an entire day of the conference.  This was cool.  We can use that kind of focus on the subject.  But then it bled into the next days as well.  I want some pure code, pure Ruby'ness.  I got some of that, but not as much as I would like.  I paid my devops dues the first day.  I was ready to not hear any more of it on days 2 and 3.</p>

<h2>Venue</h2>

<p>It was in my back yard!  I loved the lack of a hotel requirement!  Apparently some visitors even camped in the wilderness, Nacho style.</p>

<p>The Salt Lake City Public Library is a great downtown location for a small conference.  In this case, with the conference being single track, the single largest room, the amphitheatre, was the only room required for all attendees.  It featured plenty of seating -- at the cost of no leg room.</p>

<p>The wifi also held up better than it has for similar gatherings in this space.  It was announced that "the city and Xmission are working feverishly" to maintain connectivity several times over the 3 days.  It still didn't stay up.  This is a common tech conf occurrence.</p>

<p>I was sorely disappointed with the lack of sugary confections meant to encourage the jollyness and attentiveness of the conference-goers.  At one point, it was necessary to slip out and find a good bakery downtown.  I was not disappointed.  I was happy to see at least the vendors' vinyl stickers come out on the last day.  We need more of that!</p>

<p>In all, it was a good use of my couple days.  It wasn't too pricey, but then, I wasn't paying.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serve Json from Sinatra]]></title>
    <link href="http://jaketrent.com/post/serve-json-from-sinatra/"/>
    <updated>2013-02-26T07:18:00-07:00</updated>
    <id>http://jaketrent.com/post/serve-json-from-sinatra</id>
    <content type="html"><![CDATA[<p>By default, Sinatra knows how to serve up a rendered html page.  With a slight tweak, we can make it spit out Json too!</p>

<p><img src="http://i.imgur.com/ZyCgi56.jpg" alt="JSON on Sinatra" /></p>

<!--more-->


<h2>Data Format of the Web</h2>

<p>Json is my favorite data format for web applications.  Really, who wouldn't want their webservice to expose Json?  It's mucho useful.</p>

<p>First, add a line to the <code>Gemfile</code> that makes a Json helper method available to Sinatra:</p>

<p><code>ruby
gem "sinatra-contrib"
</code>
Next, all you need to do is query the data that you want to return and actually return it, as in:</p>

<p>```ruby
require "sinatra/json"</p>

<p>get "/my-models" do
  json MyModel.all
end
```</p>

<p>The <code>json</code> helper will then serialize your objects into Json, much to the delight of your clients!</p>
]]></content>
  </entry>
  
</feed>
