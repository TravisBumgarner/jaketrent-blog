<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2013-02-06T08:04:55-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rename Files in Rails Asset Pipeline]]></title>
    <link href="http://jaketrent.com/post/rename-files-in-asset-pipeline/"/>
    <updated>2013-02-06T07:06:00-07:00</updated>
    <id>http://jaketrent.com/post/rename-files-in-asset-pipeline</id>
    <content type="html"><![CDATA[<p>Rails provides a powerful mechanism for preparing your site's static assets for the web.  It's called the asset pipeline.  True to Rails, it has sensible defaults.  Also true to form, it's not immediately clear what's required to change from the defaults.</p>

<p><img src="http://i.imgur.com/HPJDXPB.jpg" alt="Asset Pipeline" /></p>

<!--more-->


<h2>Multiple Compilers</h2>

<p>The asset pipeline has the ability to pass your static assets through multiple compilers.  Thus, they seem much less static than they might be.  The compilers used are determined by the file extension.  For instance, this file:</p>

<p><code>
myscripts.js.coffee.erb
</code></p>

<p>Will go through the Erb compiler first, then the Coffeescript compiler, then finally will output pure JavaScript.</p>

<p>Changing these files are no problem.  Want a new compiler?  Slap on a new file extension.  Don't need one?  Remove it.</p>

<h2>Manifest File</h2>

<p>Manifest files are full of Sprocket directives.  Sprockets will use these files to combine and minify your css and js.  A manifest will look something like this:</p>

<p><code>
//= require vendor/jquery
//= require vendor/angular.min
//= require vendor/angular-cookies
</code></p>

<p>These directives identify what files will eventually be combined, replacing the contents of your manifest file in the final output.</p>

<p>If you change the name of scripts or stylesheets, you need to ensure that your manifest file is changed to match.  Otherwise, asset precompilation will fail.</p>

<p>By default the manifest filenames are these:</p>

<p><code>
app/assets/javascripts/application.js
app/assets/stylesheets/application.css
</code></p>

<h2>Changing Manifest Filenames</h2>

<p>Changing the manifest default filenames will require some tweaking.</p>

<p>For instance, if I change application.js to be split into two separate manifest files, <code>scripts-foot.js</code> and <code>scripts-head.js</code>, the next time I run:</p>

<p><code>
rake assets:precompile
</code></p>

<p>It will succceed, and everything will look like it's just fine.  But when I go to run the app, it will give my an error like:</p>

<p>```
ActionView::Template::Error (scripts-head.js isn't precompiled):</p>

<p>2013-02-04T16:24:05+00:00 app[web.1]: app/views/layouts/application.html.erb:14:in `_app_views_layouts_application_html_erb__3761578772688930207_28706600'
```</p>

<p>When you switch from the default manifest files or when you reference a static asset like a js or css directly from your view, you'll need to mark it as explicitly requiring precompilation.</p>

<p>This is done in an environment file, such as <code>config/environments/production.rb</code>:</p>

<p>```ruby</p>

<h1>Precompile additional assets (application.js, application.css, and all non-JS/CSS are already added)</h1>

<p>config.assets.precompile += %w( scripts-foot.js scripts-head.js )
```</p>

<p>It's that easy.  It's too bad you have to wait until the app runs to discover this is a problem.  But now you're ready.</p>

<p>Now if we could only customize the directory structure under <code>app/assets</code>.  I would much rather use the path <code>js/</code> instead of <code>javascripts/</code>.  Does anyone know how?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run a Pow Server on a VM]]></title>
    <link href="http://jaketrent.com/post/run-pow-server-on-vm/"/>
    <updated>2013-01-31T16:14:00-07:00</updated>
    <id>http://jaketrent.com/post/run-pow-server-on-vm</id>
    <content type="html"><![CDATA[<p>It's really pretty cool how easy <a href="http://pow.cx/">Pow</a> makes running a Rails server.  <a href="https://github.com/rodreegez/powder">Powder</a> makes it even easier.  Here's how to run your Rails server via Pow on a VM in order to test IE.</p>

<p><img src="http://i.imgur.com/XdExdtS.jpg" alt="Pow Server" /></p>

<!--more-->


<h2>Install Pow</h2>

<p>Get your Ruby environment otherwise setup for Rails dev. Then install <a href="http://pow.cx/">Pow</a>.  It's a nice little utility created by the folks at 37 Signals.  They have a short little install script you can run, as <a href="http://pow.cx/">referenced on the Pow site</a>.  Or, you can use a utility created to make it <em>even easier</em> -- <a href="https://github.com/rodreegez/powder">powder</a>.</p>

<p>To install, you'll need <a href="http://rubygems.org">Rubygems</a> installed, and run:</p>

<p><code>
$ gem install powder
</code></p>

<p>Then link your project to Pow via the command:</p>

<p><code>
$ cd &lt;my_proj_dir&gt;
$ powder link
</code></p>

<p>Make sure Pow is running:</p>

<p><code>
$ powder up
</code></p>

<p>And access your Pow-powered site by going to your project's address in your browser:</p>

<p><code>
http://&lt;my_project_dir&gt;.dev
</code></p>

<p>There are other options in the <code>powder link</code> step.  For instance, if you want to access your site through an http address different than <code>&lt;my_proj_dir&gt;</code> you can specify that.</p>

<h2>Install your VM</h2>

<p>There are a few different VM options.  My favorite is <a href="http://virtualbox.org">VirtualBox</a>.  It does hurt a bit seeing the "Oracle" moniker on it, but I've found it to be as responsive as a VM can be and generally stable.</p>

<h2>Install Internet Explorer</h2>

<p>There really wasn't another reason that you wanted a Windows VM was there?</p>

<p>I've had good success with  the project <a href="https://github.com/xdissent/ievms">xdissent/ievms</a>.  To download the IE-ready images, the README invites us to run this script in our shell:</p>

<p><code>
curl -s https://raw.github.com/xdissent/ievms/master/ievms.sh | bash
</code></p>

<p>It will download multiple parts of several Windows/IE VM images into <code>~/.ievms</code> and install them so they're ready to roll with VirtualBox.  Run this way, images for Internet Explorer 6, 7, 8, and 9 are all downloaded.  If you wanted to just download IE 9, you could run:</p>

<p><code>
curl -s https://raw.github.com/xdissent/ievms/master/ievms.sh | IEVMS_VERSIONS="9" bash
</code></p>

<p>Either way, this download takes quite a while to complete, but the shell script that's running it takes pretty good care of you, restarting on the last incomplete download part.</p>

<h2>Access Pow via VirtualBox</h2>

<p>Accessing Pow in the VM isn't bad at all.  Pow makes use of <a href="http://xip.io">xip.io</a>, which provides a wildcard DNS entry used by Pow and thus your app.</p>

<p>For the <a href="http://pow.cx/manual.html#section_2.1.5">next step</a>, take note of your IP by running <code>ifconfig</code>.  Then from IE inside of VirtualBox, point your browser at:</p>

<p><code>
http://&lt;my_proj_dir&gt;.&lt;my_ip&gt;.xip.io
</code></p>

<p>And you should see your project running in the VM just as you do from your better, native OS.  Pow!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress vs. WordPress]]></title>
    <link href="http://jaketrent.com/post/octopress-vs-wordpress/"/>
    <updated>2012-11-12T16:42:00-07:00</updated>
    <id>http://jaketrent.com/post/octopress-vs-wordpress</id>
    <content type="html"><![CDATA[<p>Why would one choose Octopress over WordPress?  What are the pros and cons?  I've recently implemented a blog -- this blog -- in WordPress.  It was a difficult decision for me.  At the time, I looked at Octopress, but I was jazzed by the success of others on WordPress, and I wanted to try it out.  I'm glad that I did try it out, but now I'm glad that I've switched to Octopress.  Here's why.</p>

<p><img src="http://i.imgur.com/uACBn.jpg" alt="Octopress" /></p>

<!--more-->


<h2>Just Posts</h2>

<p>Octopress is so dead simple, it just makes sense.  The post is a file in a folder.  I edit it in my current favorite MarkDown editor, <a href="http://mouapp.com/">Mou</a>.  The workflow is thus very easy.  I'm not transferring my post which I wrote offline to a web interface only available online.</p>

<h2>Nerd Cred</h2>

<p>Nerd cred or geek cred?  I don't know, but Octopress bumps it right up.  As it says, it's a "blogging framework for hackers".  Given that I'm a creator of software and that's the main topic of my blog, it seems fitting, doesn't it.  Plenty of coders have WordPress sites, I suppose.  Still, I didn't feel super awesome about running a WordPress PHP site as my home base.</p>

<h2>Performance</h2>

<p>The whole idea of a generated static site seems genius.  It's blazing fast.  I'm on Heroku.  Currently, my site experiences very low volume traffic.  With one dyno, when the site goes without traffic for a certain amount of time, Heroku will power down the dyno.  WordPress takes a fair bit to come back up on the first request after that.  Octopress, no problem.  Pops back like it was never gone.  And why not?  There's really nothing to spin up.</p>

<h2>No Reinvention</h2>

<p>I landed on Octopress for one of the same reasons I initially chose WordPress for this new blog.  It is a ready-made blogging platform.  I don't need to reinvent the wheel.  It works, and it works well.</p>

<h2>A Bit of Customization</h2>

<p>I chose WordPress for the blog because I wanted to write blog posts, not tinker with the innards of the site.  (I do that plenty elsewhere.)  But it turns out that I couldn't quite bare just using an out-of-the-box theme.  I literally needed to add my own flair and customizations.  I still want to keep that to a minimum.  Octopress' classic theme (the only one?) is fantastic -- clean and crisp.  When I want to make a few changes, it's a much more straight-forward task to find the place that needs editing and get it done.</p>

<h2>Ruby</h2>

<p>I've hardly done any Ruby.  Octopress is an easy little touch of Ruby.  I don't have to mess with it unless I want to.  Ruby is much more appealing to me than PHP.</p>

<h2>Plugin Pluses</h2>

<p>When I chose WordPress, I figured that if there was any feature that I desired, there was probably already a plugin for it.  And that turned out to be true.  Octopress certainly <a href="https://github.com/imathis/octopress/wiki/3rd-party-plugins">has fewer options</a>.  But on the whole, I think they cater well to the coder crowd.</p>

<h2>For Now</h2>

<p>So, for now, I'm on Octopress.  It's nice to think that my data is just a folder of files that I could really recreate anywhere.  So, we'll see how long this lasts.  So far, it's a blogging platform for this hacker, and I'm liking it.</p>
]]></content>
  </entry>
  
</feed>
