<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2014-01-03T07:57:39-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Define Methods Dynamically in Ruby]]></title>
    <link href="http://jaketrent.com/post/define-dynamic-methods-ruby/"/>
    <updated>2013-11-26T07:28:00-07:00</updated>
    <id>http://jaketrent.com/post/define-dynamic-methods-ruby</id>
    <content type="html"><![CDATA[<p>In Ruby, it's common to see new methods defined dynamically or on the fly for your class.  And who doesn't want to have a piece of that metaprogramming?</p>

<p><img src="http://i.imgur.com/Z7WWtL0.jpg" alt="Ruby" /></p>

<!--more-->


<h2>An Example</h2>

<p>For example, I just finished an <a href="/post/exercism-review/">exercism code exercise</a> where I felt like there was a fair bit of code duplication.  I had a bunch of convenience functions that would show the conversion of a time in earth time to a time specific to a planet.  So, the API required something that looked something like this:</p>

<p>```ruby
class SpaceAge</p>

<p>  def on_earth</p>

<pre><code>seconds_on_planet :earth
</code></pre>

<p>  end</p>

<p>  def on_mercury</p>

<pre><code>seconds_on_planet :mercury
</code></pre>

<p>  end</p>

<p>  def on_venus</p>

<pre><code>seconds_on_planet :venus
</code></pre>

<p>  end</p>

<p>  # ...
end
```</p>

<p>Feeling that this might be an excessive number of similarly pattern methods, I considered ways that the API might stay in tact but the effort of maintenance of these many functions might be decreased.</p>

<h2><code>define_method</code></h2>

<p>We could collapse these methods quite a bit in the visual code by defining them dynamically, using <code>define_method</code>:</p>

<p>```ruby
class SpaceAge
  def self.on_planets(*planets)</p>

<pre><code>planets.each do |planet|
  define_method "on_#{planet}" do
    seconds_on_planet planet
  end
end
</code></pre>

<p>  end</p>

<p>  on_planets :earth, :mercury, :venus, :mars, :jupiter, :saturn, :uranus, :neptune
end
```</p>

<p>The exact same code would be generated.  It's better! But it's worse!  It's actually less readable than before.  <code>on_planets</code> as a new helper API might be nice.  But, we're not currently using this anywhere else.  The code is probably more maintainable, but it's also more stiff.  Previously, each of the methods was separate and therefore separately modifiable and customizable.  Now, there's one implementation of an "on_#{planet}" method.  This could be easier/harder to deal with, depending.  I think the readability is better because of the smaller amount of code, but the readability is worse because of the increased complexity and eye parsing required.  In the end, for my code, I stayed with the original solution for its 5-star readability.</p>

<p>But the ability to define methods dynamically is super awesome.  When do you find yourself using this super power?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Call Dynamic Method in Ruby]]></title>
    <link href="http://jaketrent.com/post/ruby-call-dynamic-method/"/>
    <updated>2013-11-25T07:10:00-07:00</updated>
    <id>http://jaketrent.com/post/ruby-call-dynamic-method</id>
    <content type="html"><![CDATA[<p>I love Ruby's syntax for method calls.  The syntax for calling dynamic methods is pretty nice, and it's easily mastered.</p>

<p><img src="http://i.imgur.com/Z7WWtL0.jpg" alt="Ruby" /></p>

<!--more-->


<h2><code>send</code> method</h2>

<p>The <code>send</code> method is one of the best and most basic ways to call a method dynamically on your object.  Let's say we have an object with multiple methods like this:</p>

<p>```ruby
class Fezzik
  def show_sportsmanship
  end</p>

<p>  def be_colossus_for(person_1, person_2=nil, person_3=nil)
  end
end
```</p>

<p>The method you want to call might be represented as a string or a symbol.  Your method call might look like this:</p>

<p>```ruby
Fezzik.new.send(:show_sportsmanship)</p>

<h1>or</h1>

<p>Fezzik.new.send("show_sportsmanship")
```</p>

<h2>Calling <code>send</code> with parameters</h2>

<p>Now, some of your methods might have parameters.  How are those called?  Simply pass the argument values into the <code>send</code> call as the final argument, which is a variable length argument:</p>

<p><code>ruby
just_one_person = Person.new
Fezzik.new.send(:be_colossus_for, just_one_person)
</code></p>

<p>You can also pass the parameters as a splat array, such as this:</p>

<p><code>ruby
people = [Person.new, Person.new, Person.new]
Fezzik.new.send(:be_colossus_for, *people)
</code></p>

<p>In Ruby, the splat operator destructures the array into parameters, so the above code essentially becomes:</p>

<p><code>ruby
people = [Person.new, Person.new, Person.new]
Fezzik.new.send(:be_colossus_for, people[0], people[1], people[2])
</code></p>

<p>So, <code>send</code> turns out to be pretty easy to deal with and really useful.  Use it, and be happy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exercism Review]]></title>
    <link href="http://jaketrent.com/post/exercism-review/"/>
    <updated>2013-11-19T07:29:00-07:00</updated>
    <id>http://jaketrent.com/post/exercism-review</id>
    <content type="html"><![CDATA[<p>Exercism.io is a fantastic site and tool that provides a wealth of daily code exercises.  If you want to learn to be better in a language, it's a great resource to do exercises and receive feedback.</p>

<p><img src="http://i.imgur.com/2oAEqBZ.jpg" alt="Exercism" /></p>

<!--more-->


<h2>Origin</h2>

<p><a href="http://exercism.io">Exercism.io</a> was introduced to me by Franklin Webber of gSchool and JumpStart Labs fame.  He and his colleagues use it as a part of their instruction, and it's a great, free tool available to the public.</p>

<h2>Languages</h2>

<p>There is a fun array of language-learning possibilities inside Exercism.  It currently includes a varying number of exercises across these languages:</p>

<ul>
<li>clojure</li>
<li>elixir</li>
<li>haskell</li>
<li>javascript</li>
<li>objective-c</li>
<li>python</li>
<li>ruby</li>
<li>scala</li>
</ul>


<p>I'm currently running through the Ruby exercises.</p>

<h2>Starting Point</h2>

<p>Based on what I've seen of the Ruby and JavaScript exercises, I don't think that Exercism's exercises are meant for an absolute beginner.  Some basic knowledge of the programming language is assumed and required.  You'll start a little deep if you know next to nothing.  These exercises are meant to expand your exposure to and understanding of language features.</p>

<h2>Installation</h2>

<p>Installation consists of a few things:</p>

<ol>
<li>Go to <a href="http://exercism.io">exercism.io</a> and register using your Github credentials.</li>
<li>While on the site, download the CLI.  It's a pre-built binary that you just need to put somewhere that is tied to your system PATH.  That way you can execute it from the terminal.</li>
<li>Setup your environment for the language you'll be learning.  Again, this information is on the site.  None of the environments are automatic in their setup, and you must follow the written steps to be ready to develop in your weapon, er language of choice.</li>
</ol>


<h2>Your First Exercise</h2>

<p>After installation, you're ready for your first exercise.  On the terminal, type:</p>

<p><code>bash
exercism fetch
</code></p>

<p>This will download fresh exercises at the head of each of your language paths.  At first, you'll start on exercise 0 of each of the language paths.  Now, choose a language.  I chose Ruby first.  The first exercise was called <code>bob</code>.  Bob is a lackadaisical teenager who responds with smart remarks to whatever somewhat says to him.  Typical.</p>

<p>Bob comes with a suite of failing tests.  All the tests are written, and it's up to use to write the code that actually makes Bob function and the tests pass.  This is literally TDD or test-driven development, and yay for us, someone has already written the tests!  In the case of Ruby, the tests are written in a MiniTest syntax.  To run them, I'm typing:</p>

<p><code>bash
ruby bob_test.rb
</code></p>

<p>This is where I think we might be able to have a bit of a better setup with the exercises.  It would be nice to have the tests automatically run on a file watch as opposed to having to run them each time manually.  For this, I personally setup <code>guard-minitest</code>.  I would recommend the same.  Of course, I can only think that Exercism doesn't do this by default in order to simplify the environment setup process.</p>

<h2>Nitpicking</h2>

<p>After you complete your first exercise in some form by getting all the tests to pass, you can submit it to the site for feedback.  For example:</p>

<p><code>bash
exercism submit ruby/bob/bob.rb
</code></p>

<p>The CLI will give you a link to your now-online code, and you can go there to see your submission.  Others who have completed the same exercise will also be able to see your solution.  And this is one of the coolest potentials of Exercism.  Others can give you feedback on your solution, called "nitpicks" by default.  This is a great learning opportunity.  We are ready to take feedback given from the perspective of others in their experience with the language.  We can also give feedback, training our eye to be more critical in our observation and future writing of code.  It feels like a great outcome and a great potential community.</p>

<p>I have given nitpicks.  Of course, that's easier to do.  But, I am sad to say that I have never received any.  It's hard to tell how active the community really is.  I see quite a few submissions, but there are definitely fewer nitpicks than submissions.  There's quite a bit untapped community learning potential here.  To help this, I wish the system allowed you to unlock the next exercise in your language path without closing opportunity for nitpicks on submitted exercises.</p>

<p>So, have you used Exercism.io before?  Do you know of similar sites?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Save a Gem to Gemfile from Terminal]]></title>
    <link href="http://jaketrent.com/post/save-gem-to-gemfile-from-terminal/"/>
    <updated>2013-11-18T07:54:00-07:00</updated>
    <id>http://jaketrent.com/post/save-gem-to-gemfile-from-terminal</id>
    <content type="html"><![CDATA[<p>Have you ever wished you could save a gem to your <code>Gemfile</code> straight from the command line?  I wish Rubygems had this built in, but it's easy to add.  After all, there's a gem for that.</p>

<p><img src="http://i.imgur.com/x2I31sl.jpg" alt="Gemrat" /></p>

<!--more-->


<h2>From npm</h2>

<p>Coming from Node/Npm previous to Ruby/Rubygems, I wished I could do something like this:</p>

<p><code>bash
npm install express --save
</code></p>

<p>This would take my specified npm module and append it to the end of my <code>package.json</code> dependencies list.</p>

<p>There is no equivalent for this built into Rubygems.</p>

<h2>Gemrat</h2>

<p>But, there is a mutant beast that skulks through the gem-lined sewers of Rubyland -- and it's name is <code>gemrat</code>!  What a great, image-provoking name.  Once you install <code>gemrat</code>, you will have the power of 20 npms at your fingertips.</p>

<p>First, install it:</p>

<p><code>bash
gem install gemrat
</code></p>

<p>Next, decide what gem you want to save to your <code>Gemfile</code>.  Let's choose a gem of a gem to try called <code>guard</code>:</p>

<p><code>bash
gemrat guard
</code></p>

<p>Now, install the dependencies listed in your <code>Gemfile</code>:</p>

<p><code>bash
bundle install
</code></p>

<p>Kaboom.  You have learned the secrets of the Fire Swamp and could live there for some time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug Ruby and Rails]]></title>
    <link href="http://jaketrent.com/post/debug-ruby-rails/"/>
    <updated>2013-11-14T07:37:00-07:00</updated>
    <id>http://jaketrent.com/post/debug-ruby-rails</id>
    <content type="html"><![CDATA[<p>Interactive debugging can sometimes be faster and more effective in helping you code than a <code>puts</code> statement.  It's easy to get interactive debugging in Ruby or on Rails with the help of a nice gem.</p>

<p><img src="http://i.imgur.com/Z7WWtL0.jpg" alt="Ruby" /></p>

<!--more-->


<h2>No IDE Required</h2>

<p>There are Ruby IDEs that provide interactive debugging capabilities.  My favorite is <a href="http://www.jetbrains.com/ruby/">RubyMine by Jetbrains</a>.  But if you don't have or don't want an IDE, there's still hope.</p>

<h2>Debugger Gem</h2>

<h4>Include the dependency</h4>

<p>My new buddy George showed me a sweet gem simply named <code>debugger</code>.  To use it, I first add the <code>debugger</code> dependency to my <code>Gemfile</code>:</p>

<p>```
source "https://rubygems.org"</p>

<p>gem 'debugger'
```</p>

<h4>Add a breakpoint</h4>

<p>Next, I need to add my "breakpoint" into my code that I'm going to run.  In this case, the breakpoint is defined by calling <code>debugger</code>.  On the same line, we'll also import the <code>debugger</code> library:</p>

<p>```ruby
  # ...
  def is_anagram?</p>

<pre><code>require 'debugger'; debugger
same_length? and different? and has_same_letters?
</code></pre>

<p>  end
```</p>

<h4>Run your code</h4>

<p>In this example, I'm going to break right after I call the <code>is_anagram?</code> method.  From the terminal, now I exercise the code.  In this case, I'll run my unit tests:</p>

<p><code>bash
ruby anagram_test.rb
</code></p>

<h4>Debug like a champ</h4>

<p>And when execution of the script gets to the <code>debugger</code> line, execution will pause and output in my terminal will look something like this:</p>

<p>```ruby
/Users/jake.trent/dev/exercism/ruby/anagram/anagram.rb:13
same_length? and different? and has_same_letters?</p>

<p>[8, 17] in /Users/jake.trent/dev/exercism/ruby/anagram/anagram.rb
   8      @letters2 = @word2.split('')
   9    end
   10
   11    def is_anagram?
   12      require 'debugger'; debugger
=> 13      same_length? and different? and has_same_letters?
   14    end
   15
   16    def has_same_letters?
   17      same_letters = true
(rdb:1)
```</p>

<p>A snippet of my code is shown, an arrow points at line 13, and there's a prompt at the bottom (labeled 'rdb') that you can type in.  <code>debugger</code> gives you a few special commands to type, such as:</p>

<ul>
<li><code>n</code> - next</li>
<li><code>s</code> - step over</li>
<li><code>c</code> - continue</li>
</ul>


<p>These commands should be familiar to almost all debuggers.  The other fabulous thing is that the prompt functions as a sort of <code>irb</code> session from the current context of your code.  So, I can type variable names to see their contents or call functions to see what they'd return.  So, in the case of this code, I could try:</p>

<p><code>bash
(rdb:1) has_same_letters?
true
(rdb:1) @letters2
["s", "t", "a", "n", "d"]
</code></p>

<p>Pretty cool and pretty powerful all for the price of including the library and including a breakpoint in your code.</p>

<p>Are there tools similar to this that you love to use for debugging?</p>
]]></content>
  </entry>
  
</feed>
