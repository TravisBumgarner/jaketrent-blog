<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2013-08-13T20:39:03-06:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Access NodeJs App on Xip.io]]></title>
    <link href="http://jaketrent.com/post/nodejs-app-on-xipio/"/>
    <updated>2013-04-23T07:22:00-06:00</updated>
    <id>http://jaketrent.com/post/nodejs-app-on-xipio</id>
    <content type="html"><![CDATA[<p>Xip.io is a DNS wildcard domain that was initially created for use on Ruby projects.  But its application is desirable across platforms.  Recently, I wanted to use Xip.io on a NodeJs project.  It was easy to make happen.</p>

<p><img src="http://i.imgur.com/PJTnZmM.jpg" alt="xip.io" /></p>

<!--more-->


<h2>Update: Proxying is Built Into Pow</h2>

<p>After having a handful of problems with these home-grown proxies, my search eventually led me to know that Pow 0.4.0+ includes proxying as a built-in feature.  So, you don't need your own <code>config.ru</code> any more.  Once you install pow, choose the port that your app will run on and at what pow address you want to access your app, and run one command in your terminal:</p>

<p><code>
echo 3000 &gt; ~/.pow/myapp
</code></p>

<p>Then you'll access your app, running in the background on port 3000 via the web browser at <code>http://myapp.dev</code>.  Way better.  Skip the rest of this article.</p>

<h2>Install Pow and Powder</h2>

<p>Pow is a development server that uses Xip.io.  Powder is a cli that makes working with Pow even easier.  To start, make sure that <a href="http://www.ruby-lang.org/en/downloads/">Ruby</a> is setup with <a href="http://rubygems.org">Rubygems</a> in your environment.  Then install Pow.  They have a short little install script you can run, as <a href="http://pow.cx/">referenced on the Pow site</a>.</p>

<p>Then install Powder:</p>

<p><code>
gem install powder
</code></p>

<h2>Proxy your NodeJs app</h2>

<p>Pow only knows how to handle Rack apps, so we have to create one to be loaded into Pow.  Since we're writing the guts of our app on another platform -- in this case, Node -- we'll just create a proxy Rack app.</p>

<p>I found a bit of <a href="https://github.com/linjunpop/node-with-pow">proxy app code</a>, which you should save in your project root as <code>config.ru</code>, and which I paste here:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;net/http&quot;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class ProxyApp</span>
</span><span class='line'><span class="sr">  def call(env)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">begin</span>
</span><span class='line'>  <span class="n">request</span> <span class="o">=</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Request</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>  <span class="n">headers</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="n">env</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">key</span> <span class="o">=~</span> <span class="sr">/^http_(.*)/i</span>
</span><span class='line'>      <span class="n">headers</span><span class="o">[</span><span class="vg">$1</span><span class="o">]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">http</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">3000</span><span class="p">)</span>
</span><span class='line'>  <span class="n">http</span><span class="o">.</span><span class="n">start</span> <span class="k">do</span> <span class="o">|</span><span class="n">http</span><span class="o">|</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">send_request</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">request_method</span><span class="p">,</span> <span class="n">request</span><span class="o">.</span><span class="n">fullpath</span><span class="p">,</span> <span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">read</span><span class="p">,</span> <span class="n">headers</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span><span class="n">response</span><span class="o">.</span><span class="n">code</span><span class="p">,</span> <span class="n">response</span><span class="o">.</span><span class="n">to_hash</span><span class="p">,</span> <span class="o">[</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="o">]]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ECONNREFUSED</span>
</span><span class='line'>  <span class="o">[</span><span class="mi">500</span><span class="p">,</span> <span class="p">{},</span> <span class="o">[</span><span class="s2">&quot;Server is down, try $npm start&quot;</span><span class="o">]]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">run</span> <span class="no">ProxyApp</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The only change you might have to make is the port number for your app (line 13).  In this case, I'm using port 3000 for my NodeJs app.</p>

<h2>Link Your App</h2>

<p>Now all we have to do is link our app to Pow.  Powder helps us do this easily.  Go to your project root directory and type:</p>

<p><code>
powder link &lt;project_name&gt;
</code></p>

<p>Now run your app with whatever command starts NodeJs.  It's probably something like this:</p>

<p><code>
node app.js
</code></p>

<p>Now you should be able to access your app via your web browser at <code>http://&lt;project_name&gt;.dev</code>.  One of the great things about Xip.io is that it makes running your local app <a href="http://jaketrent.com/post/run-pow-server-on-vm/">extremely easy from a local Virtual machine</a> as well.  To get the address of your app to use in your VM, type this from your native terminal:</p>

<p><code>
powder open --xip
</code></p>

<p>And copy the resulting URL into your VM web browser.</p>

<p>Ah, the fusion of Node and Ruby is pretty sweet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mountain West Ruby Conf 2013 Review]]></title>
    <link href="http://jaketrent.com/post/mountain-west-ruby-conf-2013-review/"/>
    <updated>2013-04-05T15:23:00-06:00</updated>
    <id>http://jaketrent.com/post/mountain-west-ruby-conf-2013-review</id>
    <content type="html"><![CDATA[<p>I recently attended the Mountain West Ruby Conference.  It was my first time going.  I was pleasantly surprised by the quality of the conference.  I would recommend it.</p>

<p><img src="http://i.imgur.com/ABNr5MC.jpg" alt="Mountain West Ruby Conf" /></p>

<!--more-->


<h2>Peeps</h2>

<p>I'm new to the Ruby community.  I get to use it more in my current job than I ever have before.  Whenever entering a new community, it's good to find some friends.  I was pleased to notice that everyone I encountered at the conference was very friendly and welcoming.</p>

<p>About the coolest thing about the community is one of the slogans: MINSWAN, which means "Matz is nice, so we are nice."  How cool is that?  Matz is the Ruby creator.  Wait, who am I kidding.  You already know that.</p>

<p>I was very impressed with the blatant lack of trolling other communities.  This even with the live stream video cameras rolling (people can tend to do weird things when put on camera).</p>

<p>The conference attracted speakers and attendees from as far away as Australia.</p>

<h2>Speakers</h2>

<p>I didn't look too closely at the schedule previous to attending.  Once I got there, I was surprised at the caliber of those people and companies who were represented.  These were big names in the tech community, such as Matz, himself, Github, Heroku, and others.</p>

<p>The conference is single track, so that meant I got to see everyone speak.  I mostly like that but kind of hate that.  I believe it also meant fewer speaking slots, so everyone was pretty top notch.</p>

<p>I was impressed with the stage presence of most speakers.  A few were pretty droning, but in general everyone was very polished, had good slide decks, and shared engaging and useful content.</p>

<p>Devops was the stated subject matter of an entire day of the conference.  This was cool.  We can use that kind of focus on the subject.  But then it bled into the next days as well.  I want some pure code, pure Ruby'ness.  I got some of that, but not as much as I would like.  I paid my devops dues the first day.  I was ready to not hear any more of it on days 2 and 3.</p>

<h2>Venue</h2>

<p>It was in my back yard!  I loved the lack of a hotel requirement!  Apparently some visitors even camped in the wilderness, Nacho style.</p>

<p>The Salt Lake City Public Library is a great downtown location for a small conference.  In this case, with the conference being single track, the single largest room, the amphitheatre, was the only room required for all attendees.  It featured plenty of seating -- at the cost of no leg room.</p>

<p>The wifi also held up better than it has for similar gatherings in this space.  It was announced that "the city and Xmission are working feverishly" to maintain connectivity several times over the 3 days.  It still didn't stay up.  This is a common tech conf occurrence.</p>

<p>I was sorely disappointed with the lack of sugary confections meant to encourage the jollyness and attentiveness of the conference-goers.  At one point, it was necessary to slip out and find a good bakery downtown.  I was not disappointed.  I was happy to see at least the vendors' vinyl stickers come out on the last day.  We need more of that!</p>

<p>In all, it was a good use of my couple days.  It wasn't too pricey, but then, I wasn't paying.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serve Json from Sinatra]]></title>
    <link href="http://jaketrent.com/post/serve-json-from-sinatra/"/>
    <updated>2013-02-26T07:18:00-07:00</updated>
    <id>http://jaketrent.com/post/serve-json-from-sinatra</id>
    <content type="html"><![CDATA[<p>By default, Sinatra knows how to serve up a rendered html page.  With a slight tweak, we can make it spit out Json too!</p>

<p><img src="http://i.imgur.com/ZyCgi56.jpg" alt="JSON on Sinatra" /></p>

<!--more-->


<h2>Data Format of the Web</h2>

<p>Json is my favorite data format for web applications.  Really, who wouldn't want their webservice to expose Json?  It's mucho useful.</p>

<p>First, add a line to the <code>Gemfile</code> that makes a Json helper method available to Sinatra:</p>

<p><code>ruby
gem "sinatra-contrib"
</code>
Next, all you need to do is query the data that you want to return and actually return it, as in:</p>

<p>```ruby
require "sinatra/json"</p>

<p>get "/my-models" do
  json MyModel.all
end
```</p>

<p>The <code>json</code> helper will then serialize your objects into Json, much to the delight of your clients!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serve CoffeeScript from Sinatra]]></title>
    <link href="http://jaketrent.com/post/serve-coffeescript-with-sinatra/"/>
    <updated>2013-02-20T16:39:00-07:00</updated>
    <id>http://jaketrent.com/post/serve-coffeescript-with-sinatra</id>
    <content type="html"><![CDATA[<p>Sinatra is nice because it's super lightweight.  This will allow you to make it do exactly what you want, nothing more.  This is the opposite of Ruby on Rail's convention.  Likewise, it takes just a bit more configuration to make Sinatra serve CoffeeScript as compared to Rails.</p>

<p><img src="http://i.imgur.com/Ta27Zd4.jpg" alt="Sintra and CoffeeScripting" /></p>

<!--more-->


<h2>Sinatra and CoffeeScript</h2>

<p>Surprisingly, there are no fantastic gems, at least that I could churn up in a few Google searches, that make serving CoffeeScript bone head easy.  I found a few, such as the Sinatra Assetpack.  It looked like serious overkill, and my Sinatra app is very small, so I wanted a quick and easy way to serve the static goods.</p>

<h4>CoffeeScript Gem</h4>

<p>Sinatra needs a Gem to compile the CoffeeScript.  Put this line in your <code>Gemfile</code>:</p>

<p><code>
gem "coffee-script"
</code></p>

<p>And run a:</p>

<p><code>
$ bundle install
</code></p>

<h4>Public Directory</h4>

<p>In my app, <code>web.rb</code> is the main controller file.  Next to that file, I have a directory structure like this:</p>

<p><code>
public/
  js/
  coffee/
web.rb
</code></p>

<p>By default, Sinatra will serve static assets out of this <code>public</code> directory.</p>

<h4>CoffeeScript Handler</h4>

<p>I created the <code>coffee</code> directory separate from the <code>js</code> directory so that I could write this little handler in <code>web.rb</code>:</p>

<p><code>ruby
get "/coffee/*.js" do
  filename = params[:splat].first
  coffee "../public/coffee/#{filename}".to_sym
end
</code></p>

<p>This handler will pick up requests that match "/coffee/*.js", find the associated <code>.coffee</code> file, compile it to JavaScript and serve it.  I kept the file extension as <code>.js</code> to help avoid handling any potential mime-type setting requirements.  Obviously, this handler is simple and won't handle complicated cases.  But that is also a plus.</p>

<h4>CoffeeScript in Templates</h4>

<p>In my <a href="http://">Slim</a> template, if I wanted to get the compiled contents of the file named <code>myscripts.coffee</code>, I would write a script tag like this:</p>

<p><code>ruby
script src="http://jaketrent.com/coffee/myscripts.js"
</code></p>

<p>Sinatra.  Coffee.  Bam.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Slim on Sinatra]]></title>
    <link href="http://jaketrent.com/post/setup-slim-on-sinatra/"/>
    <updated>2013-02-19T07:34:00-07:00</updated>
    <id>http://jaketrent.com/post/setup-slim-on-sinatra</id>
    <content type="html"><![CDATA[<p><a href="http://www.sinatrarb.com/">Sintra</a> is a light web server that's easy to start writing Ruby on.  Coming from Node/Express, I feel quite at home there.  Slim also feels like another JavaScript-world templating language, Jade, that I've had good experiences with.  <a href="http://slim-lang.com/">Slim</a> makes for quick templating and feels quite nice compared to ERB if you can handle the Haml style.  It's likewise quick and easy to get working on Sinatra.</p>

<p><img src="http://i.imgur.com/Dsnu3jA.png" alt="Slim templates" /></p>

<!--more-->


<h2>Quick Sinatra Setup</h2>

<h4>Require Sinatra</h4>

<p>Sinatra is super easy to setup.  Create a <code>Gemfile</code> with the dependencies as follows:</p>

<p>```ruby
source "http://rubygems.org"</p>

<p>gem "sinatra"
gem "thin"
```</p>

<p>Then create a default <code>web.rb</code> webserver with contents that look something like:</p>

<p>```ruby
require "sinatra"</p>

<p>get "/" do
  "Hello, world!"
end
```</p>

<p>Then if you run the command:</p>

<p><code>
$ ruby web.rb
</code></p>

<p>You should get a startup message like:</p>

<p>```
== Sinatra/1.3.4 has taken the stage on 4567 for development with backup from Thin</p>

<blockquote><blockquote><p>Thin web server (v1.5.0 codename Knife)
Maximum connections set to 1024
Listening on 0.0.0.0:4567, CTRL+C to stop
```</p></blockquote></blockquote>

<p>Go to <code>localhost:4567</code> in your browser to try out your server.</p>

<h4>Require Slim</h4>

<p>Returning a string is all well and good, but let's include Slim to be able to create more sophisticated templates. Include your Slim dependency in your <code>Gemfile</code> with the line:</p>

<p><code>ruby
gem "slim"
</code></p>

<p>Then from the Terminal, run:</p>

<p><code>
$ bundle install
</code></p>

<h4>Setup your Views</h4>

<p>Then create a directory next to your <code>web.rb</code> file called <code>views</code>.  Inside <code>views</code>, you can create your templates.  You can create a layout template aptly named <code>layout.slim</code>.  By default, your templates will extend from this layout.  Most simply, these files might look like this:</p>

<p>layout.slim:</p>

<p>```haml
doctype html
html
  head</p>

<pre><code>title My Slim Templates App
</code></pre>

<p>  body</p>

<pre><code>= yield
</code></pre>

<p>```</p>

<p>And, index.slim:</p>

<p><code>haml
h1 Loving Slim
</code></p>

<h4>Serve a Slim File</h4>

<p>And now to adjust our <code>web.rb</code> file to serve the new <code>index.slim</code> file:</p>

<p>```ruby
require "sinatra"
require "slim"</p>

<p>get "/" do
  slim :index
end
```</p>

<p>Finally restart your server, and you should see your new template shown in all it's glory.  Pretty easy cheesy.</p>

<h2>Setup Slim on Rails</h2>

<p>Want something even easier?  Well, if you know <a href="http://rubyonrails.org/">Rails</a> already, this will be a cinch.  The hardest part of getting Slim running on Rails is Rails itself.  Slim integration is even easier than on Sinatra.  Simply add this line to your Gemfile:</p>

<p><code>
gem "slim-rails"
</code></p>

<p>And then in order to activate the Slim handler, merely add the <code>.slim</code> extension onto the end of any of your template file names.  Your file names probably end in <a href="http://guides.rubyonrails.org/layouts_and_rendering.html"><code>.erb</code> by default</a>.  Change the ones that you want to convert to Slim templates to look like:</p>

<p><code>
index.html.slim
</code></p>

<p>Now the Rails are even slicker.</p>
]]></content>
  </entry>
  
</feed>
