<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2014-12-26T08:33:30-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A JSON API Errors Serializer in Rails]]></title>
    <link href="http://jaketrent.com/post/jsonapi-errors-serializer-in-rails/"/>
    <updated>2014-12-04T10:11:00-07:00</updated>
    <id>http://jaketrent.com/post/jsonapi-errors-serializer-in-rails</id>
    <content type="html"><![CDATA[<p>The default serialization of error states in Rails might not be what you want for your app.  In that case, it'd be worth knowing how to write a custom serialization format for your needs.  In my case, I am trying to match the <a href="http://jsonapi.org/format/#errors">JSON API format for errors</a>.  Here's a potential implementation...</p>

<p><img src="http://i.imgur.com/XOUecnw.jpg" alt="Rails jsonapi errors" /></p>

<!--more-->


<h2>JSON API Errors Format</h2>

<p>JSON API is cool because it is a standard format for REST APIs to serialize data.  It would be even cooler if it was well-established and it was standardized more than it currently is.  As it is, it's a standard that seems to fluctuate a fair bit.  Nevertheless, it has many worthy ideas and might be worth using as a format on your app.</p>

<p>The <a href="http://jsonapi.org/format/#errors">errors format</a> specifically asks for JSON that looks something like this:</p>

<p>```json
{
  "errors": [</p>

<pre><code>{
  "id": "name",
  "title": "Name cannot be empty"
} // ...
</code></pre>

<p>  ]
}
```</p>

<p>There must be an <code>errors</code> root attribute.  Its value is an array.  That array has individual errors that may include a number of different attributes.  Here, I have highlighted just two -- <code>id</code>, a unique id of the problem and <code>title</code>, the human-readable error message.</p>

<h2>Rails Default Error Serialization</h2>

<p>A common place for errors to be reported are in the HTTP responses for requests to the resources in your REST API.  For instance, in your model for your resource -- in this case, let's say it's a book -- you may have some validation rules for what constitutes a well-formed book.  That model might look like:</p>

<p><code>ruby book.rb
class Book &lt; ActiveRecord::Base
  validates :title, presence: true
end
</code></p>

<p>Thus, if I try to create a new book without a title, I should get some sort of error.  And indeed, I do.  If I have a <code>books_controller.rb</code> that looks like this:</p>

<p>```ruby books_controller.rb
class BooksController &lt; ApplicationController
  def create</p>

<pre><code>book = Book.new(book_params)
if book.save
  render json: book
else
  render json: book.errors  # Allowing default serialization
end
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def book_params</p>

<pre><code>params.permit(:title)
</code></pre>

<p>  end
end
```</p>

<p>By default, Rails 4 will return an error serialization that looks like this:</p>

<p>```json
{
  "title": [</p>

<pre><code>"can't be blank"
</code></pre>

<p>  ]
}
```</p>

<h2>Custom Error Serializer in Rails</h2>

<p>But I wrote a client that doesn't consume errors in the default Rails format, so I want a custom error serialization format -- specifically one to match the JSON API specs.</p>

<p>On the line in <code>books_controller.rb</code> that was returning <code>book.errors</code>, now we'll introduce a new function to call:</p>

<p><code>ruby
render: json: ErrorSerializer.serialize(book.errors)
</code></p>

<p>We're going to write the serializer method in a separate file, <code>error_serializer.rb</code>, so it can be used in many controllers.  To gain access to it in our controller, we need to include the line:</p>

<p><code>ruby
include ErrorSerializer
</code></p>

<p>The contents of your <code>error_serializer.rb</code> can be whatever fits your use case.  For my simple JSON API implementation, it looks like:</p>

<p>```ruby error_serializer.rb
module ErrorSerializer</p>

<p>  def ErrorSerializer.serialize(errors)</p>

<pre><code>return if errors.nil?

json = {}
new_hash = errors.to_hash(true).map do |k, v|
  v.map do |msg|
    { id: k, title: msg }
  end
end.flatten
json[:errors] = new_hash
json
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Note the format includes an <code>errors</code> root attribute and an <code>id</code> and <code>title</code> for each error object.</p>

<p>Now, the errors serialization format from the API in the case of an error appears like:</p>

<p>```json
{
  "errors": [</p>

<pre><code>{
  "id": "title",
  "title": "Title can't be blank"
}
</code></pre>

<p>  ]
}
```</p>

<p>Just what we wanted.</p>

<p>I'm sure there are better places to put your error serialization logic, ways to call it, or great libraries you've worked with that do a similar thing.  Any suggestions?  Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Permit Array in Rails Strong Parameters]]></title>
    <link href="http://jaketrent.com/post/permit-array-rails-strong-parameters/"/>
    <updated>2014-01-22T11:19:00-07:00</updated>
    <id>http://jaketrent.com/post/permit-array-rails-strong-parameters</id>
    <content type="html"><![CDATA[<p>Rails 4 introduced the pattern of strong parameters at the controller layer.  As a best practice, you will explicitly list the parameters that an endpoint should accept in payloads.  Arrays are specified just slightly different.</p>

<p><img src="http://i.imgur.com/XOUecnw.jpg" alt="Rails" /></p>

<!--more-->


<h2>Strong Parameters</h2>

<p>You don't want those blackhats to update any field they want on your poor models.  Raise the shields -- strong parameters!  In ye olden days, <code>attr_accessible</code> could add some protection to your models.  Since Rails 4, it has been best practice to move this responsibility to the controller.  At that layer, you can make adjustments and allowances on a per-endpoint basis (eg, admin functionality has more power over a particular model than the layman user).</p>

<p>So, create a private function in your controller where you can filter your params for your model.  It might look like:</p>

<p>```ruby
private</p>

<p>def luchador_params
  params.require(:luchador).permit(:favorite_move, :weight)
end
```</p>

<p>You have two main methods to use:</p>

<ul>
<li><code>require</code> - ensures that the parameter is present (as in this root <code>luchador</code> key)</li>
<li><code>permit</code> - whitelist filters the parameters to the set specified</li>
</ul>


<h2>Arrays in <code>permit</code></h2>

<p>The most standard use case for <code>permit</code> is to pass it a collection of :symbols.  These keys must represent scalar values (string, number, that sort) only.  But what about arrays?  They're represented differently by an empty array:</p>

<p><code>ruby
params.require(:luchador).permit(:favorite_move, :weight, wins: [])
</code></p>

<p>But wait -- one more problem, and I don't like the answer here.  My client might send back a <code>nil</code> instead of an array (ie, when the luchador has no <code>wins</code>).  If this happens, cue ugly error:</p>

<p><code>text
Unpermitted parameter: wins
</code></p>

<p>To fix, default to empty array:</p>

<p><code>ruby
params[:luchador][:wins] ||= []
params.require(:luchador).permit(:favorite_move, :weight, wins: [])
</code></p>

<p>What have you done that looks better?  Please! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Define Methods Dynamically in Ruby]]></title>
    <link href="http://jaketrent.com/post/define-dynamic-methods-ruby/"/>
    <updated>2013-11-26T07:28:00-07:00</updated>
    <id>http://jaketrent.com/post/define-dynamic-methods-ruby</id>
    <content type="html"><![CDATA[<p>In Ruby, it's common to see new methods defined dynamically or on the fly for your class.  And who doesn't want to have a piece of that metaprogramming?</p>

<p><img src="http://i.imgur.com/Z7WWtL0.jpg" alt="Ruby" /></p>

<!--more-->


<h2>An Example</h2>

<p>For example, I just finished an <a href="/post/exercism-review/">exercism code exercise</a> where I felt like there was a fair bit of code duplication.  I had a bunch of convenience functions that would show the conversion of a time in earth time to a time specific to a planet.  So, the API required something that looked something like this:</p>

<p>```ruby
class SpaceAge</p>

<p>  def on_earth</p>

<pre><code>seconds_on_planet :earth
</code></pre>

<p>  end</p>

<p>  def on_mercury</p>

<pre><code>seconds_on_planet :mercury
</code></pre>

<p>  end</p>

<p>  def on_venus</p>

<pre><code>seconds_on_planet :venus
</code></pre>

<p>  end</p>

<p>  # ...
end
```</p>

<p>Feeling that this might be an excessive number of similarly pattern methods, I considered ways that the API might stay in tact but the effort of maintenance of these many functions might be decreased.</p>

<h2><code>define_method</code></h2>

<p>We could collapse these methods quite a bit in the visual code by defining them dynamically, using <code>define_method</code>:</p>

<p>```ruby
class SpaceAge
  def self.on_planets(*planets)</p>

<pre><code>planets.each do |planet|
  define_method "on_#{planet}" do
    seconds_on_planet planet
  end
end
</code></pre>

<p>  end</p>

<p>  on_planets :earth, :mercury, :venus, :mars, :jupiter, :saturn, :uranus, :neptune
end
```</p>

<p>The exact same code would be generated.  It's better! But it's worse!  It's actually less readable than before.  <code>on_planets</code> as a new helper API might be nice.  But, we're not currently using this anywhere else.  The code is probably more maintainable, but it's also more stiff.  Previously, each of the methods was separate and therefore separately modifiable and customizable.  Now, there's one implementation of an "on_#{planet}" method.  This could be easier/harder to deal with, depending.  I think the readability is better because of the smaller amount of code, but the readability is worse because of the increased complexity and eye parsing required.  In the end, for my code, I stayed with the original solution for its 5-star readability.</p>

<p>But the ability to define methods dynamically is super awesome.  When do you find yourself using this super power?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Call Dynamic Method in Ruby]]></title>
    <link href="http://jaketrent.com/post/ruby-call-dynamic-method/"/>
    <updated>2013-11-25T07:10:00-07:00</updated>
    <id>http://jaketrent.com/post/ruby-call-dynamic-method</id>
    <content type="html"><![CDATA[<p>I love Ruby's syntax for method calls.  The syntax for calling dynamic methods is pretty nice, and it's easily mastered.</p>

<p><img src="http://i.imgur.com/Z7WWtL0.jpg" alt="Ruby" /></p>

<!--more-->


<h2><code>send</code> method</h2>

<p>The <code>send</code> method is one of the best and most basic ways to call a method dynamically on your object.  Let's say we have an object with multiple methods like this:</p>

<p>```ruby
class Fezzik
  def show_sportsmanship
  end</p>

<p>  def be_colossus_for(person_1, person_2=nil, person_3=nil)
  end
end
```</p>

<p>The method you want to call might be represented as a string or a symbol.  Your method call might look like this:</p>

<p>```ruby
Fezzik.new.send(:show_sportsmanship)</p>

<h1>or</h1>

<p>Fezzik.new.send("show_sportsmanship")
```</p>

<h2>Calling <code>send</code> with parameters</h2>

<p>Now, some of your methods might have parameters.  How are those called?  Simply pass the argument values into the <code>send</code> call as the final argument, which is a variable length argument:</p>

<p><code>ruby
just_one_person = Person.new
Fezzik.new.send(:be_colossus_for, just_one_person)
</code></p>

<p>You can also pass the parameters as a splat array, such as this:</p>

<p><code>ruby
people = [Person.new, Person.new, Person.new]
Fezzik.new.send(:be_colossus_for, *people)
</code></p>

<p>In Ruby, the splat operator destructures the array into parameters, so the above code essentially becomes:</p>

<p><code>ruby
people = [Person.new, Person.new, Person.new]
Fezzik.new.send(:be_colossus_for, people[0], people[1], people[2])
</code></p>

<p>So, <code>send</code> turns out to be pretty easy to deal with and really useful.  Use it, and be happy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exercism Review]]></title>
    <link href="http://jaketrent.com/post/exercism-review/"/>
    <updated>2013-11-19T07:29:00-07:00</updated>
    <id>http://jaketrent.com/post/exercism-review</id>
    <content type="html"><![CDATA[<p>Exercism.io is a fantastic site and tool that provides a wealth of daily code exercises.  If you want to learn to be better in a language, it's a great resource to do exercises and receive feedback.</p>

<p><img src="http://i.imgur.com/2oAEqBZ.jpg" alt="Exercism" /></p>

<!--more-->


<h2>Origin</h2>

<p><a href="http://exercism.io">Exercism.io</a> was introduced to me by Franklin Webber of gSchool and JumpStart Labs fame.  He and his colleagues use it as a part of their instruction, and it's a great, free tool available to the public.</p>

<h2>Languages</h2>

<p>There is a fun array of language-learning possibilities inside Exercism.  It currently includes a varying number of exercises across these languages:</p>

<ul>
<li>clojure</li>
<li>elixir</li>
<li>haskell</li>
<li>javascript</li>
<li>objective-c</li>
<li>python</li>
<li>ruby</li>
<li>scala</li>
</ul>


<p>I'm currently running through the Ruby exercises.</p>

<h2>Starting Point</h2>

<p>Based on what I've seen of the Ruby and JavaScript exercises, I don't think that Exercism's exercises are meant for an absolute beginner.  Some basic knowledge of the programming language is assumed and required.  You'll start a little deep if you know next to nothing.  These exercises are meant to expand your exposure to and understanding of language features.</p>

<h2>Installation</h2>

<p>Installation consists of a few things:</p>

<ol>
<li>Go to <a href="http://exercism.io">exercism.io</a> and register using your Github credentials.</li>
<li>While on the site, download the CLI.  It's a pre-built binary that you just need to put somewhere that is tied to your system PATH.  That way you can execute it from the terminal.</li>
<li>Setup your environment for the language you'll be learning.  Again, this information is on the site.  None of the environments are automatic in their setup, and you must follow the written steps to be ready to develop in your weapon, er language of choice.</li>
</ol>


<h2>Your First Exercise</h2>

<p>After installation, you're ready for your first exercise.  On the terminal, type:</p>

<p><code>bash
exercism fetch
</code></p>

<p>This will download fresh exercises at the head of each of your language paths.  At first, you'll start on exercise 0 of each of the language paths.  Now, choose a language.  I chose Ruby first.  The first exercise was called <code>bob</code>.  Bob is a lackadaisical teenager who responds with smart remarks to whatever somewhat says to him.  Typical.</p>

<p>Bob comes with a suite of failing tests.  All the tests are written, and it's up to use to write the code that actually makes Bob function and the tests pass.  This is literally TDD or test-driven development, and yay for us, someone has already written the tests!  In the case of Ruby, the tests are written in a MiniTest syntax.  To run them, I'm typing:</p>

<p><code>bash
ruby bob_test.rb
</code></p>

<p>This is where I think we might be able to have a bit of a better setup with the exercises.  It would be nice to have the tests automatically run on a file watch as opposed to having to run them each time manually.  For this, I personally setup <code>guard-minitest</code>.  I would recommend the same.  Of course, I can only think that Exercism doesn't do this by default in order to simplify the environment setup process.</p>

<h2>Nitpicking</h2>

<p>After you complete your first exercise in some form by getting all the tests to pass, you can submit it to the site for feedback.  For example:</p>

<p><code>bash
exercism submit ruby/bob/bob.rb
</code></p>

<p>The CLI will give you a link to your now-online code, and you can go there to see your submission.  Others who have completed the same exercise will also be able to see your solution.  And this is one of the coolest potentials of Exercism.  Others can give you feedback on your solution, called "nitpicks" by default.  This is a great learning opportunity.  We are ready to take feedback given from the perspective of others in their experience with the language.  We can also give feedback, training our eye to be more critical in our observation and future writing of code.  It feels like a great outcome and a great potential community.</p>

<p>I have given nitpicks.  Of course, that's easier to do.  But, I am sad to say that I have never received any.  It's hard to tell how active the community really is.  I see quite a few submissions, but there are definitely fewer nitpicks than submissions.  There's quite a bit untapped community learning potential here.  To help this, I wish the system allowed you to unlock the next exercise in your language path without closing opportunity for nitpicks on submitted exercises.</p>

<p>So, have you used Exercism.io before?  Do you know of similar sites?</p>
]]></content>
  </entry>
  
</feed>
