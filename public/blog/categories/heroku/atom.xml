<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: heroku | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/heroku/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2017-01-24T07:53:25-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deploy create-react-app to Heroku on Node.js]]></title>
    <link href="http://jaketrent.com/post/deploy-create-react-app-heroku-node/"/>
    <updated>2017-01-19T07:48:00-07:00</updated>
    <id>http://jaketrent.com/post/deploy-create-react-app-heroku-node</id>
    <content type="html"><![CDATA[<p>Create-react-app is Facebook's no-config solution to starting a React project.  This setup does not support a server out of the box.  You can create that easily enough.  Node.js can be a good choice for your app server.  Once it's made and functioning, you might want to deploy your static app and app server.  Here's a few tips on getting them up onto Heroku.</p>

<p><img src="http://i.imgur.com/6DUwRKt.png" alt="Create-react-app on Heroku" /></p>

<!--more-->


<h2>Two Builds</h2>

<p>Create-react-app comes with two npm-scripts targets.  One is the live dev server that builds assets in a development configuration and serves them out of webpack-dev-server.  This is run with <code>npm start</code>.  When you're ready for prod, however, there is a <code>npm run build</code> script that will build all assets for a production setting.  In this configuration, it's up to you to provide the server to serve such assets.</p>

<h2>Serving Static Assets on Koa</h2>

<p>Koa is a nice web framework for Node.js that is fun to write little app servers in.  If you want to tack on web server abilities like serving static assets, that's easy to do as well.</p>

<p>Assuming that you have the basics of your koa server already going, you now want to:</p>

<p><code>
npm install koa-static --static
</code></p>

<p>Now you need to use the static middleware.  The main thing you need to know in order to use it is the location of your static assets.  When you previously ran <code>npm run build</code>, create-react-app puts the built files into a <code>build/</code> directory in the root of your project.  You want to point the middleware there:</p>

<p>```js
const koa = require('koa')
const path = require('path')
const static = require('koa-static')</p>

<p>const app = koa()
app.use(static(path.resolve('build')))
// ...
```</p>

<p>Now requests for static files that your app might make will route to that <code>build/</code> directory.  For instance, your main js bundle, probably called something like <code>/static/js/main.f682b6a1.js</code> will be addressable because of this middleware.</p>

<p>It's important to note that the assets in the <code>build/</code> directory will only exists (or be updated) when <code>npm run build</code> is run.  The directory does <em>not</em> contain the live-updated assets that you might be used to seeing in your development cycle of changing a file, refreshing your browser, and getting the change.</p>

<h2>Serving Your React App</h2>

<p>Since you've decided to serve all static assets via your app server, this includes the <code>index.html</code> which will bootstrap your React app.  Create-react-app is setup to build this file as well, depositing it at <code>build/index.html</code>.  You'll want a route in your app server that can serve this as the html that will request the other js and css static assets needed to get your React program fired up.</p>

<p>Koa has a nice helper for establishing route patterns.  Let's grab that:</p>

<p><code>
npm install koa-route --save
</code></p>

<p>And then setup our index route:</p>

<p>```js
const fs = require('fs')
const route = require('koa-route')</p>

<p>function* index() {
  this.body = fs.readFileSync(path.resolve(path.join('build', 'index.html')), 'utf8')
}</p>

<p>app.use(route.get('*', index))
```</p>

<p>The reason to map the index route to <code>*</code> instead of <code>/</code> is because your React app likely has <em>client</em>-side routes.  So if the client-side router has an <code>/about</code> route to the about page, you'll want a user to be able to deep link straight to that experience: the user refreshes the page, makes a request to your koa server at your domain, it doesn't have a server route for <code>/about</code>, but drops to the <code>*</code> route handler, serves the <code>index.html</code>, which invokes your React app, starting the client router, which has a route for <code>/about</code> and serves that UI via React.</p>

<h2>Build When Deploying</h2>

<p>Now that you have an app that is served successfully from a koa server locally, you want to get that on Heroku.  That's one of the best things about Heroku: the ease with which you can put your app on the Internet.  Now you just need to get the deployment to automatically do what you did locally.</p>

<p>After you pushed your app to Heroku, you could manually run:</p>

<p><code>
heroku run npm run build
</code></p>

<p>Then your static assets would be in the expected spot.  But you don't want to have to remember to do this every deploy.  Thankfully, Heroku gives you a nice hook to automatically do things after you run a deploy.</p>

<p>In your <code>package.json</code> file, add a new script:</p>

<p>```json package.json
{
  "scripts": {</p>

<pre><code>"heroku-postbuild": "npm run build"
</code></pre>

<p>  }
}
```</p>

<p>Commit and push this to Heroku, and you'll get your assets building automatically on every deploy.  Create-react-app with a Node.js server on Heroku will be yours!</p>

<p>Are there better or simpler ways that you've found to get this done?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Zerigo DNS to Heroku]]></title>
    <link href="http://jaketrent.com/post/add-zerigo-dns-to-heroku/"/>
    <updated>2013-12-31T07:03:00-07:00</updated>
    <id>http://jaketrent.com/post/add-zerigo-dns-to-heroku</id>
    <content type="html"><![CDATA[<p>Once upon a time, I could setup DNS super easily on Heroku using their Zerigo DNS addon.  Lately, I tried again using the same pattern and failed.  Here's an updated step-by-step guide.</p>

<p><img src="http://i.imgur.com/6DUwRKt.png" alt="Heroku and Zerigo" /></p>

<!--more-->


<h2>Back in the Day</h2>

<p>It used to be that all you had to do was setup the nameservers on your domain registrar, add the Zerigo addon on Heroku's end with a few commands, and you were rocking in minutes.  The latest DNS setup on Heroku caused me a bit more grief.  Something has changed.  But there is hope.  The new steps are almost just as brief.  You'll just have to take care to get it just right.</p>

<h2>Cedar, not Bamboo</h2>

<p>These days new deployments on Heroku are going to favor using the Cedar stack as the new option.  The Bamboo stack was the original and older Ruby stack.  And so it troubled me after setting up my DNS as I used to that I got an error message (<a href="https://devcenter.heroku.com/articles/error-codes#h70-access-to-bamboo-http-endpoint-denied">h70</a>) similar to this in my logs:</p>

<p><code>bash
2010-10-06T21:51:07-07:00 heroku[router]: at=error code=H70 desc="Access to bamboo HTTP endpoint denied" method=GET path=/ host=foo.myapp.com fwd=17.17.17.17 dyno= connect= service= status=503 bytes=
</code></p>

<p>Lame, lame, lame, lame, lame.  Now, who did you contact?</p>

<p>Running <code>heroku info</code> reveals that I'm indeed using the Cedar stack on this project, so what gives?  It turns out my DNS was messed up.</p>

<h2>The New Zerigo/Heroku Setup</h2>

<p>The <a href="https://devcenter.heroku.com/articles/zerigo_dns">Heroku devcenter docs for Zerigo</a> are pretty good, but as of this writing, they're a little inaccurate.  Here is the step-by-step that worked for me:</p>

<h4>1. Nameservers</h4>

<p>Setup your domain via your registrar's site to point to these nameservers:</p>

<p><code>
a.ns.zerigo.net
b.ns.zerigo.net
c.ns.zerigo.net
d.ns.zerigo.net
e.ns.zerigo.net
</code></p>

<h4>2. Zerigo Addon</h4>

<p>Add the Zerigo addon via the Heroku cli:</p>

<p><code>bash
heroku addons:add zerigo_dns
</code></p>

<h4>3. Zerigo Config</h4>

<p>Open Zerigo addon for configuration:</p>

<p><code>bash
heroku addons:open zerigo_dns
</code></p>

<p>Navigate to the Zerigo site for your app and press the "Add Snippet" button.  From the snippets available, select "Heroku".  This snippet contains a CNAME entry and a URL redirect entry.  Add the snippet.  Now, you'll need to adjust the CNAME entry.  The <code>data</code> field probably reads <code>proxy.heroku.com</code>.  This has been deprecated.  Instead, change the CNAME entry to point to <code>yourapp.herokuapp.com</code>.</p>

<p>Note also that the URL redirect entry is moving all traffic from yourapp.com to http://www.yourapp.com.  Apparently now the "www." subdomain is required and you can't setup a naked domain on Heroku.  If someone knows otherwise, I'd love to here about it, because I used to do this all the time.</p>

<h4>4. Add Domains on Heroku</h4>

<p>Via the Heroku cli, type:</p>

<p><code>bash
heroku domains:add www.yourapp.com
</code></p>

<p>Note that we do <em>not</em> want to add <code>yourapp.com</code> (no "www") to in this manner.  If you do that, the tool adds multiple A records to Zerigo, which the Zerigo docs clearly state you don't want.  These A records are what will activate routing through the Bamboo stack, which you want to avoid.</p>

<p>This should be the point at which you can refresh your browser at "yourapp.com".  You should see the redirect happen, moving you to "www.yourapp.com".  The routing should be happy on Heroku's end.  It sometimes takes more time for this to propagate, so if you don't see results immediately, be a bit patient before your start changing your configuration, thinking it's not working.</p>

<p>Has anyone else run into this?  Is there a better way to set this up?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Yeoman App on Heroku]]></title>
    <link href="http://jaketrent.com/post/yeoman-app-on-heroku/"/>
    <updated>2013-04-23T07:12:00-06:00</updated>
    <id>http://jaketrent.com/post/yeoman-app-on-heroku</id>
    <content type="html"><![CDATA[<p>Yeoman is great developer tool that will help you generate a project format that is easy to get up and running quickly.  Out of the box, Yeoman only generates static sites.  But, with a few small tweaks, you can get it running on an app server, Nodejs, and up on Heroku.</p>

<p><img src="http://i.imgur.com/1Mc2kXh.jpg" alt="Yeoman" /></p>

<!--more-->


<h2>New Project With Yeoman</h2>

<p>To install Yeoman, run:</p>

<p><code>
npm install -g yo
</code></p>

<p>Now navigate to your new project directory and generate the scaffolding by running:</p>

<p><code>
yo webapp
</code></p>

<p>There are other generators, specifically for angularjs or a handful of other frameworks.  To see more options, run:</p>

<p><code>
yo --help
</code></p>

<h2>Add Node for Heroku</h2>

<p>Since Yeoman creates a static site, it should be read to serve out of any old web server.  But Heroku specifically wants an app server.  Node is one of the options, and it's a great option for a lightweight app server.</p>

<p>To get the node dependencies you need, create a <code>package.json</code> via:</p>

<p><code>
npm init
</code></p>

<p>Then pull down the dependencies you'll need:</p>

<p><code>
npm install gzippo express coffee-script --save
</code></p>

<p>Now create your app server, <code>web.coffee</code>.  It's about as light as they come:</p>

<p>{% codeblock lang:coffeescript %}
gzippo = require 'gzippo'
express = require 'express'</p>

<p>app = express()
app.use express.logger 'dev'
app.use gzippo.staticGzip "#{__dirname}/dist"
app.listen process.env.PORT || 5000
{% endcodeblock %}</p>

<p>It's going to be serving the static resources that you build w/ Yeoman/Grunt that end up in the <code>dist</code> directory.  In order for code to get to Heroku, it needs to be commited to your git repo.  Thus, you need to remove the "dist" line from your <code>.gitignore</code> file, and don't forget to add and commit the files to git as you build them.  You may also have to add more tasks to the <code>Gruntfile.js</code> to copy over any other assets to <code>dist</code> that your app needs to run.</p>

<p>Finally create a <code>Procfile</code> file for Heroku in the root of your project that points to the <code>web.coffee</code> server:</p>

<p><code>
web: coffee web.coffee
</code></p>

<p>Now it's time to push to Heroku.  You should have the Heroku Toolbelt installed and create a heroku url by running:</p>

<p><code>
heroku create &lt;my_project&gt;
</code></p>

<p>To test your yeoman app as it will be run in production, first build it:</p>

<p><code>
grunt build
</code></p>

<p>Then run the grunt server:</p>

<p><code>
grunt server:dist
</code></p>

<p>Or if you have foreman and want to run the app using your <code>Procfile</code>, run:</p>

<p><code>
foreman start
</code></p>

<p>It's time.  Commit your code, especially that <code>dist</code> directory, and... deploy!</p>

<p><code>
git push heroku master
</code></p>

<p>There are quite a few steps there.  What did we miss?  Or what needs more explanation?  Perhaps we just need a <code>yo heroku</code> target.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Https Redirect for Node on Heroku]]></title>
    <link href="http://jaketrent.com/post/https-redirect-node-heroku/"/>
    <updated>2013-02-26T07:33:00-07:00</updated>
    <id>http://jaketrent.com/post/https-redirect-node-heroku</id>
    <content type="html"><![CDATA[<p>When your app requires users to be using the <code>https</code> protocol to make requests and get responses, it's helpful to have an automatic redirect so the user is always in the right place.  Here's how to do that for a Node Express app on Heroku.</p>

<p><img src="http://i.imgur.com/5rZ8H.png" alt="NodeJs Https Redirect" /></p>

<!--more-->


<h2>Secure Express Requests</h2>

<p>The <a href="http://expressjs.com">Express</a> request object has a bunch of great information.  One of its attributes is <code>secure</code>.  It's a boolean.  Usually, <code>secure == true</code> will mean that you're on <code>https</code>.  When that is not true, you're ready for a redirect.</p>

<p>Unfortunately for apps hosted on Heroku, <code>request.secure</code> will always be false.  The way that Heroku routing works, it will just never be set.</p>

<h2>Heroku Https Header</h2>

<p>Instead, Heroku forwards an http header that allows us to do the same "is secure" test.  On Heroku, <code>request.header('x-forwarded-proto')</code> will contain the actual protocol string (eg, 'http' or 'https').</p>

<h2>Express Middleware SSL Redirect</h2>

<p>If you're using the Express framework on Node, then you have it easy.  There's already a great middleware mechanism for you to send any or all requests through.  If you set your Express app (v3) up like this:</p>

<p><code>coffeescript
app = express()
</code></p>

<p>Then you can use the <code>app.use</code> functionality to specify a middleware.  Since I only have certificates and want the redirect to happen in the production environment, I will likewise wrap this middleware inside <code>app.configure</code> for prod (it inspects <code>NODE_ENV</code> for you).  This redirect will be pretty rudimentary, but it's just that simple, so here it goes:</p>

<p>```coffeescript
app.configure 'production', ->
  app.use forceSsl(req, res, next) -></p>

<pre><code>if req.header 'x-forwarded-proto' != 'https'
  res.redirect "https://#{req.header 'host'}#{req.url}"
else
  next()
</code></pre>

<p>```</p>

<p>If it's not <code>https</code> already, redirect the same url on <code>https</code>.  If it is, that's what I want, and you can pass on through my middleware function.  Note that this middleware will protect <em>all</em> urls on the site with an <code>https</code> redirect.  Your middleware could be more selective.  You could even create this as a stacked middleware per route if you wanted.  We could even enhance our middleware to use inspect both the http header <em>and</em> the <code>secure</code> flag.</p>

<p>Heroku threw us a for a minor, unexpected loop, but it was nothing that we couldn't easily code for.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[django_content_type_app_label_key Constraint on Heroku]]></title>
    <link href="http://jaketrent.com/post/django_content_type_app_label_key-constraint-herok/"/>
    <updated>2011-12-30T13:30:00-07:00</updated>
    <id>http://jaketrent.com/post/django_content_type_app_label_key-constraint-herok</id>
    <content type="html"><![CDATA[<p>Django comes with some awesome CLI tools.  Manage.py is a beast of magic and lore.  And it loves the fantastical kingdom of Heroku, where is romps with merry measure twixt the ether.  But, when I've tried to go through a dumpdata of a previous site, syncdb on a migration to Heroku, and loaddata for moving the data, I've run into a snag on django_content_type_app_label_key more than once.  Here are some resolutions.</p>

<!--more-->


<h2>The Error Stack</h2>

<p>Specifically, when I do a sync of the database:</p>

<p><code>bash
heroku run python manage.py syncdb
</code></p>

<p>It works like a charm.  And then a loading of the data:</p>

<p><code>bash
heroku run python manage.py loaddata data.json
</code></p>

<p>It runs for a bit then spews this small hiccup:</p>

<p>```bash
Running python manage.py loaddata data.json attached to terminal... up, run.2
Problem installing fixture 'data.json': Traceback (most recent call last):
  File "/app/lib/python2.7/site-packages/django/core/management/commands/loaddata.py", line 174, in handle</p>

<pre><code>obj.save(using=using)
</code></pre>

<p>  # ...more stack trace...
  File "/app/lib/python2.7/site-packages/django/db/backends/postgresql_psycopg2/base.py", line 44, in execute</p>

<pre><code>return self.cursor.execute(query, args)
</code></pre>

<p>IntegrityError: duplicate key value violates unique constraint "django_content_type_app_label_key"
```
Lovely.</p>

<p>It turns out that <code>syncdb</code>, in addition to running the DDLs for your table creation also populates the <code>django_content_type</code> table.  And then when you loaddata it tries to repopulate the table, violating the unique constraint on the content type name.</p>

<h2>Make the Magic Live Again</h2>

<p>There are a couple ways around this:</p>

<h3>Dump Something Specific</h3>

<p>When you dumpdata, only <a href="https://docs.djangoproject.com/en/dev/ref/django-admin/#dumpdata-appname-appname-appname-model">dump specific apps</a> instead of the whole project.  For example:</p>

<p><code>bash
python manage.py dumpdata myApp
</code></p>

<h3>Django 1.3 Exclude</h3>

<p>If you're on Django 1.3 or above, you get a nice new option with dumpdata to <a href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-option---exclude">exclude certain apps</a>.  So you could run:</p>

<p><code>bash
python manage.py dumpdata --exclude contenttypes
</code></p>

<h3>Try in Vain to Reset</h3>

<p>Another one I tried (but didn't work) was:</p>

<p><code>bash
heroku run python aprilandjake/manage.py reset contenttypes
</code></p>

<h3>Sql Truncate</h3>

<p>Or, if you're still trying to dumpdata on your whole project, you could <code>syncdb</code> on Heroku and then truncate the data out of <code>django_content_type</code> like this:</p>

<p><code>bash
heroku run python aprilandjake/manage.py dbshell
</code></p>

<p>And then <a href="http://swik.net/django/Django+Community+Aggregator?page=2">truncate</a> (inside the dbshell):</p>

<p><code>bash
truncate django_content_type cascade;    
</code></p>

<p>Problem for me is that didn't work either.  I am on the super cheap in Heroku, so I get this lovely denial:</p>

<p><code>bash
Running python manage.py dbshell attached to terminal... up, run.5
Error: You appear not to have the 'psql' program installed or on your path.
</code></p>

<p>(It's not available in a <a href="http://devcenter.heroku.com/articles/heroku-postgresql">shared database</a>):</p>

<p><code>bash
heroku pg:psql
!  Cannot ingress to a shared database
</code></p>

<h3>Delete via Admin UI</h3>

<p>And finally, if you want to get rid of the data via the admin UI, set it up to appear as editable.  In an <a href="https://docs.djangoproject.com/en/dev/ref/contrib/admin/#modeladmin-objects"><code>admin.py</code></a> in your project, try something like this:</p>

<p>```python
from django.contrib.contenttypes.models import ContentType</p>

<p>class ContentTypeAdmin(admin.ModelAdmin):
  list_display = ['name', 'app_label']
  fieldsets = (</p>

<pre><code>('', {
  'classes': ('',),
  'fields': ('name', 'app_label')
}),
</code></pre>

<p>  )</p>

<p>  admin.site.register(ContentType, ContentTypeAdmin)
```</p>

<p>Now you should be able to loaddata and feel the Django wind in your hair and the Heroku grass beneath your feet again.</p>
]]></content>
  </entry>
  
</feed>
