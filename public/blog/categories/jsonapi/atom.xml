<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jsonapi | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/jsonapi/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2015-03-03T08:36:32-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A JSON API Errors Serializer in Rails]]></title>
    <link href="http://jaketrent.com/post/jsonapi-errors-serializer-in-rails/"/>
    <updated>2014-12-04T10:11:00-07:00</updated>
    <id>http://jaketrent.com/post/jsonapi-errors-serializer-in-rails</id>
    <content type="html"><![CDATA[<p>The default serialization of error states in Rails might not be what you want for your app.  In that case, it'd be worth knowing how to write a custom serialization format for your needs.  In my case, I am trying to match the <a href="http://jsonapi.org/format/#errors">JSON API format for errors</a>.  Here's a potential implementation...</p>

<p><img src="http://i.imgur.com/XOUecnw.jpg" alt="Rails jsonapi errors" /></p>

<!--more-->


<h2>JSON API Errors Format</h2>

<p>JSON API is cool because it is a standard format for REST APIs to serialize data.  It would be even cooler if it was well-established and it was standardized more than it currently is.  As it is, it's a standard that seems to fluctuate a fair bit.  Nevertheless, it has many worthy ideas and might be worth using as a format on your app.</p>

<p>The <a href="http://jsonapi.org/format/#errors">errors format</a> specifically asks for JSON that looks something like this:</p>

<p>```json
{
  "errors": [</p>

<pre><code>{
  "id": "name",
  "title": "Name cannot be empty"
} // ...
</code></pre>

<p>  ]
}
```</p>

<p>There must be an <code>errors</code> root attribute.  Its value is an array.  That array has individual errors that may include a number of different attributes.  Here, I have highlighted just two -- <code>id</code>, a unique id of the problem and <code>title</code>, the human-readable error message.</p>

<h2>Rails Default Error Serialization</h2>

<p>A common place for errors to be reported are in the HTTP responses for requests to the resources in your REST API.  For instance, in your model for your resource -- in this case, let's say it's a book -- you may have some validation rules for what constitutes a well-formed book.  That model might look like:</p>

<p><code>ruby book.rb
class Book &lt; ActiveRecord::Base
  validates :title, presence: true
end
</code></p>

<p>Thus, if I try to create a new book without a title, I should get some sort of error.  And indeed, I do.  If I have a <code>books_controller.rb</code> that looks like this:</p>

<p>```ruby books_controller.rb
class BooksController &lt; ApplicationController
  def create</p>

<pre><code>book = Book.new(book_params)
if book.save
  render json: book
else
  render json: book.errors  # Allowing default serialization
end
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def book_params</p>

<pre><code>params.permit(:title)
</code></pre>

<p>  end
end
```</p>

<p>By default, Rails 4 will return an error serialization that looks like this:</p>

<p>```json
{
  "title": [</p>

<pre><code>"can't be blank"
</code></pre>

<p>  ]
}
```</p>

<h2>Custom Error Serializer in Rails</h2>

<p>But I wrote a client that doesn't consume errors in the default Rails format, so I want a custom error serialization format -- specifically one to match the JSON API specs.</p>

<p>On the line in <code>books_controller.rb</code> that was returning <code>book.errors</code>, now we'll introduce a new function to call:</p>

<p><code>ruby
render: json: ErrorSerializer.serialize(book.errors)
</code></p>

<p>We're going to write the serializer method in a separate file, <code>error_serializer.rb</code>, so it can be used in many controllers.  To gain access to it in our controller, we need to include the line:</p>

<p><code>ruby
include ErrorSerializer
</code></p>

<p>The contents of your <code>error_serializer.rb</code> can be whatever fits your use case.  For my simple JSON API implementation, it looks like:</p>

<p>```ruby error_serializer.rb
module ErrorSerializer</p>

<p>  def ErrorSerializer.serialize(errors)</p>

<pre><code>return if errors.nil?

json = {}
new_hash = errors.to_hash(true).map do |k, v|
  v.map do |msg|
    { id: k, title: msg }
  end
end.flatten
json[:errors] = new_hash
json
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Note the format includes an <code>errors</code> root attribute and an <code>id</code> and <code>title</code> for each error object.</p>

<p>Now, the errors serialization format from the API in the case of an error appears like:</p>

<p>```json
{
  "errors": [</p>

<pre><code>{
  "id": "title",
  "title": "Title can't be blank"
}
</code></pre>

<p>  ]
}
```</p>

<p>Just what we wanted.</p>

<p>I'm sure there are better places to put your error serialization logic, ways to call it, or great libraries you've worked with that do a similar thing.  Any suggestions?  Have fun!</p>
]]></content>
  </entry>
  
</feed>
