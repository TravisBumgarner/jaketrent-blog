<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: broccoli | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/broccoli/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2014-04-03T20:52:27-06:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Link to Broccoli Assets on a Webpage]]></title>
    <link href="http://jaketrent.com/post/link-broccoli-assets-on-webpage/"/>
    <updated>2014-03-18T08:06:00-06:00</updated>
    <id>http://jaketrent.com/post/link-broccoli-assets-on-webpage</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/joliss/broccoli">Broccoli.js</a> is good at <a href="http://www.solitr.com/blog/2014/02/broccoli-first-release/">building assets</a>.  But now that they're built, how does one use them on a webpage?</p>

<p><img src="http://i.imgur.com/oYpiHcU.jpg" alt="Broccoli" /></p>

<!--more-->


<h2>Broccoli Serve</h2>

<p>Broccoli has a great feature of having assets cached at every step in a list of transforms.  This makes it quite fast.  It can selectively reprocess only the subset of assets that have changed, and it can selectively transform only what's required.</p>

<p>Broccoli provides a command, <code>serve</code> that watches for changes to the trees specified in your <code>Brocfile.js</code> and spits them out to its temporary directory.  From there, it sets up a small webserver to serve the built assets to anyone who wants them.  The intent is that you can use this server in local dev on your sites.</p>

<p>Open your project and run:</p>

<p><code>
$ broccoli serve
Serving on http://localhost:4200
</code></p>

<p>And you'll get a local server defaulting on port 4200.</p>

<h2>Webpage Reference</h2>

<p>Now that you have this server for local assets, you need to reference it from your webpage.  Just as when you get to production, you'll want to reference a deployed asset on a CDN, locally broccoli can serve as your asset host.</p>

<p>You can accomplish this in any number of ways.  Essentially, you need two things:</p>

<h3>1. Environment Detection</h3>

<p>If you're in development, you'll want to use <code>http://localhost:4200</code> for asset host, otherwise you'll want to use something like <code>http://mycdn.com</code>.</p>

<p>Assuming less of your other infrastructure, we'll make Broccoli accomplish this (but you could do this easily with <code>NODE_ENV</code> or something similar).  Broccoli internally uses <code>BROCCOLI_ENV</code> to switch functionality.  To detect this value easily, you can install <a href="https://github.com/joliss/broccoli-env">the plugin</a>:</p>

<p><code>
npm install broccoli-env --save-dev
</code></p>

<p>Then you'll be able to use it in your <code>Brocfile.js</code> to switch on important things:</p>

<p><code>javascript
var env = require('broccoli-env').getEnv()
if (env === 'development') // do stuff
</code></p>

<p>Currently, the plugin only supports <code>development</code> and <code>production</code> values.</p>

<h3>2. View Compilation</h3>

<p>If you have a server-side component in your project that serves UI, you likely have this built in already with the likes of <code>erb</code>, <code>jade</code>, <code>swig</code>, or something else.  If you don't, again you can defer to Broccoli.  It's good at building assets after all.</p>

<p>As an example, there is a plugin for compiling <code>jade</code> templates, <a href="https://github.com/sindresorhus/broccoli-jade">broccoli-jade</a>.  First, install:</p>

<p><code>
npm install broccoli-jade --save-dev
</code></p>

<p>Then create a view to meet your needs.  Perhaps in part, that might look like:</p>

<p>```jade
doctype html
html
  head</p>

<pre><code>script(src="#{assetsHost}/main.js", type="text/javascript")
/ ...
</code></pre>

<p>```</p>

<p>Here, <code>assetsHost</code> is a variable that will be replaced at compile time with the appropriate asset host value.</p>

<p>Finally, in your <code>Brocfile.js</code> you can tie it all together with something like:</p>

<p>```javascript
var env = require('broccoli-env').getEnv()
var jade = require('broccoli-jade')
var tree = broccoli.makeTree('my/views/path')
tree =  jade(tree, {
  data: {</p>

<pre><code>assetsHost: env === 'development' ? 'http://localhost:4200' : 'http://mycdn.com'
</code></pre>

<p>  }
})
return tree
```</p>

<p>Now when the <code>jade</code> template is compiled, it will have as local data the value of <code>assetHost</code> according to the env set by <code>BROCCOLI_ENV</code>.</p>

<p>And since Broccoli is handling the building of your view, you can even use Broccoli to serve it.  If it's called <code>index.jade</code> and ends up at the root directory after building with Broccoli, you could serve your whole site at <code>http://localhost:4200</code>.</p>

<p>And just like that, you can dev locally referencing the assets that Broccoli is building for you.  Does it work for you?  Is the picture clear?</p>
]]></content>
  </entry>
  
</feed>
