<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Review | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/review/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2015-03-13T13:49:29-06:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA["12-Factor App" Summary]]></title>
    <link href="http://jaketrent.com/post/12-factor-app-summary/"/>
    <updated>2015-02-28T16:20:00-07:00</updated>
    <id>http://jaketrent.com/post/12-factor-app-summary</id>
    <content type="html"><![CDATA[<p>I recently had a chance to go through the principles of the 12-Factor App as listed on <a href="http://12factor.net/">12factor.net</a>.  It's written by some of the fine folk at Heroku.  The principles describe the best practices they see for how to get a modern web app deployed properly.  It's a short read.  This summary is even shorter.</p>

<p><img src="http://i.imgur.com/8aY0qiD.jpg" alt="12 Factors" /></p>

<!--more-->


<h5>1. Codebase</h5>

<ul>
<li>Always in src ctrl</li>
<li>One codebase per app (many repos = distributed system)</li>
<li>A deploy = instance of app running</li>
</ul>


<h5>2. Dependencies</h5>

<ul>
<li>All app and system dependencies explicitly declared</li>
<li>Do not dep on implicit existence of system tools (eg, ImageMagick)</li>
<li>Required sys tools vendored into app</li>
</ul>


<h5>3. Config</h5>

<ul>
<li>Strict separation between code and config</li>
<li>Config stored in env vars</li>
</ul>


<h5>4. Backing Services</h5>

<ul>
<li>Should be loosely coupled, swappable</li>
<li>Changes in services (eg, db) should not require code change</li>
</ul>


<h5>5. Build, release, run</h5>

<ul>
<li>Strict separation: build (binary), release (binary + env config), run (exec runtime)</li>
<li>Ordered -- can't make change upstream</li>
<li>Every release has unique id</li>
</ul>


<h5>6. Processes</h5>

<ul>
<li>Independent, stateless, share nothing</li>
<li>Sharing happens in backing service (eg, db)</li>
<li>No sticky sessions w/ process affinity</li>
</ul>


<h5>7. Port Binding</h5>

<ul>
<li>Can talk a protocol (eg, HTTP) by binding comm to a port</li>
<li>Allows an app to become a backing service for another app via a url</li>
<li>What does the alternative look like here?  Seems like a given.</li>
</ul>


<h5>8. Concurrency</h5>

<ul>
<li>Process is first-class citizen patterned after unix service daemons</li>
<li>Process can multiplex internally (eg, threads or something like node.js)</li>
<li>Scaling becomes a simple addition of the same process</li>
</ul>


<h5>9. Disposability</h5>

<ul>
<li>Startups are fast</li>
<li>Requests are short</li>
<li>Shutdowns are graceful; requests can finish; jobs returned to queue</li>
</ul>


<h5>10. Dev/Prod Parity</h5>

<ul>
<li>Time from dev to prod deploy should be short (eg, hrs)</li>
<li>Devs who wrote the code should be around to op the code</li>
<li>Toolchains and tech stacks should be as similar as possible</li>
<li>Backing servies should be the same, even if adapters supposedly abstract implementations</li>
</ul>


<h5>11. Logs</h5>

<ul>
<li>Logs are treated as streams, simply written by an app to stdout</li>
<li>Let log storage, collating, and analysis be done in the env or or w/ other tools</li>
<li>Logs should provide visibility to how an app works over time</li>
</ul>


<h5>12. Admin Processes</h5>

<ul>
<li>Run as one-off processes in REPL</li>
<li>Env shares same code and config as long-running processes</li>
</ul>


<p>If you have the extra little time required, I encourage you to check out <a href="http://12factor.net/">12factor.net</a> and draw some of your own conclusions.</p>

<p>What other insights do you have on these principles?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ideas From The Accidental Creative]]></title>
    <link href="http://jaketrent.com/post/ideas-from-accidental-creative/"/>
    <updated>2014-12-10T14:27:00-07:00</updated>
    <id>http://jaketrent.com/post/ideas-from-accidental-creative</id>
    <content type="html"><![CDATA[<p>I just finished a book about becoming a more productive and effective creative person, called “The Accidental Creative”.  It was a great book and included some thoughtful ideas that I ended up pondering and have started incorporating into my life.</p>

<p><img src="http://i.imgur.com/S3LkEjQ.jpg" alt="The Accidental Creative" /></p>

<!--more-->


<p>What follows are the big ideas from the book, broken into the areas that the author had identified and my short take on what each of them is or has the potential to benefit.</p>

<h2>Focus</h2>

<p><strong>Challenges</strong> - Define what you’re working on the big statements, sometimes in the form of questions, around what you’re focused on solving.</p>

<p><strong>The Big 3</strong> - Refine what you will actually tackle by aligning the efforts with what you’ve identified as your important work.</p>

<p><strong>Clustering</strong> - Avoid the frenetic task switching and the associated productivity penalties by scheduling single activities in order to deep and flow with your ideas.</p>

<h2>Relationships</h2>

<p><strong>Circles</strong> - Identify and regularly meet with people with similar interest with whom you can combine creative power and generate and vet new ideas.</p>

<p><strong>Head-to-heads</strong> - One-on-one meetings of people between who there is mutual respect in order to share as much value in the form of ideas and creative thought as possible.</p>

<p><strong>Core Team</strong> - Identify a handful of people in your life whose opinion and experience you value so much that you will trust yourself to be guided by their input on important decisions and life events.</p>

<h2>Energy</h2>

<p><strong>Whole-life Planning</strong> - Don’t pretend you can compartmentalize work and other parts of your life separately.  Rather, schedule and plan these things together to get a full picture of all important work you’re involved in.</p>

<p><strong>Pruning</strong> - Remove the things from your life that don’t match your big 3 or that are excessive energy drains in order to open possibilities for better/more results in areas that really matter to you.</p>

<h2>Stimuli</h2>

<p><strong>Study Plan</strong> - Have scheduled time to ingest new ideas and learn new things.</p>

<p><strong>Notation</strong> - In an effort to really digest what you experience, take notes and review them in order to understand more fully, remember, and let what you encounter change you for the better.</p>

<p><strong>Purposeful Experience</strong> - Filter the over-abundance of stimuli available to you and be intentional about what you experience, feeding your most important needs and efforts.</p>

<h2>Hours</h2>

<p><strong>Idea Time</strong> - Great ideas are important to the value you generate in your work, so actually schedule time to do nothing but  ponder and generate new ideas specifically for the future.</p>

<p><strong>Unnecessary Creating</strong> - Often what used to be a fulfilling creation activity for someone becomes drudgery and work without remembering what it feels like to just create without the pressure of the end product.</p>

<p>Have you read this book?  Others like it?  What are the practices that you’ve ended up incorporating, and how have you seen the benefits?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mountain West JavaScript Review]]></title>
    <link href="http://jaketrent.com/post/mtnwest-javascript-review/"/>
    <updated>2014-03-25T11:45:00-06:00</updated>
    <id>http://jaketrent.com/post/mtnwest-javascript-review</id>
    <content type="html"><![CDATA[<p>MountainWest JavaScript was a great conference last week.  It was a jubilee. Well, if you can have a jubilee in the first year of a conference.   Here's my take.</p>

<p><img src="http://i.imgur.com/VGtnQzX.png" alt="MtnWest JavaScript" /></p>

<!--more-->


<h2>Format</h2>

<p><a href="http://mtnwestjs.org/">MountainWest JavaScript</a> started this year as a part of the larger Mountain West conference set, including <a href="http://mtnwestdevops.org/">devops</a> and <a href="http://mtnwestrubyconf.org/">Ruby</a> as well.  It was two full days.  There is a single track -- everyone (that stays) hears everything.  Love both these features.  Splitting the disciplines into separate conferences is genius.</p>

<h2>Speakers</h2>

<p>The speaker lineup was exceptional.  There were many great minds assembled, fun experience shared, and great companies represented.  Following <a href="/post/ng-conf-review/">ng-conf</a> earlier this year, I was again pleasantly surprised at the amount of great content.  I did not attend the devops or ruby portions, but it has been said by some that they were not as exceptional.</p>

<p>Thanks to the organizers for selecting great content and presenters.  Thank you to all the speakers for preparing some killer talks.</p>

<h2>Topics</h2>

<p>The mix of topics seemed relevant and varied.  This was welcome.  There was just a bit of overlap on some topics.  Conference organizers put similar topics together, which was fine.  But in one case, the back-to-back speakers, from the same company and essentially the same topic had so much overlap that it was obvious.  Repetition is good, but it should be done in front of the YouTube recording of a single, great talk on the subject.  The conference was recorded, so hopefully we can see the sessions online soon.</p>

<h2>Venue</h2>

<p>The conference met at the Salt Lake City Public Library.  It's a great city.  It's a cool building.  It has a location close to public transit lines.  The stadium seating in the conference room is good for visibility but bad for knees.  There were plenty of power sources.</p>

<p>Despite these good points about the location, I found myself not super-excited about showing up at the library for another conference.  I feel like it's time for something fresh.</p>

<h2>Swag</h2>

<p>There was a nice shirt with mysterious symbols emblazened across the front.  Ruby was discernable.  I'm still up in the air over which represents JavaScript or devops.  There was also a nice, laminate sticker that they gave out with the conference logo.  Sponsors gave out nothing.  I was hoping for an O.C. Tanner gold bracelet and Instructure panda hoodie.  There was also a stunning lack of sweet treats and lunch. :(  In the place of actual food, there was an especially long, 2-hour lunch break -- oh, and a lot of water.</p>

<h2>I'd Go Again</h2>

<p>I'd definitely go again if the speaker and topic lineup seemed as promising as it turned out to be this year.  Next year, hopefully I'll attend at a different location in Salt Lake City and enjoy a chocolate eclair whilst learning about how I can actually use es6 features in the then-current evergreen browsers.</p>

<h2>My Notes</h2>

<p>As I've indicated, there were many topics touched upon that were interesting and helpful.  I've included my chicken scratch below (if you can actually type chicken scratch), mostly so you can grab some hyperlinks if you'd like.</p>

<p>```</p>

<p>react.js - Pete Hunt - made react look very interesting from a perspective of the underlying ideas</p>

<pre><code> - jsx - http://facebook.github.io/react/docs/jsx-in-depth.html
 - virtual dom
 - simplicity over familiarity
  - riot.js - super-small mvp lib - https://moot.it/riotjs/docs/
</code></pre>

<p>macros - James Long -</p>

<pre><code> - sweet.js
</code></pre>

<p>async js - Jafar Husain - simplicity of event handling, handling of race conditions, and description of handling looked very compelling</p>

<pre><code> - observable - combine iterator (‘i’m done’) with event (pub sub)
 - events are just arrays
 - vector programming - transformations over collections
 - practice and learn - http://jhusain.github.io/learnrx/
</code></pre>

<p>async -</p>

<pre><code> - same bit as above
 - rxjs - http://reactive-extensions.github.io/RxJS/ - https://rx.codeplex.com/
 - Reactive Manifesto - http://www.reactivemanifesto.org/
</code></pre>

<p>ball of mud - Brandon Hays - most entertaining; great</p>

<pre><code> - Ball of mud architecture - http://laputan.org/mud/
 - @tehviking
</code></pre>

<p>TDD ember - Andy Pliszka</p>

<p>Screenreaders - Ryan Florence - a humanistic appeal to do the right thing and help those with disabilities on the web</p>

<pre><code> - aria-role
</code></pre>

<p>seo - Jeff Whepley</p>

<pre><code> - fragment spec
 - make server render substates, js can pick up
</code></pre>

<p>teach kids js - Liz Abinante - fun and light encouragement to share programming concepts with children</p>

<pre><code> - children are moldable
 - creative, imagination
 - not limited by inhibitions
 - start early, have time for mastery by young age.
</code></pre>

<p>modules, packages - Guy Bedford</p>

<pre><code> - traceur - still use
 - es6-module-loader - es6 loader polyfill - used by addy osmani’s todomvc - http://addyosmani.github.io/todomvc-backbone-es6/
 - systemjs - shim require on top of es6 loader polyfill
 - jspm.io + systemjs - https://github.com/systemjs
 - addy osmani’s todomvc rewrite experience - http://blog.tastejs.com/rewriting-a-webapp-with-ecmascript-6
</code></pre>

<p>web animation - Jeremy Kahn</p>

<pre><code> - detect end of css animation - http://blog.teamtreehouse.com/using-jquery-to-detect-when-css3-animations-and-transitions-end
 - edit keyframe animation via js - https://github.com/jlongster/css-animations.js
 - js tweening - https://github.com/jeremyckahn/shifty/
 - stylie - viz tool create keyframe animation
</code></pre>

<p>hardware hack - Jamisson Dance</p>

<pre><code> - npm - johnny-five - node arduino
 - npm - xbox-controller
 - parrot ar drone
      - “That’s against the spirit of node to use something when you could rewrite it yourself.”
 - arduino uno w/ breadboard - ~$100
</code></pre>

<p>flight.js - Kassandra Perch</p>

<pre><code> - slides - http://kperch.github.io/mtn_west/
</code></pre>

<p>node error handling - Jamund Ferguson</p>

<pre><code> - Kraken - on top of express - https://github.com/paypal/kraken-js
 - try/catch - for json.parse
 - callback - first param is err
 - custom error - custom name, attach custom data (e.g., ServerError has a list of services hitting, ports, etc)
 - process.on(‘uncaughtException’) must always process.exit()
 - handle errors in middleware - call next w/ error as first param, call return right after
 - use default error handler in express - app.use(function (err, req, res, next) { res.send(500, etc) })
 - node core notes - https://nodefirm.hackpad.com/Node-Error-Handling-Summit-uXFi4FUg8Td
</code></pre>

<p>client error handling - Todd Gardner</p>

<pre><code> - error handling service - http://trackjs.com/
 - name your inner functions
 - stacktrace.js - normalizes format of stack trace
 - tracekit.js - get stack traces in old browsers
 - zone.js - long stack traces across async events
</code></pre>

<p>gulp - Eric Schoffstall</p>

<pre><code> - getfractal
 - still has problems with 3rd-party file-based builds, such as require.js
 - github.com/substack/stream-handbook
</code></pre>

<p>canvas animation - Josh Robertson</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switch: How to Change Things When Change is Hard Review]]></title>
    <link href="http://jaketrent.com/post/switch-review/"/>
    <updated>2014-03-04T07:51:00-07:00</updated>
    <id>http://jaketrent.com/post/switch-review</id>
    <content type="html"><![CDATA[<p>The book is called Switch: How to Change Things When Change is Hard.  It's by Chip Heath and Dan Heath.  It shows interesting anecdotes and good strategies on how to motivate people and situations to change.</p>

<p><img src="http://i.imgur.com/zjnOrqX.jpg" alt="Switch" /></p>

<!--more-->


<h2>Who are you?</h2>

<p>Did you know you are actually a combination elephant and rider?  Your rider represents your analytical thinking.  He wants to know every option.  He gets hung up in analysis paralysis.  It is likely he'll never make a decision.  Your elephant represents your emotions and your instincts on things.  It's much bigger than the rider, who is supposedly in control.  If your elephant decides it wants something, it usually gets its way.</p>

<p>This analogy of our two halves is a bit silly but works quite well.  It illustrates well our internal struggle.  It helps me realize how I approach problems, seek solutions, and eventually make a choice on how to proceed.  I thought it was quite helpful.  As with most of the concepts in the book, it is revisited many times, presumably in order for us to do a better job remembering the concept.</p>

<h2>Practical and Powerful</h2>

<p>The 3 main thrusts of the book are focused around a strategy that the authors stated they hoped was small and simple enough to be memorable and practiced yet real and powerful enough to actually help us exact change.</p>

<h3>1. Direct the Rider</h3>

<p>The rider, admittedly, will not make decisions easily.  So, he needs some direction.  It can be hard to choose how to even begin to change.  The main helps stated in the book are as follows:</p>

<h4>Follow the Bright Spots</h4>

<p>In the problem situation or field that you are considering, there are most definitely things that <em>are</em> working.  These are the bright spots.  Why not replicate these good things in your own way for your own problem?  There are people who have faced a similar problem, whether they knew it or not, and found their way through all or part of it.  These are usually easier to discover than by starting from scratch.  And we know they'll work!</p>

<h4>Script the Critical Moves</h4>

<p>To ensure the rider takes action, you'll want to make it more than abundantly clear what <em>exactly</em> you want him to do.  If there is one thing that will make the biggest impact, that becomes your critical move.  Script, just as in a screenplay, exactly what actors in the program are expect to perform.</p>

<h4>Point to the Destination</h4>

<p>As the rider is weighing options, there will be many that appeal to him (or not).  It will be important to enumerate in an analytical way why the destination you're choosing is worth pointing toward.</p>

<h3>2. Motivate the Elephant</h3>

<p>The elephant, once sufficiently motivated becomes the powerhouse that ensures change will begin.  The elephant is the one to change inertia, bringing us lurching out of our standing position.</p>

<h4>Find the Feeling</h4>

<p>Knowledge alone will not change behavior.  This is obvious considering our clear knowledge of the ill effects of habits such as smoking.  People still smoke.  So we must additional paint an emotional picture of what a change may mean to someone, what it will feel like, and the deeper reasons for attempting it.</p>

<h4>Shrink the Change</h4>

<p>Large changes require a large effort and many steps.  It may look daunting, especially to start.  The elephant starts on emotion, but it will also stop by the same virtues.  Break down the change into steps that are small and readily doable.</p>

<h4>Grow Your People</h4>

<p>People attach themselves to causes.  Causes appeal to the inner values of people and motivate them from within.  Encourage a sense of identity with the change you're promoting.  If people can identify with the behavior as a part of who they are, they are likely to meet the change with a great dose of internal enthusiasm and excitement.</p>

<h3>3. Shape the Path</h3>

<p>Even with great instructions for our riders and motivation for our elephant, the friction to change may still be strong.  There is still more we can do to help.</p>

<h4>Tweak the Environment</h4>

<p>What looks like resistance from a person may just be that person falling into the environmental norms.  It may be the way things have always been done, and it's natural to continue doing them.  Make the change you advocate the most natural thing to do as a product of the environment.  And consider environmental change your responsibility before you blame others for not responding well to change.</p>

<h4>Build Habits</h4>

<p>It turns out that making decisions, especially hard decisions to change, takes energy and will power.  And we only have so much to give.  If something becomes automatic, the effort to enact the behavior will be much lower.  We'll just do it.  Determine how you can create triggers that happen automatically to regularly change behavior along the path.</p>

<h4>Rally the Herd</h4>

<p>Behavior is contagious.  People want to respond as others around them do.  Most people instinctively do not want to stand out, especially in negative ways, compared to the crowd around them.  To encourage change, publicize the majority behavior that is in line with what you seek.</p>

<h2>Style and Read</h2>

<p>Switch is a pretty short book.  The sheer amount of anecdotal and interesting examples of people chaning their lives and communities made it fun and inspiring to read.  I think I'd have to re-read it to have the strategies and tactics for change sink in deep enough to pull them out in the midst of change, but it does seems small enough to remember and powerful enough to be useful.  At the least, it's a great reference.  I'd recommend the book.  And since everyone has encountered and/or wants to change, it seems like an applicable read.  Chip and Dan have several other books I'm going to go check out now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ng-Conf Review]]></title>
    <link href="http://jaketrent.com/post/ng-conf-review/"/>
    <updated>2014-01-24T07:22:00-07:00</updated>
    <id>http://jaketrent.com/post/ng-conf-review</id>
    <content type="html"><![CDATA[<p>Ng-Conf just happened last week in Salt Lake City, Utah.  It was awesome.  Oh blast, I blew the punch line.  Anyway, here's my take.</p>

<p><img src="http://i.imgur.com/4swtO6x.jpg" alt="ng-conf" /></p>

<!--more-->


<h2>Format</h2>

<p>Two days.  Early 'til late.  One track.  20-40 min talks virtually back to back.  Lightning'y?  When we broke for lunch, I felt relieved.  My brain could go into some low-power mode.  Breaks between talks were mostly announced as anywhere from 30 seconds to 3 minutes, this whilst yammering off a short list of swag winners.  The format encouraged content, and there was a lot of it!</p>

<h2>Line Up</h2>

<p>The conference was easy to look forward to.  Looking at the speaker list, I was immediately impressed.  At one point during the event, Aaron Frost said that they hoped if the Angular team would come that they'd get more attendees.  Yes, that was a draw.  It was fun having them there.  Core.  Very core.  I believe that about each member of the team took the stage over the two days.</p>

<p>The speaker list in total was very impressive.  There was a good mix of local and remote talent who came together to cover a broad array of Angular and JavaScript-related topics.</p>

<h2>Talk Quality</h2>

<p>Talk for talk, just numbers-wise, it was definitely one of the most high quality conferences I've attended.  Of course, there were some less-than-stellar presentations.  But, on the whole, I was more than impressed by the subject mastery and teaching ability of the speakers.  Thank you to everyone who prepared.</p>

<p>There were also some definite highlights: Dave Smith on directives, Vojta Jina on DI, Brian Ford on zone.js, and Julie Ralph on Protractor.</p>

<p>And one of the best parts is that each of these talks was recorded on video for a livestream and <a href="http://www.youtube.com/user/ngconfvideos">on youtube for later viewing</a>.</p>

<h2>Venue</h2>

<p>The conference was held at the Little America hotel in Salt Lake City.  It was a beautiful location.  The combined main ballrooms that the talks were held in were awesome.  Plenty of marble.  The food was great.  There weren't tons of snacks, but that was probably good for my health.  The air quality in Salt Lake during the conference wasn't good.  In fact, oobleck!  But, I didn't get food poisoning -- plus!</p>

<h2>Smooth</h2>

<p>I heard it said by multiple people during the conference that it was the best first-time conference they had attended.  Indeed, everything went Domo smooth.  The content was the star.  It was fun.  It was energetic (minus some confusing lack of screaming for all the sweet swag -- probably had something to do with the sheer amount, like clapping for the 3rd curtain call).  The AV crew did a fantastic job.  Usually, it's annoying to sit in an audience as video or audio problems plague the start of a talk.  That simply did not happen here, and it was oh, so refreshing.</p>

<p>Oh yeah, and sweet jacket!</p>
]]></content>
  </entry>
  
</feed>
