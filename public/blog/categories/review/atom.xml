<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Review | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/review/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2016-08-24T10:33:30-06:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fluent Conf Review]]></title>
    <link href="http://jaketrent.com/post/fluent-conf-review/"/>
    <updated>2016-03-15T06:37:00-06:00</updated>
    <id>http://jaketrent.com/post/fluent-conf-review</id>
    <content type="html"><![CDATA[<p>I went to my first <a href="http://conferences.oreilly.com/fluent/javascript-html-us">Fluent conf</a> this year.  It was a generally good experience.  I enjoyed the company and the topics.  Maybe I'll go again.</p>

<p><img src="http://i.imgur.com/aG1CC3U.jpg" alt="Fluent Conf" /></p>

<!--more-->


<h2>Training</h2>

<p>I went to the one-day training before the conference, where there were half and quarter day sessions around a single topic.  I went to an awesome "Building a desktop app with Electron" training, where the content was great, the teacher, Steve Kinney, was exceptional, and I felt accomplished as we learned new things and got to create something together with my own typing fingers.  It went very quickly and probably could have been a bit more solid with even a full day of training.</p>

<p>I did two other trainings that weren't nearly as good.  The people were smart, imparting what obviously took some brains to figure out, but they weren't engaging as teachers and couldn't capture my attention well enough to make me feel like I was along for the ride.  Pre-conference prep material suggested that we'd be producing something together in these sessions as in the Electron session.  That would have been awesome.  I am a kinetic learner.  Unfortunately, there was no attempt to build upon pre-session work, and both other sessions felt dull in comparison to the morning's ride.</p>

<h2>Keynotes</h2>

<p>The mix of keynotes was great at the conference.  There were some heavy hitters: Brendan Eich and Doug Crockford.  There were some new, refreshing faces and topics from the likes of Laurie Voss and Alex Russell.  The keynotes were shorter than others I've seen -- shorter than even the other sessions.  They felt almost like lightning talks, but from big web tech personalities.  The content was varied.  The delivery was all very good.  These were high points in the conference.</p>

<h2>Sessions</h2>

<p>The sessions were mostly good.  I have a general like-dislike relationship with conference talks.  I have to remember that the point is not to be permanently changed at the end of the talk or to have immediately picked up some great new skill.  The probable best place that I can be at the end of a session is inspired, pointed in a new, interesting direction, with enough information to know what I don't know and go figure it out.</p>

<p>There was a ton of content, with 6 tracks most hours.  Some of the highlight talks that I went to were: "This talk is not available offline", by Alex Rickabaugh, talking about "Progressive Web Apps", Service Workers, and how to create a more native-like web experience; "How to write a worthwhile test", by Justin Searls, which was chock full of valuable insight for test creation and tooling; and "Building our reactive future", by Matthew Podwysocki, talking about Rx.js and how Observables are expressive coding constructs -- he was hilarious too.  I'm sure I missed some other great ones.  Should I have bought that expensive "watch the recorded videos later" package?</p>

<p>I did attend a few less-than-stellar sessions, during which I read all the docs on <a href="http://cycle.js.org/">Cycle.js</a> and worked through all the examples.  It's a super interesting framework and fit in with a large tech theme from the conference, <a href="http://reactivex.io/documentation/observable.html">Observables</a>.</p>

<h2>Venue</h2>

<p>San Fransisco is a fun city.  I love walking around the city.  It was unfortunately unusually overcast and drizzly weather while we were there.  We had less rain than was forecast, so that was good, and we were able to get out into the city at night.  Perhaps because of all the cloud cover, it seemed like it was always super late by the time we got out.</p>

<p>The conference was all held inside the Marriot Marquee.  It was held in the basement.  There were no windows.  Thankfully, they had good HVAC to mostly evacuate all the nerd smell.  It was funny going in the first time, because you go down about 3 flights of escalators, making it feel like you're on your way to the subway.  I don't know how many 1000+ attendees there were, but it was amazing that the hotel had that much space.  The basement must have extended underground underneath the adjoining plaza.  The Marriot was nice.  The staff were very friendly.  There was the strict policing of badge checking at most entrances -- that was annoying.</p>

<p>Getting to and from San Fransisco proved laborious with a hefty layover on the way in and a hefty delay getting out, due to weather.  This task alone made me consider just buying the virtual conference option next time.  It was fun to meet a bunch of people from all over the globe though.  Perhaps they could all come visit me in the Rocky Mountains next time, and we could party here.</p>

<h2>Food</h2>

<p>Lunches were good.  The food was good and interesting.  The lines went quickly, especially on day 2, where it seemed that they had 12 independent lines for lunch.  That was awesome.  Apparently I just got lucky the first day.  There were enough people that a proper dinner and after party didn't happen.  There was a reception the first night, which consisted of an hour of other people drinking alcohol.  I had a water.  Water from Norway never tasted so good.</p>

<h2>Swag</h2>

<p>The conference gave out water bottles.  They were on a shelf in the hall.  Oh, and they gave out name tags.  Beyond that, there was an exhibition hall with vendors giving out the usual -- stickers, t-shirts, and trinkets.  I love a good sticker and found quite a few.  Github had the best.  Codeschool had some awesome ones too, such as 80s neon "Staying Sharp with Angular".  So good.  I also replenished my summer wardrobe of T-shirts.  Heroku did go beyond T-shirts, which is a trend we should encourage, and now I have some rockin' purple socks.</p>

<h2>Going Again</h2>

<p>Fluent was a great experience and a highlight web conference for the year.  I've heard it has been even better in years past.  It's probable that I'd go again to try it out again and hope for an even better experience.  Thanks, Fluent, and I'll see you next time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Rally Review]]></title>
    <link href="http://jaketrent.com/post/react-rally-review/"/>
    <updated>2015-08-27T09:03:00-06:00</updated>
    <id>http://jaketrent.com/post/react-rally-review</id>
    <content type="html"><![CDATA[<p>React Rally is a developer conference created around the library of <a href="http://facebook.github.io/react/">React.js</a> and the community that uses it.  It was the first of its name.  It was the first React-centric conference in Salt Lake City.  I had a great time.  Here are a few of reasons I liked it.</p>

<p><img src="http://i.imgur.com/B8fFS4J.jpg" alt="react rally" /></p>

<!--more-->


<h2>People Breakouts</h2>

<p>It was a happy conference.  A great mood was set by <a href="https://twitter.com/jergason">Jamison</a> on stage, who MC'ed most of the conference.  He's a fun, quirky guy who's not self-important and who did a great job putting speakers and the audience at ease.  There were a ton of participants and attendees at the conference that also fit this (good!) description.  This led to great conversation between sessions.  There were plenty of breaks, some 30 or 60 minutes at a time.  They were well-spaced, allowing plenty of time.  There was a pleasant <a href="http://rangle.io/">Rangle.io</a>-sponsored lounge to gather in.</p>

<p>There were no on-stage questions and answers portions at the end of the talks.  I wondered how I'd like this, since who doesn't like answer to their questions, right?  It turned out to be refreshing.  Speakers finished their talks at the appointed time.  No one had to wait around uncomfortably wondering when either the speaker or the audience would let everyone else off the hook.  No embarrassing questions.  It was nice.  All the speakers were great anyway, but I think this feature also helped prime the conversations that were expected to happen after the talks in the breakouts, giving extra motivation for everyone to be available and approachable.</p>

<h2>The Spoken Word</h2>

<p>I was excited going into the conference because of the solid lineup of speakers.  Not all the talks were the best I had heard or the best treatment of every subject.  There were some highlights thought, and on the whole it was really, really good.  Each of the speakers had obviously prepared a great deal and had taken their time on stage seriously (or not seriously in the case of <a href="https://twitter.com/djsmith42">Dave Smith</a>, whose talk was memorable and awesome as well, btw).</p>

<p>The conference wasn't wholly about React.  There's just so much <em>around</em> React that is exciting.  The community is pushing boundaries all over the place.  (And <em>still</em> all the content in the conference was appropriate, yay! :)  For instance, there were a great many mentions of <a href="http://elm-lang.org/">Elm</a>.  For my part, I spent much of the conference tinkering with that very thing.</p>

<h2>Fun Design</h2>

<p>It'll reveal how much art does for me, but when I first learned about the conference, one of the things that excited me the most was the <a href="http://www.reactrally.com/">website</a>.  It had a fun design!  There were illustrations, interesting colors, and it looked like a fun theme.  (Of course, at the time there was literally nothing else to be excited about outside the mailing list input box.)</p>

<p>We need more illustrations.  We need more mascots.  A menacing purple squid with a React symbol on its forehead?  Yes, please!  My previously bare brushed metal laptop lid is now bestickered with the sweetest conference stickers I have.  So fun!</p>

<p>I'm still not sure what the theme was intended to be.  My interpretation was Creatures of the Black Lagoon in Space.  Right?!</p>

<h2>Feels Like the First Time</h2>

<p>The organizers did a great job.  The preparation was obvious.  They assured me they were putting out fires for the duration of the two days.  That was not apparent.  The thing went off without a hitch.  I can only poke at the annoying AV glitch of a blinky project screen in some talks.</p>

<p>Everything seemed in its place.  The conference was small, about 250 participants, and it seemed like a large house party most of the time.  The venue was prepped very well.  I'm glad they opened up the downstairs lounge.  The food was great.  The breakfast trucks were a wonderful touch, especially <a href="http://saturdayswaffle.com/">Saturdays Waffles</a> day.  Mmmmm, waffles.  The gift card for lunch was a thoughtful touch.  <a href="http://www.yelp.com/biz/atlantic-caf%C3%A9-and-market-salt-lake-city-4">Atlantic Cafe</a> provided my delicious cevapi sausage on the 2nd day.</p>

<p>I have many thanks for the great speakers, the effort of the organizers, and everyone in between that made the 2 days great.  I felt inspired.  I left more informed.  I met a group of fantastic people.  It's been my favorite conference in Salt Lake City so far.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["12-Factor App" Summary]]></title>
    <link href="http://jaketrent.com/post/12-factor-app-summary/"/>
    <updated>2015-02-28T16:20:00-07:00</updated>
    <id>http://jaketrent.com/post/12-factor-app-summary</id>
    <content type="html"><![CDATA[<p>I recently had a chance to go through the principles of the 12-Factor App as listed on <a href="http://12factor.net/">12factor.net</a>.  It's written by some of the fine folk at Heroku.  The principles describe the best practices they see for how to get a modern web app deployed properly.  It's a short read.  This summary is even shorter.</p>

<p><img src="http://i.imgur.com/8aY0qiD.jpg" alt="12 Factors" /></p>

<!--more-->


<h5>1. Codebase</h5>

<ul>
<li>Always in src ctrl</li>
<li>One codebase per app (many repos = distributed system)</li>
<li>A deploy = instance of app running</li>
</ul>


<h5>2. Dependencies</h5>

<ul>
<li>All app and system dependencies explicitly declared</li>
<li>Do not dep on implicit existence of system tools (eg, ImageMagick)</li>
<li>Required sys tools vendored into app</li>
</ul>


<h5>3. Config</h5>

<ul>
<li>Strict separation between code and config</li>
<li>Config stored in env vars</li>
</ul>


<h5>4. Backing Services</h5>

<ul>
<li>Should be loosely coupled, swappable</li>
<li>Changes in services (eg, db) should not require code change</li>
</ul>


<h5>5. Build, release, run</h5>

<ul>
<li>Strict separation: build (binary), release (binary + env config), run (exec runtime)</li>
<li>Ordered -- can't make change upstream</li>
<li>Every release has unique id</li>
</ul>


<h5>6. Processes</h5>

<ul>
<li>Independent, stateless, share nothing</li>
<li>Sharing happens in backing service (eg, db)</li>
<li>No sticky sessions w/ process affinity</li>
</ul>


<h5>7. Port Binding</h5>

<ul>
<li>Can talk a protocol (eg, HTTP) by binding comm to a port</li>
<li>Allows an app to become a backing service for another app via a url</li>
<li>What does the alternative look like here?  Seems like a given.</li>
</ul>


<h5>8. Concurrency</h5>

<ul>
<li>Process is first-class citizen patterned after unix service daemons</li>
<li>Process can multiplex internally (eg, threads or something like node.js)</li>
<li>Scaling becomes a simple addition of the same process</li>
</ul>


<h5>9. Disposability</h5>

<ul>
<li>Startups are fast</li>
<li>Requests are short</li>
<li>Shutdowns are graceful; requests can finish; jobs returned to queue</li>
</ul>


<h5>10. Dev/Prod Parity</h5>

<ul>
<li>Time from dev to prod deploy should be short (eg, hrs)</li>
<li>Devs who wrote the code should be around to op the code</li>
<li>Toolchains and tech stacks should be as similar as possible</li>
<li>Backing servies should be the same, even if adapters supposedly abstract implementations</li>
</ul>


<h5>11. Logs</h5>

<ul>
<li>Logs are treated as streams, simply written by an app to stdout</li>
<li>Let log storage, collating, and analysis be done in the env or or w/ other tools</li>
<li>Logs should provide visibility to how an app works over time</li>
</ul>


<h5>12. Admin Processes</h5>

<ul>
<li>Run as one-off processes in REPL</li>
<li>Env shares same code and config as long-running processes</li>
</ul>


<p>If you have the extra little time required, I encourage you to check out <a href="http://12factor.net/">12factor.net</a> and draw some of your own conclusions.</p>

<p>What other insights do you have on these principles?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ideas From The Accidental Creative]]></title>
    <link href="http://jaketrent.com/post/ideas-from-accidental-creative/"/>
    <updated>2014-12-10T14:27:00-07:00</updated>
    <id>http://jaketrent.com/post/ideas-from-accidental-creative</id>
    <content type="html"><![CDATA[<p>I just finished a book about becoming a more productive and effective creative person, called “The Accidental Creative”.  It was a great book and included some thoughtful ideas that I ended up pondering and have started incorporating into my life.</p>

<p><img src="http://i.imgur.com/S3LkEjQ.jpg" alt="The Accidental Creative" /></p>

<!--more-->


<p>What follows are the big ideas from the book, broken into the areas that the author had identified and my short take on what each of them is or has the potential to benefit.</p>

<h2>Focus</h2>

<p><strong>Challenges</strong> - Define what you’re working on the big statements, sometimes in the form of questions, around what you’re focused on solving.</p>

<p><strong>The Big 3</strong> - Refine what you will actually tackle by aligning the efforts with what you’ve identified as your important work.</p>

<p><strong>Clustering</strong> - Avoid the frenetic task switching and the associated productivity penalties by scheduling single activities in order to deep and flow with your ideas.</p>

<h2>Relationships</h2>

<p><strong>Circles</strong> - Identify and regularly meet with people with similar interest with whom you can combine creative power and generate and vet new ideas.</p>

<p><strong>Head-to-heads</strong> - One-on-one meetings of people between who there is mutual respect in order to share as much value in the form of ideas and creative thought as possible.</p>

<p><strong>Core Team</strong> - Identify a handful of people in your life whose opinion and experience you value so much that you will trust yourself to be guided by their input on important decisions and life events.</p>

<h2>Energy</h2>

<p><strong>Whole-life Planning</strong> - Don’t pretend you can compartmentalize work and other parts of your life separately.  Rather, schedule and plan these things together to get a full picture of all important work you’re involved in.</p>

<p><strong>Pruning</strong> - Remove the things from your life that don’t match your big 3 or that are excessive energy drains in order to open possibilities for better/more results in areas that really matter to you.</p>

<h2>Stimuli</h2>

<p><strong>Study Plan</strong> - Have scheduled time to ingest new ideas and learn new things.</p>

<p><strong>Notation</strong> - In an effort to really digest what you experience, take notes and review them in order to understand more fully, remember, and let what you encounter change you for the better.</p>

<p><strong>Purposeful Experience</strong> - Filter the over-abundance of stimuli available to you and be intentional about what you experience, feeding your most important needs and efforts.</p>

<h2>Hours</h2>

<p><strong>Idea Time</strong> - Great ideas are important to the value you generate in your work, so actually schedule time to do nothing but  ponder and generate new ideas specifically for the future.</p>

<p><strong>Unnecessary Creating</strong> - Often what used to be a fulfilling creation activity for someone becomes drudgery and work without remembering what it feels like to just create without the pressure of the end product.</p>

<p>Have you read this book?  Others like it?  What are the practices that you’ve ended up incorporating, and how have you seen the benefits?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mountain West JavaScript Review]]></title>
    <link href="http://jaketrent.com/post/mtnwest-javascript-review/"/>
    <updated>2014-03-25T11:45:00-06:00</updated>
    <id>http://jaketrent.com/post/mtnwest-javascript-review</id>
    <content type="html"><![CDATA[<p>MountainWest JavaScript was a great conference last week.  It was a jubilee. Well, if you can have a jubilee in the first year of a conference.   Here's my take.</p>

<p><img src="http://i.imgur.com/VGtnQzX.png" alt="MtnWest JavaScript" /></p>

<!--more-->


<h2>Format</h2>

<p><a href="http://mtnwestjs.org/">MountainWest JavaScript</a> started this year as a part of the larger Mountain West conference set, including <a href="http://mtnwestdevops.org/">devops</a> and <a href="http://mtnwestrubyconf.org/">Ruby</a> as well.  It was two full days.  There is a single track -- everyone (that stays) hears everything.  Love both these features.  Splitting the disciplines into separate conferences is genius.</p>

<h2>Speakers</h2>

<p>The speaker lineup was exceptional.  There were many great minds assembled, fun experience shared, and great companies represented.  Following <a href="/post/ng-conf-review/">ng-conf</a> earlier this year, I was again pleasantly surprised at the amount of great content.  I did not attend the devops or ruby portions, but it has been said by some that they were not as exceptional.</p>

<p>Thanks to the organizers for selecting great content and presenters.  Thank you to all the speakers for preparing some killer talks.</p>

<h2>Topics</h2>

<p>The mix of topics seemed relevant and varied.  This was welcome.  There was just a bit of overlap on some topics.  Conference organizers put similar topics together, which was fine.  But in one case, the back-to-back speakers, from the same company and essentially the same topic had so much overlap that it was obvious.  Repetition is good, but it should be done in front of the YouTube recording of a single, great talk on the subject.  The conference was recorded, so hopefully we can see the sessions online soon.</p>

<h2>Venue</h2>

<p>The conference met at the Salt Lake City Public Library.  It's a great city.  It's a cool building.  It has a location close to public transit lines.  The stadium seating in the conference room is good for visibility but bad for knees.  There were plenty of power sources.</p>

<p>Despite these good points about the location, I found myself not super-excited about showing up at the library for another conference.  I feel like it's time for something fresh.</p>

<h2>Swag</h2>

<p>There was a nice shirt with mysterious symbols emblazened across the front.  Ruby was discernable.  I'm still up in the air over which represents JavaScript or devops.  There was also a nice, laminate sticker that they gave out with the conference logo.  Sponsors gave out nothing.  I was hoping for an O.C. Tanner gold bracelet and Instructure panda hoodie.  There was also a stunning lack of sweet treats and lunch. :(  In the place of actual food, there was an especially long, 2-hour lunch break -- oh, and a lot of water.</p>

<h2>I'd Go Again</h2>

<p>I'd definitely go again if the speaker and topic lineup seemed as promising as it turned out to be this year.  Next year, hopefully I'll attend at a different location in Salt Lake City and enjoy a chocolate eclair whilst learning about how I can actually use es6 features in the then-current evergreen browsers.</p>

<h2>My Notes</h2>

<p>As I've indicated, there were many topics touched upon that were interesting and helpful.  I've included my chicken scratch below (if you can actually type chicken scratch), mostly so you can grab some hyperlinks if you'd like.</p>

<p>```</p>

<p>react.js - Pete Hunt - made react look very interesting from a perspective of the underlying ideas</p>

<pre><code> - jsx - http://facebook.github.io/react/docs/jsx-in-depth.html
 - virtual dom
 - simplicity over familiarity
  - riot.js - super-small mvp lib - https://moot.it/riotjs/docs/
</code></pre>

<p>macros - James Long -</p>

<pre><code> - sweet.js
</code></pre>

<p>async js - Jafar Husain - simplicity of event handling, handling of race conditions, and description of handling looked very compelling</p>

<pre><code> - observable - combine iterator (‘i’m done’) with event (pub sub)
 - events are just arrays
 - vector programming - transformations over collections
 - practice and learn - http://jhusain.github.io/learnrx/
</code></pre>

<p>async -</p>

<pre><code> - same bit as above
 - rxjs - http://reactive-extensions.github.io/RxJS/ - https://rx.codeplex.com/
 - Reactive Manifesto - http://www.reactivemanifesto.org/
</code></pre>

<p>ball of mud - Brandon Hays - most entertaining; great</p>

<pre><code> - Ball of mud architecture - http://laputan.org/mud/
 - @tehviking
</code></pre>

<p>TDD ember - Andy Pliszka</p>

<p>Screenreaders - Ryan Florence - a humanistic appeal to do the right thing and help those with disabilities on the web</p>

<pre><code> - aria-role
</code></pre>

<p>seo - Jeff Whepley</p>

<pre><code> - fragment spec
 - make server render substates, js can pick up
</code></pre>

<p>teach kids js - Liz Abinante - fun and light encouragement to share programming concepts with children</p>

<pre><code> - children are moldable
 - creative, imagination
 - not limited by inhibitions
 - start early, have time for mastery by young age.
</code></pre>

<p>modules, packages - Guy Bedford</p>

<pre><code> - traceur - still use
 - es6-module-loader - es6 loader polyfill - used by addy osmani’s todomvc - http://addyosmani.github.io/todomvc-backbone-es6/
 - systemjs - shim require on top of es6 loader polyfill
 - jspm.io + systemjs - https://github.com/systemjs
 - addy osmani’s todomvc rewrite experience - http://blog.tastejs.com/rewriting-a-webapp-with-ecmascript-6
</code></pre>

<p>web animation - Jeremy Kahn</p>

<pre><code> - detect end of css animation - http://blog.teamtreehouse.com/using-jquery-to-detect-when-css3-animations-and-transitions-end
 - edit keyframe animation via js - https://github.com/jlongster/css-animations.js
 - js tweening - https://github.com/jeremyckahn/shifty/
 - stylie - viz tool create keyframe animation
</code></pre>

<p>hardware hack - Jamisson Dance</p>

<pre><code> - npm - johnny-five - node arduino
 - npm - xbox-controller
 - parrot ar drone
      - “That’s against the spirit of node to use something when you could rewrite it yourself.”
 - arduino uno w/ breadboard - ~$100
</code></pre>

<p>flight.js - Kassandra Perch</p>

<pre><code> - slides - http://kperch.github.io/mtn_west/
</code></pre>

<p>node error handling - Jamund Ferguson</p>

<pre><code> - Kraken - on top of express - https://github.com/paypal/kraken-js
 - try/catch - for json.parse
 - callback - first param is err
 - custom error - custom name, attach custom data (e.g., ServerError has a list of services hitting, ports, etc)
 - process.on(‘uncaughtException’) must always process.exit()
 - handle errors in middleware - call next w/ error as first param, call return right after
 - use default error handler in express - app.use(function (err, req, res, next) { res.send(500, etc) })
 - node core notes - https://nodefirm.hackpad.com/Node-Error-Handling-Summit-uXFi4FUg8Td
</code></pre>

<p>client error handling - Todd Gardner</p>

<pre><code> - error handling service - http://trackjs.com/
 - name your inner functions
 - stacktrace.js - normalizes format of stack trace
 - tracekit.js - get stack traces in old browsers
 - zone.js - long stack traces across async events
</code></pre>

<p>gulp - Eric Schoffstall</p>

<pre><code> - getfractal
 - still has problems with 3rd-party file-based builds, such as require.js
 - github.com/substack/stream-handbook
</code></pre>

<p>canvas animation - Josh Robertson</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
