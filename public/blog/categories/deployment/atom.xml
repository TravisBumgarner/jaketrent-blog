<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: deployment | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/deployment/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2016-01-04T13:31:51-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA["12-Factor App" Summary]]></title>
    <link href="http://jaketrent.com/post/12-factor-app-summary/"/>
    <updated>2015-02-28T16:20:00-07:00</updated>
    <id>http://jaketrent.com/post/12-factor-app-summary</id>
    <content type="html"><![CDATA[<p>I recently had a chance to go through the principles of the 12-Factor App as listed on <a href="http://12factor.net/">12factor.net</a>.  It's written by some of the fine folk at Heroku.  The principles describe the best practices they see for how to get a modern web app deployed properly.  It's a short read.  This summary is even shorter.</p>

<p><img src="http://i.imgur.com/8aY0qiD.jpg" alt="12 Factors" /></p>

<!--more-->


<h5>1. Codebase</h5>

<ul>
<li>Always in src ctrl</li>
<li>One codebase per app (many repos = distributed system)</li>
<li>A deploy = instance of app running</li>
</ul>


<h5>2. Dependencies</h5>

<ul>
<li>All app and system dependencies explicitly declared</li>
<li>Do not dep on implicit existence of system tools (eg, ImageMagick)</li>
<li>Required sys tools vendored into app</li>
</ul>


<h5>3. Config</h5>

<ul>
<li>Strict separation between code and config</li>
<li>Config stored in env vars</li>
</ul>


<h5>4. Backing Services</h5>

<ul>
<li>Should be loosely coupled, swappable</li>
<li>Changes in services (eg, db) should not require code change</li>
</ul>


<h5>5. Build, release, run</h5>

<ul>
<li>Strict separation: build (binary), release (binary + env config), run (exec runtime)</li>
<li>Ordered -- can't make change upstream</li>
<li>Every release has unique id</li>
</ul>


<h5>6. Processes</h5>

<ul>
<li>Independent, stateless, share nothing</li>
<li>Sharing happens in backing service (eg, db)</li>
<li>No sticky sessions w/ process affinity</li>
</ul>


<h5>7. Port Binding</h5>

<ul>
<li>Can talk a protocol (eg, HTTP) by binding comm to a port</li>
<li>Allows an app to become a backing service for another app via a url</li>
<li>What does the alternative look like here?  Seems like a given.</li>
</ul>


<h5>8. Concurrency</h5>

<ul>
<li>Process is first-class citizen patterned after unix service daemons</li>
<li>Process can multiplex internally (eg, threads or something like node.js)</li>
<li>Scaling becomes a simple addition of the same process</li>
</ul>


<h5>9. Disposability</h5>

<ul>
<li>Startups are fast</li>
<li>Requests are short</li>
<li>Shutdowns are graceful; requests can finish; jobs returned to queue</li>
</ul>


<h5>10. Dev/Prod Parity</h5>

<ul>
<li>Time from dev to prod deploy should be short (eg, hrs)</li>
<li>Devs who wrote the code should be around to op the code</li>
<li>Toolchains and tech stacks should be as similar as possible</li>
<li>Backing servies should be the same, even if adapters supposedly abstract implementations</li>
</ul>


<h5>11. Logs</h5>

<ul>
<li>Logs are treated as streams, simply written by an app to stdout</li>
<li>Let log storage, collating, and analysis be done in the env or or w/ other tools</li>
<li>Logs should provide visibility to how an app works over time</li>
</ul>


<h5>12. Admin Processes</h5>

<ul>
<li>Run as one-off processes in REPL</li>
<li>Env shares same code and config as long-running processes</li>
</ul>


<p>If you have the extra little time required, I encourage you to check out <a href="http://12factor.net/">12factor.net</a> and draw some of your own conclusions.</p>

<p>What other insights do you have on these principles?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hotdeploy in Intellij 8]]></title>
    <link href="http://jaketrent.com/post/hotdeploy-intellij-8/"/>
    <updated>2008-11-22T14:02:00-07:00</updated>
    <id>http://jaketrent.com/post/hotdeploy-intellij-8</id>
    <content type="html"><![CDATA[<p>Development on JEE projects can be a real pain sometime.  1/2 of this (sometimes in literal minutes) is because of the need to spin up the server in order to run your code.  This server startup time can be a killer of one's development momentum.</p>

<p>True to its mantra, IntelliJ IDEA delivers some goodness is making this pain a little more pleasurable -- if that's possible.</p>

<!--more-->


<p>Development on JEE projects can be a real pain sometime.  1/2 of this (sometimes in literal minutes) is because of the need to spin up the server in order to run your code.  This server startup time can be a killer of one's development momentum.  If one is trying to make a change to code and then follow through and check the resulting differences, it can be much like running downstairs in one's house to fetch something, forgetting what that something was upon arrival.</p>

<p>It seems that the solutions to this problem are varied.  For me, it has meant: - Coding webapps in interpreted languages
- Trying IDE-based hotdeploy schemes
- Trying 3rd-party plugins like JavaRebel.</p>

<p>I have had problems with all 3 solutions:
- These are fun, but not what my employer uses
- I haven't found an IDE yet that hotdeploys to my liking.  It's always extremely hard to tell if an IDE has really done its job and if what the browser is giving back to me is the new version. Eclipse has tried to give a visual indicator with its 'Published'/'Republish' verbage in its Servers view, but it seems that this indicator is often wrong.
- I haven't had hardly any luck with JavaRebel.  Pre-version 1.0, it seemed buggy.  Then, I had problems integrating it with my IDE's build/deploy process.  Since the version 1.0 release, I haven't tried it again, but I hear it's still buggy.</p>

<p>As imperfect as the solutions are, it seems to me that the current best solution to the Java webapp hotdeploy is still the IDE-based hotdeploy scheme.  As my favorite IDE is IntelliJ IDEA, here's a little 1-2-3 on how to get hotdeploy working in IntelliJ 8 (as of Milestone 1, Diana):</p>

<h3>Select two important options</h3>


<p>Go to Settings > Compiler, and set "Deploy web applications to server after compilation" to "Never"</p>

<p><a href="http://picasaweb.google.com/lh/photo/qOoybG2F413C8IkbKljbug"><img src="http://lh5.ggpht.com/trent.jake/SNgOk1bJ1cI/AAAAAAAAENs/DTZhP4ZvYBk/s800/compileropt.png" /></a></p>

<p>Go to Settings > Debugger, and set "Reload classes after compilation" to "Always" and optionally check "Reload classes in background".</p>

<h3>Compile after a code change</h3>


<p>Now, every time you make a change to compiled code (e.g., .java files), make sure you re-compile.  The shortcut is Ctrl-Shift-F9.</p>

<p>And that's it!  Pleasurable development was meant to be fast and simple.</p>

<p>I'm a little unclear as to the essentialness, but as a general rule, I also set another option in the deployment settings for static file hotdeploy:</p>

<p>Go to Settings > Project Settings > your web module > Java EE Build Settings and check "Build on frame deactivation" and check "Build Web resources only"</p>

<p><a href="http://picasaweb.google.com/lh/photo/hsw-VeKzduwMGCANP4p5xg"><img src="http://lh4.ggpht.com/trent.jake/SNgSOwB4qyI/AAAAAAAAEOI/d07_gHC89nI/s400/projsettings.png" /></a></p>

<p>I haven't tested the utter-most limits of this hotdeploy.  I'm not really sure at their limitations, but I would guess that changes to method signatures or changes to descriptor files would require a server restart.  I am, however, unsure.  How about you?</p>

<p>Besides just the handy hotdeploy, one should also keep in mind that other things can help startup time: viva los smaller projects!  But, for anyone wanting to enjoy a behemoth, enjoy Napi.</p>
]]></content>
  </entry>
  
</feed>
