<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: spring | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/spring/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2016-12-31T16:01:30-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Read Request Body in Spring Bean]]></title>
    <link href="http://jaketrent.com/post/http-request-body-spring/"/>
    <updated>2012-11-27T14:10:00-07:00</updated>
    <id>http://jaketrent.com/post/http-request-body-spring</id>
    <content type="html"><![CDATA[<p>Spring is a great addition to your Java stack.  It helps you access the request for inside your Spring beans easily.  Maybe I'm doing it wrong, but reading the request body seems blasted verbose after that.  It takes a surprising amount of code.</p>

<p><img src="http://i.imgur.com/w8Ezm.jpg" alt="Happy Spring" /></p>

<!--more-->


<h2>Access the Request</h2>

<p>Spring's bread and butter, of course, is inversion of control.  So, to get to the request object itself is no big deal.  Just inject it (canonical packages shown forâ€¦ fun, mostly):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="nd">@javax.inject.Inject</span>
</span><span class='line'>  <span class="n">javax</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">HttpServletRequest</span> <span class="n">req</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And now for the pile of non-abstracted code.</p>

<h2>Parse the Body</h2>

<p>Number one, the body is accessed from the <a href="http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html"><code>HttpServletRequest</code></a> object it a place that wasn't obvious to me: <code>request.getReader()</code>.  Heads up, we've got a BufferedReader here.  Hey, at least we don't get a stream that we have to wrap in more than one reader!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">String</span> <span class="n">getBody</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">body</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="na">getMethod</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;POST&quot;</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>    <span class="n">BufferedReader</span> <span class="n">bufferedReader</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">bufferedReader</span> <span class="o">=</span>  <span class="n">req</span><span class="o">.</span><span class="na">getReader</span><span class="o">();</span>
</span><span class='line'>      <span class="kt">char</span><span class="o">[]</span> <span class="n">charBuffer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="mi">128</span><span class="o">];</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">bytesRead</span><span class="o">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">((</span><span class="n">bytesRead</span> <span class="o">=</span> <span class="n">bufferedReader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">charBuffer</span><span class="o">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">charBuffer</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">bytesRead</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// swallow silently -- can&#39;t get body, won&#39;t</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">bufferedReader</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">bufferedReader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// swallow silently -- can&#39;t get body, won&#39;t</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">body</span> <span class="o">=</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">body</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The code.  There is to much.  Let me sum up.  There's only going to be a body if you are doing a post.  Otherwise, don't worry about it.  If there is data, pull it into a string.  Everything else is for (not) handling errors.</p>

<p>There's a bit there.  It's not the worst.  But after getting used to <a href="http://expressjs.com/api.html#req.body">Express' bodyParser</a>, it was hard to see this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Exception Handling for AccessDeniedException]]></title>
    <link href="http://jaketrent.com/post/custom-exception-handling-accessdeniedexception/"/>
    <updated>2012-01-06T13:20:00-07:00</updated>
    <id>http://jaketrent.com/post/custom-exception-handling-accessdeniedexception</id>
    <content type="html"><![CDATA[<p>Our app throws all sorts of exceptions.  Well, it doesn't usually.  It shouldn't normally.  Er... But, when it does we want to put in some handling so that the app doesn't blow up in some unsuspecting user's face.  And even then, sometimes we want special handling for certain exceptions and make sure others are just caught.  And that's what we'll do with AccessDeniedException.</p>

<!--more-->


<h2>The Simple Case</h2>

<p>In the simple case, all exceptions that bubble up to the servlet container will just need to be caught and a user needs to get a nice view instead of stack trace shown to them.  There's a nice class called <code>SimpleMappingExceptionResolver</code> that does, in fact, resolve this.  Provide it with the mappings from exception types to views that you've created, and as exceptions surface, the user will be shown the views instead of the exceptions.  Here's the config:</p>

<p>```xml
<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
  <property name="exceptionMappings"></p>

<pre><code>&lt;props&gt;
  &lt;prop key=".AccessDeniedException"&gt;errors/accessDenied&lt;/prop&gt;
  &lt;prop key=".DataAccessException"&gt;errors/dataAccessFailure&lt;/prop&gt;
  &lt;prop key=".TypeMismatchException"&gt;errors/resourceNotFound&lt;/prop&gt;
  &lt;prop key=".NoSuchRequestHandlingMethodException"&gt;errors/resourceNotFound&lt;/prop&gt;
  &lt;prop key=".MissingServletRequestParameterException"&gt;errors/resourceNotFound&lt;/prop&gt;
&lt;/props&gt;
</code></pre>

<p>  </property>
  <property name="defaultErrorView" value="errors/generalError"/>
  <property name="warnLogCategory" value="com.rockycode"/>
</bean>
```</p>

<p>As it turns out, this is perfect for the simple case.  What if I want something special?  And when don't I?!</p>

<h2>Custom HandlerExceptionResolver</h2>

<p>In my case, I want to catch <code>AccessDeniedException</code> just like all others, except I want to do some special checking of the user attributes who just go rejected via Spring Security.  This means I need a custom <code>HandlerExceptionResolver</code>.  And thankfully these things aren't all that complicated.  Something custom to handle our <code>AccessDeniedException</code> might be called <code>AccessDeniedExceptionResolver</code> and looks somewhat like this:</p>

<p>```java
public class AccessDeniedExceptionResolver implements HandlerExceptionResolver, Ordered {</p>

<p>  private int order;</p>

<p>  public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {</p>

<pre><code>ModelAndView view = null;
if (ex instanceof AccessDeniedException) {
  // super special handling lives here
  view = new ModelAndView("specialness");
}
return view;
</code></pre>

<p>  }</p>

<p>  // .. getters and setters ..
}
```</p>

<p>The <code>resolveException()</code> method is where the magic goes.  I only care about a certain type of exception, so I check for it and do special stuff.  If not, the <code>view</code> is returned as null with just falls through to the next resolver in line if there is one.  And blast it, we want one.  Let's just use our existing simple case resolver.</p>

<h2>Setting up 2 ExceptionResolvers</h2>

<p>In <code>AccessDeniedExceptionResolver</code>, we implemented <code>Ordered</code>.  This shows priority in a potential string of resolvers.  We're going to setup our resolver for the specific case to be higher priority (lower number), remove the <code>AccessDeniedException</code> entry on <code>SimpleMappingExceptionResolver</code> and add an order property to it:</p>

<p>```xml
<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
  <property name="exceptionMappings"></p>

<pre><code>&lt;props&gt;
  &lt;prop key=".DataAccessException"&gt;errors/dataAccessFailure&lt;/prop&gt;
  &lt;prop key=".TypeMismatchException"&gt;errors/resourceNotFound&lt;/prop&gt;
  &lt;prop key=".NoSuchRequestHandlingMethodException"&gt;errors/resourceNotFound&lt;/prop&gt;
  &lt;prop key=".MissingServletRequestParameterException"&gt;errors/resourceNotFound&lt;/prop&gt;
&lt;/props&gt;
</code></pre>

<p>  </property>
  <property name="defaultErrorView" value="errors/generalError"/>
  <property name="warnLogCategory" value="com.rockycode"/>
  <property name="order" value="1"/>
</bean></p>

<p><bean class="com.rockycode.AccessDeniedExceptionResolver">
  <property name="order" value="0"/>
</bean>
```</p>

<p>Slap that config in your app context and sing for joy.  Now you can create as many custom handlers as you'd like and just string em up like clean laundry on the line.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['And' Spring @Secured Roles]]></title>
    <link href="http://jaketrent.com/post/and-spring-secured-roles/"/>
    <updated>2012-01-06T10:30:00-07:00</updated>
    <id>http://jaketrent.com/post/and-spring-secured-roles</id>
    <content type="html"><![CDATA[<p>Spring Security (previously Acegi) gives you an awesome AOP way of locking down methods in your Java application.  And well-placed <a href="http://www.youtube.com/watch?v=ldFOHUaf2zg">lock down</a> is a special power indeed.  However, Spring disappoints a bit on this score because it turns out its default behavior is to 'or' the roles listed in @Secured annotation.  You'd think the default would be the stricter 'and', but alas.  But never fear, there is hope.</p>

<!--more-->


<p><em>Updated (21 June 2012)</em>:</p>

<h2>The easy way</h2>

<p>This article can be simplified into this line of code:</p>

<p><code>java
@PreAuthorize("hasRole('ROLE_role1') and hasRole('ROLE_role2')")
</code></p>

<p>There are other combo options <a href="http://static.springsource.org/spring-security/site/docs/3.0.x/reference/el-access.html">as documented by Spring</a>.</p>

<p>If you wish to go on, enjoy the custom code and xml config that follows:  :)</p>

<p>There is always hope.</p>

<p>Note:  My experimentation with this and the line numbers in files mentioned here are from spring-security-core/3.0.7.RELEASE.</p>

<h2>GrantedAuthority</h2>

<p>Your authorities populator or however you're getting roles assigned to your user will eventually place them in the place that you can get to them programmatically:</p>

<p><code>java
SecurityContextHolder.getContext().getAuthentication().getAuthorities()
</code></p>

<p>And here is where the @Secured annotation will eventually look for them (AbstractSecurityInterceptor.java:204):</p>

<p><code>java
Collection&lt;ConfigAttribute&gt; attributes = this.obtainSecurityMetadataSource().getAttributes(object);
</code></p>

<p>This collection of <code>GrantedAuthorities</code> is are the roles that have been assigned to the user associated with your request to a method.</p>

<h2>@Secured</h2>

<p>When you want only users with certain authorities to access methods, you apply the <code>@Secured</code> annotation to the method needing protection.  Also note that you can specify multiple roles in this annotation:</p>

<p><code>java
@Secured({"role1", "role2"})
public void makeSomethingAwesome() {
  // pure awesome
}
</code></p>

<p>Again, to note what is important and initially stunned me:  By default, you just need one of these roles (either role1 OR role2) to make it into the innards of this awesomeness.  This is because of the default configuration.  From the <a href="http://static.springsource.org/spring-security/site/docs/3.0.x/reference/ns-config.html">Spring Security docs</a>:</p>

<p>The default strategy is to use an AffirmativeBased AccessDecisionManager with a RoleVoter and an AuthenticatedVoter.</p>

<h2>Role Name Prefix</h2>

<p>Another point worth making is about the prefix required for roles.  Roles that are counted by the <code>RoleVoter</code> are only seen as roles if they start with the specified prefix.  By default, <code>RoleVoter</code> sees this prefix as "ROLE_".  It is settable, but be warned that your roles will count for nothing and your <code>@Secured</code> method will be totally exposed unless it looks something like this:</p>

<p><code>java
@Secured({"ROLE_role1", "ROLE_role2"})
public void makeSomethingAwesome() {
  // pure awesome that is now protected
}
</code></p>

<p>From the <code>RoleVoter</code> docs:</p>

<blockquote><p>Votes if any ConfigAttribute#getAttribute() starts with a prefix indicating that it is a role. The default prefix string is <code>ROLE_</code>, but this may be overridden to any value. It may also be set to empty, which means that essentially any attribute will be voted on. As described further below, the effect of an empty prefix may not be quite desirable.</p></blockquote>

<h2>The 2 Keys</h2>

<p>There are two key interfaces that Spring Security is using to determine how you want your roles checked that you specify in the <code>@Secured</code> annotation:</p>

<ul>
<li>AccessDecisionManager implemented as AffirmativeBased, ConsensusBased or UnanimousBased</li>
<li>AccessDecisionVoter, implemented as RoleVoter</li>
</ul>


<p>The decision manager is the class that has a collection of voters.  The decision manager orchestrates the voters and asks each in turn whether the requesting user should be let through the <code>@Secured</code> annotation or denied.  By default, the <code>AffirmativeBased</code> manager is used.</p>

<p>Each decision manager functions differently in how it counts the votes of its voters:</p>

<ul>
<li>AffirmativeBased - if any voter comes votes 'yes' or 'access granted', the manager allows access</li>
<li>ConsensusBased - this manager is majority rules.  There can be votes 'yes' and 'no', and as long as 'yes' votes outnumber 'no' votes, access is allowed</li>
<li>UnanimousBased - this manager requires every voter to vote 'yes' or else access is denied</li>
</ul>


<p>Since this discussion is based around roles, we only care to use Spring's <code>RoleVoter</code>.  Here's part of its implementation, starting on line 98:</p>

<p>```java
public int vote(Authentication authentication, Object object, Collection<ConfigAttribute> attributes) {
  int result = ACCESS_ABSTAIN;
  Collection<GrantedAuthority> authorities = extractAuthorities(authentication);</p>

<p>  for (ConfigAttribute attribute : attributes) {</p>

<pre><code>if (this.supports(attribute)) {
  result = ACCESS_DENIED;

  // Attempt to find a matching granted authority
  for (GrantedAuthority authority : authorities) {
    if (attribute.getAttribute().equals(authority.getAuthority())) {
      return ACCESS_GRANTED;
    }
  }
}
</code></pre>

<p>  }</p>

<p>  return result;
}
```</p>

<p>Verbalized, this <code>vote()</code> method goes through each role specified in the <code>@Secured</code> annotation and for each of those checks whether the user has that role.  If he does, the voter returns its vote as 'yes'.  Got that?  <em>At the first match, the vote is yes</em>.  This is a logical 'or'.</p>

<h2>Making the role vote a logical 'and'</h2>

<p>I don't want my roles 'or'ed together.  I want the uesr to be required to have them all in combination or I will deny him access.  Since we've already shown that the default <code>RoleVoter</code> uses a logical 'or' operation, I guess we'll need to write our own role voter that uses a logical 'and'.  Potentially, that might be called 'HasAllRolesVoter', and  might look like this:</p>

<p>```java
public class HasAllRolesVoter extends RoleVoter {</p>

<p>  @Override
  public int vote(Authentication authentication, Object object, Collection<ConfigAttribute> attributes) {</p>

<pre><code>Collection&lt;GrantedAuthority&gt; authorities = authentication.getAuthorities();
int requiredMatches = attributes.size();
int matches = 0;
for (ConfigAttribute attribute : attributes) {
  if (this.supports(attribute)) {
    for (GrantedAuthority authority : authorities) {
      if (attribute.getAttribute().equals(authority.getAuthority())) {
        ++matches;
        break;
      }
    }
  }
}

int result = ACCESS_ABSTAIN;
if (requiredMatches &gt; 0 &amp;&amp; matches &lt; requiredMatches) {
  result = ACCESS_DENIED;
} else if (matches &gt; 0 &amp;&amp; matches == requiredMatches) {
  result = ACCESS_GRANTED;
}
return result;
</code></pre>

<p>  }
}
```</p>

<p>It looks much like <code>RoleVoter</code>.  It extends <code>RoleVoter</code> and overrides <code>vote()</code>, which now goes through the roles on the <code>@Secured</code> annotation, checks each against the roles of the user, incrementing a count with each match.  If, in the end, there are as many matches as roles specified, we've found them all.  This is just a potential implementation.  There are probably many better was to get this done.</p>

<p>So now can we do a logical 'and'?  Yes.  There are 3 ways of accomplishing this (and probably more):</p>

<ol>
<li>AffirmativeBased w/ HasAllRolesVoter</li>
<li>ConsensusBased w/ HasAllRolesVoter</li>
<li>UnanimousBased w/ RolesVoter</li>
</ol>


<p>Note that in the last option <code>UnanimousBased</code> access manager can use just the plain jane <code>RolesVoter</code>.  This is because <code>UnanimousBased</code> calls the <code>RoleVoter</code> up for vote for each individual role (one by one via the <code>singleAttributeList</code>) as opposed to the roles as a collection.  Thus, that combination ignores the fact that <code>RoleVoter</code> normally 'or's matching roles together.</p>

<h2>Configuration</h2>

<p>So, there really hasn't been too much to this solution.  But as with most frameworks of this flexibility and complexity, the key is knowing how to actually specify that you want it to work this way.  To specify a <code>UnanimousBased</code> access manager using the plain <code>RoleVoter</code> (my eventual solution for my own problem) looks something like this:</p>

<p>```xml
&lt;beans xmlns="http://www.springframework.org/schema/beans"</p>

<pre><code>   xmlns:sec="http://www.springframework.org/schema/security"&gt;
   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd"&gt;
</code></pre>

<p>  <bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased"></p>

<pre><code>&lt;property name="decisionVoters"&gt;
  &lt;bean class="org.springframework.security.access.vote.RoleVoter" /&gt;
&lt;/property&gt;
&lt;property name="allowIfAllAbstainDecisions" value="false" /&gt;
&lt;property name="messageSource" ref="messageSource" /&gt;
</code></pre>

<p>  </bean></p>

<p>  &lt;sec:global-method-security secured-annotations="enabled" jsr250-annotations="enabled" pre-post-annotations="enabled"</p>

<pre><code>access-decision-manager-ref="accessDecisionManager" /&gt;
</code></pre>

<p></beans>
```</p>

<p>Smooth as butter.  As with most Spring solutions, the answer was in an xml configuration.  Oh boy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stored Procedures in Spring Jdbc]]></title>
    <link href="http://jaketrent.com/post/stored-procedure-spring-jdbc/"/>
    <updated>2011-12-21T14:33:00-07:00</updated>
    <id>http://jaketrent.com/post/stored-procedure-spring-jdbc</id>
    <content type="html"><![CDATA[<p>In addition to some sweet Inversion of Control injection action, Spring brings flowers and baby deer.  And it brings some nice database connection help.  Spring JdbcTemplate is a vanguard of strength and ease for connecting to your favorite RDBMS.  And it so happens that the DBA I'm working with right now digs the stored procs.  So, we'll meet in the middle with some more goodness born of Spring.</p>

<!--more-->


<h2>StoredProcedure</h2>

<p>Blessed Rod Johnson gives us the <code>org.springframework.jdbc.object.StoredProcedure</code>.  It's abstract, and you'll want to extend it and fully implement it in order to specify what stored proc in your database you're calling.  And here's a sample implementation:</p>

<p>```java
@Component
public class ItemInsert extends StoredProcedure {
  public static final String SPROC_NAME = "schema.oracle_pkg.proc_name";
  public static final String INPUT_PARAM = "input_prm_name";
  public static final String OUPUT_PARAM = "output_prm_name";</p>

<p>  @Inject
  public ItemInsert(DataSource ds) {</p>

<pre><code>super(ds, SPROC_NAME);
declareParameter(new SqlParameter(INPUT_PARAM, Types.VARCHAR));
declareParameter(new SqlOutParameter(OUTPUT_PARAM, Types.NUMERIC));
compile();
</code></pre>

<p>  }</p>

<p>  public Item insert(Item item)</p>

<pre><code>  throws DataAccessException {
Map&lt;String, Object&gt; inputs = new HashMap&lt;String, Object&gt;();
inputs.put(INPUT_PARAM, item.getSomething());
Map&lt;String, Object&gt; output = super.execute(inputs);
Object newId = output.get(OUTPUT_PARAM);
if (newId != null) {
  item.setId(Long.parseLong(newId.toString()));
}
return item;
</code></pre>

<p>  }
}
```</p>

<p>Points to consider:</p>

<ul>
<li><code>ItemInsert</code> is itself injectable as a Spring bean <code>@Component</code>.</li>
<li>Input and output parameters are declared in the constructor</li>
<li><code>insert()</code> is where <code>super.execute()</code> is call, which is the function that really does the magic.</li>
</ul>


<p>The only other interesting thing...</p>

<h2>Execute()</h2>

<p>From the JavaDoc:</p>

<p>  Execute the stored procedure. Subclasses should define a strongly typed execute method (with a meaningful name) that invokes this method, populating the input map and extracting typed values from the output map. Subclass execute methods will often take domain objects as arguments and return values.  Alternatively, they can return void.</p>

<p>Thusly, out method is called <code>insert()</code> because it's a meaningful name.  It takes our domain object, <code>Item</code> and pulls out the necessary fields inside the method, putting them into a map for the call <code>super.execute()</code>.</p>

<h2>Call it from a service</h2>

<p>Now the only work left is just to call your awesome procedure and use the results for something wonderful.  Eg,</p>

<p>```java
@Service
public class ItemServiceImpl implements ItemService {</p>

<p>  @Inject
  private ItemInsert itemInsert;</p>

<p>  public Item doWonderfulThingsWithItems(Item item) {</p>

<pre><code>return itemInsert.insert(item);
</code></pre>

<p>  }</p>

<p>}
```</p>

<p>Items are now stored procedurally and you can rest easy knowing that Oracle has all your data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parameterized States in Webflow]]></title>
    <link href="http://jaketrent.com/post/parameterized-states-webflow/"/>
    <updated>2009-10-08T09:52:00-06:00</updated>
    <id>http://jaketrent.com/post/parameterized-states-webflow</id>
    <content type="html"><![CDATA[<p>My first experience with <a href="http://www.springsource.org/webflow" target="_blank">Spring Webflow</a> is on a project that uses Webflow 1.0.5.  So far, I'm impressed.  Apparently, Webflow 2 offers even more incredible awesomeness, but thusfar I would put my webflow experience over that of my previous couple years in Seam.  (I was just waiting for a chance to abandon that library anyway.)</p>

<!--more-->


<p>A few quick observations based on my limited Webflow exposure:  Conversation control seems more granular.  Starting subflows (sub-conversations) is very easy and clean up well after themselves.  Webflow keeps flow/nav all in related webflow xml, which are clearly hierarchical and separated.  Webflow also seems to have a clearer and easier-to-follow syntax in its xml.</p>

<p>In my 2 days on this project with Webflow, I saw what I thought looked like a fair amount of duplicate xml code in the *-flow.xml files.  This smell led me to perservere on a better solution.  Thus, recorded here, is my method for creating a reusable state that has behavior specific to the code that is using it.  Specifically, for a view-state that navs to an action-state, that action-state's back/error transition can know how to return to the state that just invoked it.</p>

<p>Here's the view-state:</p>

<p>```xml
<view-state id="startingView" view="/start.xhtml">
  <transition on="return" to="processReturn"></p>

<pre><code>  &lt;set attribute="returningFrom" value="${'startingView'}" scope="flash"&gt;&lt;/set&gt;
</code></pre>

<p>  </transition>
</view-state>
```</p>

<p>And the action-state:</p>

<p>```xml
<action-state id="processReturn">
  <bean-action bean="service" method="saveAndReturn"></p>

<pre><code>  &lt;method-result name="saveSuccessful" scope="flash"&gt;&lt;/method&gt;
</code></pre>

<p>  </bean-action>
  <transition on="${flashScope.saveSuccessful}" to="backToIndex"></transition>
  <transition on="${!flashScope.saveSuccessful}" to="${flashScope.returningFrom}"></transition>
</action-state>
```</p>

<p>So, when the transition in the view for "return" is hit, we save an attribute in the flash scope, which is maintained over redirects in the flow, the value being the id of the view-state from which we're coming.  When we get to the action-state, if we find that our action was unsuccessful, we grab the attribute from the flash scope and transition back to that view-state with the given id.  Thus, we don't have to have a separate action-state for each view-state that might want to use similar functionality because we have parameterized the specific data/functionality.</p>

<p>Note: I had to use the ${'literal'} syntax for the attribute value.  I'm not sure if this is a quirk of Webflow 1 or my project.</p>

<p>Viva la Webflow.  That, or just write SOUIT apps!</p>
]]></content>
  </entry>
  
</feed>
