<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ssh | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/ssh/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2015-02-24T07:51:30-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setup Public/Private Key]]></title>
    <link href="http://jaketrent.com/post/setup-publicprivate-key/"/>
    <updated>2012-07-19T14:14:00-06:00</updated>
    <id>http://jaketrent.com/post/setup-publicprivate-key</id>
    <content type="html"><![CDATA[<p>When you connect to a remote server, you're connecting over ssh or scp or a similar protocol.  In each case, you may have to provide some authentication credentials to prove you are who you say you are.  This can come in the form of a user/password combo, but if you're connecting a lot or if you're trying to setup a non-interactive connection, this can become either really monotonous or really problematic.  Public/private keys will come to our rescue, and we'll never need to enter our password again.</p>

<!--more-->


<p>```bash</p>

<blockquote><p>ssh-keygen
```</p></blockquote>

<p>You can, but don't need to protect your private key with a passphrase.  It is private, after all.  The default names are:</p>

<ul>
<li>Private: id_rsa</li>
<li>Public: id_rsa.pub</li>
</ul>


<p>Now you need to share your public key with the remote server:</p>

<p>```bash</p>

<blockquote><p>scp ~/.ssh/id_rsa.pub myUsername@remoteServer:
```</p></blockquote>

<p>The trailing colon will separate your hostname from the destination path and drop it in your default/home directory on the server.  Now, get into the remote server for the last time using that antiquated password of yours:</p>

<p>```bash</p>

<blockquote><p>ssh myUsername@remoteServer
```</p></blockquote>

<p>Once here, we need to put the public key in a file that will be used for incoming connections:</p>

<p>```bash</p>

<blockquote><p>mkdir ~/.ssh
mv ~/id_rsa.pub ~/.ssh/authorized_keys
```</p></blockquote>

<p>And make sure that the permissions are locked down for security reasons:</p>

<p>```bash</p>

<blockquote><p>cd ~/.ssh
chmod 700 .
chmod 600 id_rsa.pub
```</p></blockquote>

<p>Jump back to your local box and prep your private key for your next ssh/scp connection:</p>

<p>```bash</p>

<blockquote><p>eval <code>ssh-agent</code>
ssh-add ~/.ssh/id_rsa
```</p></blockquote>

<p>Note that we're adding our private key only.  If you had a passphrase on your private key, you'll be prompted for it at this point.  Voila!  You're next connection to that remote server should not require a password.  Try it!:</p>

<p>```bash</p>

<blockquote><p>ssh myUsername@remoteServer
```</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Forward X11 Thru SSH]]></title>
    <link href="http://jaketrent.com/post/forward-x11-thru-ssh/"/>
    <updated>2009-09-22T11:39:00-06:00</updated>
    <id>http://jaketrent.com/post/forward-x11-thru-ssh</id>
    <content type="html"><![CDATA[<p>SSH is a great protocol that allows secure connections to remote systems.  It's easy to use, gives you terminal access to the system in question and allows you to function as you would were you at the machine itself -- in the terminal.  But, if you want to see actual windows, thru a GUI window management system like Gnome, for instance, you need to enable <a href="http://en.wikipedia.org/wiki/X11">X11</a> forwarding.</p>

<!--more-->


<p>You have to configure the server (remote box) and the client (you).</p>

<p>For server, install and run the sshd daemon:</p>

<p><code>bash
sudo apt-get install ssh-server;
sudo /etc/init.d/ssh restart
</code></p>

<p>Then adjust the server config:</p>

<p>```bash
sudo emacs /etc/ssh/ssh_config;</p>

<h1>add/modify this line to read...</h1>

<p>ForwardX11   yes
```</p>

<p>For the client, install and run ssh:</p>

<p><code>bash
sudo apt-get install ssh;
ssh [remote-host-ip] -X
</code></p>

<p>The -X option will enable the X11 forwarding.  Now, try to pop something in a window.  (eg, emacs &amp;, xclock &amp;, nautilus &amp;).</p>
]]></content>
  </entry>
  
</feed>
