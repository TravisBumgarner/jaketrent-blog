<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Productivity | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/productivity/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2013-01-18T08:09:07-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why Log Your Issues]]></title>
    <link href="http://jaketrent.com/post/why-log-you-issues/"/>
    <updated>2013-01-10T07:06:00-07:00</updated>
    <id>http://jaketrent.com/post/why-log-you-issues</id>
    <content type="html"><![CDATA[<p>When you're working on a software project, what's the most important deliverable?  Why, the software!  It's your eventual product.  Along the way, however, there will be some things you can do that will make it more likely you successfully ship great software. One of those is logging issues.  Here's why you might want to do it.</p>

<p><img src="http://i.imgur.com/QNf1k.jpg" alt="A github log" /></p>

<!--more-->


<h2>Just Log It</h2>

<p>There are many tools.  There are many strategies.  The most important thing will be to just get your issues logged in a persistent system that everyone involved agrees upon.</p>

<p>The benefits will include:</p>

<ol>
<li><strong>You'll remember it</strong> - Software projects are complex.  You'll run into a lot of issues.  You don't want to keep them in your head.</li>
<li><strong>You'll have a historical record</strong> - Projects can take a long time to finish.  And often they aren't done in contiguous calendar time.</li>
<li><strong>You'll remember past mistakes</strong></li>
<li>Maybe it's a bit of lemon juice on old wounds, but that's better than reverting your software to do the same dumb things again.  By examining your once-resolved issues, you can remember not to go down certain paths again.</li>
<li><strong>You'll have a todo list</strong> - Today's software projects move fast, and there's a lot going on in the office.  To help you remember, what you need to do and in what order, look to your issues list.</li>
<li><strong>You'll have a clearer picture of your progress</strong> - You'll know how much farther you have to go on your milestones.  You'll have a finite list of exactly what is left that needs to be solved.</li>
<li><strong>You'll have an alert system</strong> - When things go South, and bugs pop up, you'll have an immediate global notification system.  That is, if the team is tuned into your issue tracker this way.</li>
<li><strong>You'll invite others to help you</strong> - When it's clear what needs to be done, people have a better-defined path to get started helping you out.  He sees an issue that is close to his expertise or interest, assigns it to himself, and goes!</li>
</ol>


<h2>Some Effort</h2>

<p>Of course this takes some effort.  Try to track issues more readily and steadily, and see if you don't feel some of these benefits for yourself.  It's an investment into your process that should add to your capability to ship great software.</p>

<h2>Some Caveats</h2>

<p>This benefits mostly have some major assumptions, like: people actually care; it's a painless process to add issues, assign issues, and resolve issues; the issue tracker has good notifications -- meaningingful and to the people that matter.  Well, there are lots of ways to mess that up as well.  But try it.  Do what works for your team.</p>

<p>What have you found to help your team be most successful in issue tracking?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Be True to Your Heart]]></title>
    <link href="http://jaketrent.com/post/be-true-to-your-heart/"/>
    <updated>2013-01-08T07:10:00-07:00</updated>
    <id>http://jaketrent.com/post/be-true-to-your-heart</id>
    <content type="html"><![CDATA[<p>When you're interviewing and are asked to share what you're most interested in.  You'd better know.  You'd better be enthused about it.  And don't abandon it, or you'll look insincere.</p>

<p><img src="http://i.imgur.com/fYzBj.png" alt="Alt Text" /></p>

<!--more-->


<p>Recently my teammate and I had a lunch interview with a potential future teammate.  As a lunch interview, it was mostly just a test as to the seriousness of the candidate and the opportunity as well as a team fitness test.  So, pretty laid back.  No hard core technical questions.  Mostly shooting the breeze about the tech industry, current positions, and thoughts on technology.  So, there's plenty of room for inference based on opinions shared.</p>

<p>The guy we were talking to was comfortable working on the frontend and the backend.  From what we could tell, he was probably capable all around.  Then my teammate asked a great question:  What do you really enjoy?  The change in demeanor versus the preceding 40 minutes of talk was noticeable.  He lit up and exclaimed that he loved data -- data relationships, data mining, and statistics.  He gave examples of things he had done recently and repeated his adoration of the subject.  I was caught up in his enthusiasm.</p>

<p>Then we made it more clear that we were on the frontend team, and the things he was most interested in were definitely not frontend.  My teammate told him that he'd get him in touch with our backend team lead.</p>

<p>Then he said that he could do both frontend or backend.  He'd be happy with frontend.  He loves learning new things.  "Will you interview me for a frontend position?  Just forget about my data comments." was essentially what he was saying -- or at least what I was hearing.</p>

<p>Oh, man!  My heart sank.  I was really kind of sad that he had essentially abandoned what he said he found most joy in.  It was an opportunistic move, even practical.  But I was pretty disappointed.  The guy seemed smart.  If so, he could probably pick his opportunity in this wonderful software industry of ours.  So why cave and totally deny the opportunities for what you really claim to enjoy to take the opportunity you had only had a lunch chat about?</p>

<p>His initial enthusiasm about his love of data was fun and contagious.  To see him deny it in the next breath made it feel like more of a play.  Perhaps it wasn't, but when you betray your true love, it makes me wonder at your general sincerity.  If you like something in tech and you're good at it, you should do it, hold out for it, and odds are you'll get your opportunity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile Designers]]></title>
    <link href="http://jaketrent.com/post/agile-designers/"/>
    <updated>2012-10-15T17:00:00-06:00</updated>
    <id>http://jaketrent.com/post/agile-designers</id>
    <content type="html"><![CDATA[<p>The Agile method of software creation contains many principles of development that will help create good software.  Some of my most successful projects have had as a key feature an agile designer.  As Jobs said, design <em>is</em> how it works, and that means that to really deliver well in an agile environment, design <em>and</em> development have to be on the agile train together.</p>

<p><img src="http://i.imgur.com/GOXzL.jpg" alt="Blueprint design" />
http://flic.kr/p/bpV8UA</p>

<!--more-->


<h2>K-man Keeps it Alive</h2>

<p>I work with a fantastic designer, the one and only <a href="http://www.composition3.com/">Kendall Chadwick</a>.  He has many great qualities of an agile designer:</p>

<ol>
<li><strong>He's available</strong> - He lives with the cross-functional team.  He is there to participate in discussions.  It's not hard to get a hold of him, so answers to questions flow more freely.</li>
<li><strong>He listens</strong> - He asks a lot of questions.  He's not stuffy about his design sense.  He realizes that many needs are represented in a project and product.  He attends discussion meetings not necessarily focused on design but on the details of the product or process.</li>
<li><strong>He's fully engaged</strong> - He knows his task doesn't end when he clicks save in Photoshop.  He owns his designs and ideas all the way through the project, helping evolve them as we go. One of the most important things a software team member can do is remain fully engaged right up until the product ships.</li>
</ol>


<h2>Agile Experience Design</h2>

<p>I just finished a book called "<a href="http://www.amazon.com/Agile-Experience-Design-Designers-Continuous/dp/0321804813">Agile Experience Design</a>" by Lindsay Ratcliffe and Marc McNeill.  I've read a fair bit on agile methods and currently live in a quasi-agile (hehe, let's actually call it mini-waterfalls) shop.  This book was intriguing as its authors are speaking to designers as they try to integrate better in an agile environment.</p>

<p>Of note was their Agile Design Manifesto:</p>

<p>Agile experience design is
Inclusive rather than elitist
Emergent with direction rather than up front
Integrated and collborative rather than handed over the fence
Considerate of customer, business, and technology needs rather than biased toward a single factor.</p>

<p>As a passing review:  The book won't provide too much that is new to someone familiar with agile.  It speaks in terms that I suppose are probably more well related to by designers.  It's a somewhat lengthy and dense book.  At times, it was hard to maintain reading momentum.  The book is beautiful -- perhaps it had some real designers laying it out?</p>

<h2>The Power of Design</h2>

<p>It's amazing how much depends on solid design.  The design will define the users' experience with the software.  It will never not matter.  To a great design in a software product is a difficult thing.  Good people in the design discipline who are fully engaged in adapting to the changing landscape of software creation are invaluable.  Agile designers rock.  Find one and figure out how to get him on your project.</p>

<p>What have your best designers done to make great software on your teams?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developer Relations for Internal Developers]]></title>
    <link href="http://jaketrent.com/post/developer-relations-for-internal-developers/"/>
    <updated>2012-09-26T16:50:00-06:00</updated>
    <id>http://jaketrent.com/post/developer-relations-for-internal-developers</id>
    <content type="html"><![CDATA[<p>When a company has a platform or API that it wants outside developers to create cool stuff on, it will sometimes create a developer relations group. This group will help developers get what they need. What about custom dev shops that already have a host of developers? Who's watching these developers' backs?</p>

<p><img src="http://i.imgur.com/QAxW5.jpg" alt="Love note" />
http://flic.kr/p/5iwNAG</p>

<!--more-->


<h2>A new level of developer relations</h2>

<p>RIM developer relation needs being what they are, they've gone this far to promote their BlackBerry 10 SDK:</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/WlsahuZ_4oM" frameborder="0" allowfullscreen></iframe>


<p>It's awesome. Maybe "desperate"? It shows a definite effort (high notes) to attract and accommodate developers.</p>

<h2>Essential vitamins and minerals</h2>

<p>Once developers are in a company, what are the elements of developer relations that are needful there. What does a company need to retain top coding talent? I offer:</p>

<ol>
<li><p><strong>Engaging Responsibilities</strong> - Smart guys are not going to sit around in your company doing the same thing for 10 years. In tech, probably not even for a couple. This might also be stated as "Career Path". I think this requirement is similar to what <a href="http://www.businessinsider.com/why-young-employees-quit-their-jobs-2012-9">Business Insider observed young workers</a> as needing: "Multiple studies find that today’s younger workers have absolutely no intention of sticking around if they don’t feel like they’re learning, growing and being valued in a job."</p></li>
<li><p><strong>Learning Opportunities</strong> - Learning is an inherent part of every developer job description. It must be kosher to spend time to sharpen the saw. This is building capactiy. No one will ever propose solutions that they don't understand. If your company wants to broaden its offering, developers will need to broaden themselves.</p></li>
<li><p><strong>Budget for Engineering</strong> - Build money into project budgets. Build time into the timelines. Good developers will quickly lose morale if there is never time to do it right. If you don't give time to cleanup technical debt, developers will not feel satisfied in what they create.</p></li>
<li><p><strong>Always Have an Advocate</strong> - Every company will get it wrong sometimes. Especially in large, specialized organizations, everyone has their own functional slice that they're focused on, sometimes at the expense of all else. Developers need someone who speaks for them. They need someone who has a voice in the bureaucracy and can represent them well where they don't personally have a voice.</p></li>
</ol>


<h2>Everyone needs a coder, especially a good one</h2>

<p>If developer relations are not upkept with care, good coders are likely to head for the door. Alternately, if just certain elements are occassionally missing, good developers know how to fill in the gaps and provide for themselves.</p>

<p>Just as an API/platform creator attract talent to build cool stuff for them, organizations with their own internal dev force need to take developer relations seriously. Good organizations and good leaders take good care of all their people.  I work at such an organization with such people.  We need more.</p>

<p>What else might be an essential ingredient in maintaining favorable developer relationships?</p>
]]></content>
  </entry>
  
</feed>
