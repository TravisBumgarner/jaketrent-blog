<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Productivity | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/productivity/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2013-07-10T18:41:09-06:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learn to Procrastinate]]></title>
    <link href="http://jaketrent.com/post/learn-to-procrastinate/"/>
    <updated>2013-06-10T06:57:00-06:00</updated>
    <id>http://jaketrent.com/post/learn-to-procrastinate</id>
    <content type="html"><![CDATA[<p>When making software, sometimes we want everything we can imagine at once.  We want the software to be perfect -- then we'll ship it.  Learn to procrastintate.  You might ship more, and you might like the the eventual outcome better.</p>

<p><img src="http://i.imgur.com/cXx17co.png" alt="Focus on shipping" /></p>

<!--more-->


<h2>Worthless Software</h2>

<p>Software that sits inside of your git repo, unreleased, is worthless software.  You're not going to get paid for it.  You're not going to make someone's life better.  You're not going to attract any new business.  It provides no utility.</p>

<p>When does software return any value?  At the very soonest, software provides value when it ships -- when it's released to the public or your customers.</p>

<p>So why do we wait so long to ship?</p>

<h2>Excuses for Not Shipping</h2>

<h3>It Must Do More</h3>

<p>Software has a fair bit of built-in or essential complexity.  Making software is challenging.  Sometimes we make it worse and introduce our own accidental complexity.  How?  We don't ship.</p>

<p>We iterate on unreleased software, expand it, and pretend to fully understand what we're trying to solve.  The software gets bigger and more complex.  We want our (unshipped) software to somehow solve even <em>more</em> problems before it's solved any.  And any problem we attempt to solve without actually testing it (in production), is still just a guess at how to solve it.</p>

<h3>It's Not Awesome Yet</h3>

<p>Sometimes in an attempt to create a (hopefully) great initial impression, we wait to release anything.  This makes sense to some degree, but it can easily be taken to a less useful extreme.  Once we have a feature set that we judge is sufficiently awesome to blow a potential client's socks off, we'll release it in a big bang.  Boom!  Now the world can see my software in all the glory I have bequeathed it.</p>

<p>Just as we have been guessing as to how may problems the software will solve, we have been guessing as to how warm people will be to the idea of actually using what we've created.</p>

<h2>What to Procrastinate</h2>

<p>So obviously there are problems with procrastinating.  There are definitely things that you <em>don't</em> want to procrastintate: working, shipping, asking for payment.  What <em>should</em> you procrastinate?</p>

<h3>Little Things that are Hard</h3>

<p>At first glance, this just looks like a cop out.  You <em>should</em> do the important things that are hard.  Even the small things can add a nice touch.  But in an effort to ship, these are often the little things that don't add too much but take an inordinate amount of time to figure out or complete.  Skip these things and come back to them later to add the polish.</p>

<h3>Things that are not Core Functionality</h3>

<p>You're trying to ship a small, cohesive feature set as fast as you can.  There will be many features on the perephery that you'll be tempted to work in as well.  Fight the temptation.  Get used to cutting out good features in order to ship the ones you <em>need</em>.  In this way, you'll help ensure that all of your valuable time is used creating the most value for your customers.</p>

<h3>Things that Create Little Tech Debt</h3>

<p>When you start skipping things, this can create problems for you later.  This can be technical debt.  If you want your product to evolve and grow over time, you can't afford large amounts of technical debt.  But watch out!  You can use very large lengths of time doing things that add little value in the name of avoiding technical debt.  Be willing to take on some tech debt.  Do this on a case-by-case basis, because this trade-off requires thinking.</p>

<h2>Why You'll Like Procrastinating</h2>

<p>Your satisfaction will sky-rocket when you feel like shipping is within reach.  Break down the barriers to getting there.</p>

<p>Focus on the most valuable features, and you'll feel like you add maximum value every day -- because you are!</p>

<p>You'll be able to move faster because you aren't getting bogged down in munitia.  By not taking tangents, your flow time will increase.  You won't need to context switch to solve small, hard problems.  You can focus on the important, hard problems for contiguous lengths of time.</p>

<p>You'll have something to show a lot faster.  You'll have a vertical of working features that are fun to use and are useful -- when shipped, that is.</p>

<h2>Different Paths Converge at Shipping</h2>

<p>Of course there are as many different ways to make software as there are types of software and types of software teams.  That's one of the things that makes software creation insanely fun and rewarding.  Find what works for you, and ship lots and lots of awesome software.</p>

<p>In the end, shipping should be a common goal, and we shouldn't procrastinate that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Have More Fun]]></title>
    <link href="http://jaketrent.com/post/have-more-fun/"/>
    <updated>2013-03-19T07:18:00-06:00</updated>
    <id>http://jaketrent.com/post/have-more-fun</id>
    <content type="html"><![CDATA[<p>You enjoy your work more when you're having fun, right?  I wouuld think that much would be obvious to us all.  And yet, we need reminded now and again what really makes us tick.  Whether our endeavor is serious or purely for entertainment;  Whether the cause means a lot to us or we are just trying to pay the bills;  We will do better and be happier in every case if we inject a whole lot of fun into our work.</p>

<p><img src="http://i.imgur.com/YdZuWS2.jpg" alt="I love to laugh" /></p>

<!--more-->


<h2>Serious</h2>

<p>Serious work still needs a bit of a lilt to really work well.  This is especially true in creative work.  How many of us can be creative on demand?  It just seems to turn off the juice.  The motivation to continue doing something will come from a certain enjoyment and mental reward.</p>

<h2>Entertainment</h2>

<p>Even if the work you do is meant for others to consume purely as entertainment, it can easily be less than entertaining for those working on it.  It has to be enjoyable for you too.  There are so many types and tastes of entertainment; find something that is personally appealing.  Your personal engagement will be much higher.</p>

<h2>A Cause</h2>

<p>Working on a cause for which you have great feeling is probably one of the easiest things to find great inner motivation in doing.  But you can even burn out there.  Most of our jobs are done day after day.  There is a nature of monotony even in the best work simply because of repetition.  What can help counteract the daily march of work?  A bit of fun and excitement!  It'll mean you're simply jazzed to do what you feel is worthy of your time and effort.</p>

<h2>Pay Bills</h2>

<p>In the end, many work simply to pay the bills that never cease to appear.  This is in itself and worthy reason for working hard.  It is essential.  However, just the focus on and stress over bill payment is probably enough to poison your joy for work.  Two things will help.  Live well within your means so the bills don't loom so large.  And hone your skills and do so well that you find the joy of work.</p>

<p>Simply put, work will consume a large portion of your life.  Would it not be better to smile and have fun during all that time?  Gratefully I've had both fantastic opportunities for work and the will to have fun.  Each of us have the opportunity to make it so.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Log Your Issues]]></title>
    <link href="http://jaketrent.com/post/why-log-you-issues/"/>
    <updated>2013-01-10T07:06:00-07:00</updated>
    <id>http://jaketrent.com/post/why-log-you-issues</id>
    <content type="html"><![CDATA[<p>When you're working on a software project, what's the most important deliverable?  Why, the software!  It's your eventual product.  Along the way, however, there will be some things you can do that will make it more likely you successfully ship great software. One of those is logging issues.  Here's why you might want to do it.</p>

<p><img src="http://i.imgur.com/QNf1k.jpg" alt="A github log" /></p>

<!--more-->


<h2>Just Log It</h2>

<p>There are many tools.  There are many strategies.  The most important thing will be to just get your issues logged in a persistent system that everyone involved agrees upon.</p>

<p>The benefits will include:</p>

<ol>
<li><strong>You'll remember it</strong> - Software projects are complex.  You'll run into a lot of issues.  You don't want to keep them in your head.</li>
<li><strong>You'll have a historical record</strong> - Projects can take a long time to finish.  And often they aren't done in contiguous calendar time.</li>
<li><strong>You'll remember past mistakes</strong></li>
<li>Maybe it's a bit of lemon juice on old wounds, but that's better than reverting your software to do the same dumb things again.  By examining your once-resolved issues, you can remember not to go down certain paths again.</li>
<li><strong>You'll have a todo list</strong> - Today's software projects move fast, and there's a lot going on in the office.  To help you remember, what you need to do and in what order, look to your issues list.</li>
<li><strong>You'll have a clearer picture of your progress</strong> - You'll know how much farther you have to go on your milestones.  You'll have a finite list of exactly what is left that needs to be solved.</li>
<li><strong>You'll have an alert system</strong> - When things go South, and bugs pop up, you'll have an immediate global notification system.  That is, if the team is tuned into your issue tracker this way.</li>
<li><strong>You'll invite others to help you</strong> - When it's clear what needs to be done, people have a better-defined path to get started helping you out.  He sees an issue that is close to his expertise or interest, assigns it to himself, and goes!</li>
</ol>


<h2>Some Effort</h2>

<p>Of course this takes some effort.  Try to track issues more readily and steadily, and see if you don't feel some of these benefits for yourself.  It's an investment into your process that should add to your capability to ship great software.</p>

<h2>Some Caveats</h2>

<p>This benefits mostly have some major assumptions, like: people actually care; it's a painless process to add issues, assign issues, and resolve issues; the issue tracker has good notifications -- meaningingful and to the people that matter.  Well, there are lots of ways to mess that up as well.  But try it.  Do what works for your team.</p>

<p>What have you found to help your team be most successful in issue tracking?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Be True to Your Heart]]></title>
    <link href="http://jaketrent.com/post/be-true-to-your-heart/"/>
    <updated>2013-01-08T07:10:00-07:00</updated>
    <id>http://jaketrent.com/post/be-true-to-your-heart</id>
    <content type="html"><![CDATA[<p>When you're interviewing and are asked to share what you're most interested in.  You'd better know.  You'd better be enthused about it.  And don't abandon it, or you'll look insincere.</p>

<p><img src="http://i.imgur.com/fYzBj.png" alt="Alt Text" /></p>

<!--more-->


<p>Recently my teammate and I had a lunch interview with a potential future teammate.  As a lunch interview, it was mostly just a test as to the seriousness of the candidate and the opportunity as well as a team fitness test.  So, pretty laid back.  No hard core technical questions.  Mostly shooting the breeze about the tech industry, current positions, and thoughts on technology.  So, there's plenty of room for inference based on opinions shared.</p>

<p>The guy we were talking to was comfortable working on the frontend and the backend.  From what we could tell, he was probably capable all around.  Then my teammate asked a great question:  What do you really enjoy?  The change in demeanor versus the preceding 40 minutes of talk was noticeable.  He lit up and exclaimed that he loved data -- data relationships, data mining, and statistics.  He gave examples of things he had done recently and repeated his adoration of the subject.  I was caught up in his enthusiasm.</p>

<p>Then we made it more clear that we were on the frontend team, and the things he was most interested in were definitely not frontend.  My teammate told him that he'd get him in touch with our backend team lead.</p>

<p>Then he said that he could do both frontend or backend.  He'd be happy with frontend.  He loves learning new things.  "Will you interview me for a frontend position?  Just forget about my data comments." was essentially what he was saying -- or at least what I was hearing.</p>

<p>Oh, man!  My heart sank.  I was really kind of sad that he had essentially abandoned what he said he found most joy in.  It was an opportunistic move, even practical.  But I was pretty disappointed.  The guy seemed smart.  If so, he could probably pick his opportunity in this wonderful software industry of ours.  So why cave and totally deny the opportunities for what you really claim to enjoy to take the opportunity you had only had a lunch chat about?</p>

<p>His initial enthusiasm about his love of data was fun and contagious.  To see him deny it in the next breath made it feel like more of a play.  Perhaps it wasn't, but when you betray your true love, it makes me wonder at your general sincerity.  If you like something in tech and you're good at it, you should do it, hold out for it, and odds are you'll get your opportunity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile Designers]]></title>
    <link href="http://jaketrent.com/post/agile-designers/"/>
    <updated>2012-10-15T17:00:00-06:00</updated>
    <id>http://jaketrent.com/post/agile-designers</id>
    <content type="html"><![CDATA[<p>The Agile method of software creation contains many principles of development that will help create good software.  Some of my most successful projects have had as a key feature an agile designer.  As Jobs said, design <em>is</em> how it works, and that means that to really deliver well in an agile environment, design <em>and</em> development have to be on the agile train together.</p>

<p><img src="http://i.imgur.com/GOXzL.jpg" alt="Blueprint design" />
http://flic.kr/p/bpV8UA</p>

<!--more-->


<h2>K-man Keeps it Alive</h2>

<p>I work with a fantastic designer, the one and only <a href="http://www.composition3.com/">Kendall Chadwick</a>.  He has many great qualities of an agile designer:</p>

<ol>
<li><strong>He's available</strong> - He lives with the cross-functional team.  He is there to participate in discussions.  It's not hard to get a hold of him, so answers to questions flow more freely.</li>
<li><strong>He listens</strong> - He asks a lot of questions.  He's not stuffy about his design sense.  He realizes that many needs are represented in a project and product.  He attends discussion meetings not necessarily focused on design but on the details of the product or process.</li>
<li><strong>He's fully engaged</strong> - He knows his task doesn't end when he clicks save in Photoshop.  He owns his designs and ideas all the way through the project, helping evolve them as we go. One of the most important things a software team member can do is remain fully engaged right up until the product ships.</li>
</ol>


<h2>Agile Experience Design</h2>

<p>I just finished a book called "<a href="http://www.amazon.com/Agile-Experience-Design-Designers-Continuous/dp/0321804813">Agile Experience Design</a>" by Lindsay Ratcliffe and Marc McNeill.  I've read a fair bit on agile methods and currently live in a quasi-agile (hehe, let's actually call it mini-waterfalls) shop.  This book was intriguing as its authors are speaking to designers as they try to integrate better in an agile environment.</p>

<p>Of note was their Agile Design Manifesto:</p>

<p>Agile experience design is
Inclusive rather than elitist
Emergent with direction rather than up front
Integrated and collborative rather than handed over the fence
Considerate of customer, business, and technology needs rather than biased toward a single factor.</p>

<p>As a passing review:  The book won't provide too much that is new to someone familiar with agile.  It speaks in terms that I suppose are probably more well related to by designers.  It's a somewhat lengthy and dense book.  At times, it was hard to maintain reading momentum.  The book is beautiful -- perhaps it had some real designers laying it out?</p>

<h2>The Power of Design</h2>

<p>It's amazing how much depends on solid design.  The design will define the users' experience with the software.  It will never not matter.  To a great design in a software product is a difficult thing.  Good people in the design discipline who are fully engaged in adapting to the changing landscape of software creation are invaluable.  Agile designers rock.  Find one and figure out how to get him on your project.</p>

<p>What have your best designers done to make great software on your teams?</p>
]]></content>
  </entry>
  
</feed>
