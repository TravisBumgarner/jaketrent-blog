<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: css | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2014-03-08T09:29:07-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Style File Input]]></title>
    <link href="http://jaketrent.com/post/style-file-input/"/>
    <updated>2013-07-23T16:44:00-06:00</updated>
    <id>http://jaketrent.com/post/style-file-input</id>
    <content type="html"><![CDATA[<p>File input fields are notoriously painful to style.  Here are a few quick tips to that will save you some dead ends.</p>

<p><img src="http://i.imgur.com/sm1b2ok.jpg" alt="File input" /></p>

<!--more-->


<h2>The Problem with File Inputs</h2>

<p>File inputs are inconsistent to start with.  They differ even in their native form across all browsers.  They also have internal elements that are not individually accessible, such as the "Browse" button.  They are also subject to more browser-imposed security constraints than input fields of other types.</p>

<p>Given these inherent problems/constraints, try to follow two basic rules:</p>

<ol>
<li>Don't expect to make your file input look exactly like you'd like</li>
<li>Don't trigger clicks on the file input</li>
</ol>


<h2>Styling the File Input</h2>

<p>Why is file input rule reasonable?  Shouldn't you be able to match the UI design you desire?  Yes, on both counts.</p>

<p>Don't style the file input to make it look like a photo upload button (or whatever you're marking).  Instead, <strong>hide it</strong>.  And after you hide it, position it <strong>over</strong> another another element, such as a <code>div</code>, that you can style much more easily to look like the UI you envision.</p>

<p>Here is some example css on how you might accomplish this:</p>

<p><code>haml fileinput.jade
.file-wrapper
  .file-input(type="file")
</code></p>

<p>```sass fileinput.styl
.file-wrapper
  position: relative
  overflow: hidden
  cursor: pointer</p>

<p>.file-input
  position: absolute
  top: 0
  right: 0
  z-index: 2
  opacity: 0.01
  height: 100%
  font-size: 150px
```</p>

<p>The add additional styles to <code>.file-wrapper</code> to make it look as you wish.  Remember any vendor prefixes you may/not need for <code>opacity</code>, etc.</p>

<h2>Handling Double Clicks in IE</h2>

<p>It's important to position the <code>.file-input</code> as <code>right: 0</code>.  Otherwise, in IE the file input field will not activate on a single click.  Instead it'll need a double click.  This is because in IE clicking on the text box portion of the file input requires a double click.  Clicking on the browse button requires just a single click.  And the browse button is on the right side of the file input field in IE.  Finally, make the <code>font-size</code> big enough that you're guaranteed to cover the <code>.file-wrapper</code> area.</p>

<h2>Handling Clicks</h2>

<p>Now you don't need to have JavaScript to trigger click events on the file input field.  You will just be relying on direct user interaction to click the native file input field.  This will make <a href="http://stackoverflow.com/questions/210643/in-javascript-can-i-make-a-click-event-fire-programmatically-for-a-file-input">some browsers</a>, like Chrome and Firefox, happy.  This is because these browsers won't hold file values given to the input programmatically as a security precaution.  Oddly, IE, which sometimes balks more about innane security constraints like this, is ok.</p>

<p>So, what do you think?  Does this work for you?  Anything else to make the solution more solid?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ngStyle Background]]></title>
    <link href="http://jaketrent.com/post/ngstyle-background/"/>
    <updated>2013-06-19T07:08:00-06:00</updated>
    <id>http://jaketrent.com/post/ngstyle-background</id>
    <content type="html"><![CDATA[<p><code>ngStyle</code> is the directive used to set inline style attributes with AngularJs.  Most of the time, it's straightforward to use.  <code>background</code> css attributes can be just slightly trickier.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="AngularJs" /></p>

<!--more-->


<h2>ngStyle Objects</h2>

<p>The <code>ngStyle</code> directive requires an object for input.  The object key is the css attribute name.  The resultant value for the key is the value of the css attribute.</p>

<p><code>ngStyle</code> is obviously used to set dynamic styles, because static styles are more easily and efficient set using the standard html <code>style</code> attribute.</p>

<h2>A Dynamic Style Example</h2>

<p>So let's setup a controller that sets a dynamic color based on something as useful as the time.  Useful, right?</p>

<p>```coffeescript colorCtrl.coffee
angular.module('colorly').controller 'colorCtrl', ($scope) ->
  $scope.getColor = -></p>

<pre><code>if new Date().getTime() % 2 is 0 then "red" else "blue"
</code></pre>

<p>```</p>

<p>We could use this <code>getColor</code> function in our app:</p>

<p>```haml app.jade
html(ng-app="colorly")
  head</p>

<pre><code>//- ... include Angular, etc
</code></pre>

<p>  body(ng-controller="colorly")</p>

<pre><code>p(ng-style="{ color: getColor() }")
  | The text will be one of two colors
</code></pre>

<p>```</p>

<h2>A Background Example</h2>

<p>If we have a dynamic value that needs to go in a css <code>background</code> or <code>background-image</code> attribute, it can be just a bit more tricky to specify.</p>

<p>Let's say we have a <code>getImage()</code> function in our controller.  This function returns a string formatted similar to this: <code>url(icons/pen.png)</code>.  If we do, the <code>ngStyle</code> declaration is specified the exact same way as before:</p>

<p><code>haml
ng-style="{ 'background-image': getImage() }"
</code></p>

<p>Make sure to put quotes around the <code>background-image</code> key name.  Remember, this must be formatted as a valid Javascript object key.</p>

<h2>Another Background Example</h2>

<p>That example was easy.  Often, however, you don't have data stored in your models that's formatted like <code>url(icons/pen.png)</code>.  Instead you often have a field that represents the image path only.  In this case, you must do some JavaScript inside your <code>ngStyle</code> declaration:</p>

<p>```coffeescript colorCtrl.coffee
angular.module('colorly').controller 'colorCtrl', ($scope) ->
  $scope.tool =</p>

<pre><code>name: 'Pen'
icon: 'icons/pen.png'
</code></pre>

<p>```</p>

<p><code>haml
ng-style="{ 'background-image': 'url(' + tool.icon + ')' }"
</code></p>

<p>Remember that it's just Javascript, and you'll setup the string concatenation to work just fine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Vertical Height of Text]]></title>
    <link href="http://jaketrent.com/post/css-text-vertical-height/"/>
    <updated>2013-06-03T07:36:00-06:00</updated>
    <id>http://jaketrent.com/post/css-text-vertical-height</id>
    <content type="html"><![CDATA[<p>Setting text elements on a page to be a specific height is usually straight forward.  Here are the specs for a couple textual situations you'll encounter.</p>

<p><img src="http://i.imgur.com/hxw13Yp.png" alt="CSS height" /></p>

<!--more-->


<p><strong>Note:</strong> Experiments were done in Chrome 27, but this should be pretty consistent over browsers</p>

<h2>Text in a Div</h2>

<p>Text is likely most common just plastered across your site.  Lucky for us all, this is the most straightforward way to calculate and guarantee a vertical height.</p>

<p><img src="http://i.imgur.com/cy3HTWW.png" alt="Text height css" /></p>

<p>The formula is simple.  Here, vertical height is calculated by:</p>

<blockquote><p>vertical height = margin + border + padding + (line-height || height)</p></blockquote>

<p><code>line-height</code> or <code>height</code> will determine the height of the main body of the text container, such as a <code>div</code>.  Either one will do.</p>

<p>I will guess that most of the time you'll want your text centered vertically in the container.  But for those times you want it hugging the top or bottom, add a line-height that's either smaller or larger than the height, respectively, to move the text vertically within the container.</p>

<h2>Text in an Input</h2>

<p>Text appearing within an input field is much more tricky and has a quite a few more caveats.  There are two main different modes that vertical height will be determined by: without a <code>height</code> or with a <code>height</code> specified:</p>

<p><img src="http://i.imgur.com/4UdHhF4.png" alt="Input height css" /></p>

<h3>No Height Specified</h3>

<p>If the <code>height</code> is not set, traditional attributes, combined, create the total vertical height.  This formula becomes:</p>

<blockquote><p>height = margin + border + padding + (line-height || font-size)</p></blockquote>

<p>Some observations and caveats:</p>

<ul>
<li><code>font-size</code> only affects vertical height as it approaches or exceeds the <code>line-height</code>.</li>
<li><code>padding</code>, <code>border</code>, and <code>margin</code> always affect the vertical height, no matter their value.</li>
<li>If <code>font-size</code> is small enough to not affect <code>line-height</code>, <code>line-height</code> can be used for an exact vertical height sum.</li>
<li>If <code>font-size</code>, instead of <code>line-height</code> is affecting the vertical height, the px value of the <code>font-size</code> will not be usable to guarantee height.  Each font has different heights.  A per-font calculation will have to be made.</li>
</ul>


<h3>Height Specified</h3>

<p>If <code>height</code> is set, the input's vertical height formula will always</p>

<blockquote><p>vertical height = height + margin</p></blockquote>

<p>Some observations and caveats:</p>

<ul>
<li>If <code>margin</code>, <code>border</code>, and <code>padding</code> add up to be greater than <code>height</code>, then that becomes new height.</li>
<li><code>line-height</code> and <code>font-size</code> don't contribute the vertical height, no matter the <code>height</code> attribute.</li>
<li><code>margin</code>, <code>border</code>, and <code>padding</code> attributes don't contribute at all to the vertical height if their sum height is less than the actual <code>height</code> attribute.</li>
<li>Once <code>line-height</code> exceeds <code>height</code>, the text in the input moves vertically downward, eventually becoming hidden.</li>
<li>As <code>font-size</code> approaches <code>height</code>, the text will eventually become hidden.</li>
<li><code>border</code> will not affect vertical height, but it will still affect horizontal width.</li>
<li><code>vertical-align</code>, as in most things, does nothing.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cons of CSS Preprocessors]]></title>
    <link href="http://jaketrent.com/post/cons-css-preprocessors/"/>
    <updated>2012-11-14T09:20:00-07:00</updated>
    <id>http://jaketrent.com/post/cons-css-preprocessors</id>
    <content type="html"><![CDATA[<p>If you have any sizeable stylesheet these days, you should use a CSS preprocessor.  They're awesome, but they come with a few cons.  The pros still definitely out-weigh the cons.  Use the preprocessor.  The cons are just things you'll want to look out for to make your experience with CSS preprocessors better.</p>

<p><img src="http://i.imgur.com/Mzozm.jpg" alt="CSS Preprocessors" /></p>

<!--more-->


<h2>CSS Preprocessors are Popular</h2>

<p>Chris Coyier recently <a href="http://css-tricks.com/poll-results-popularity-of-css-preprocessors/">took a poll on the usage of CSS preprocessors</a>.  About half use one of the preprocessor options available to them.  Of the languages used, <a href="http://lesscss.org/">LESS</a> is the most popular.  (<a href="http://learnboost.github.com/stylus/">Stylus</a> is my current favorite.  I like the HAML-style syntax.)</p>

<p>This means that half of the people who write CSS aren't, in fact, writing CSS.  They're writing in <a href="http://net.tutsplus.com/tutorials/html-css-techniques/sass-vs-less-vs-stylus-a-preprocessor-shootout/">some language</a> that transpiles to CSS.  So, half of these developers are getting the pros, but there's a bit of baggage too.</p>

<h2>Cons of a CSS Preprocessor</h2>

<h4>File Size is Deceiving</h4>

<p>When you're writing in a higher-level styling language, it's often much smaller than the generated CSS will be.  Thus, you could be deceiving yourself thinking that your resulting CSS will be just as a small as what you're editing.  Why?</p>

<ol>
<li>Hiearchy will be flattened in the resulting CSS.  And the tree of selectors will be duplicated for every selector.</li>
<li>You can loop in a preprocessor, generating n items where you only see one.  All those items will be listed in the final, static CSS file.</li>
<li>In some of these languages, you don't have to write vendor prefixes.  This is a fantastic feature, but it makes you tend to forget that one attribut will expand into 5 or 6 in the resulting CSS. (Stylus' <a href="https://github.com/visionmedia/nib">nib</a> is great for this, btw.)</li>
</ol>


<p>Maybe not a big deal.  Remove an image from your site, and you've made up the difference in bits on the wire.</p>

<h4>More Process</h4>

<p>Because you usually won't be deploying your .less or .styl file, you'll need to have a point in your development lifecycle where the .css gets generated.  This can potentially slow you down, but there are great tools like <a href="https://github.com/gruntjs/grunt-contrib-stylus/">Grunt</a> or <a href="http://incident57.com/codekit/">CodeKit</a> to make this quite automagic.  These tools have good, logical defaults, but still require configuration for your specific project.</p>

<h4>Hard to Go Back</h4>

<p>After working with Stylus or another language for a while, you'll meet a project that is straight CSS, and the RoI on conversion to a preprocessor is small.  So, you'll be back in CSS land.  This will be hard.  You'll realize how nice you've had it.  The mechanisms you've grown to rely on won't be there.</p>

<h4>Variety of Syntax</h4>

<p>Each CSS Processor's syntax is different.  The features largely overlap, but they're implemented differently.  It's a polyglot world, so it's no big deal.  Still, it can be confusing switching between projects that have different styling syntax.  You'll write your styles twice after you realize that Stylus syntax doesn't work in a LESS file.</p>

<h4>Team Coordination</h4>

<p>You need to get everyone on your team on board when using a CSS preprocessor.  If someone starts editing a .css file, their changes will be overwritten.  Minify the generated .css.  That should make it less savory to edit.  It'll be a deterrent, but I can almost guarantee someone will edit it anyway. :)  Make the stylesheet workflow very clear.</p>

<h2>The Native Future</h2>

<p>We really only have these CSS preprocessors because CSS is too strict, flat, unflexible, and verbose for the amazing things being written for the web today.  Wouldn't it be nice if these styling languages or some new, similar version of CSS was available natively in the browser?</p>

<p>Meanwhile, we'll use these tools.  What have you found your greatest challenge to be using a CSS preprocessor?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Responsive Table with Scrolling]]></title>
    <link href="http://jaketrent.com/post/responsive-table-with-scrolling/"/>
    <updated>2012-11-07T17:06:00-07:00</updated>
    <id>http://jaketrent.com/post/responsive-table-with-scrolling</id>
    <content type="html"><![CDATA[<p>Sometimes a <code>table</code> element is the most semantic element one can use in markup.  It is true.  If you're displaying tabular data, a <code>table</code> is a likely option.  If you're on a responsive site, however, you'll cringe at this option.  It turns out that tables aren't very responsive web design-friendly.  One way to create a more responsive table is with scrolling.</p>

<p><img src="http://i.imgur.com/GeuZe.png" alt="Responsive Table with Scrolling" /></p>

<!--more-->


<h2>Responsive Table Options</h2>

<p>I love the article by Chris Coyier that describes <a href="http://css-tricks.com/responsive-data-tables/">responsive tables</a>.  Some of his ideas and those of the commenters on his post a great at thinking outside the box on what the options include for responsive tables:</p>

<ol>
<li>Orient the table vertically when there's not enough room for all the columns.</li>
<li>Replace tabular data with a graphic, such as a pie graph, that communicates the same gist.</li>
<li>Replace the table with a link that opens a scrollable view large enough for the regular-sized table.</li>
</ol>


<p>My favorite option is the first.  But, in my case, it didn't seem to work extremely well because I have two headers.  The example had column headers only.  I have row headers as well.  After a bit more looking, I ran across this <a href="http://www.zurb.com/playground/playground/responsive-tables/">Zurb scrolling table css and js example</a>.  The best solution, it seemed for now, was scrolling.  (My example code is based on the markup and styles of the Zurb code with a few things taken out and a few things added.)</p>

<h2>Table Horizontal Scrolling</h2>

<p>On the web, vertical scrolling is a part of the full meal deal.  So, the only thing to solve is the horizontal scrolling.  Normally, we don't want content flowing off the right side of the screen when browsing.  So, we when there's scrolling required, we're going to do it within the table only and for the columns we want.</p>

<h4>Divide table in two</h4>

<p>We want some columns to scroll and others to remain pinned whilst scrolling.  We'll duplicate the table in the markup and wrap each, a la:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;table-wrapper&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;pinned&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- table here with pinned columns only--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;scrollable&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- table here with scrollable columns only--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Line up the rows</h4>

<p>Now we have two tables.  The flexibility we've given ourself is that we can make some columns stick and others scroll easily.  Our new challenge is keeping the row height lined up so the two tables look like one.</p>

<p>Put the two tables next to each other with a float left and a float right.  Make the widths percentage-based as with any <a href="http://en.wikipedia.org/wiki/Responsive_web_design">rwd</a>.</p>

<p>Now we have a few options to make our rows line up:</p>

<ol>
<li>Explicitly set all table cells to the same height</li>
<li>Use JavaScript to make each cell in a row be the same height as the tallest cell in that row</li>
<li>Put similar content in each cell on a row (eg, just text with the same attributes that will not wrap for longer text)</li>
</ol>


<p>Turns out that I will choose option 1 for the table cells (<code>td</code>) and option 3 for the table headers (<code>th</code>).</p>

<p>This is my least favorite feature of this solution.  Anyone have a better idea on lining up the rows?</p>

<h4>Set column width</h4>

<p>I want some of my columns to have a set width.  Well, as <em>set</em> as anything is in rwd.  An html <code>table</code> will usually expand and contract columns across the table to give optimum spacing based on the content.</p>

<p>I want to make my pinned table columns allow extra-long content, but I don't want their widths to change at all.  A bit of StackOverflow love yielded this answer on why <code>overflow: hidden</code> doesn't work when <a href="http://stackoverflow.com/a/7570613/118561">constraining table cell width</a>.</p>

<p>In short, the solution is to wrap the content inside of the <code>td</code> with two <code>divs</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;outer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;inner&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    Row 4 longer than lotr
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And sprinkle with a bit of stylesheet:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">td</span> <span class="nc">.outer</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">td</span> <span class="nc">.inner</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">overflow</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span>
</span><span class='line'>  <span class="k">white-space</span><span class="o">:</span> <span class="k">nowrap</span><span class="p">;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This style will let the column width remain and the content overflow.  It will also keep the cell text on one line, and it will be hidden as it flows off the right-hand side of the cell.  To wrap and hide as it flows off the bottom of the cell, remove the <code>white-space: nowrap</code> attribute.</p>

<h2>Responsive Table with Scrolling</h2>

<p>For the final result, check out the <a href="http://codepen.io/jaketrent/pen/CcboI">CodePen for the responsive table</a> below:</p>

<p><pre class="codepen" data-height="400" data-type="result" data-href="CcboI" data-user="jaketrent"><code></code></pre>
<script async src="http://codepen.io:/assets/embed/ei.js"></script></p>

<p>What are your suggestions for making this better?  How have you solved the responsive table challenge?</p>
]]></content>
  </entry>
  
</feed>
