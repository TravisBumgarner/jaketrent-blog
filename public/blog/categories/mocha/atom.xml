<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mocha | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/mocha/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2015-07-28T08:00:52-06:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing React on jsdom]]></title>
    <link href="http://jaketrent.com/post/testing-react-with-jsdom/"/>
    <updated>2015-06-18T07:13:00-06:00</updated>
    <id>http://jaketrent.com/post/testing-react-with-jsdom</id>
    <content type="html"><![CDATA[<p>React allows you to create components that will render UI for your application.  If your UI is of any complexity, you'll likely want to test that it functions correctly and allows for future refactors.  There are numerous ways to do this.  One way that you might appreciate is using <a href="https://github.com/tmpvar/jsdom">jsdom</a>, an in-JavaScript implementation of the DOM.</p>

<p><img src="http://i.imgur.com/DXuSNbw.png" alt="react on jsdom" /></p>

<!--more-->


<h2>What is jsdom?</h2>

<p>Jsdom is an in-JavaScript implementation of the DOM.  The DOM is the document object model, which is the tree of nodes that make up the UI for documents shown in web browsers.</p>

<p>Because jsdom is implemented in JavaScript, we can have a DOM-like API to work with without needing a browser.  That means that we don't have to capture a browser in order test, a la <a href="http://karma-runner.github.io/">Karma</a>.  That means that we can run our tests in environments without browsers, like in Node or in continuous integration environments.</p>

<p>By not using real browsers, we're also essentially saying that we believe the problems in our client JavaScript will not be browser-dependent (again, because we're not capturing <em>real</em> browsers).</p>

<h2>jsdom Requirements</h2>

<p>The <a href="https://github.com/tmpvar/jsdom">latest version of jsdom</a>, as of this writing, requires <a href="https://iojs.org/en/index.html">io.js</a> instead of Node to run.  If you'd like to run in Node.js instead, the <a href="https://github.com/tmpvar/jsdom/tree/3.x">3.x series of jsdom</a> is required.</p>

<p>As <a href="http://thenextweb.com/dd/2015/06/16/node-js-and-io-js-are-settling-their-differences-merging-back-together/">Node and io.js merge in the future</a>, I expect the new versions of jsdom to support the one, unified platform.</p>

<h2>The Test Runner</h2>

<p>In my JavaScript tests, I prefer to use the <a href="http://mochajs.org/">Mocha</a> test runner.  It's usable in Node or browser environments.  It has great async test support.  It has the familiar behavior-style syntax of <code>describe</code> and <code>it</code> and all the normal test setup hooks that you like.  Most importantly, it features the Nyan cat test reporter:</p>

<p><img src="http://mochajs.org/images/reporter-nyan.png" alt="nyan cat test reporter" /></p>

<p>Mocha lets you choose your own assertion library.  I like <a href="http://shouldjs.github.io/">should.js</a>.</p>

<p>To install both:</p>

<p><code>
npm install mocha should --save-dev
</code></p>

<h2>Configuring Mocha</h2>

<p>By default, Mocha wants a <code>/test</code> directory in your project root in which to put its configuration and potentially your spec files, depending on how you like to organize your projects:</p>

<p><code>
mkdir test
</code></p>

<p>Inside of the <code>/test</code> dir, let's <code>vim mocha.opts</code> and give it a place to configure jsdom and our other libs:</p>

<p><code>text mocha.opts
--require test/utils/dom.js
--require should
--reporter nyan
</code></p>

<p>We have yet to write the <code>test/utils/dom.js</code> file.  We will.  This file includes options for mocha.  Line by line, we're saying that before mocha runs tests, we want to load our <code>dom.js</code> config, the <code>should.js</code> library, and specify our reporter as <code>nyan</code>.</p>

<h2>Configuring jsdom</h2>

<p>I've tried to come up with several configurations that will make jsdom work well with my React projects.  This is the best/simplest that I've come up with.  I'd be interested to hear if you have any suggestions on the approach.</p>

<p>Here's the full configuration with explanatory comments inline, as it would appear in <code>test/utils/dom.js</code>:</p>

<p>```js dom.js
var jsdom = require('jsdom')</p>

<p>// setup the simplest document possible
var doc = jsdom.jsdom('&lt;!doctype html><html><body></body></html>')</p>

<p>// get the window object out of the document
var win = doc.defaultView</p>

<p>// set globals for mocha that make access to document and window feel
// natural in the test environment
global.document = doc
global.window = win</p>

<p>// take all properties of the window object and also attach it to the
// mocha global object
propagateToGlobal(win)</p>

<p>// from mocha-jsdom https://github.com/rstacruz/mocha-jsdom/blob/master/index.js#L80
function propagateToGlobal (window) {
  for (let key in window) {</p>

<pre><code>if (!window.hasOwnProperty(key)) continue
if (key in global) continue

global[key] = window[key]
</code></pre>

<p>  }
}
```</p>

<p>The reason that we want to attach all the <code>window</code> properties to the mocha <code>global</code> object is because developers often write code that is meant for the browser without explicitly using the global environment object.  For instance, in React the developers write:</p>

<p><code>js
navigator.userAgent.indexOf('Chrome') &gt; -1
</code></p>

<p>instead of:</p>

<p><code>js
window.navigator.userAgent.indexOf('Chrome') &gt; -1
</code></p>

<p>Withing taking <code>window.navigator</code> and putting it on <code>global.navigator</code>, you'd get an error like this when running your tests:</p>

<p><code>
ReferenceError: navigator is not defined
</code></p>

<h2>The React Test</h2>

<p>You are now ready to render React components into a document in your tests.  The document will be provided by jsdom.  You don't need a browser environment to run this.</p>

<p>```js mycomponent.spec.js
var React = require('react/addons')
var should = require('should')
var TestUtils = React.addons.TestUtils
var MyComponent = // a React.Component with a <button/> ...
describe('MyComponent', function () {
  it('has button that fires a dom event for click', function (done) {</p>

<pre><code>function handleClick() { done() }
var detachedComp = TestUtils.renderIntoDocument(&lt;MyComponent onClick={handleClick}/&gt;)
var button = TestUtils.findRenderedDOMComponentWithTag(detachedComp, 'button')
var buttonNode = React.findDOMNode(button)
should.exist(buttonNode)
TestUtils.Simulate.click(buttonNode)
</code></pre>

<p>  })
})
```</p>

<p>To run mocha with the configuration above, I like to add an npm script in <code>package.json</code>:</p>

<p>```json package.json
{
   "scripts": {</p>

<pre><code> "test": "mocha test/**/*.spec.js"
</code></pre>

<p>   }
}
```</p>

<p>And then type:</p>

<p><code>bash
npm test
</code></p>

<p>Write the source to satisfy your test, and the lights should go green.  Your DOM is happy.  Your test is happy.</p>

<p>Does it work well for you?  How might you improve on it?  Enjoy testing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run a Single Mocha Test]]></title>
    <link href="http://jaketrent.com/post/run-single-mocha-test/"/>
    <updated>2013-01-16T07:07:00-07:00</updated>
    <id>http://jaketrent.com/post/run-single-mocha-test</id>
    <content type="html"><![CDATA[<p>When working inside your test suite, it's often the case that you don't want to run all of your tests.  Mocha has a great mechanism that allows you to easily specify what exactly you want run.  This can help make your processes such as TDD faster and more focused.</p>

<p><img src="http://i.imgur.com/hbcnU.png" alt="Mocha" /></p>

<!--more-->


<h2>Run a Single Test File</h2>

<p>Using the mocha cli, you can easily specify an exact or wildcarded pattern that you want to run.  This is accomplished with the <code>grep</code> option when running the <code>mocha</code> command.</p>

<p>If you wanted to run only the login-failure.js suite, the command would look like:</p>

<p><code>
$ mocha --grep login-failiure.js
</code></p>

<p>If you happen to have multiple suites that match a filename pattern that you wanted to run, exclusive to all others, you would run:</p>

<p><code>
$ mocha --grep login-*.js
</code></p>

<h2>Run a Single Spec</h2>

<p>Often we're in the test code making changes, and it's easy to make adjustments to what subset of tests you run from here as well.  If I want to run a single <code>describe()</code> function, I can add a <code>.only()</code> to the function call, like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// these tests will be skipped</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">describe</span><span class="p">.</span><span class="nx">only</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// these tests will run</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can stick the <code>.only()</code> on any <code>describe</code>, no matter if it's first or last in the list of specs.</p>

<h2>Run a Single Test</h2>

<p>Just as you can with <code>describe</code>, the tests can be specified to exclusively run if you attach <code>.only()</code> to the function call.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">.</span><span class="nx">only</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// this test will run</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">it</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// this test will be skipped</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>Note!</strong> that by putting the <code>.only()</code> on a test, all other functions in the spec are skipped.  This means that your <code>before</code>, <code>beforeEach</code>, <code>after</code>, and <code>afterEach</code> functions are <em>not</em> called.  Sometimes it's hard to remember when that matters, so I usually end up running single specs instead of single tests.</p>

<h2>Skip Something</h2>

<p>If you want to run all the specs/tests that you have minus some subset, effectively commenting out these tests, you can add <code>.skip()</code> to either <code>describe</code> or <code>it</code> function calls.</p>

<h2>Remember to Remove</h2>

<p>With the additions of the <code>.only()</code> or <code>.skip()</code> you are altering the actual code of your tests.  This is great for your local development process.  You'll need to be careful that you don't commit this change -- at least you usually won't want to.  Otherwise, you CI process will be running a subset of your tests, just as you are locally, which is no bueno.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authenticated Supertest Tests]]></title>
    <link href="http://jaketrent.com/post/authenticated-supertest-tests/"/>
    <updated>2013-01-14T07:07:00-07:00</updated>
    <id>http://jaketrent.com/post/authenticated-supertest-tests</id>
    <content type="html"><![CDATA[<p>When you're trying to test your authenticated URLs via supertest, there are just a couple things you'll need to do that aren't spelled out in the docs.</p>

<p><img src="http://i.imgur.com/PFUGV.jpg" alt="Supertest" /></p>

<!--more-->


<h2>Supertest</h2>

<p><a href="https://github.com/visionmedia/supertest">Supertest</a> is a library written by the prolific TJ Holowaychuk.  It is a companion to <a href="https://github.com/visionmedia/superagent">superagent</a>.  Superagent provides a clean API for issuing HTTP commands.  Supertest ties into superagent for allowing easy assertions on top of those HTTP requests.</p>

<h2>Authenticated Requests</h2>

<p>Lots of webapps have portions of their sites that require authenticated to access, so it makes sense that there's a great need to test requests against these portions.  Yet in supertest, there's not a totally-straightforward way to login for the sake of a test and do subsequent requests under that login.  At least there's no explicit API for it in the current release.  But there have been <a href="https://github.com/visionmedia/supertest/issues/26">many</a> <a href="https://github.com/visionmedia/supertest/issues/46">requests</a> for it.  Who knows if it will come.  Given that we know the mechanism for session continuity between requests, cookies, we can make it happen ourselves.</p>

<h2>Login for Supertest</h2>

<h4>Use Superagent</h4>

<p>Supertest has no cookiejar for holding cookies like the sessionid.  But, superagent does.  So, we're going to need to import it explicitly.  A login helper could look something like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">superagent</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;superagent&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">agent</span> <span class="o">=</span> <span class="nx">superagent</span><span class="p">.</span><span class="nx">agent</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">theAccount</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;username&quot;</span><span class="o">:</span> <span class="s2">&quot;nacho&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;password&quot;</span><span class="o">:</span> <span class="s2">&quot;iamtheluchadore&quot;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">exports</span><span class="p">.</span><span class="nx">login</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">request</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/login&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">theAccount</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">agent</span><span class="p">.</span><span class="nx">saveCookies</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">done</span><span class="p">(</span><span class="nx">agent</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A few points:</p>

<ul>
<li><code>theAccount</code> information could come from anywhere.  You could use the same pattern from this login process to setup a newly-registered user as well.</li>
<li>The <code>request</code> parameter to <code>login()</code> is the supertest request.</li>
<li>After we post to '/login' and a response returns in the <code>end()</code> function, we are saving the cookies from that response (a login response should return with a 'Set-cookies' header).  This superagent agent (with the login cookie) is what we send back to the caller of the login helper via <code>done()</code>.</li>
</ul>


<h4>Attach the Cookies to Supertest</h4>

<p>Now that we've made login request and saved the cookies, it's time to make our authenticated request(s).  Easy cheesy.  A simple test to see if the login worked might look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;supertest&#39;</span><span class="p">)(</span><span class="nx">app</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">login</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./login&#39;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;MyApp&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="kd">var</span> <span class="nx">agent</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">before</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">login</span><span class="p">.</span><span class="nx">login</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">loginAgent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">agent</span> <span class="o">=</span> <span class="nx">loginAgent</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">done</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should allow access to admin when logged in&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">req</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/admin&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">agent</span><span class="p">.</span><span class="nx">attachCookies</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>
</span><span class='line'><span class="nx">req</span><span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="nx">done</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>More jabber about the code:</p>

<ul>
<li><code>app</code> is my Express app.  This is your webserver.</li>
<li>We're importing the login helper, and we've called it one time before all the tests in our <code>MyApp</code> spec via <code>before()</code>.  This call to <code>before()</code> is asynchronous, just like our test in this case, because we have to do a full login to setup our test.  When the <code>loginAgent</code> is returned, we save it for use in our actual tests.</li>
<li>The test gets the best of both worlds.  When doing <code>request.get()</code>, we're using the supertest request.  So, we can then do cool <code>expect()</code>s on it.  Right before the request goes out the door, we grab the superagent <code>agent</code> and attach its cookies to our new request.</li>
</ul>


<p>In the future, perhaps there will be a more expressive way to do this that's worked into the supertest API.  For now, this strategy is the best I've found.  It's based on the method I originally found in <a href="https://github.com/visionmedia/supertest/issues/46#issuecomment-11679706">visionmedia/supertest#46</a>.</p>

<p>Is there a better way that you've found to do this kind of authenticated test?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocha Testing AngularJs Dependency Injection]]></title>
    <link href="http://jaketrent.com/post/mocha-testing-angularjs-dependency-injection/"/>
    <updated>2013-01-02T16:48:00-07:00</updated>
    <id>http://jaketrent.com/post/mocha-testing-angularjs-dependency-injection</id>
    <content type="html"><![CDATA[<p>When you test your AngularJs code, you need to explicitly inject the services that your controllers and modules require.  It has its own special syntax.  It requires mocking.  You'll see a slightly different syntax than you may have expected.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="AngularJs" /></p>

<!--more-->


<h2>The Solution: Mocking AngularJs Injections</h2>

<p>Angular is simple and quick on many things.  On some things, it's not as simple as we are be led to believe from simple examples.  From the <a href="http://docs.angularjs.org/tutorial/step_05">Angular tutorial</a>:</p>

<blockquote><p>Because we started using dependency injection and our controller has dependencies, constructing the controller in our tests is a bit more complicated.</p></blockquote>

<p>And really, who doesn't use dependency injection in any of their Angular code?  But don't worry, it's not much worse.  And really, it makes sense that things would be this way.</p>

<p>The final Mocha code to test our simple controller should look something like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">assert</span><span class="p">,</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">expect</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">expect</span><span class="p">,</span>
</span><span class='line'><span class="nx">should</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">should</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be available&#39;</span><span class="p">,</span> <span class="nx">inject</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$rootScope</span><span class="p">,</span> <span class="nx">$controller</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">scope</span> <span class="o">=</span> <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$new</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ctrl</span> <span class="o">=</span> <span class="nx">$controller</span><span class="p">(</span><span class="nx">MyController</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="o">:</span> <span class="nx">scope</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">ctrl</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">not</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="kc">undefined</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A couple of points:</p>

<ul>
<li><a href="http://chaijs.com/api/bdd/"><code>chai</code> is an assertion library</a> that makes a great bdd/should-style assertion available in browser tests.</li>
<li><code>inject()</code> is made available through the <a href="https://github.com/angular/angular-seed/blob/master/test/lib/angular/angular-mocks.js"><code>angular-mocks.js</code> file</a>.  This is available automagically in Jasmine, but in Mocha, you have to include this extra file to get the function.</li>
<li><code>$rootScope</code> is a scope available to all controllers, so it's not dependent on <code>ng-controller</code> references which are in your src, but not your test environment.  From this scope, we create a new scope.</li>
<li>Initializing <code>MyController</code> with the <code>$controller</code> function allows us to mock the value of <code>$scope</code> in the controller.</li>
</ul>


<h2>Potential Errors</h2>

<p>If you look at the solution above, it should give you the working test of DI that you want.  Here are a few things I worked through when testing my Angular controller...</p>

<h4>TypeError: 'undefined' is not an object</h4>

<p>My controller looked somewhat like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">MyController</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;$viewContentLoaded&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// ... stuff when dom in the controller is ready</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And this was the start of my test:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be available&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">ctrl</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyController</span><span class="p">();</span>
</span><span class='line'><span class="c1">// ... assertions</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Ths <code>$scope.$on()</code> line couldn't run because <code>$scope</code> was simply not injected and undefined.
blah - scope is not there</p>

<h4>ReferenceError: Can't find variable: expect</h4>

<p>In Mocha, you'll need to import an assertion library of your choice.  Otherwise, <code>expect()</code> and other assertions will not be available to use.  I prefer Chai for its should-style assertions.  They read as a sentence really well:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">expect</span><span class="p">(</span><span class="nx">ctrl</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">not</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="kc">undefined</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test RequireJs Code in Testacular]]></title>
    <link href="http://jaketrent.com/post/test-requirejs-testacular/"/>
    <updated>2012-10-31T17:04:00-06:00</updated>
    <id>http://jaketrent.com/post/test-requirejs-testacular</id>
    <content type="html"><![CDATA[<p>Did you write your source code as JavaScript AMD modules in <a href="http://requirejs.org/">RequireJs</a>?  Do you want to test them in real browsers?  Do you want the flexibility of using <a href="http://visionmedia.github.com/mocha/">Mocha</a> or <a href="http://pivotal.github.com/jasmine/">Jasmine</a>?  This is the moment you've been waiting for.</p>

<p><a href="http://vojtajina.github.com/testacular/">Testacular is a "spetacular test runner for JavaScript"</a> that was written to support the <a href="http://angularjs.org/">AngularJs</a> project.  It is valuable because it will run your tests in real browsers.  This is important for front-end code that relies on browser globals such as <code>window</code> (eg, if you use jQuery) or that manipulates the DOM (which could vary browser to browser).</p>

<p>Client-side JavaScript testing is a somewhat crazy space.  Some have even called it <a href="http://rzrsharp.net/2012/08/01/client-side-testing-insanity.html">"insane"</a> and taken drastically different routes than what follows.  But we're gonna see if we can power through, and Testacular will help us get the job done.</p>

<p><img src="http://i.imgur.com/7gh40.jpg" alt="Testacular Javascript Testing" /></p>

<!--more-->


<h2>RequireJs Modules</h2>

<p>We wrote our source code using RequireJs-implemented AMD modules.  This gives us:</p>

<ul>
<li>Clean code organization</li>
<li>Namespaced code (not global)</li>
<li>Explicit dependency management</li>
<li>Source optimized via the RequireJs build</li>
</ul>


<p>Unfortunately, it also makes our source a bit more tricky to test.</p>

<h2>Testacular RequireJs Support</h2>

<p><a href="https://groups.google.com/forum/?fromgroups=#!topic/testacular/CRsf8Ig4bgE">RequireJs support was just barely added</a> to Testacular, so it only lives in the canary channel (master).  To install with npm:</p>

<pre><code>npm install -g testacular@canary
</code></pre>

<p>This will currently install version <del datetime="2012-11-05T14:38:54+00:00">0.5.1</del> 0.5.2.  This is the first version of Testacular with RequireJs support.  So your <code>package.json</code> should include an entry like:</p>

<pre><code>"testacular": "&gt;=0.5.2"
</code></pre>

<p>If <a href="https://npmjs.org/package/testacular">Testacular</a> has moved to >=0.6.0, you can use the stable channel.</p>

<h2>Configure Testacular For RequireJs</h2>

<h4>Directory Setup</h4>

<p>For clarity in the example configuration files and test below, the directory structure upon which these are based looks like this:</p>

<pre><code>project/
    lib/
        jquery.js #etc
    node_modules/
        chai/ #etc
    src/
        MyModule.js
    test/
        MyModule.test.js
        test-main.js
testacular.conf.js
</code></pre>

<h4>Initialize Testacular</h4>

<p>Testacular comes with a nice utility for generating a config file (default name: 'testacular.conf.js') that it needs in order to run.  In your terminal, type:</p>

<pre><code>testacular init
</code></pre>

<p>This will give you a series of prompts for things such as paths to source and tests and which browsers to capture.  <del datetime="2012-11-05T14:38:54+00:00">These prompts do not include the option to add RequireJs support automatically, so you'll need to add those lines manually to your <code>testacular.conf.js</code> (see below).</del>  As of testacular 0.5.2, <code>testacular init</code> will prompt for usage of the RequireJs adapter.</p>

<h4>Testacular Include</h4>

<p>Testacular 0.5.1, while adding RequireJs support, has added a new concept of "included" to the files listed in your config.  This is because RequireJs will balk about a the module not being loaded correctly (ie, loaded synchronously in the <code>&lt;head/&gt;</code> tag of the runner).  From the <a href="http://requirejs.org/docs/errors.html#mismatch">RequireJs docs</a>:</p>

<blockquote><p>"Be sure to load all scripts that call define() via the RequireJS API. Do not manually code script tags in HTML to load scripts that have define() calls in them."</p></blockquote>

<h4>RequireJs Shim</h4>

<p>Not immediately apparent is the fact that the 'shim' config from RequireJs 2.x does not work from within Testacular.  I haven't yet figured out why.  For instance, I was constantly getting "'Backbone' is not defined" messages even though it was specified in the 'shim' config and required in the test.  I could have been doing something wrong.  My solution thus far has been to list each of the non-RequireJs modules and their dependencies in the 'files' attribute of <code>testacular.conf.js</code>.</p>

<h4>testacular.conf.js</h4>

<p>The final point is that the RequireJs main module for your test runner should be the last file listed.</p>

<p>So, finally, here is the 'file' excerpt of <code>testacular.conf.js</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">files</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="nx">MOCHA</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">MOCHA_ADAPTER</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">REQUIRE</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">REQUIRE_ADAPTER</span><span class="p">,</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// !! libs required for test framework</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">pattern</span><span class="o">:</span> <span class="s1">&#39;node_modules/chai/chai.js&#39;</span><span class="p">,</span> <span class="nx">included</span><span class="o">:</span> <span class="kc">false</span><span class="p">},</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// !! put what used to be in your requirejs &#39;shim&#39; config here</span>
</span><span class='line'>  <span class="s1">&#39;lib/jquery.js&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;lib/underscore.js&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;lib/backbone.js&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;lib/handlebars.js&#39;</span><span class="p">,</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// !! put all libs in requirejs &#39;paths&#39; config here (included: false)</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">pattern</span><span class="o">:</span> <span class="s1">&#39;lib/&lt;em&gt;*/&lt;/em&gt;.js&#39;</span><span class="p">,</span> <span class="nx">included</span><span class="o">:</span> <span class="kc">false</span><span class="p">},</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// !! all src and test modules (included: false)</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">pattern</span><span class="o">:</span> <span class="s1">&#39;src/&lt;strong&gt;/*&#39;</span><span class="p">,</span> <span class="nx">included</span><span class="o">:</span> <span class="kc">false</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">pattern</span><span class="o">:</span> <span class="s1">&#39;test/&lt;/strong&gt;/*.test.js&#39;</span><span class="p">,</span> <span class="nx">included</span><span class="o">:</span> <span class="kc">false</span><span class="p">},</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// !! test main require module last</span>
</span><span class='line'>  <span class="s1">&#39;test/test-main.js&#39;</span>
</span><span class='line'><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This config is awesome.  It replaces an html test runner that you would otherwise have to build.</p>

<h2>RequireJs Main Module</h2>

<p>Just like any RequireJs project, you need a main module to bootstrap your tests.  In the main module, you setup the <a href="http://requirejs.org/docs/api.html#config"><code>require.config</code></a>.</p>

<h4>Testacular '/base' Directory</h4>

<p>Testacular serves files under the '/base' directory.  So, on the server, requests to files will be served up under 'http://localhost:9876/base/*'.  The RequireJs config for <code>baseUrl</code> gives a starting context for modules that load with relative paths.  When setting this value for the Testacular server, it will need to start with '/base'.  I want my baseUrl to be at the root of my '/src' directory so relative requires in the source won't need to change.  My baseUrl has the value of '/base/src'.</p>

<h4>Require Each Test File</h4>

<p>One of the things I hate is having to update a master list of all tests to run every time I add a test.  Unfortunately, that's what I currently have.  The test main module has to specifically require each of the test modules.  I would love it if I could add a <code>*.test.js</code> file to the test directory and just have it run the next time the tests run.</p>

<h4>Asynchronously Run Testacular</h4>

<p>Because the RequireJs require statements are asynchronous, Testacular needs to wait until they're done (the code is loaded and ready) before it starts the tests.</p>

<p>The <code>main-test.js</code> file ends up looking like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">require</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// !! Testacular serves files from &#39;/base&#39;</span>
</span><span class='line'>  <span class="nx">baseUrl</span><span class="o">:</span> <span class="s1">&#39;/base/src&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">paths</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">require</span><span class="o">:</span> <span class="s1">&#39;../lib/require&#39;</span><span class="p">,</span>
</span><span class='line'><span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;../lib/text&#39;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span>
</span><span class='line'><span class="p">},</span> <span class="p">[</span><span class="s1">&#39;../test/MyModule.test&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">strong</span><span class="o">&gt;</span><span class="nx">testacular</span><span class="o">&lt;</span><span class="err">/strong&gt;.start();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>RequireJs Test in Testacular</h2>

<p>All the setup thus far has been in preparation for the code to follow.  The test can now be setup as a RequireJs module.  It can require the source code under test.  It can use <a href="http://visionmedia.github.com/mocha/">Mocha</a> (or whatever framework there is a Testacular adapter for).</p>

<p>I will also use <a href="http://chaijs.com/">Chai</a> in order to get the <a href="http://chaijs.com/guide/styles/">'should' BDD-style assertions</a>.  Note that by using RequireJs and running in the browser, we can't just <code>require('chai')</code>.  It has to be required using the asynchronous callback to avoid <a href="http://requirejs.org/docs/errors.html#notloaded">this error</a>:</p>

<blockquote><p>Uncaught Error: Module name "../node_modules/chai/chai" has not been loaded yet for context: _. Use require([])</p></blockquote>

<p>And finally, <code>should()</code> must be invoked to be available in the test.</p>

<p>So, a simple test will look like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;../node_modules/chai/chai&#39;</span><span class="p">,</span> <span class="s1">&#39;MyModule&#39;</span><span class="p">],</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">chai</span><span class="p">,</span> <span class="nx">MyModule</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="kd">var</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">assert</span><span class="p">,</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">expect</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">expect</span><span class="p">,</span>
</span><span class='line'><span class="nx">should</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">should</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;MyModule&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;#initialize()&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be a stinkin object&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">yippee</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyModule</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">yippee</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">an</span><span class="p">(</span><span class="s1">&#39;object&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Run the Tests in Testacular</h2>

<p>There are a couple options set in <code>testacular.conf.js</code> that will describe how your tests can be run:</p>

<ul>
<li><strong>singleRun</strong> - Start Testacular server, capture browsers, run all tests, shutdown server</li>
<li><strong>autoWatch</strong> - Have the server run tests every time a source or test file changes (and requires you to turn off singleRun)</li>
</ul>


<p>To start the Testacular server:</p>

<pre><code>testacular start
</code></pre>

<p>Finally, if your Testacular server is already running and you want to kick off the tests, type:</p>

<pre><code>testacular run
</code></pre>

<h2>Now to Test</h2>

<p>Thank you to <a href="https://github.com/vojtajina">Vojta Jina</a> and the rest of the AngularJs crew and other contributors for making an awesome test runner.  I'm very happy that RequireJs support was added.  Vojta has also provided an <a href="https://github.com/vojtajina/testacular/tree/master/test/e2e/requirejs">end-to-end example</a> with code on Github.</p>

<p>How do you see that we could improve this configuration or testing process?</p>

<p>Now to test some sweet code!</p>
]]></content>
  </entry>
  
</feed>
