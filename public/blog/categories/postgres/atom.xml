<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: postgres | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/postgres/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2015-02-24T07:51:30-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[django_content_type_app_label_key Constraint on Heroku]]></title>
    <link href="http://jaketrent.com/post/django_content_type_app_label_key-constraint-herok/"/>
    <updated>2011-12-30T13:30:00-07:00</updated>
    <id>http://jaketrent.com/post/django_content_type_app_label_key-constraint-herok</id>
    <content type="html"><![CDATA[<p>Django comes with some awesome CLI tools.  Manage.py is a beast of magic and lore.  And it loves the fantastical kingdom of Heroku, where is romps with merry measure twixt the ether.  But, when I've tried to go through a dumpdata of a previous site, syncdb on a migration to Heroku, and loaddata for moving the data, I've run into a snag on django_content_type_app_label_key more than once.  Here are some resolutions.</p>

<!--more-->


<h2>The Error Stack</h2>

<p>Specifically, when I do a sync of the database:</p>

<p><code>bash
heroku run python manage.py syncdb
</code></p>

<p>It works like a charm.  And then a loading of the data:</p>

<p><code>bash
heroku run python manage.py loaddata data.json
</code></p>

<p>It runs for a bit then spews this small hiccup:</p>

<p>```bash
Running python manage.py loaddata data.json attached to terminal... up, run.2
Problem installing fixture 'data.json': Traceback (most recent call last):
  File "/app/lib/python2.7/site-packages/django/core/management/commands/loaddata.py", line 174, in handle</p>

<pre><code>obj.save(using=using)
</code></pre>

<p>  # ...more stack trace...
  File "/app/lib/python2.7/site-packages/django/db/backends/postgresql_psycopg2/base.py", line 44, in execute</p>

<pre><code>return self.cursor.execute(query, args)
</code></pre>

<p>IntegrityError: duplicate key value violates unique constraint "django_content_type_app_label_key"
```
Lovely.</p>

<p>It turns out that <code>syncdb</code>, in addition to running the DDLs for your table creation also populates the <code>django_content_type</code> table.  And then when you loaddata it tries to repopulate the table, violating the unique constraint on the content type name.</p>

<h2>Make the Magic Live Again</h2>

<p>There are a couple ways around this:</p>

<h3>Dump Something Specific</h3>

<p>When you dumpdata, only <a href="https://docs.djangoproject.com/en/dev/ref/django-admin/#dumpdata-appname-appname-appname-model">dump specific apps</a> instead of the whole project.  For example:</p>

<p><code>bash
python manage.py dumpdata myApp
</code></p>

<h3>Django 1.3 Exclude</h3>

<p>If you're on Django 1.3 or above, you get a nice new option with dumpdata to <a href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-option---exclude">exclude certain apps</a>.  So you could run:</p>

<p><code>bash
python manage.py dumpdata --exclude contenttypes
</code></p>

<h3>Try in Vain to Reset</h3>

<p>Another one I tried (but didn't work) was:</p>

<p><code>bash
heroku run python aprilandjake/manage.py reset contenttypes
</code></p>

<h3>Sql Truncate</h3>

<p>Or, if you're still trying to dumpdata on your whole project, you could <code>syncdb</code> on Heroku and then truncate the data out of <code>django_content_type</code> like this:</p>

<p><code>bash
heroku run python aprilandjake/manage.py dbshell
</code></p>

<p>And then <a href="http://swik.net/django/Django+Community+Aggregator?page=2">truncate</a> (inside the dbshell):</p>

<p><code>bash
truncate django_content_type cascade;    
</code></p>

<p>Problem for me is that didn't work either.  I am on the super cheap in Heroku, so I get this lovely denial:</p>

<p><code>bash
Running python manage.py dbshell attached to terminal... up, run.5
Error: You appear not to have the 'psql' program installed or on your path.
</code></p>

<p>(It's not available in a <a href="http://devcenter.heroku.com/articles/heroku-postgresql">shared database</a>):</p>

<p><code>bash
heroku pg:psql
!  Cannot ingress to a shared database
</code></p>

<h3>Delete via Admin UI</h3>

<p>And finally, if you want to get rid of the data via the admin UI, set it up to appear as editable.  In an <a href="https://docs.djangoproject.com/en/dev/ref/contrib/admin/#modeladmin-objects"><code>admin.py</code></a> in your project, try something like this:</p>

<p>```python
from django.contrib.contenttypes.models import ContentType</p>

<p>class ContentTypeAdmin(admin.ModelAdmin):
  list_display = ['name', 'app_label']
  fieldsets = (</p>

<pre><code>('', {
  'classes': ('',),
  'fields': ('name', 'app_label')
}),
</code></pre>

<p>  )</p>

<p>  admin.site.register(ContentType, ContentTypeAdmin)
```</p>

<p>Now you should be able to loaddata and feel the Django wind in your hair and the Heroku grass beneath your feet again.</p>
]]></content>
  </entry>
  
</feed>
