<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: d3 | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/d3/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2015-01-15T10:37:31-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[D3 Class Operations]]></title>
    <link href="http://jaketrent.com/post/d3-class-operations/"/>
    <updated>2014-12-24T10:58:00-07:00</updated>
    <id>http://jaketrent.com/post/d3-class-operations</id>
    <content type="html"><![CDATA[<p>D3 has operations for class name manipulation that you're used to from jQuery.  These include addClass, removeClass, hasClass, and toggleClass.  They just go by different names.</p>

<p><img src="http://i.imgur.com/94JQ8N8.jpg" alt="d3 class names" /></p>

<!--more-->


<h2>selection.classed</h2>

<p>The magic all comes in the form of the <code>selection.classed</code> method from d3.  It is going to be the api that is used to accomplish all the operations listed below.  From the <a href="https://github.com/mbostock/d3/wiki/Selections#classed">docs</a>:</p>

<blockquote><p>This operator is a convenience routine for setting the "class" attribute; it understands that the "class" attribute is a set of tokens separated by spaces. Under the hood, it will use the classList if available, for convenient adding, removing and toggling of CSS classes.</p></blockquote>

<p>It knows how to handle one or many classes on an element, and it will be performant.</p>

<p>Also note that this method is only available on a selection.</p>

<h2>d3 addClass</h2>

<p>To add a class, the second parameter to <code>classed</code> must be true, as in this code:</p>

<p><code>js
d3.selectAll(".bar")
 .classed("my-selector", true);
</code></p>

<h2>d3 removeClass</h2>

<p>To remove a class, the second parameter to <code>classed</code> must be false.</p>

<p><code>js
d3.selectAll(".bar")
  .classed("my-selector", false);
</code></p>

<h2>d3 hasClass</h2>

<p>To check for the existence of a class, just leave off the second parameter and pass the class name you're querying for.  This will return true if it exists, false if it does not.</p>

<p><code>js
d3.selectAll(".bar")
 .classed("my-selector");
</code></p>

<p>This will return true if any element in the selection has the class.  Use <code>d3.select</code> for single element selection.</p>

<h2>d3 toggleClass</h2>

<p>To flip a class to the opposite state  -- remove it if it exists already, add it if it does not yet exist -- you can do one of the following.</p>

<p>For a single element, the code might look like this:</p>

<p><code>js
var oneBar = d3.select(".bar")
oneBar.classed("my-selector", !oneBar.classed("my-selector"));
</code></p>

<p>For multiple elements, one will want to pass in a callback.  The callback function takes as parameters <code>d</code>, the datum, <code>i</code>, the index in the selection, and <code>this</code> is the current DOM element.</p>

<p>It's also important to note that the <a href="https://github.com/mbostock/d3/wiki/Selections#classed">docs</a> inform us that:</p>

<blockquote><p>The function's return value is then used to assign or unassign the specified class on each element.</p></blockquote>

<p>The code for toggling multiple elements in a selection at once might look like this:</p>

<p>```js
d3.selectAll("bar")
  .classed("my-selector", function (d, i) {</p>

<pre><code>return !d3.select(this).classed("my-selector");
</code></pre>

<p>  });
```</p>

<p>Here's a <a href="http://jsbin.com/qeyawa/1/edit?html,js,output">jsbin</a> that provides some toggle functionality.  Ees for fun.</p>

<p><a class="jsbin-embed" href="http://jsbin.com/qeyawa/1/embed?output">d3 toggleClass</a><script src="http://static.jsbin.com/js/embed.js"></script></p>

<h2>Bonus: A note on single active classes</h2>

<p>Here's a fun tip for that oft-encountered situation where you want a single element in a selection to have a class, like an <code>active</code> class, and the rest of the selection should not:</p>

<p>Make sure that you detect the active class in the selection previous to the clearing of the active classes.</p>

<p>A sample of what that might look like could be:</p>

<p>```js
d3.selectAll(".bar").on("click", function () {
  var activeClass = "active";
  var alreadyIsActive = d3.select(this).classed(activeClass);
  svg.selectAll(".reports-chart__bar")</p>

<pre><code>.classed(activeClass, false);
</code></pre>

<p>  d3.select(this).classed(activeClass, !alreadyIsActive);
});
```</p>

<p>Now, unleash the power of your creativity!  Kazaam!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use D3 rangeBands]]></title>
    <link href="http://jaketrent.com/post/use-d3-rangebands/"/>
    <updated>2013-10-17T07:47:00-06:00</updated>
    <id>http://jaketrent.com/post/use-d3-rangebands</id>
    <content type="html"><![CDATA[<p>When building a chart such as a bar chart in d3, you'll want an evenly divided space on your x axis.  You could divide the space up with your own manual calculations, accounting for space available, bar width, and inner and outer padding.  Or, you could have d3 do the calculation for you via a <code>rangeBand</code>.</p>

<p><img src="http://i.imgur.com/JEniNrp.jpg" alt="d3 rangeBand" /></p>

<!--more-->


<h2>Scale</h2>

<p>One of the great features of D3 is the ability it gives you to easily adapt your chart to the space available to you.  This is accomplished with scales.  There are a couple different scales built into D3.  Some for comparative numbers, such as <code>d3.scale.linear</code> and <code>d3.scale.log</code>; some for discrete data sets, such as <code>d3.scale.ordinal</code>.</p>

<p><strong>A scale maps visual space to data space.</strong></p>

<p>The visual space of a scale is the <code>range</code>.  The data space is the <code>domain</code>.  The internals of the scale will map it all for you.</p>

<h2>Manual Space Management</h2>

<p>Previous to realizing some of the things that d3 scales can do for you, I did a lot of space management myself.  Here's an example:</p>

<p>Let's say we have a data domain of all the letters in the alphabet.  Let's say we're building a bar chart.  We'll put the letters on the x-axis, running horizontally along our chart.  We want to space out each letter's bar evenly across the visual space or range.</p>

<p>If we did our own math, it might look like this:</p>

<p>```coffeescript brought-to-you-by.coffee
barOuterPad = 20
barPad = 10</p>

<p>widthForBars = elementWidth - (barOuterPad * 2)
barWidth = widthForBars / data.length - barPad + (barPad / numBars)</p>

<p>barsG = svg.append('g')
  .attr('transform', "translate(#{barOuterPad}, 0)")</p>

<p>barsG.selectAll('rect')
  .data(data)
  .enter().append('rect')</p>

<pre><code>.attr('x', (d, i) -&gt; (barWidth * i) + (i * barPad))
.attr('width', barWidth)
# attrs ...
</code></pre>

<p>```</p>

<p>In the code above, we have bar padding setup.  <code>barOuterPad</code> is the padding on only the far left and right of the entire chart.  <code>barPad</code> is the space between each of the bars.</p>

<p>The <code>barWidth</code> calculation is especially fun.  It splits the <code>widthForBars</code> space evenly over the number of bars.  Then it subtracts the <code>barPad</code> for the space of that bar that won't be able to be used.  Then, finally, we remember that there will be 1 fewer empty pad areas between bars than there will be actual bars.  So, we take that extra <code>barPad</code> space and give a bit of it back to every bar.  Whew.</p>

<p>When we go to place bars, we create a new group, <code>barG</code>, transformed in to take account of <code>barOuterPad</code>.  Then, for each bar in we make sure it's offset into the chart based on what number of bar it is in the set.</p>

<p>There is an easier way.</p>

<h2>d3.scale.ordinal.rangeBands</h2>

<p>There is one particular function of <code>d3.scale.ordinal</code> that is particularly useful.  That is <code>rangeBands</code>.  It will evenly divide a space up for you into bands across the range.</p>

<p>Here's a great graphic from the d3 wiki on <a href="https://github.com/mbostock/d3/wiki/Ordinal-Scales#wiki-ordinal_rangeBands"><code>ordinal.rangeBands</code></a>:</p>

<p><img src="https://f.cloud.github.com/assets/230541/538688/46c298c0-c193-11e2-9a7e-15d9abcfab9b.png" alt="rangeBand diagram" /></p>

<p>It looks like it knows how to take care of everything in our scenario.  It handles outer padding.  It handles between-bar padding.  Let's use it:</p>

<p>```coffeescript made-possible-by.coffee
barOuterPad = .2
barPad = .1</p>

<p>x = d3.scale.ordinal()
  .domain(data.map((d) -> d.letter))
  .rangeRoundBands([0, elementWidth], barPad, barOuterPad)</p>

<p>svg.append('rect')
  .data(data)
  .enter().append('rect')</p>

<pre><code>.attr('x', (d) -&gt; x(d.letter))
.attr('width', x.rangeBand())
# attrs...
</code></pre>

<p>```</p>

<p>Note that our <code>barOuterPad</code> and <code>barPad</code> are now fractions.  This is because d3 expects a number, usually between 0 and 1, that is described as a proportion of the eventual width of the bands.</p>

<p><code>x</code> becomes our scale function, mapping the domain, which is all letters (<code>d.letter</code>), to the range.  The range is specified as bands using <code>rangeRoundBands</code>.  This is different than <code>rangeBands</code> in that all spaces are guaranteed to be integers, avoiding antialiasing on screen.  The signature is as follows:</p>

<p><code>ordinal.rangeBands(interval[, padding[, outerPadding]])</code></p>

<p>We avoid having to use a new <code>barG</code> group to make our math easier.</p>

<p>When we set the <code>x</code> attribute on our bar, it's x offset is determined by passing the singular datum's letter to the <code>x</code> scale function.  And the width is simply the width of all bands, known by calling <code>x.rangeBand()</code>.</p>

<p>So much better.  And so much more concise.</p>

<p>What do you think?  Does this work for you?  What is the even-better way of doing this that I have yet to realize?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rotate Gauge Needle in D3]]></title>
    <link href="http://jaketrent.com/post/rotate-gauge-needle-in-d3/"/>
    <updated>2013-09-27T06:52:00-06:00</updated>
    <id>http://jaketrent.com/post/rotate-gauge-needle-in-d3</id>
    <content type="html"><![CDATA[<p>If you want to make a gauge chart in S3, you'll need a needle on your gauge.  It's not hard to draw a triangle, but here's the extra work to rotate it.</p>

<p><img src="http://i.imgur.com/7GSyOFd.png" alt="D3 Gauge Chart" /></p>

<!--more-->


<h2>The Gauge Chart</h2>

<p>I'm not sure what you call this kind of chart, but I call it a gauge.  It pretty much looks like a speedometer or a pressure gauge.  I'm sure after seeing one, you want to make one.  I'm not going to cover the arc building.  It's pretty easy to build a <a href="https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-arc">d3 arc</a>.</p>

<h2>The Components</h2>

<p>In my case, I can match the design of the needle with a triangle and a circle.  The circle is the base of the needle upon which the needle spins.  The triangle is the pointer of the needle, which will eventually sit at the angle we specify to our graph.</p>

<h2>The Coordinates</h2>

<p>In svg/d3, you can redefine your coordinates by using a group.  If my <code>svg</code> container is square, the default coordinate plane will start in the upper left-hand corner at <code>(0,0)</code>.  If I wanted to redefine <code>(0,0)</code> to be in the bottom center of the <code>svg</code> container, we could do so by positioning a group (<code>g</code>) so that <em>its</em> top left-hand corner is at that point.</p>

<p>We might write this:</p>

<p><code>coffeescript gauge.coffee
height = # ... svg height
width = # ... svg width
needleG = svg.append('g')
  .attr('transform', "translate(#{width / 2}, #{height})")
</code></p>

<h2>Draw a Triangle</h2>

<p>To draw a triangle, use an <a href="https://github.com/mbostock/d3/wiki/SVG-Shapes#path-data-generators">svg path</a>.  It needs a start point and 2 more points to draw lines to.  In the special language of svg <code>path</code>s, <code>M x y</code> is the start point and <code>L x y</code> is the point to which a straight light will be drawn from the previous point.</p>

<p>Let's say that we want our needle to 60px tall and 20px wide at the base.  First we'll draw it pointing straight up.  Let's draw this triangle using the <code>needleG</code> coordinates.  In the code, I'll call the corners of the triangle <code>top</code>, <code>left</code>, and <code>right</code>.  The d3 code to draw this might look like:</p>

<p>```coffeescript gauge.coffee
needleLen = 60
needleRadius = 10</p>

<p>centerX = 0
centerY = 0</p>

<p>topX = centerX - 0
topY = centerY - needleLen</p>

<p>leftX = centerX - needleRadius
leftY = centerY - 0</p>

<p>rightX = centerX - -(needleRadius)
rightY = centerY - 0</p>

<p>needleG.append('path')
  .attr('d', "M #{leftX} #{leftY} L #{topX} #{topY} L #{rightX} #{rightY}")
```</p>

<h2>Rotate the Triangle</h2>

<p>Drawing a triangle pointed straight up, that is strictly parallel with the <code>x</code> and <code>y</code> access of the plane, is no problem.  But a gauge that points straight up isn't worth that much.  It doesn't measure anything.  So, let's rotate the pointer/triangle of the needle to get an actual visual display of our measurement.</p>

<p>Unfortunately, (but maybe you'll have fun) you'll have to pull out your middle school trigonometry here.  I was remembering sayings I had heard once a time to figure this out (like the mysterious "SOHCAHTOA" acronym).</p>

<h3>Percentage Input</h3>

<p>Your input may vary, but mine starts as a percentage.  If yours does not, you could convert it to a percentage.  And since we're working with a half circle, we're just going to cut in half all our input since the rotation math is based on a circle.</p>

<p>Let's say in this case our percentage is 65%.  We need to convert from percentage to radians.  Note that all the code for rotation angles will use <a href="http://en.wikipedia.org/wiki/Radian">radians</a>.  Here's some conversion code:</p>

<p>```coffeescript gauge.coffee
percToDeg = (perc) ->
  perc * 360</p>

<p>percToRad = (perc) ->
  degToRad percToDeg perc</p>

<p>degToRad = (deg) ->
  deg * Math.PI / 180
```</p>

<h3>SOHCAHTOA</h3>

<p>We have to find the <code>top</code>, <code>left</code>, and <code>right</code> for a triangle rotated around the <code>(0,0)</code> point.  The basic SOHCAHTOA formulas will help us find the points:</p>

<p><code>
sin of angle = opposite / hypotenuse
cos of angle = adjacent / hypotenuse
tan of angle = opposite / adjacent
</code></p>

<p><img src="http://i.imgur.com/RxoQF98.png" alt="Needle trigonometry" /></p>

<p>Using these formulas, let's update our code for finding the endpoints of the triangle:</p>

<p>```coffeescript gauge.coffee
needleLen = 60
needleRadius = 10
percent = .65</p>

<p>thetaRad = percToRad percent / 2</p>

<p>centerX = 0
centerY = 0</p>

<p>topX = centerX - needleLen * Math.cos(thetaRad)
topY = centerY - needleLen * Math.sin(thetaRad)</p>

<p>leftX = centerX - needleRadius * Math.cos(thetaRad - Math.PI / 2)
leftY = centerY - needleRadius * Math.sin(thetaRad - Math.PI / 2)</p>

<p>rightX = centerX - needleRadius * Math.cos(thetaRad + Math.PI / 2)
rightY = centerY - needleRadius * Math.sin(thetaRad + Math.PI / 2)</p>

<p>"M #{leftX} #{leftY} L #{topX} #{topY} L #{rightX} #{rightY}"
```</p>

<p>Note that <code>Math.PI / 2</code> is a 90 degree angle.  It's used to find the angle smaller than theta for the left triangle and find the angle larger for the right triangle.</p>

<p>There you have it.  That's the magic.  For an example of this working and some more code, see this <a href="http://cdpn.io/eloGk">codepen of a d3 gauge</a>.</p>
]]></content>
  </entry>
  
</feed>
