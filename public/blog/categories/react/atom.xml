<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: react | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/react/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2016-01-04T13:35:22-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What React Stateless Components are Missing]]></title>
    <link href="http://jaketrent.com/post/react-stateless-components-missing/"/>
    <updated>2016-01-04T12:59:00-07:00</updated>
    <id>http://jaketrent.com/post/react-stateless-components-missing</id>
    <content type="html"><![CDATA[<p>Stateless React components got a new syntax in React 0.14.  It's much simpler.  It's just a function call.  Besides it just looking simpler, there are some major differences in what is available in a stateless component written this way.  There are some things missing -- purposefully not included -- that you may be used to.  Let's look at a few things.</p>

<p><img src="http://i.imgur.com/DXuSNbw.png" alt="http://i.imgur.com/DXuSNbw.png" /></p>

<!--more-->


<p>Stateless components are now specifically not just components where you don't use <code>this.state</code>.  They're componets that are written in the form of a function:</p>

<p><code>js
function Chips(props) {
  return &lt;div&gt;In the secret {props.place}&lt;/div&gt;
}
</code></p>

<p>The observations made in this article will not apply to components that are created using the <code>class Chips extends React.Component</code> or <code>React.createClass</code> syntax, whether they use state or not.</p>

<h2>No Backing Instance</h2>

<p>A React component's backing instance is the object in memory that represents the node in the view.  This backing instance is the place where state is usually stored (using React's <code>this.state</code>).  Well now there's no <code>this</code> in stateless components.  Thus, there's not going to be a place for <code>this.state</code>.  Stateless, remember?  Data just passes through the pure function and into the resulting view.</p>

<h2>No Lifecycle Methods</h2>

<p>Because there's no backing instance as a place to put hooks for your code in the component lifecycle, you can not use any of the lifecycle methods from <code>React.Component</code>.  Methods such as <code>componentDidMount</code> and <code>componentWillReceiveProps</code> are out.  And since the stateless component is a pure function that just reproduces its view state on <code>props</code> change, why would you need lifecycle methods anyway?</p>

<h2>No Reference to the Component</h2>

<p>Often when testing, it's useful to get a reference to the component itself.  In the case of stateless components, they're just fired and forgotten, rendered into the view without the ability to get a handle on them.  They're just UI at this point, just in the DOM.  You can go to the DOM to do your testing.</p>

<p>Depending on your test environment setup, you may want to wrap your stateless components in a <code>class</code>-based component you <em>can</em> get a reference to.</p>

<p>Note that for stateless components, <code>ReactDOM.render</code> and <code>TestUtils.renderIntoDocument</code> will return <code>null</code>.</p>

<h2>No refs</h2>

<p>Stateless components can't be the target of a <code>ref</code>.  There's no backing instance.  You can't have <code>refs</code> internally to children either.  Remember, <code>this</code> and <code>this.refs</code> aren't around.  If your stateless component has a child that is a <code>class</code>-based component, <em>it</em> may have <code>refs</code>.  <a href="https://facebook.github.io/react/docs/more-about-refs.html">The docs</a> are another good reference on <code>refs</code>.</p>

<h2>No null Returns</h2>

<p>A <code>class</code>-based component may return <code>null</code> as its value in the view.  But a stateless component may not.  To get around this, return <code>&lt;noscript&gt;&lt;/noscript&gt;</code>.  This will be fully invisible in the view.</p>

<p>So what else have you found that is unavailable in stateless functions?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update Body Class in React]]></title>
    <link href="http://jaketrent.com/post/update-body-class-react/"/>
    <updated>2015-09-23T15:31:00-06:00</updated>
    <id>http://jaketrent.com/post/update-body-class-react</id>
    <content type="html"><![CDATA[<p>React gives us a great component abstraction.  Each of these components represents a node in the DOM.  Each component is self contained, doesn't talk up the component hierarchy directly and passes explicit data and code down the hierarchy.  But what about when you have a React app that wants to reach out and modify something it doesn't control?</p>

<p><img src="http://i.imgur.com/DXuSNbw.png" alt="react modify body tag" /></p>

<!--more-->


<h2>A Couple Use Cases</h2>

<p>There are potentially a few use cases for this.  For instance, modals that need to render outside your application's potentially <code>position: relative</code> containers.  Or, as we'll see below, your app wants to modify the <code>body</code> tag in your html document.</p>

<p>The most common reason I've found for messing with the body tag is to provide some style attribute.  It's not uncommon to have full-page style differences between pages in our apps.  If you have a "single page" js app in the browser, you need to be able to modify the body tag in code.</p>

<p>Let's use an example where on some pages in your app, the theme is "dark", where the body background color should be black.  On other pages, the entire body background color should be the default white.  We'll make a component that lives high in the hierarchy and takes an <code>isDark</code> property to determine if the rendered page is dark or light.</p>

<h2>Body is Outside Your React App</h2>

<p>You can't mount your React app directly on <code>document.body</code>, at least without warnings.  This is considered bad practice, because other scripts or browser plugins often modify the document body directly.  So you'll have to reach <em>out</em> of your React app and modify the body directly.</p>

<h2>Tie Into the React Lifecycle</h2>

<p>First, you just need a point in time in your app's lifecycle where you know you want to modify the <code>body</code> class.  React has a bunch of <a href="https://facebook.github.io/react/docs/component-specs.html">lifecycle hooks</a> that will come in handy.  A great early-lifecycle hook for modifying the DOM is <code>componentDidMount</code>.  Usually, we would be accessing DOM nodes that are children of our Component.  Again, in this case, we're reaching out beyond where a React component usually should.  The usual <code>React.findDOMNode</code> functions will not be needed, because React isn't managing the body node.  Instead, we'll just use the <code>document.body</code> api directly.</p>

<h2>Use JavaScript to Modify the Class</h2>

<p>If you have some utility for modifying class names, use it.  If not, it's small and simple enough in <a href="http://jaketrent.com/post/addremove-classes-raw-javascript/">plain old JavaScript</a>.</p>

<p>With these two bits in hand, you have the pieces necessary for your body-modifying component:</p>

<p>```js
import React from 'react'</p>

<p>class BodyColor extends React.Component {
  static propTypes = {</p>

<pre><code>isDark: React.PropTypes.bool
</code></pre>

<p>  }
  static defaultProps = {</p>

<pre><code>isDark: false
</code></pre>

<p>  }
  componentDidMount() {</p>

<pre><code>document.body.toggle('darkClass', this.props.isDark)
</code></pre>

<p>  }
  componentWillReceiveProps(nextProps) {</p>

<pre><code>document.body.toggle('darkClass', nextProps.isDark)
</code></pre>

<p>  }
  componentWillUnmount() {</p>

<pre><code>document.body.remove('darkClass')
</code></pre>

<p>  }
  render() {</p>

<pre><code>return this.props.children
</code></pre>

<p>  }
}
```</p>

<p>To use, pass an <code>isDark</code> attribute to activate the <code>darkClass</code> class on the body tag:</p>

<p><code>html
&lt;BodyColor isDark={true}&gt;
  &lt;h1&gt;A Very Dark App&lt;/h1&gt;
&lt;/BodyColor&gt;
</code></p>

<p>Are there any other ways you've found to reach out of React and modify the DOM directly.  What have been your use cases?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Rally Review]]></title>
    <link href="http://jaketrent.com/post/react-rally-review/"/>
    <updated>2015-08-27T09:03:00-06:00</updated>
    <id>http://jaketrent.com/post/react-rally-review</id>
    <content type="html"><![CDATA[<p>React Rally is a developer conference created around the library of <a href="http://facebook.github.io/react/">React.js</a> and the community that uses it.  It was the first of its name.  It was the first React-centric conference in Salt Lake City.  I had a great time.  Here are a few of reasons I liked it.</p>

<p><img src="http://i.imgur.com/B8fFS4J.jpg" alt="react rally" /></p>

<!--more-->


<h2>People Breakouts</h2>

<p>It was a happy conference.  A great mood was set by <a href="https://twitter.com/jergason">Jamison</a> on stage, who MC'ed most of the conference.  He's a fun, quirky guy who's not self-important and who did a great job putting speakers and the audience at ease.  There were a ton of participants and attendees at the conference that also fit this (good!) description.  This led to great conversation between sessions.  There were plenty of breaks, some 30 or 60 minutes at a time.  They were well-spaced, allowing plenty of time.  There was a pleasant <a href="http://rangle.io/">Rangle.io</a>-sponsored lounge to gather in.</p>

<p>There were no on-stage questions and answers portions at the end of the talks.  I wondered how I'd like this, since who doesn't like answer to their questions, right?  It turned out to be refreshing.  Speakers finished their talks at the appointed time.  No one had to wait around uncomfortably wondering when either the speaker or the audience would let everyone else off the hook.  No embarrassing questions.  It was nice.  All the speakers were great anyway, but I think this feature also helped prime the conversations that were expected to happen after the talks in the breakouts, giving extra motivation for everyone to be available and approachable.</p>

<h2>The Spoken Word</h2>

<p>I was excited going into the conference because of the solid lineup of speakers.  Not all the talks were the best I had heard or the best treatment of every subject.  There were some highlights thought, and on the whole it was really, really good.  Each of the speakers had obviously prepared a great deal and had taken their time on stage seriously (or not seriously in the case of <a href="https://twitter.com/djsmith42">Dave Smith</a>, whose talk was memorable and awesome as well, btw).</p>

<p>The conference wasn't wholly about React.  There's just so much <em>around</em> React that is exciting.  The community is pushing boundaries all over the place.  (And <em>still</em> all the content in the conference was appropriate, yay! :)  For instance, there were a great many mentions of <a href="http://elm-lang.org/">Elm</a>.  For my part, I spent much of the conference tinkering with that very thing.</p>

<h2>Fun Design</h2>

<p>It'll reveal how much art does for me, but when I first learned about the conference, one of the things that excited me the most was the <a href="http://www.reactrally.com/">website</a>.  It had a fun design!  There were illustrations, interesting colors, and it looked like a fun theme.  (Of course, at the time there was literally nothing else to be excited about outside the mailing list input box.)</p>

<p>We need more illustrations.  We need more mascots.  A menacing purple squid with a React symbol on its forehead?  Yes, please!  My previously bare brushed metal laptop lid is now bestickered with the sweetest conference stickers I have.  So fun!</p>

<p>I'm still not sure what the theme was intended to be.  My interpretation was Creatures of the Black Lagoon in Space.  Right?!</p>

<h2>Feels Like the First Time</h2>

<p>The organizers did a great job.  The preparation was obvious.  They assured me they were putting out fires for the duration of the two days.  That was not apparent.  The thing went off without a hitch.  I can only poke at the annoying AV glitch of a blinky project screen in some talks.</p>

<p>Everything seemed in its place.  The conference was small, about 250 participants, and it seemed like a large house party most of the time.  The venue was prepped very well.  I'm glad they opened up the downstairs lounge.  The food was great.  The breakfast trucks were a wonderful touch, especially <a href="http://saturdayswaffle.com/">Saturdays Waffles</a> day.  Mmmmm, waffles.  The gift card for lunch was a thoughtful touch.  <a href="http://www.yelp.com/biz/atlantic-caf%C3%A9-and-market-salt-lake-city-4">Atlantic Cafe</a> provided my delicious cevapi sausage on the 2nd day.</p>

<p>I have many thanks for the great speakers, the effort of the organizers, and everyone in between that made the 2 days great.  I felt inspired.  I left more informed.  I met a group of fantastic people.  It's been my favorite conference in Salt Lake City so far.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Love CSS Modules]]></title>
    <link href="http://jaketrent.com/post/i-love-css-modules/"/>
    <updated>2015-08-25T11:03:00-06:00</updated>
    <id>http://jaketrent.com/post/i-love-css-modules</id>
    <content type="html"><![CDATA[<p>I heard a fantastic yesterday by <a href="https://twitter.com/glenmaddern">Glen Maddern</a> where Interoperable CSS was well-illustrated as the fantastic CSS language advancement that it is.  I was happy to hear hushed ooo's and ahh's from the audience as they realized the power of what they were seeing.  I have been enjoying the benefits of CSS modules myself and my team and would share some of my favorite features in hopes that others will be inclined to use this feature as well.  Cleanse the world of global stylesheets!</p>

<p><img src="http://i.imgur.com/MtjAduk.jpg" alt="i love css modules" /></p>

<!--more-->


<h2>Local Variables</h2>

<p>With CSS modules, your selector names are truly local.  They are FRD local variables!  They won't clash with any var names outside your module.  For You don't have to invent a giant namespace.  There's no BEM-style naming to describe a hierarchy.  There's no repetition in those names.  You can name it something much more simple, just related to what the component is.</p>

<p>For instance, if you're creating <code>Link</code> component, you'd previously have something like <code>.nav__item__link</code> selectors to apply style.  Knowledge of global markup structure would seep into your component through this selector and its name.  Now with a combination of encapsulated components and css modules,  you don't have to worry about the outside world.</p>

<p>Now, what would you call your <code>Link</code> component's outer-most <code>a</code> tag?  Well, maybe <code>.link</code> or <code>.root</code>...  Nothing fancy.  Just what it is.  You aren't required to think about the global stylesheet.  You can focus your mind on just the component stylesheet at hand.  The naming game, which can already be challenging, is made much easier.</p>

<h2>Explicit Dependencies</h2>

<p>Now that all the CSS you write is, by default, local to the module you write it in, you have to explicitly pull in dependencies.  You have to explicitly import the stylesheet you are writing where you'll eventually want to use it.  You can write styles without fear that it might influence something else -- until you explicitly ask it to!</p>

<h2>Still CSS</h2>

<p>I've tried some of the inlining styling techniques and libraries that are being made popular in the React community.  <a href="https://github.com/FormidableLabs/radium">Radium</a> is my favorite there.  What makes me happy about CSS modules is that they're still CSS.  It's a language that was invented in order to create declarative styles.  It's not wonderful in many ways, but it's still the best tool available for this.</p>

<p>You can use all the selectors, strategies, and css abilities you're used to.  Pseudo selectors are all available.  Media queries work as expected.  Keyframe animations are easy to declare.  There is also a great ecosystem of CSS enhancements and transforms available from the PostCSS community.  No one should ever write a vendor prefix again with <a href="https://github.com/postcss/autoprefixer">autoprefixer</a>.</p>

<h2>Consistency for Components</h2>

<p>Another thing I'd like to see in the web component community, specifically React for now, is a pattern around how to override CSS in reusable components.  This pattern would be well-used by component developers and well-known by component consumers.  This would help components be more immediately useful -- default styles could be included with components and custom styles would be easily applied.</p>

<p>My favorite solution to this so far is <a href="https://github.com/pluralsight/react-styleable">react-styleable</a> -- full disclosure, I helped write it.  (Anything like this that gains steam, has broad appeal, and is used by many will make me happy.)  I love that CSS modules enable this and provide a foundation for this consistency.  I'll likely write more about this in the future.</p>

<p>CSS modules have changed the styling game for me.  It makes it so, so much better.  Who knows, maybe it'll change the world.</p>

<p>So, how have CSS modules changed your life?  What do you love?  What could still be better?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using JavaScript's Function Bind]]></title>
    <link href="http://jaketrent.com/post/using-javascript-function-bind/"/>
    <updated>2015-06-26T07:51:00-06:00</updated>
    <id>http://jaketrent.com/post/using-javascript-function-bind</id>
    <content type="html"><![CDATA[<p>JavaScript's Function object has a very helpful method, <code>bind</code>.  It is a great tool to give you control of the ever-squirrely <code>this</code> keyword.  Have you ever had trouble predicting what <code>this</code> will be or making equate to what you want?  <code>bind</code> will help you do that with more power and consistency.  It can also help you with partial function application.</p>

<p><img src="http://i.imgur.com/4huM3Xb.jpg" alt="function bind" /></p>

<!--more-->


<h2>The <code>this</code> Keyword</h2>

<p>In JavaScript, what the <code>this</code> keyword refers to changes often.  This can be useful but also unexpected.  Generally <code>this</code>, used within a function, will refer to the context in which that function was called. That calling context might be the global context of <code>window</code> if an event callback is being called in a browser.  That calling context might be an object that contains the function.  For more specific cases, MDN has some <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this">great docs on the variety of contexts referred to by <code>this</code></a>.</p>

<h2>Controlling <code>this</code> with <code>bind</code></h2>

<p>When writing code, I often am thinking of <code>this</code> in the context in which I'm writing.  In other words, if I'm writing an object and use the keyword <code>this</code> in a function, I would normally expect <code>this</code> to refer to the object in which I <em>declared</em> the function.  But, again, it is actually the <em>calling</em> context that actually determines the value of <code>this</code>.</p>

<p>To change this default behavior, I can pre-bind the function's value of <code>this</code> to a value of my choosing.  This will happen at the time of <em>declaration</em>, which is what I more naturally would expect.</p>

<p>For example, in <a href="http://facebook.github.io/react/">React</a> we write UI components.  In interesting UIs, we're often handling events like those that occur with user interaction.  Normally events in the browser are attached to the DOM and are executed in the context of the <code>window</code>.  This being the case, it'll be hard for us to create an event handler function in our React Component that can refer back to anything of use in the React Component itself.</p>

<p>As a simple example, we'll write a <code>handleClick</code> function that wants to call the Component's <code>doLog</code> function for interesting logging:</p>

<p>```js event-handling.js
class MyComponent extends React.Component {
  doLog() {</p>

<pre><code>console.log('Yay, you clicked!')
</code></pre>

<p>  }
  handleClick() {</p>

<pre><code>console.log('this is window?', 
            this == window)
console.log('this is component?',
           this.constructor.name == 'MyComponent')
this.doLog()
</code></pre>

<p>  }
  render() {</p>

<pre><code>return (
  &lt;div&gt;
    &lt;h1&gt;Time to start clicking&lt;/h1&gt;
    &lt;button onClick={this.handleClick}&gt;So, click&lt;/button&gt;
  &lt;/div&gt;
)
</code></pre>

<p>  }
}</p>

<p>React.render(<MyComponent />, document.getElementById('app'))
```</p>

<p><a href="http://jsbin.com/lixayanoso/edit?js,console,output">jsbin of broken state</a></p>

<p>If you click the button, <code>this.doLog</code> is not available as a function.  How could it be?  <code>doLog</code> is defined in <code>MyComponent</code>, not the <code>window</code>, which is the original context in which the event callback is executed.</p>

<p>To fix this, one need only pre-bind the <code>handleClick</code> function.  By changing one line, we can fix this:</p>

<p><code>js
&lt;button onClick={this.handleClick.bind(this)}&gt;So, click&lt;/button&gt;
</code></p>

<p>When this line is executed, it's in the <code>MyComponent#render</code> function, thus the <code>MyComponent</code> context.  So <code>this</code>, at that moment, is <code>MyComponent</code>.</p>

<p>The other detail that makes this work is that <code>bind</code> returns a <em>brand new function</em>.  That's how the pre-binding works.  So, the <code>onClick</code> prop that gets given to the <code>button</code> is a new function where we have said we want to permanently control the value of <code>this</code> to be whatever we bound it to.</p>

<p><a href="http://jsbin.com/luwoxegopu/edit?js,console,output">jsbin of fixed state</a></p>

<h2>Passing Specific Arguments with <code>bind</code></h2>

<p>Another great reason to use <code>bind</code> is to pass specific arguments to a function.  Just as <code>bind</code> can create new functions where the value of <code>this</code> is pre-determined (bound), <code>bind</code> can pre-fill (ie, partially apply) function arguments on the newly-created function.</p>

<p>It may not be immediately intuitive why one would want to create a function with parameters just to turn around and permanently make it so an argument to the function equals a specific value.  It almost feels like hard-coding a wart-ridden value on something that was previously dynamic and beautiful.  Perhaps an example will help.</p>

<p>Again, to the world of React...  As in the previous example, we'll pass an event handler for a click event.  Notice, just as above, that we're passing the function itself (<code>this.handleClick</code> above) instead of the return value of the function (which would look like <code>this.handleClick()</code>).  In this example, we'll have several click handlers, each on a list item, where the button will function as a remove button:</p>

<p>```js
class Item extends React.Component {
  render() {</p>

<pre><code>return (
  &lt;li&gt;
    {this.props.text}
    &lt;button onClick={this.props.onRemove}&gt;Rm&lt;/button&gt;
  &lt;/li&gt;
)
</code></pre>

<p>  }
}</p>

<p>class List extends React.Component {
  constructor(props) {</p>

<pre><code>super(props)
this.state = { items: this.props.initalItems }
</code></pre>

<p>  }
  handleClickRemove(index) {</p>

<pre><code>var clonedItems = this.state.items.slice()
clonedItems.splice(index, 1)
this.setState({ items: clonedItems })
</code></pre>

<p>  }
  render() {</p>

<pre><code>return (
  &lt;ul&gt;
    {this.state.items.map((item, i) =&gt; {
      return &lt;Item text={item} onRemove={this.handleClickRemove.bind(this, i)} key={item} /&gt;
    })}
  &lt;/ul&gt;
)
</code></pre>

<p>  }
}</p>

<p>React.render(<List initalItems={['Do', 'More', 'Reakt']} />, document.getElementById('app'))
```</p>

<p><a href="http://jsbin.com/cinovebasu/edit?js,console,output">A working jsbin</a></p>

<p>In <code>List</code>, we have the event handler, the <code>handleClickRemove</code> function, that takes an <code>index</code> parameter.  In order to make this function work as defined, we are using <code>bind</code> on this line:</p>

<p><code>js
return &lt;Item text={item} onRemove={this.handleClickRemove.bind(this, i)} key={item} /&gt;
</code></p>

<p>This <code>bind</code> call is doing a few things for us:</p>

<ol>
<li>Pre-binding <code>handleClickRemove</code> to the <code>List</code> Component so that <code>this.setState</code> works inside the callback.</li>
<li>Creating a new function that always has <code>i</code> as its first parameter.  Since this line is executed in a loop, <code>i</code> changes.  It will be <code>0</code> for the first item, <code>1</code>, then <code>2</code>.  This is perfect, as we want the first remove button to remove the first item, and so on.</li>
</ol>


<p>Isn't that awesome and useful?</p>

<p>So <code>bind</code> can help make <code>this</code> more predictable for you.  It will help you send new functions with pre-filled parameters.  What else have you used <code>bind</code> for?</p>
]]></content>
  </entry>
  
</feed>
