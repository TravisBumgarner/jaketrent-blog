<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: handlebars | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/handlebars/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2013-02-25T07:36:22-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Every nth Item in Handlebars Loop]]></title>
    <link href="http://jaketrent.com/post/every-nth-item-in-handlebars-loop/"/>
    <updated>2012-10-03T16:55:00-06:00</updated>
    <id>http://jaketrent.com/post/every-nth-item-in-handlebars-loop</id>
    <content type="html"><![CDATA[<p>Have you ever wanted to do something special every nth time through a Handlebars loop?  The built-in <code></code> will loop through your items just fine.  It lacks a few features.  For one, you don't have access to the loop index, though you can <a href="http://rockycode.com/blog/handlebars-loop-index/">find it</a>.  Without the index and simple comparisons like modulus, length of the array, and equals, you'll be creating your own Handlebars helpers.  Here's an example of one.</p>

<p><img src="http://blog.teamtreehouse.com/wp-content/uploads/2011/03/handlebars.png" alt="Handlebars js" /></p>

<!--more-->


<h2>Extend the context</h2>

<p>Inside a block helper in Handlebars, when you call <code>options.fn</code>, you pass the context to the first block.  We can extend what attributes are available in that context.  The <code>everyNth</code> helper below extends this context with variables that are useful for doing "every nth" operations:</p>

<ol>
<li>isModZero</li>
<li>isModZeroNotFirst</li>
<li>isLast</li>
</ol>


<p>The code in full looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">registerHelper</span><span class="p">(</span><span class="s1">&#39;everyNth&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">every</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">fn</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">inverse</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">inverse</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">context</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">context</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="nx">j</span><span class="o">=</span><span class="nx">context</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">j</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">modZero</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">%</span> <span class="nx">every</span> <span class="o">===</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">ret</span> <span class="o">=</span> <span class="nx">ret</span> <span class="o">+</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">({},</span> <span class="nx">context</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">isModZero</span><span class="o">:</span> <span class="nx">modZero</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">isModZeroNotFirst</span><span class="o">:</span> <span class="nx">modZero</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">isLast</span><span class="o">:</span> <span class="nx">i</span> <span class="o">===</span> <span class="nx">context</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">ret</span> <span class="o">=</span> <span class="nx">inverse</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note: This implementation uses <a href="http://underscorejs.org/#extend">underscore <code>_.extend()</code></a>.</p>

<h2>Scenario: Print rows</h2>

<p>Here's a scenario where this is useful:  In twitter bootstrap, each "span" div is inside of a "row-fluid" div (if using bootstrap responsive.css).  So, if I want three things, let's say videos, per row printed in the markup, you can't just use <code></code> because all it does is iterate through the videos.  You could print the "span4"s but you wouldn't know when to print the "row-fluid".  Hence, we need our helper.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{#everyNth myArray theNumberN}}
</span><span class='line'>{{/everyNth}}
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Our new helper <code>everyNth</code> allows us to write code like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{#everyNth vids 3}}
</span><span class='line'>  {{#if isModZeroNotFirst}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  {{/if}}
</span><span class='line'>  {{#if isModZero}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>div class=&quot;row-fluid&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  {{/if}}
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;span4&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>div class=&quot;thumb&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>a href=&quot;{{ linkUrl }}&quot;<span class="ni">&amp;gt;&amp;lt;</span>img src=&quot;{{ image }}&quot; /<span class="ni">&amp;gt;&amp;lt;</span>/a<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  {{#if isLast}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  {{/if}}
</span><span class='line'>{{/everyNth}}
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To clarify the need and usage of these new variables:</p>

<ol>
<li><strong>isModZero</strong> - in this example, every 3 videos should be on a row.  When mod 3 is 0, create a row.</li>
<li><strong>isModZeroNotFirst</strong> - when I create a row (mod 3 is 0), I also need to end the row, except before the first row.</li>
<li><strong>isLast</strong> - if the length of the video array is not divisible by 3, the last row needs to close anyway.</li>
</ol>


<p>The helper is simple, essentially just a copy of <code>#each</code> with a few new variables in context.  That's the beauty of Handlebars helpers.  With this little baby you can determine where you are in your iterations through your array.</p>

<p>What are some of the things you use Handlebars helpers for?</p>
]]></content>
  </entry>
  
</feed>
