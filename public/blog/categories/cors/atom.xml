<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cors | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/cors/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2014-08-15T20:38:56-06:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Make Jsonp Requests with AngularJs]]></title>
    <link href="http://jaketrent.com/post/make-jsonp-requests-with-angularjs/"/>
    <updated>2013-03-20T07:08:00-06:00</updated>
    <id>http://jaketrent.com/post/make-jsonp-requests-with-angularjs</id>
    <content type="html"><![CDATA[<p>There are a couple ways to make cross domain requests from a client browser.  One method is called Jsonp or Json with padding.  The AngularJs library makes this really simple.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="AngularJs Jsonp" /></p>

<!--more-->


<h2>Web Server Support</h2>

<p>First of all, your Jsonp request will be worth nothing if the server you're requesting data from does not support it.  Jsonp requests require explicit support on the server side.  This is because the data that's returned is formatted differently.  The 'p' in Jsonp stands for padding.</p>

<p>But that's kind of a weird name.  Maybe Jsonf would be more analogous to reality.  This is because the Json data that you seek is really wrapped in a Javascript function.  This function is then evaluated as a script, passing the data into a callback to be saved by your client program.</p>

<p>This essentially is a browser hack to get around the security constraint of browsers not being able to request non-script items from different domains.  But since we request Javascript this way all the time, we'll just make our data look like Javascript.</p>

<h2>Angular Jsonp</h2>

<p>You're probably already used to using the <code>$http</code> service.  It provides the normal <code>get</code>, <code>post</code> and other functions mapped to http methods.  It also provides the function that we'll need: <code>jsonp</code>.</p>

<p>The client script also requires that we specify the callback to send data to.  AngularJs has its own callback pattern, so it would follow that it has a pattern to handle Jsonp callbacks.  It does.  The callback is always called <code>JSON_CALLBACK</code>.  What parameter that it's assigned to in the query string depends on the design of the web service you're calling.  Take a look at the documentation on what's required there.</p>

<p>All that jibber jabber for this simple example of a script asking for <a href="http://colorwheelie.tumblr.com">Tumblr</a> data:</p>

<p>```coffeescript
$http.jsonp 'http://api.tumblr.com/v2/blog/colorwheelie.tumblr.com/posts/photo?api_key=<mykey>&amp;callback=JSON_CALLBACK'
  .success (data) -></p>

<pre><code> $scope.colorwheelies = data.response.posts;
</code></pre>

<p>  .error (data) -></p>

<pre><code> console.log('ERROR');
</code></pre>

<p>```</p>

<p>The interesting line is line one.  We call the <code>jsonp</code> function.  We assign our callback like this: <code>callback=JSON_CALLBACK</code>.  And in our success callback, we can consume our data variable like it was pure Json.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cross-Domain RequireJs Text]]></title>
    <link href="http://jaketrent.com/post/cross-domain-requirejs-text/"/>
    <updated>2012-06-07T13:11:00-06:00</updated>
    <id>http://jaketrent.com/post/cross-domain-requirejs-text</id>
    <content type="html"><![CDATA[<p>Through long-available browser quirks/features, javascript has been available for requests across disparate domains.  But, other resources, such as text files (eg, handlebars templates) have had more restrictions placed on them.  Recently, CORS support has enhanced the ability to make these requests.  Here's how you get your text files from another domain via requirejs.</p>

<!--more-->


<h2>CORS</h2>

<p><a href="https://developer.mozilla.org/en/http_access_control">CORS</a> is a great feature for modern browsers that allows a site on a domain A to request a resource from domain B without restriction, because domain B already said that it's willing to accept those requests. In an <a href="http://remysharp.com/2011/04/21/getting-cors-working/">article on CORS by Remy Sharp</a>, he outlines in more detail how to setup your server to be CORS ready.  Simply, it comes down to the server responding with an http header.  To allow all sites to request a server's resources:</p>

<p><code>http
Access-Control-Allow-Origin: *
</code></p>

<p>To allow a whitelist of sites to request resources, the server must give the same header with only certain sites listed:</p>

<p><code>http
Access-Control-Allow-Origin: http://rockycode.com http://builtbyjake.com
</code></p>

<p>What servers can <a href="http://html5please.com/#cors">support CORS</a>?  Firefox and Chrome have supported it for some time.  IE8 has its own Microsoft flavor.  iOS and Android also have strong support for a few version back.  Check out the <a href="http://caniuse.com/cors">detailed stats on caniuse.com</a>.</p>

<h2>RequireJs</h2>

<p><a href="http://requirejs.org/">RequireJs</a> Is a fantastic Javascript loader that allows for client-side async loading of js and other static assets.  For textual, non-code things, there is a <a href="http://requirejs.org/docs/download.html#text"><code>text</code> plugin</a>.</p>

<p>Because RequireJs knows about non-CORS-enabled browser restrictions, by default it functions differently for cross-domain requests.  In the current (2.0.0) implementation of the text plugin, line 163, the plugin decides whether to do a normal XHR (more lenient on text assets) request or to skip to the <code>else</code> statement to require what it will <a href="https://groups.google.com/group/requirejs/browse_thread/thread/bc0608ef5f8943e7/3a1cafaa93869c32">assume is javascript</a> because that's requestable across domains:</p>

<p>```js
//Load the text. Use XHR if possible and in a browser.
if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {
  text.get(url, function (content) {</p>

<pre><code>text.finishLoad(name, parsed.strip, content, onLoad);
</code></pre>

<p>  }, function (err) {</p>

<pre><code>if (onLoad.error) {
    onLoad.error(err);
}
</code></pre>

<p>  });
} else {
  //Need to fetch the resource across domains. Assume
  //the resource has been optimized into a JS module. Fetch
  //by the module name + extension, but do not include the
  //!strip part to avoid file system issues.
  req([nonStripName], function (content) {</p>

<pre><code>text.finishLoad(parsed.moduleName + '.' + parsed.ext,
                parsed.strip, content, onLoad);
</code></pre>

<p>  });
}
```</p>

<p>To allow CORS-enabled servers to get resources requested from them, we <a href="http://requirejs.org/docs/api.html#config">configure RequireJs</a> to override the <code>getXhr</code> function to return true:</p>

<p>(Note: 25 Oct 2012 - Syntax updated per Chris' comment below)</p>

<p>```js
require.config({
  config: {</p>

<pre><code>text: {
  useXhr: function (url, protocol, hostname, port) {
    // allow cross-domain requests
    // remote server allows CORS
    return true;
  }
}
</code></pre>

<p>  }
});
```</p>

<p>Now you should be able to ask for various and sundry things across domains and continue enjoy the RequireJs goodness -- now multiplied:</p>

<p><code>js
require('text!http://anotherDomain/my.html', function (my) {
  // have fun!
});
</code></p>
]]></content>
  </entry>
  
</feed>
