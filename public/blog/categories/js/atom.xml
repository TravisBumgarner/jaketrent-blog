<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: js | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/js/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2015-01-15T10:37:31-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React-Router with Flux]]></title>
    <link href="http://jaketrent.com/post/react-router-with-flux/"/>
    <updated>2015-01-15T09:21:00-07:00</updated>
    <id>http://jaketrent.com/post/react-router-with-flux</id>
    <content type="html"><![CDATA[<p>react-router provides great route handling with route params and query params.  Flux provides a pattern for building React apps, including a pattern from providing data to your components.  Here's a straightforward way to make route changes trigger data changes in your components.</p>

<p><img src="http://i.imgur.com/DXuSNbw.png" alt="react" /></p>

<!--more-->


<p>Note: Code here reflects usage of react-router 0.11.x.</p>

<p>It is often the case that we'll need to trigger data changes in a react component in our Flux app because of a route transition.  A prime example of this would be on an object show page, where the details of a particular object are being shown.  In our example, let's say that we're showing the details of a book, such as title, author, and description.</p>

<p>The route to our book detail page is likely defined as:</p>

<p><code>js routes.js
// ...
&lt;Route name="book" path="/books/:id" handler={require('./books-show')} /&gt;
</code></p>

<p>The handler is just a controller-component that defines the view.  It might look simply like:</p>

<p>```js books-show.js
const React = require('react')
const {State} = require('react-router')</p>

<p>const BooksStore = require('./books-store')</p>

<p>module.exports = React.createClass({</p>

<p>  displayName: 'BooksShow',</p>

<p>  mixins: [ State ],</p>

<p>  getInitialState() {</p>

<pre><code>return this.getStateFromStores()
</code></pre>

<p>  },</p>

<p>  getStateFromStores() {</p>

<pre><code>return {
  book: BooksStore.find({ id: this.getParams().id })
}
</code></pre>

<p>  },</p>

<p>  componentDidMount() {</p>

<pre><code>BooksStore.addChangeListener(this._onChange)
</code></pre>

<p>  },</p>

<p>  componentWillUnmount() {</p>

<pre><code>BooksStore.removeChangeListener(this._onChange)
</code></pre>

<p>  },</p>

<p>  _onChange: function() {</p>

<pre><code>this.setState(this.getStateFromStores())
</code></pre>

<p>  },</p>

<p>  render() {</p>

<pre><code>return (
  &lt;ul&gt;
    &lt;li&gt;{this.state.book.title}&lt;/li&gt;
    &lt;li&gt;{this.state.book.author}&lt;/li&gt;
    &lt;li&gt;{this.state.book.description}&lt;/li&gt;
  &lt;/ul&gt;
)
</code></pre>

<p>  }</p>

<p>})
```</p>

<p>Note that the view component references a <code>BooksStore</code> for getting its initial state.  The state of <code>book</code> will also be updated as the <code>BooksStore</code> emits that its data has changed and <code>this._onChange</code> is called.</p>

<p>Every time a route transitions, react-router has a <code>Router.run</code> callback that will also run in order to render the matching route.  This will also be a great place to put our action to signal to our Flux app that routes are transitioning and therefore other stuff like data in the display might need to change as well.</p>

<p><code>js
Router.run(routes, (Handler, state) =&gt; {
  React.render(&lt;Handler /&gt;, document.body)
  BooksAction.transition(state.params)
})
</code></p>

<p><strong>Important note</strong>: Make sure the transition action is called after <code>React.render</code> so that the change emission will be detected after render, otherwise you'll be one route transition behind.</p>

<p>The <code>BooksAction.transition</code> definition is something very simple -- something that can trigger events on the dispatcher:</p>

<p>```js books-actions.js
exports.transition = () => {
  AppDispatcher.handleViewAction({</p>

<pre><code>type: ActionTypes.TRANSITION
</code></pre>

<p>  })
}
```</p>

<p>The final connection is in the store, where the dispatched action can be listened for an then trigger the store event, updating the component views:</p>

<p>```js books-store.js
// ...</p>

<p>var BooksStore = merge(EventEmitter.prototype, {
  find(filter) {</p>

<pre><code>// ...
</code></pre>

<p>  }
})</p>

<p>BooksStore.dispatchToken = AppDispatcher.register((payload) => {
  var action = payload.action
  switch(action.type) {</p>

<pre><code>// ...

case ActionTypes.TRANSITION:
  BooksStore.emitChange()
  break
</code></pre>

<p>  }
})</p>

<p>```</p>

<p>At this point, all the route transitions should trigger data changes in views.  Visiting the url <code>/books/1</code> and then the url <code>/books/2</code> should display different data on screen according to which book id was in the route.  <code>Router.Link</code> should work correctly, usable instead of buttons with actions being triggered on click.</p>

<p>react-router and Flux make for a great combo in this way, right?  What adjustments would you make?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[D3 Class Operations]]></title>
    <link href="http://jaketrent.com/post/d3-class-operations/"/>
    <updated>2014-12-24T10:58:00-07:00</updated>
    <id>http://jaketrent.com/post/d3-class-operations</id>
    <content type="html"><![CDATA[<p>D3 has operations for class name manipulation that you're used to from jQuery.  These include addClass, removeClass, hasClass, and toggleClass.  They just go by different names.</p>

<p><img src="http://i.imgur.com/94JQ8N8.jpg" alt="d3 class names" /></p>

<!--more-->


<h2>selection.classed</h2>

<p>The magic all comes in the form of the <code>selection.classed</code> method from d3.  It is going to be the api that is used to accomplish all the operations listed below.  From the <a href="https://github.com/mbostock/d3/wiki/Selections#classed">docs</a>:</p>

<blockquote><p>This operator is a convenience routine for setting the "class" attribute; it understands that the "class" attribute is a set of tokens separated by spaces. Under the hood, it will use the classList if available, for convenient adding, removing and toggling of CSS classes.</p></blockquote>

<p>It knows how to handle one or many classes on an element, and it will be performant.</p>

<p>Also note that this method is only available on a selection.</p>

<h2>d3 addClass</h2>

<p>To add a class, the second parameter to <code>classed</code> must be true, as in this code:</p>

<p><code>js
d3.selectAll(".bar")
 .classed("my-selector", true);
</code></p>

<h2>d3 removeClass</h2>

<p>To remove a class, the second parameter to <code>classed</code> must be false.</p>

<p><code>js
d3.selectAll(".bar")
  .classed("my-selector", false);
</code></p>

<h2>d3 hasClass</h2>

<p>To check for the existence of a class, just leave off the second parameter and pass the class name you're querying for.  This will return true if it exists, false if it does not.</p>

<p><code>js
d3.selectAll(".bar")
 .classed("my-selector");
</code></p>

<p>This will return true if any element in the selection has the class.  Use <code>d3.select</code> for single element selection.</p>

<h2>d3 toggleClass</h2>

<p>To flip a class to the opposite state  -- remove it if it exists already, add it if it does not yet exist -- you can do one of the following.</p>

<p>For a single element, the code might look like this:</p>

<p><code>js
var oneBar = d3.select(".bar")
oneBar.classed("my-selector", !oneBar.classed("my-selector"));
</code></p>

<p>For multiple elements, one will want to pass in a callback.  The callback function takes as parameters <code>d</code>, the datum, <code>i</code>, the index in the selection, and <code>this</code> is the current DOM element.</p>

<p>It's also important to note that the <a href="https://github.com/mbostock/d3/wiki/Selections#classed">docs</a> inform us that:</p>

<blockquote><p>The function's return value is then used to assign or unassign the specified class on each element.</p></blockquote>

<p>The code for toggling multiple elements in a selection at once might look like this:</p>

<p>```js
d3.selectAll("bar")
  .classed("my-selector", function (d, i) {</p>

<pre><code>return !d3.select(this).classed("my-selector");
</code></pre>

<p>  });
```</p>

<p>Here's a <a href="http://jsbin.com/qeyawa/1/edit?html,js,output">jsbin</a> that provides some toggle functionality.  Ees for fun.</p>

<p><a class="jsbin-embed" href="http://jsbin.com/qeyawa/1/embed?output">d3 toggleClass</a><script src="http://static.jsbin.com/js/embed.js"></script></p>

<h2>Bonus: A note on single active classes</h2>

<p>Here's a fun tip for that oft-encountered situation where you want a single element in a selection to have a class, like an <code>active</code> class, and the rest of the selection should not:</p>

<p>Make sure that you detect the active class in the selection previous to the clearing of the active classes.</p>

<p>A sample of what that might look like could be:</p>

<p>```js
d3.selectAll(".bar").on("click", function () {
  var activeClass = "active";
  var alreadyIsActive = d3.select(this).classed(activeClass);
  svg.selectAll(".reports-chart__bar")</p>

<pre><code>.classed(activeClass, false);
</code></pre>

<p>  d3.select(this).classed(activeClass, !alreadyIsActive);
});
```</p>

<p>Now, unleash the power of your creativity!  Kazaam!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Send Props to Children in React]]></title>
    <link href="http://jaketrent.com/post/send-props-to-children-react/"/>
    <updated>2014-08-12T16:55:00-06:00</updated>
    <id>http://jaketrent.com/post/send-props-to-children-react</id>
    <content type="html"><![CDATA[<p>In React, you're always making components.  Sometimes components are standalone.  Other times, you'll have components that can nest children components.  Sometimes you'll want to send properties to the children components from the parent as often as a doting parent wants to send packages to a child missionary.  It's possible, it's simple, and it's not documented super well.  Here's one method.</p>

<p><img src="http://i.imgur.com/DXuSNbw.png" alt="React" /></p>

<!--more-->


<h2>Children Components</h2>

<p>When parent components are rendered, they have access to a special property, <code>this.props.children</code>.  It's like an Angular <code>ng-transclude</code> or an Ember <code>yield</code>.  Children components are generally rendered something like this:</p>

<p>```js
React.createClass({
  render: function () {</p>

<pre><code>return (
  &lt;div id="iAmParentHearMeRoar"&gt;
    {this.props.children}
  &lt;/div&gt;
)
</code></pre>

<p>  }
})
```</p>

<p>The generic example above shows simply how to render children, <code>props</code> untouched, within a parent component.  Sometimes, however, a parent wants to bequeath its children with extra properties.  How will we make that happen?</p>

<h2>Setting Child Props</h2>

<p><code>props</code> are meant to be immutable.  But, in order for us to send <code>props</code> values to our children, we're going to essentially loop through our children and set props on them as a part of our parent <code>render</code> function.</p>

<p>Deep breath.  It's ok.  The children that we'll loop through aren't mounted component instances.  They are, instead, <a href="http://facebook.github.io/react/blog/2014/07/17/react-v0.11.html#descriptors">descriptors</a>.  These descriptors have all the <code>props</code> attributes that we've declared should be put on the components, but they haven't been rendered yet.  Because of this, we can change props, and it's ok.  We're not mutating what has rendered.  The data still hasn't flowed to the children.  We're still effectively still riffing on the logic of what the children components should really be when they're eventually mounted.</p>

<h2>Looping on Children Components</h2>

<p><code>this.props.children</code> is a funny property.  It's special in more ways than one.  The things that might trip us up in looping is that even though it sounds like a plural thing, meaning an array, sometimes it's a singular object.  To help avoid potential problems, React gives us a helper, <code>React.Children</code>.  It has a few functions for array iteration, such as <code>map</code> and <code>forEach</code> that help account for the potential forms of <code>this.props.children</code>.</p>

<h2>Functional Modifications</h2>

<p>Immutable data is a big part of functional programming.  This means that when we 'mutate' the props, we want to mutate on a clone of the child component without affecting the original.  There's an input, there's an output, and the input is untouched.  Once we have our cloned children components as we want them, we'll render those instead.  React offers another great helper for cloning components and setting properties in a single function, <code>React.addons.cloneWithProps</code>.  Note that in order to use this function, you need to <code>require('react/addons')</code>.</p>

<h2>Checking Child Type</h2>

<p>It's a generally-useful thing to be able to tell what the React class type of a component object is.  It's an applicable skill in terms of looping through child components because we might not want to modify the properties of all types of children.  Each React component class has a <code>type</code> attribute accessible via <code>MyComponent.type</code>.  This attribute is also available on component descriptors.</p>

<h2>A Child CheckOption Example</h2>

<p>To bring this all together and illustrate the concepts, let's say we created a <code>RadioGroup</code> component that could take one or many <code>RadioOption</code> child components.  In raw html, which is what our component will eventually render, <code>input</code>s with type <code>checkbox</code> need to all have the same <code>name</code> attribute value to work well as toggles within the group.  But this is something that React can help us not have to duplicate.  We'll instead put a <code>name</code> property on the parent <code>RadioGroup</code> and have it transfer it as a property on all its children.  The implementation might look like this:</p>

<p>```js
/<em>* @jsx React.DOM </em>/</p>

<p>var React = require('react/addons')</p>

<p>var RadioOption = React.createClass({
  render: function () {</p>

<pre><code>return (
  &lt;label&gt;
    &lt;input type="radio" value={this.props.value} name={this.props.name} /&gt;
    {this.props.label}
  &lt;/label&gt;
)
</code></pre>

<p>  }
})</p>

<p>var RadioGroup = React.createClass({
  renderChildren: function () {</p>

<pre><code>return React.Children.map(this.props.children, function (child) {
  if (child.type === RadioOption.type)
    return React.addons.cloneWithProps(child, {
      name: this.props.name
    })
  else
    return child
}.bind(this))
</code></pre>

<p>  },
  render: function () {</p>

<pre><code>return (
  &lt;div class="radio-group"&gt;
    {this.renderChildren()}
  &lt;/div&gt;
)
</code></pre>

<p>  }
})</p>

<p>var WhereImUsingRadioGroups = React.createClass({
  render: function () {</p>

<pre><code>return (
  &lt;RadioGroup name="blizzard-games"&gt;
    &lt;RadioOption label="Warcraft 2" value="wc2" /&gt;
    &lt;RadioOption label="Warcraft 3" value="wc3" /&gt;
    &lt;RadioOption label="Starcraft 1" value="sc1" /&gt;
    &lt;RadioOption label="Starcraft 2" value="sc2" /&gt;
  &lt;/RadioGroup&gt;
)
</code></pre>

<p>  }
})
```</p>

<p>In this example, where the parent <code>RadioGroup</code> has the <code>name</code> prop, it will be given to each of the children so their <code>name</code> prop will match and the radio group will work as expected.  Thus, the hearts of the children are turned toward their fathers.</p>

<p>Is there a better way to do this?  How have you been sending <code>props</code> to children?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set State in Callbacks in React]]></title>
    <link href="http://jaketrent.com/post/set-state-in-callbacks-in-react/"/>
    <updated>2014-06-23T08:30:00-06:00</updated>
    <id>http://jaketrent.com/post/set-state-in-callbacks-in-react</id>
    <content type="html"><![CDATA[<p>In React, you can setup components that fetch their own data and set their own state with that data.  Because of the async nature of data fetching, you’ll have to make sure to keep things cleaned up to avoid the error of trying to set state in an unmounted component.</p>

<p><img src="http://i.imgur.com/DXuSNbw.png" alt="React" /></p>

<!--more-->


<h2>React Components setState</h2>

<p>If a React component fetches its own data, it will usually do so in the <code>componentDidMount</code> method.  In the data request callback, it will set its own state via the <code>this.setState</code> method.  (<code>this.state</code> should be treated as immutable.)  State should only be set on mounted components, or those components that are inserted into the dom.</p>

<p>If you attempt to set state on an unmounted component, you'll get an error that looks like this:</p>

<p><code>
Uncaught Error: Invariant Violation: replaceState(...): Can only update a mounted or mounting component.
</code></p>

<p>Others have reported this variation:</p>

<p><code>
Invariant Violation: replaceState(...): Cannot update while unmounting component. This usually means you called setState() on an unmounted component.
</code></p>

<p>Both indicate that you're setting state on a component that is not mounted.  How should one avoid this?  In my case, <code>setState</code> was being called in a callback that was firing after the component that initially started the request had already been unmounted from the dom.  Here are the two ways I addressed the problem...</p>

<h2>Assure Component isMounted</h2>

<p>If the component is mounted, <code>setState</code> is a safe bet.  If it's not mounted, never do it.  If it's not mounted, you probably don't about the state at that point either.  So wrap your state setting in <code>this.isMounted()</code>:</p>

<p>```js
React.createClass({
  componentDidMount: function () {</p>

<pre><code>MyModel.find(function (err, data) {
  if (this.isMounted()) {
    this.setState({ 
      goodiesFrom: data 
    })
  }
}.bind(this))
</code></pre>

<p>  }
  // ...
})
```</p>

<p>It feels a bit like a hack, but it makes the code safe.  Another option...</p>

<h2>Abort the Request</h2>

<p>My asynchronous action is a network request that, when finished, will call the callback function.  When the component unmounts, I can just throw away the request so the callback is never invoked.  To do this, we'll take advantage of another React lifecycle hook, <code>componentWillUnmount</code>:</p>

<p>```js my-component.js
React.createClass({
  componentDidMount: function () {</p>

<pre><code>this.req = MyModel.find(function (err, data) {
  this.setState({})
}.bind(this))
</code></pre>

<p>  },
  componentWillUnmount: function () {</p>

<pre><code>this.req.abort()
</code></pre>

<p>  }
  // ...
})
```</p>

<p>In my model, I'm using the <a href="https://github.com/visionmedia/superagent">superagent</a> library for network requests which provides an <a href="http://visionmedia.github.io/superagent/#aborting-requests">abort</a> method.</p>

<p>```js my-model.js
var request = require(‘superagent')
MyModel.prototype.find = function (done) {
  return request(‘modelUrl’)</p>

<pre><code>.end(function (err, data) {
  if (data) {
    done(err, data.body)
  }
})
</code></pre>

<p>}
```</p>

<p>Also note that in my <code>end</code> function callback, I'm checking for the existence of data.  This is because when a request is aborted, data will come back as undefined.</p>

<p>My favored method for solving the problem is the latter request abort method.  It feels cleaner that we're relying on the lifecycle functions of the component to deal with cleanup, much like we would for <a href="http://facebook.github.io/react/tips/dom-event-listeners.html">events</a>.  How have you dealt with this problem?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Broccoli Ember Emblem]]></title>
    <link href="http://jaketrent.com/post/broccoli-ember-emblem/"/>
    <updated>2014-05-30T07:18:00-06:00</updated>
    <id>http://jaketrent.com/post/broccoli-ember-emblem</id>
    <content type="html"><![CDATA[<p>Make broccoli compile your emblem templates so they're ready for your ember app.</p>

<p><img src="http://i.imgur.com/85v8PQP.png" alt="Broccoli Ember Emblem" /></p>

<!--more-->


<h2>The Libraries</h2>

<p><a href="https://www.npmjs.org/package/broccoli">Broccoli</a> builds your assets quickly.  It makes heavy use of caching so it only has to rebuild affected subtrees when files change.  <a href="http://emblemjs.com/">Emblem</a> is a significant whitespace version of <a href="http://handlebarsjs.com/">Handlebars</a> templates, similar in style to <a href="http://slim-lang.com/">Slim</a> or <a href="http://jade-lang.com/">Jade</a>.  <a href="http://emberjs.com/">Ember</a> is a MVC framework for building browser apps.</p>

<p>Put them all together, and you have something that will help you compile your templates quickly for your browser app.  The <a href="https://github.com/jaketrent/broccoli-ember-emblem">broccoli-ember-emblem</a> plugin for Broccoli will do just that.</p>

<h2>Install</h2>

<p>To use the library, you'll need broccoli installed first.  Then, you'll install the plugin via npm:</p>

<p><code>
npm install --save-dev broccoli-ember-emblem
</code></p>

<h2>Usage</h2>

<p>You'll setup the plugin in your app's <code>Brocfile.js</code>.  That setup might look something like this:</p>

<p>```js
var emblem = require('broccoli-ember-emblem')
var mergeTrees = require('broccoli-merge-trees')
var pickFiles = require('broccoli-static-compiler')</p>

<p>function preprocess (tree) {
  tree = emblem(tree, {</p>

<pre><code>stripPathFromName: 'tmpl/'
</code></pre>

<p>  })
  return tree
}</p>

<p>var tmplTree = 'client/tmpl'
tmplTree = pickFiles(tmplTree, {
  srcDir: '/',
  destDir: '/tmpl'
})
tmplTree = preprocess(tmplTree)</p>

<p>module.exports = mergeTrees([ /<em> other trees, </em>/ tmplTree ])
```</p>

<p>Note a few things:</p>

<ul>
<li>I'm using another plugin, <code>broccoli-static-compiler</code> to move files around in the broccoli build directories.  This is to be able to identify separate trees that both use similar file filters (eg, *.js for both src scripts and templates).</li>
<li>I'm using the one option for the <code>broccoli-ember-emblem</code> plugin, <code>stripPathFromName</code>, which allows me to remove the path name from the template name in output.  For example, if I have a file at <code>tmpl/application.emblem</code>, I want the template name in ember to be <code>application</code>, not <code>tmpl/application</code>.</li>
<li>Final output is merged into a single tree via another plugin, <code>broccoli-merge-trees</code>.</li>
</ul>


<h2>Output</h2>

<p>Broccoli will take care of finding all of your template files.  It will use directories and filenames as the input for template names.  As a few examples, here is input and output as it might happen in the above configuration:</p>

<ul>
<li>File: <code>client/tmpl/application.emblem</code> becomes: <code>Ember.TEMPLATES['application']</code></li>
<li>File: <code>client/tmpl/components/song.emblem</code> becomes: <code>Ember.TEMPLATES['components/song']</code></li>
</ul>


<p>Notice that Ember requires all templates to be registered on the <code>Ember.TEMPLATES</code> object.  Later, at app runtime, they are looked up on that object by name.</p>

<p>So, use the plugin and win.  How does your template compilation for Ember/Emblem differ?  What other features do you wish were supported here?</p>
]]></content>
  </entry>
  
</feed>
