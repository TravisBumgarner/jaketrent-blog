<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: js | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/js/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2014-01-23T17:50:45-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Developing an Ember Edge Review]]></title>
    <link href="http://jaketrent.com/post/developing-an-ember-edge-review/"/>
    <updated>2014-01-23T11:19:00-07:00</updated>
    <id>http://jaketrent.com/post/developing-an-ember-edge-review</id>
    <content type="html"><![CDATA[<p>The latest book on The List at <a href="http://emberwatch.com/books">emberwatch</a> is <a href="http://bleedingedgepress.com/our-books/developing-an-ember-edge/">Developing an Ember Edge</a>.  It's a great intro book to Ember.js.</p>

<p><img src="http://i.imgur.com/85v8PQP.png" alt="Developing an Ember Edge" /></p>

<!--more-->


<p>The book is published by Bleeding Edge Press.  Pretty awesome name.  It is written by Jamie White, Matthew Beale, Christopher Sansone, Wesley Workman, and Bradley Priest, quite the host of authors.  It turns out to be a very timely read for me.  The code in the book uses ember 1.0 and ember-data 1.0 beta 3.  As of this writing, that's almost the bleeding edge.</p>

<p>I would compare the book to the <a href="http://emberjs.com/guides/">Ember.js official guides</a>.  It's introductory.  It definitely favors a breadth approach.  For me, but a wee Ember babe, it brings to light some interesting details about the Ember internals or at least the approach of the framework.</p>

<h2>Format</h2>

<p>I read the book in digital form as a pdf.  I love the digitalness, but I wonder if it wouldn't have had a bit more editorial review if printed.  Perhaps this is what Bleeding Edge Press means.  The code in the snippets was all smashed to the left, destroying most indentation reading assistance.  The code bits were also a smaller font size than the prose which made the switch between the two slightly awkward to my over-taxed eyes.  By the end of the book, I wasn't surprised when I found a typo.  There were a lot but not too many.  For someone of lesser OCD, it probably would've largely gone unnoticed.  Of course, considering the engineer audience of the book, maybe that doesn't exist.</p>

<h2>The Zen of Ember</h2>

<p>The book content is really good.  I felt like it helped me piece together why things are organized in Ember as they are.  I learned more of what the pieces are by themselves and how they're meant to interact together.  The authors were also kind to point out where some of the rough edges were in terms of design (or potential misdesign by app authors) and api changes.</p>

<p>I liked the mostly-breadth approach to the writing.  The book was good for a newb and remained pretty short.  Perhaps that's because there's not too much there as a general subject without bloating this book into an API reference book. [whew]  The book struck a good balance of being technical, readable, and giving good insight into the practical use of the framework.</p>

<h2>Ember Trackr</h2>

<p>The first half of the book covers the concepts and layers of Ember, approaching mvc in general, objects, application, routes, handlebars, views, controllers, components, and models.  This takes 54 pages.  The other half(+) shows the development of a ticket tracking app.</p>

<p>The development process shown is thorough, even including the tool install, project file layout, and ui styling.  The TDD of the app in total was awesome.  It's really step by step.  Sometimes this was a little painful, but you definitely don't miss anything.  The screenshots of test runners in terminals and the app in browser windows could have been cropped for easier reading with less vertical blank space.  The testing walkthrough was really great.  They even worked through a few "unexpected" errors as one might actually encounter them.</p>

<p>The app dev portion could probably have been cut short.  About the time they start into the user management screens, we probably could have called it good.  But, they do introduce some good, new concepts in the app dev section of the book.  For instance, he covers a little on containers and <code>Ember.run</code> as it relates to testing.</p>

<p>I'm glad I read the book.  It was helpful to my slingshot into the Ember atmosphere.  Boom!  Go get it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grunt-init Exercism.io]]></title>
    <link href="http://jaketrent.com/post/grunt-init-exercism-io/"/>
    <updated>2014-01-03T07:07:00-07:00</updated>
    <id>http://jaketrent.com/post/grunt-init-exercism-io</id>
    <content type="html"><![CDATA[<p><a href="http://exercism.io">Exercism.io</a> has a great set of JavaScript exercises.  They could be made better by a better test setup and runner.  I've created a small grunt-init template to help in that setup.</p>

<p><img src="http://i.imgur.com/4773D.jpg" alt="Grunt and Exercism" /></p>

<!--more-->


<h2>Exercism.io</h2>

<p>For those unfamiliar, <a href="http://exercism.io">Excercism.io</a> is a great tool that helps coders and potential coders learn and expand their knowledge in several programming languages.  Currently, among the 9 language choices, JavaScript is one.  The JavaScript exercises come with a pre-built <a href="https://github.com/mhevery/jasmine-node">jasmine_node</a> test suite.  The point of the exercise is to write code that will make all the corresponding tests pass.  For more on Excercism.io, see my <a href="/post/exercism-review/">review</a>.</p>

<h2>Vanilla jasmine_node</h2>

<p>As the <a href="http://exercism.io/help/setup/javascript">Exercism JavaScript docs</a> indicate, you can setup your JavaScript environment like this:</p>

<p><code>bash
npm install -g jasmine_node
</code></p>

<p>And then run your tests like this:</p>

<p><code>bash
jasmine_node bob_test.spec.js
</code></p>

<p>This does work perfectly well.  But, we want something more.  Of course.</p>

<h2>Grunt watch</h2>

<p>We want the test suite to re-run as soon as we make a change and save either our test file or our file under test.  Well, it turns out that <a href="http://gruntjs.com">Grunt</a> is a great little command-line tool that has plugins for file watching.</p>

<p>Grunt needs to be told to use a plugin.  Then it needs to be told that we want to run the task that watches our files.  All of this is indicated to Grunt via a local <code>Gruntfile.js</code> or <code>Gruntfile.coffee</code> file.  You could create this file by yourself, but wouldn't it be nice if there was a <code>Gruntfile.js</code> created somewhere for you already that worked well with Exercism?</p>

<h2>Grunt-init</h2>

<p>It turns out that there is a great, separate utility called <a href="http://gruntjs.com/project-scaffolding">grunt-init</a> that you can use to create your <code>Gruntfile.js</code> (and many other things) with a pre-built template.</p>

<p>To install this tool, run:</p>

<p><code>bash
npm install -g grunt-init
</code></p>

<p>To use a grunt-init template, you need to have a local copy.  This template copy could live anywhere, but grunt-init can reference these templates purely by name if you put them in <code>~/.grunt-init/</code>.</p>

<p>To get the <a href="https://github.com/jaketrent/grunt-init-exercism">Exercism grunt-init template</a>, clone it like so:</p>

<p><code>bash
git clone git@github.com:jaketrent/grunt-init-exercism.git ~/.grunt-init/exercism
</code></p>

<p>Then change into your specific Exercism directory, init your <code>Gruntfile.js</code>, and follow the other commands:</p>

<p><code>bash
cd ~/dev/exercism/javascript/bob
grunt-init exercism
npm init
npm install
</code></p>

<p>The <code>npm init</code> will flush out the rest of the generated <code>package.json</code>.  The <code>npm install</code> will install all dependencies that we said Grunt needed to do its job.</p>

<p>Finally, activate Grunt to watch your files with:</p>

<p><code>bash
grunt watch
</code></p>

<p>Now as you write your Exercism code to fulfill tests, you will see the tests get run automatically and become greenlit as your code increases in awesomeness.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Change Page Title in Angular Route]]></title>
    <link href="http://jaketrent.com/post/change-page-title-angular-route/"/>
    <updated>2013-11-07T07:03:00-07:00</updated>
    <id>http://jaketrent.com/post/change-page-title-angular-route</id>
    <content type="html"><![CDATA[<p>When you change routes in Angular, the page title doesn't change automatically, but this can be done rather simply.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="Angular Router" /></p>

<!--more-->


<h2>Servers and Clients</h2>

<p>Client-side routers are pretty awesome.  A new url is pushed into the browser's history to represent the particular resource that pure client code has produced and displayed.  It's pretty cool.  It's also used widely these days.  Angularjs has a nice little router built into its framework.</p>

<p>Route changes from a server always have the page title set automatically in the <code>head &gt; title</code> tag.  Client-side routing doesn't have that exactly.  Nor does the Angularjs router change the page title via an automatic mechanism.  So, let's add our own.</p>

<h2>Add Page Title to Angular Router</h2>

<p>First, notice that you can add any arbitrary attributes to an angular route that you desire.  In the code below, notice that each route has a <code>title</code> attribute:</p>

<p>```coffeescript app.coffee
angular.module('app', []).config ($routeProvider) -></p>

<p>  $routeProvider</p>

<pre><code>.when '/',
  controller: 'HomeCtrl'
  templateUrl: "/templates/home.html"
  title: 'Home'

.when '/about',
  controller: 'AboutCtrl'
  templateUrl: "/templates/about.html"
  title: 'About'
</code></pre>

<p>```</p>

<p>Then in a place that exists on every route -- something like an <code>AppCtrl</code> -- you can gain access to the <code>current</code> route's <code>title</code> every time the route changes:</p>

<p>```coffeescript app-ctrl.coffee
angular.module('app').controller 'AppCtrl', ($rootScope) ->
  $rootScope.$on '$routeChangeSuccess', (event, current, previous) =></p>

<pre><code>$rootScope.pageTitle = $route.current.title
</code></pre>

<p>```</p>

<p>Now we have put the route's <code>title</code> in <code>$rootScope.pageTitle</code> and can use it in our template:</p>

<p>```html app.html
<html>
  <head></p>

<pre><code>&lt;title ng-bind="pageTitle + ' | MyApp'"&gt;&lt;/title&gt;
</code></pre>

<p>  </head>
  <!-- ... -->
```</p>

<p><code>ng-bind</code> is just like using double curlies, but also acts as if it's surrounded by an ng-cloak as well.  Notice that in the title, I'm even concatenating the <code>pageTitle</code> with my app's overall name.</p>

<p>Props go to <a href="http://github.com/danethurber">@danethurber</a> for putting this title changing logic in our most recent app.</p>

<p>Is this how you change your Angular app's title?  Is there a better way?  Specifically, I wonder if <code>AppCtrl</code> really is the best place to listen for <code>$routeChangeSuccess</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use D3 rangeBands]]></title>
    <link href="http://jaketrent.com/post/use-d3-rangebands/"/>
    <updated>2013-10-17T07:47:00-06:00</updated>
    <id>http://jaketrent.com/post/use-d3-rangebands</id>
    <content type="html"><![CDATA[<p>When building a chart such as a bar chart in d3, you'll want an evenly divided space on your x axis.  You could divide the space up with your own manual calculations, accounting for space available, bar width, and inner and outer padding.  Or, you could have d3 do the calculation for you via a <code>rangeBand</code>.</p>

<p><img src="http://i.imgur.com/JEniNrp.jpg" alt="d3 rangeBand" /></p>

<!--more-->


<h2>Scale</h2>

<p>One of the great features of D3 is the ability it gives you to easily adapt your chart to the space available to you.  This is accomplished with scales.  There are a couple different scales built into D3.  Some for comparative numbers, such as <code>d3.scale.linear</code> and <code>d3.scale.log</code>; some for discrete data sets, such as <code>d3.scale.ordinal</code>.</p>

<p><strong>A scale maps visual space to data space.</strong></p>

<p>The visual space of a scale is the <code>range</code>.  The data space is the <code>domain</code>.  The internals of the scale will map it all for you.</p>

<h2>Manual Space Management</h2>

<p>Previous to realizing some of the things that d3 scales can do for you, I did a lot of space management myself.  Here's an example:</p>

<p>Let's say we have a data domain of all the letters in the alphabet.  Let's say we're building a bar chart.  We'll put the letters on the x-axis, running horizontally along our chart.  We want to space out each letter's bar evenly across the visual space or range.</p>

<p>If we did our own math, it might look like this:</p>

<p>```coffeescript brought-to-you-by.coffee
barOuterPad = 20
barPad = 10</p>

<p>widthForBars = elementWidth - (barOuterPad * 2)
barWidth = widthForBars / data.length - barPad + (barPad / numBars)</p>

<p>barsG = svg.append('g')
  .attr('transform', "translate(#{barOuterPad}, 0)")</p>

<p>barsG.selectAll('rect')
  .data(data)
  .enter().append('rect')</p>

<pre><code>.attr('x', (d, i) -&gt; (barWidth * i) + (i * barPad))
.attr('width', barWidth)
# attrs ...
</code></pre>

<p>```</p>

<p>In the code above, we have bar padding setup.  <code>barOuterPad</code> is the padding on only the far left and right of the entire chart.  <code>barPad</code> is the space between each of the bars.</p>

<p>The <code>barWidth</code> calculation is especially fun.  It splits the <code>widthForBars</code> space evenly over the number of bars.  Then it subtracts the <code>barPad</code> for the space of that bar that won't be able to be used.  Then, finally, we remember that there will be 1 fewer empty pad areas between bars than there will be actual bars.  So, we take that extra <code>barPad</code> space and give a bit of it back to every bar.  Whew.</p>

<p>When we go to place bars, we create a new group, <code>barG</code>, transformed in to take account of <code>barOuterPad</code>.  Then, for each bar in we make sure it's offset into the chart based on what number of bar it is in the set.</p>

<p>There is an easier way.</p>

<h2>d3.scale.ordinal.rangeBands</h2>

<p>There is one particular function of <code>d3.scale.ordinal</code> that is particularly useful.  That is <code>rangeBands</code>.  It will evenly divide a space up for you into bands across the range.</p>

<p>Here's a great graphic from the d3 wiki on <a href="https://github.com/mbostock/d3/wiki/Ordinal-Scales#wiki-ordinal_rangeBands"><code>ordinal.rangeBands</code></a>:</p>

<p><img src="https://f.cloud.github.com/assets/230541/538688/46c298c0-c193-11e2-9a7e-15d9abcfab9b.png" alt="rangeBand diagram" /></p>

<p>It looks like it knows how to take care of everything in our scenario.  It handles outer padding.  It handles between-bar padding.  Let's use it:</p>

<p>```coffeescript made-possible-by.coffee
barOuterPad = .2
barPad = .1</p>

<p>x = d3.scale.ordinal()
  .domain(data.map((d) -> d.letter))
  .rangeRoundBands([0, elementWidth], barPad, barOuterPad)</p>

<p>svg.append('rect')
  .data(data)
  .enter().append('rect')</p>

<pre><code>.attr('x', (d) -&gt; x(d.letter))
.attr('width', x.rangeBand())
# attrs...
</code></pre>

<p>```</p>

<p>Note that our <code>barOuterPad</code> and <code>barPad</code> are now fractions.  This is because d3 expects a number, usually between 0 and 1, that is described as a proportion of the eventual width of the bands.</p>

<p><code>x</code> becomes our scale function, mapping the domain, which is all letters (<code>d.letter</code>), to the range.  The range is specified as bands using <code>rangeRoundBands</code>.  This is different than <code>rangeBands</code> in that all spaces are guaranteed to be integers, avoiding antialiasing on screen.  The signature is as follows:</p>

<p><code>ordinal.rangeBands(interval[, padding[, outerPadding]])</code></p>

<p>We avoid having to use a new <code>barG</code> group to make our math easier.</p>

<p>When we set the <code>x</code> attribute on our bar, it's x offset is determined by passing the singular datum's letter to the <code>x</code> scale function.  And the width is simply the width of all bands, known by calling <code>x.rangeBand()</code>.</p>

<p>So much better.  And so much more concise.</p>

<p>What do you think?  Does this work for you?  What is the even-better way of doing this that I have yet to realize?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rotate Gauge Needle in D3]]></title>
    <link href="http://jaketrent.com/post/rotate-gauge-needle-in-d3/"/>
    <updated>2013-09-27T06:52:00-06:00</updated>
    <id>http://jaketrent.com/post/rotate-gauge-needle-in-d3</id>
    <content type="html"><![CDATA[<p>If you want to make a gauge chart in S3, you'll need a needle on your gauge.  It's not hard to draw a triangle, but here's the extra work to rotate it.</p>

<p><img src="http://i.imgur.com/7GSyOFd.png" alt="D3 Gauge Chart" /></p>

<!--more-->


<h2>The Gauge Chart</h2>

<p>I'm not sure what you call this kind of chart, but I call it a gauge.  It pretty much looks like a speedometer or a pressure gauge.  I'm sure after seeing one, you want to make one.  I'm not going to cover the arc building.  It's pretty easy to build a <a href="https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-arc">d3 arc</a>.</p>

<h2>The Components</h2>

<p>In my case, I can match the design of the needle with a triangle and a circle.  The circle is the base of the needle upon which the needle spins.  The triangle is the pointer of the needle, which will eventually sit at the angle we specify to our graph.</p>

<h2>The Coordinates</h2>

<p>In svg/d3, you can redefine your coordinates by using a group.  If my <code>svg</code> container is square, the default coordinate plane will start in the upper left-hand corner at <code>(0,0)</code>.  If I wanted to redefine <code>(0,0)</code> to be in the bottom center of the <code>svg</code> container, we could do so by positioning a group (<code>g</code>) so that <em>its</em> top left-hand corner is at that point.</p>

<p>We might write this:</p>

<p><code>coffeescript gauge.coffee
height = # ... svg height
width = # ... svg width
needleG = svg.append('g')
  .attr('transform', "translate(#{width / 2}, #{height})")
</code></p>

<h2>Draw a Triangle</h2>

<p>To draw a triangle, use an <a href="https://github.com/mbostock/d3/wiki/SVG-Shapes#path-data-generators">svg path</a>.  It needs a start point and 2 more points to draw lines to.  In the special language of svg <code>path</code>s, <code>M x y</code> is the start point and <code>L x y</code> is the point to which a straight light will be drawn from the previous point.</p>

<p>Let's say that we want our needle to 60px tall and 20px wide at the base.  First we'll draw it pointing straight up.  Let's draw this triangle using the <code>needleG</code> coordinates.  In the code, I'll call the corners of the triangle <code>top</code>, <code>left</code>, and <code>right</code>.  The d3 code to draw this might look like:</p>

<p>```coffeescript gauge.coffee
needleLen = 60
needleRadius = 10</p>

<p>centerX = 0
centerY = 0</p>

<p>topX = centerX - 0
topY = centerY - needleLen</p>

<p>leftX = centerX - needleRadius
leftY = centerY - 0</p>

<p>rightX = centerX - -(needleRadius)
rightY = centerY - 0</p>

<p>needleG.append('path')
  .attr('d', "M #{leftX} #{leftY} L #{topX} #{topY} L #{rightX} #{rightY}")
```</p>

<h2>Rotate the Triangle</h2>

<p>Drawing a triangle pointed straight up, that is strictly parallel with the <code>x</code> and <code>y</code> access of the plane, is no problem.  But a gauge that points straight up isn't worth that much.  It doesn't measure anything.  So, let's rotate the pointer/triangle of the needle to get an actual visual display of our measurement.</p>

<p>Unfortunately, (but maybe you'll have fun) you'll have to pull out your middle school trigonometry here.  I was remembering sayings I had heard once a time to figure this out (like the mysterious "SOHCAHTOA" acronym).</p>

<h3>Percentage Input</h3>

<p>Your input may vary, but mine starts as a percentage.  If yours does not, you could convert it to a percentage.  And since we're working with a half circle, we're just going to cut in half all our input since the rotation math is based on a circle.</p>

<p>Let's say in this case our percentage is 65%.  We need to convert from percentage to radians.  Note that all the code for rotation angles will use <a href="http://en.wikipedia.org/wiki/Radian">radians</a>.  Here's some conversion code:</p>

<p>```coffeescript gauge.coffee
percToDeg = (perc) ->
  perc * 360</p>

<p>percToRad = (perc) ->
  degToRad percToDeg perc</p>

<p>degToRad = (deg) ->
  deg * Math.PI / 180
```</p>

<h3>SOHCAHTOA</h3>

<p>We have to find the <code>top</code>, <code>left</code>, and <code>right</code> for a triangle rotated around the <code>(0,0)</code> point.  The basic SOHCAHTOA formulas will help us find the points:</p>

<p><code>
sin of angle = opposite / hypotenuse
cos of angle = adjacent / hypotenuse
tan of angle = opposite / adjacent
</code></p>

<p><img src="http://i.imgur.com/RxoQF98.png" alt="Needle trigonometry" /></p>

<p>Using these formulas, let's update our code for finding the endpoints of the triangle:</p>

<p>```coffeescript gauge.coffee
needleLen = 60
needleRadius = 10
percent = .65</p>

<p>thetaRad = percToRad percent / 2</p>

<p>centerX = 0
centerY = 0</p>

<p>topX = centerX - needleLen * Math.cos(thetaRad)
topY = centerY - needleLen * Math.sin(thetaRad)</p>

<p>leftX = centerX - needleRadius * Math.cos(thetaRad - Math.PI / 2)
leftY = centerY - needleRadius * Math.sin(thetaRad - Math.PI / 2)</p>

<p>rightX = centerX - needleRadius * Math.cos(thetaRad + Math.PI / 2)
rightY = centerY - needleRadius * Math.sin(thetaRad + Math.PI / 2)</p>

<p>"M #{leftX} #{leftY} L #{topX} #{topY} L #{rightX} #{rightY}"
```</p>

<p>Note that <code>Math.PI / 2</code> is a 90 degree angle.  It's used to find the angle smaller than theta for the left triangle and find the angle larger for the right triangle.</p>

<p>There you have it.  That's the magic.  For an example of this working and some more code, see this <a href="http://cdpn.io/eloGk">codepen of a d3 gauge</a>.</p>
]]></content>
  </entry>
  
</feed>
