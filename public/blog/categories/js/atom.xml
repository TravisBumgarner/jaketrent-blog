<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: js | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/js/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2014-03-17T09:27:04-06:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Detecting Window Closing in Ember]]></title>
    <link href="http://jaketrent.com/post/ember-window-beforeunload/"/>
    <updated>2014-03-17T08:04:00-06:00</updated>
    <id>http://jaketrent.com/post/ember-window-beforeunload</id>
    <content type="html"><![CDATA[<p>In a long-running app such as you might build in Ember, it can be useful to detect when the window is closing.  This is easily detected with JavaScript, and there are easy places to put the code in your Ember app.</p>

<p><img src="http://i.imgur.com/85v8PQP.png" alt="Ember beforeunload" /></p>

<!--more-->


<h2>beforeunload</h2>

<p>The <code>window</code> event that you want to listen for is <code>beforeunload</code>.  You might bind to the event like so:</p>

<p><code>coffeescript
$(window).bind 'beforeunload', -&gt;
  'Are you sure you want to close this window?'
</code></p>

<p>Return a string from the function.  This string will be displayed in a browser-native confirm-style dialogue.</p>

<h2>beforeunload in Ember</h2>

<p>Now, if your app is controlled by Ember, you're likely going to want it to handle bindings such as this from within Ember.  There are several places you might want to put this code.  Your decision will depend on the needs of your app.  You can put it in a route or controller.  The scope of that route or controller should match the scope for which you want the <code>beforeunload</code> event to be caught.  In other words, if you want <code>beforeunload</code> to be caught for the entire app, put the listener in <code>ApplicationRoute</code> (or <code>ApplicationController</code>).  Or if you wanted a more limited scope, put the listener in a more specific route.</p>

<p>For instance, if you wanted to save a blog post when the user closes a tab, you might implement something like this:</p>

<p>```coffeescript
App.BlogEditController = Ember.ObjectController.extend
  saveBeforeClose: (-></p>

<pre><code>$(window).bind 'beforeunload', =&gt;
  @get('model').save()
  'Are you sure you want to leave unsaved work?'
</code></pre>

<p>  ).on 'init'
```</p>

<h2>In Practice</h2>

<p>In practice, the UX for this kind of feature can be tricky.  If someone closes a tab, odds are they meant to and don't want to be bothered with a confirm dialogue asking them to reiterate their decision.  On the other hand, maybe the didn't realize the implications of closing out the app, such as in the case of unsaved work, and they become very grateful for the reminder to stay and save something.</p>

<p>In the case of the last example, it would be cool if we could detect the window closing, save the work automatically, and let the user close the tab as they indicated without interruption.  For asynchronous actions such as network requests, this is problematic.  The request will not finish before the browser has trashed the whole window.  In cases such as this, you will need to synchronize your requests to block before finishing execution of the <code>beforeunload</code> event callback.</p>

<p>So, does this work for you?  How might you make it better?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Express Validator]]></title>
    <link href="http://jaketrent.com/post/testing-express-validator/"/>
    <updated>2014-03-10T07:37:00-06:00</updated>
    <id>http://jaketrent.com/post/testing-express-validator</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/ctavan/express-validator">Express-validator</a> is a <a href="http://expressjs.com/api.html#middleware">middleware for Express</a> on Node.js that can help you validate user input.  It's a lovely library.  Here's a pattern for testing code that uses it.</p>

<p><img src="http://i.imgur.com/ZfK9bv4.png" alt="express-validator" /></p>

<!--more-->


<h2>Install</h2>

<p>To get <code>express-validator</code> in your project, install with npm:</p>

<p><code>bash
npm install express-validator --save
</code></p>

<h2>Plug in the Middleware</h2>

<p>To use the middleware in your code, crack open the part of your app that sets up Express middlewares, and add in a reference to this lil beaut:</p>

<p>```coffeescript
expressValidator = require 'express-validator'</p>

<h1>...</h1>

<p>app.use express.json()
app.use expressValidator()
```</p>

<p>Note that you should insert the new <code>express-validator</code> middleware directly after the <code>json</code> middleware.  Also note that the <code>json</code> middleware, used in conjunction with <code>urlencoded</code> now <a href="http://andrewkelley.me/post/do-not-use-bodyparser-with-express-js.html">replace <code>bodyParser</code></a> to avoid deprecation warnings on startup.</p>

<h2>Validate Something</h2>

<p>Let's say you're writing a validator for new posts to a blog.  That code might look like this.</p>

<p>```coffeescript blog-new-validator.coffee
module.exports = (req) -></p>

<p>  req.checkBody('title', 'Title is required').notEmpty()
  req.checkBody('body', 'Body is required').notEmpty()</p>

<p>  !req.validationErrors() or req.validationErrors().length is 0
```</p>

<p>It checks to see if there is a title and a body given.  If there is not, the validator will return false, and there will be a validation errors array on the <code>req</code> object.  There are many <a href="https://github.com/chriso/validator.js">other assertions (provided internally by validator.js)</a> besides <code>notEmpty</code> that you can use.</p>

<h2>Validating the Validator</h2>

<p>First, setup a test helper that stubs the request, <code>req</code>, for validation:</p>

<p>```coffeescript req.coffee
expressValidator = require('express-validator')()</p>

<p>exports.stubForValidation = (done) ->
  req =</p>

<pre><code>query: {}
body: {}
params: {}
param: (name) -&gt;
  @params[name]
</code></pre>

<p>  expressValidator req, {}, -></p>

<pre><code>done(req)
</code></pre>

<p>```</p>

<p>There's nothing too incredibly special here.  It's just abstracted out of your test into a reusable helper.  The <code>req</code> object has empty objects to slap fixture data onto in your tests.  It includes a stubbed <code>param</code> function that can return params by name.  Finally, the <code>express-validator</code> middleware is called with the stubbed <code>req</code> object.</p>

<p>Now, in your test, you can simply:</p>

<ol>
<li>Stub the request before each test</li>
<li>Setup your fixture data to make the test pass (or not)</li>
<li>Assert validation errors' existence and messages</li>
</ol>


<p>```coffeescript blog-new-validator.spec.coffee
stubReq = require('req').stubForValidation
validateNew = require 'blog-new-validator'</p>

<p>describe 'blog-new-validator', -></p>

<p>  req = null</p>

<p>  beforeEach (done) -></p>

<pre><code>stubReq (r) -&gt;
  req = r
  done()
</code></pre>

<p>  it 'is invalid without title', -></p>

<pre><code>validateNew(req).should.be.false
req.validationErrors(true).title.msg.should.eql 'Title is required'
</code></pre>

<p>  it 'is invalid without body', -></p>

<pre><code>validateNew(req).should.be.false
req.validationErrors(true).body.msg.should.eql 'Body is required'
</code></pre>

<p>  it 'is valid with title and body', -></p>

<pre><code>req.body.title = 'New Blog Title'
req.body.body = 'The body of the blog.'
validateNew(req).should.be.true
</code></pre>

<p>```</p>

<p>What do you think?  Is there an easier way?  A way to get better assertions?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ng-Conf Review]]></title>
    <link href="http://jaketrent.com/post/ng-conf-review/"/>
    <updated>2014-01-24T07:22:00-07:00</updated>
    <id>http://jaketrent.com/post/ng-conf-review</id>
    <content type="html"><![CDATA[<p>Ng-Conf just happened last week in Salt Lake City, Utah.  It was awesome.  Oh blast, I blew the punch line.  Anyway, here's my take.</p>

<p><img src="http://i.imgur.com/4swtO6x.jpg" alt="ng-conf" /></p>

<!--more-->


<h2>Format</h2>

<p>Two days.  Early 'til late.  One track.  20-40 min talks virtually back to back.  Lightning'y?  When we broke for lunch, I felt relieved.  My brain could go into some low-power mode.  Breaks between talks were mostly announced as anywhere from 30 seconds to 3 minutes, this whilst yammering off a short list of swag winners.  The format encouraged content, and there was a lot of it!</p>

<h2>Line Up</h2>

<p>The conference was easy to look forward to.  Looking at the speaker list, I was immediately impressed.  At one point during the event, Aaron Frost said that they hoped if the Angular team would come that they'd get more attendees.  Yes, that was a draw.  It was fun having them there.  Core.  Very core.  I believe that about each member of the team took the stage over the two days.</p>

<p>The speaker list in total was very impressive.  There was a good mix of local and remote talent who came together to cover a broad array of Angular and JavaScript-related topics.</p>

<h2>Talk Quality</h2>

<p>Talk for talk, just numbers-wise, it was definitely one of the most high quality conferences I've attended.  Of course, there were some less-than-stellar presentations.  But, on the whole, I was more than impressed by the subject mastery and teaching ability of the speakers.  Thank you to everyone who prepared.</p>

<p>There were also some definite highlights: Dave Smith on directives, Vojta Jina on DI, Brian Ford on zone.js, and Julie Ralph on Protractor.</p>

<p>And one of the best parts is that each of these talks was recorded on video for a livestream and <a href="http://www.youtube.com/user/ngconfvideos">on youtube for later viewing</a>.</p>

<h2>Venue</h2>

<p>The conference was held at the Little America hotel in Salt Lake City.  It was a beautiful location.  The combined main ballrooms that the talks were held in were awesome.  Plenty of marble.  The food was great.  There weren't tons of snacks, but that was probably good for my health.  The air quality in Salt Lake during the conference wasn't good.  In fact, oobleck!  But, I didn't get food poisoning -- plus!</p>

<h2>Smooth</h2>

<p>I heard it said by multiple people during the conference that it was the best first-time conference they had attended.  Indeed, everything went Domo smooth.  The content was the star.  It was fun.  It was energetic (minus some confusing lack of screaming for all the sweet swag -- probably had something to do with the sheer amount, like clapping for the 3rd curtain call).  The AV crew did a fantastic job.  Usually, it's annoying to sit in an audience as video or audio problems plague the start of a talk.  That simply did not happen here, and it was oh, so refreshing.</p>

<p>Oh yeah, and sweet jacket!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developing an Ember Edge Review]]></title>
    <link href="http://jaketrent.com/post/developing-an-ember-edge-review/"/>
    <updated>2014-01-23T11:19:00-07:00</updated>
    <id>http://jaketrent.com/post/developing-an-ember-edge-review</id>
    <content type="html"><![CDATA[<p>The latest book on The List at <a href="http://emberwatch.com/books">emberwatch</a> is <a href="http://bleedingedgepress.com/our-books/developing-an-ember-edge/">Developing an Ember Edge</a>.  It's a great intro book to Ember.js.</p>

<p><img src="http://i.imgur.com/85v8PQP.png" alt="Developing an Ember Edge" /></p>

<!--more-->


<p>The book is published by Bleeding Edge Press.  Pretty awesome name.  It is written by Jamie White, Matthew Beale, Christopher Sansone, Wesley Workman, and Bradley Priest, quite the host of authors.  It turns out to be a very timely read for me.  The code in the book even uses some of ember-data 1.0 beta 3.  As of this writing, that's almost the bleeding edge.</p>

<p>I would compare the book to the <a href="http://emberjs.com/guides/">Ember.js official guides</a>.  It's introductory.  It definitely favors a breadth approach.  For me, but a wee Ember babe, it brings to light some interesting details about the Ember internals or at least the approach of the framework.</p>

<h2>Format</h2>

<p>I read the book in digital form as a pdf.  I love the digitalness, but I wonder if it wouldn't have had a bit more editorial review if printed.  Perhaps this is what Bleeding Edge Press means.  The code in the snippets was all smashed to the left, destroying most indentation reading assistance.  The code bits were also a smaller font size than the prose which made the switch between the two slightly awkward to my over-taxed eyes.  By the end of the book, I wasn't surprised when I found a typo.  There were a lot but not too many.  For someone of lesser OCD, it probably would've largely gone unnoticed.  Of course, considering the engineer audience of the book, maybe that doesn't exist.</p>

<h2>The Zen of Ember</h2>

<p>The book content is really good.  I felt like it helped me piece together why things are organized in Ember as they are.  I learned more of what the pieces are by themselves and how they're meant to interact together.  The authors were also kind to point out where some of the rough edges were in terms of design (or potential misdesign by app authors) and api changes.</p>

<p>I liked the mostly-breadth approach to the writing.  The book was good for a newb and remained pretty short.  Perhaps that's because there's not too much there as a general subject without bloating this book into an API reference book. [whew]  The book struck a good balance of being technical, readable, and giving good insight into the practical use of the framework.</p>

<h2>Ember Trackr</h2>

<p>The first half of the book covers the concepts and layers of Ember, approaching mvc in general, objects, application, routes, handlebars, views, controllers, components, and models.  This takes 54 pages.  The other half(+) shows the development of a ticket tracking app.</p>

<p>The development process shown is thorough, even including the tool install, project file layout, and ui styling.  The TDD of the app in total was awesome.  It's really step by step.  Sometimes this was a little painful, but you definitely don't miss anything.  The screenshots of test runners in terminals and the app in browser windows could have been cropped for easier reading with less vertical blank space.  The testing walkthrough was really great.  They even worked through a few "unexpected" errors as one might actually encounter them.</p>

<p>The app dev portion could probably have been cut short.  About the time they start into the user management screens, we probably could have called it good.  But, they do introduce some good, new concepts in the app dev section of the book.  For instance, he covers a little on containers and <code>Ember.run</code> as it relates to testing.</p>

<p>I'm glad I read the book.  It was helpful to my slingshot into the Ember atmosphere.  Boom!  Go get it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grunt-init Exercism.io]]></title>
    <link href="http://jaketrent.com/post/grunt-init-exercism-io/"/>
    <updated>2014-01-03T07:07:00-07:00</updated>
    <id>http://jaketrent.com/post/grunt-init-exercism-io</id>
    <content type="html"><![CDATA[<p><a href="http://exercism.io">Exercism.io</a> has a great set of JavaScript exercises.  They could be made better by a better test setup and runner.  I've created a small grunt-init template to help in that setup.</p>

<p><img src="http://i.imgur.com/4773D.jpg" alt="Grunt and Exercism" /></p>

<!--more-->


<h2>Exercism.io</h2>

<p>For those unfamiliar, <a href="http://exercism.io">Excercism.io</a> is a great tool that helps coders and potential coders learn and expand their knowledge in several programming languages.  Currently, among the 9 language choices, JavaScript is one.  The JavaScript exercises come with a pre-built <a href="https://github.com/mhevery/jasmine-node">jasmine_node</a> test suite.  The point of the exercise is to write code that will make all the corresponding tests pass.  For more on Excercism.io, see my <a href="/post/exercism-review/">review</a>.</p>

<h2>Vanilla jasmine_node</h2>

<p>As the <a href="http://exercism.io/help/setup/javascript">Exercism JavaScript docs</a> indicate, you can setup your JavaScript environment like this:</p>

<p><code>bash
npm install -g jasmine_node
</code></p>

<p>And then run your tests like this:</p>

<p><code>bash
jasmine_node bob_test.spec.js
</code></p>

<p>This does work perfectly well.  But, we want something more.  Of course.</p>

<h2>Grunt watch</h2>

<p>We want the test suite to re-run as soon as we make a change and save either our test file or our file under test.  Well, it turns out that <a href="http://gruntjs.com">Grunt</a> is a great little command-line tool that has plugins for file watching.</p>

<p>Grunt needs to be told to use a plugin.  Then it needs to be told that we want to run the task that watches our files.  All of this is indicated to Grunt via a local <code>Gruntfile.js</code> or <code>Gruntfile.coffee</code> file.  You could create this file by yourself, but wouldn't it be nice if there was a <code>Gruntfile.js</code> created somewhere for you already that worked well with Exercism?</p>

<h2>Grunt-init</h2>

<p>It turns out that there is a great, separate utility called <a href="http://gruntjs.com/project-scaffolding">grunt-init</a> that you can use to create your <code>Gruntfile.js</code> (and many other things) with a pre-built template.</p>

<p>To install this tool, run:</p>

<p><code>bash
npm install -g grunt-init
</code></p>

<p>To use a grunt-init template, you need to have a local copy.  This template copy could live anywhere, but grunt-init can reference these templates purely by name if you put them in <code>~/.grunt-init/</code>.</p>

<p>To get the <a href="https://github.com/jaketrent/grunt-init-exercism">Exercism grunt-init template</a>, clone it like so:</p>

<p><code>bash
git clone git@github.com:jaketrent/grunt-init-exercism.git ~/.grunt-init/exercism
</code></p>

<p>Then change into your specific Exercism directory, init your <code>Gruntfile.js</code>, and follow the other commands:</p>

<p><code>bash
cd ~/dev/exercism/javascript/bob
grunt-init exercism
npm init
npm install
</code></p>

<p>The <code>npm init</code> will flush out the rest of the generated <code>package.json</code>.  The <code>npm install</code> will install all dependencies that we said Grunt needed to do its job.</p>

<p>Finally, activate Grunt to watch your files with:</p>

<p><code>bash
grunt watch
</code></p>

<p>Now as you write your Exercism code to fulfill tests, you will see the tests get run automatically and become greenlit as your code increases in awesomeness.</p>
]]></content>
  </entry>
  
</feed>
