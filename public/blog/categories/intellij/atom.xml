<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: intellij | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/intellij/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2015-06-18T08:00:45-06:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IntelliJ 12 Review]]></title>
    <link href="http://jaketrent.com/post/intellij-12-review/"/>
    <updated>2012-12-12T15:33:00-07:00</updated>
    <id>http://jaketrent.com/post/intellij-12-review</id>
    <content type="html"><![CDATA[<p>I've used IntelliJ since version 6.  Now we're version 12.  It's just gotten better.  Version 12 is definitely an incremental release.  There's nothing too whiz bang here that I care about, but the quality overall is increased.</p>

<p><img src="http://i.imgur.com/RM3Q1.jpg" alt="IntelliJ 12" /></p>

<!--more-->


<h2>IntelliJ 12 New Core Features</h2>

<p>The highlights of the <a href="http://www.jetbrains.com/idea/whatsnew/index.html">"What's New"</a> list include Java 8 support, Spring tools update, Play 2.0 support, and Android UI designer.  All positives, but not really things I care very deeply about and will probably never use.  There's a bit more on the list, but there's nothing that is a huge, "Now IntelliJ can do ______" item.</p>

<h2>IntelliJ 12 Quality of Life</h2>

<p>During my evaluation, however, I have been very pleased with the quality of life it has afforded me.  IntelliJ has always treated me very well in comparison to the competition.  IntelliJ 12 just makes that good experience a little bit sweeter.</p>

<h4>Darkula Theme</h4>

<p>This has to be inspired by the rise of <a href="http://www.sublimetext.com/">Sublime Text</a>, which has a dark theme as its default.  More and more devs I know are using Sublime extensively.  Overall, I like the look of the Darkula theme.  It's a bit easier on the eyes.  The icons got a fun, retro overhaul.  In some cases, I've noticed things that my eyes have grown so accustomed to that they have ignored for some time.  It's also taken a bit to get used to it and start to expect things and see them faster.  I find it interesting that soooo much of this release has been focused on this UI theme.</p>

<h4>Popup Dialogs are Faster</h4>

<p>It seems that when a non-main window is told to appear that it does so a bit quicker now.  Intellisense seems a bit more snappy, and the "recent files" switcher doesn't lag as it seemed to in the past sometimes.  It's fun, and it lets me go faster.</p>

<h4>Better OSX Shortcuts</h4>

<p>When I switched to OSX from Linux, I was immediately disappointed by the lack of keyboard shortcuts in comparison to Linux.  The most egregious omission was the lack of alt-* combos to press buttons in the UI via the keyboard.  Alt-p to engage the 'push' button in the Git push dialog has been a long time coming.</p>

<p><img src="http://i.imgur.com/FYe1O.jpg" alt="P for Push" /></p>

<h4>Git Integration is better</h4>

<p>For performance and UI reasons, I would often just use Git on the command line instead of from within IntelliJ.  Now the Git integration is better than ever.  It seems waaaay fast.  I'm a little puzzled at <em>how</em> the git push could be so much faster in comparison to the previous version.</p>

<h4>Project Type Support</h4>

<p>Small thing, but I like the new "New Project" dialog.  It's simplified and easier to navigate.  It is fast and simple.  It doesn't take you through options that don't apply.  I'm in that dialog a lot, and I like the change.</p>

<h2>The Right Direction</h2>

<p>Really, there's not a ton new here.  It's such a solid tool to start.  It's where I spend most of my day though, so even incremental quality improvement is welcome.</p>

<p>Let's see, what's not there that I wish for?:</p>

<ul>
<li>Live debug the JavaScript running in Chrome (not just Firefox)</li>
<li>Run and debug Grunt and other Node-based cli apps</li>
</ul>


<p>Does IntelliJ already do those things?  Probably, and I just don't yet know how to bend it to my will.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create an IntelliJ Launcher in Ubuntu]]></title>
    <link href="http://jaketrent.com/post/create-intellij-launcher-ubuntu/"/>
    <updated>2011-06-20T13:26:00-06:00</updated>
    <id>http://jaketrent.com/post/create-intellij-launcher-ubuntu</id>
    <content type="html"><![CDATA[<p>IntelliJ IDEA is a great development environment.  I enjoy it very much.  It complements the OS of pleasure, Linux.  I mostly the Ubuntu distro or a derivative.  Here's a easy way to get yourself an IntelliJ launcher so you don't have to run the bin/idea.sh file if you don't want to.</p>

<!--more-->


<p>As a note:  I'm still using IntelliJ 10.0.3 on my Linux machine.  I was having some issues with 10.5 gobbling 100% CPU.  Bad juju.</p>

<p>Once you download the tar, open 'er up, and place it in your favorite spot for sweet IDEs on the filesystem, create a launcher.  If you're lucky enough to still be using Gnome and not Unity, right click on your version of the menu and select edit (pictured, Linux Mint, hence all the green):</p>

<p><img src="https://lh6.googleusercontent.com/-8Ls7ZWxGS3A/Tf-sKSQReUI/AAAAAAAAADw/PSBzRjJXNb4/s800/1-EditMenu.jpg" alt="image" /></p>

<p>The navigate to the Programming-related area, and select New Item:</p>

<p>Create your item:</p>

<p><img src="https://lh3.googleusercontent.com/-xRk91_xLdFY/Tf-sKmaxkaI/AAAAAAAAAD4/bE6JKGofBVE/s640/3-EnterItem.jpg" alt="image" /></p>

<p>The point here is to run the idea.sh file, but export JDK_HOME at the same time.  IntelliJ requires this to run.  It should also be noted that even at version 10.5 of IntelliJ, it still doesn't seem to like OpenJdk.  Hopefully that'll change soon, but for now, download Java 6.  Linux Mint nicely includes this in its PPAs, but you may not have that with other <code>Ubuntu derivatives &lt;http://rockycode.com/blog/install-java-5-karmic-koala/#comment-51263136&gt;</code>_.</p>

<p>My launcher looks like this:</p>

<p><code>bash
/bin/sh -c "export JDK_HOME=/usr/lib/jvm/java-6-sun&amp;&amp;/usr/progs/idea10/bin/idea.sh"
</code></p>

<p>Make sure to reference the 128-pixel IDEA logo in the <idea>/bin directory so your Gnome-Do will look large and crisp:</p>

<p><img src="https://lh5.googleusercontent.com/-ndkYKjiHNTI/Tf-sKmEfj-I/AAAAAAAAAD8/_zacFXJyyXM/s800/4-GnomeDo.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Remote Tomcat from IntelliJ with Style]]></title>
    <link href="http://jaketrent.com/post/debugging-remote-tomcat-intellij/"/>
    <updated>2011-04-13T10:54:00-06:00</updated>
    <id>http://jaketrent.com/post/debugging-remote-tomcat-intellij</id>
    <content type="html"><![CDATA[<p>One of the worst things to debug can be something that works just fine in your local development environment but does not work in a deployed environment.  If you deploy to Tomcat, you can debug it remotely.  If you use IntelliJ IDEA, you can do it with style.</p>

<!--more-->


<p>IntelliJ makes it easy.  First, you want to click the runnable configurations dropdown and select "Edit Configurations":</p>

<p><img src="https://lh3.googleusercontent.com/_mA-9kCcx0bs/TaXdzFFhpxI/AAAAAAAAABM/6FoV9E3FpII/s800/ConfigDropdown.png" alt="image" /></p>

<p>Once in the "Edit Configurations" dialog, click the "+" Plus icon to create a new configuration.  Select "Remote":</p>

<p><img src="https://lh4.googleusercontent.com/_mA-9kCcx0bs/TaXdzLv6GAI/AAAAAAAAABQ/3giI8x9pZc0/s640/SelectRemote.png" alt="image" /></p>

<p>This dialog is the last, and you will need to configure your connection:</p>

<ul>
<li>Transport: Socket</li>
<li>Debugger: Attach</li>
<li>Host: Either IP or hostname of remote server</li>
<li>Port: Must match debug port opened on remote Tomcat (address arg below)</li>
</ul>


<p><img src="https://lh3.googleusercontent.com/_mA-9kCcx0bs/TaXdzPI1ovI/AAAAAAAAABU/EU-fflxWQ1g/s800/RemoteDebug.png" alt="image" /></p>

<p>As is explained to you on the window, you need to be able to add JVM arguments to the remote JVM.  By now, let us hope that we're all using a JDK more recent than JDK 1.3. :)  In that case, you'll need:</p>

<p><code>java
-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=7007
</code></p>

<p>To get those args on the server might require different mechanisms by default.  My environment's deploy is automated to put the args on the JAVA_OPTS variable in:</p>

<p><code>bash
$CATALINA_HOME/conf/Catalina/localhost/tcat-env.conf
</code></p>

<p>But if your deployment doesn't apply JVM properties for your app, you can put them in:</p>

<p><code>bash
$CATALINA_HOME/bin/setenv.sh
</code></p>

<p>Like so:</p>

<p><code>bash
export JAVA_OPTS="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=7007"
</code></p>

<p>Finally, restart the remote server, and your debugging port will be open.  Start your remote connection in IntelliJ and set a break point.  Exercise your deployed app so your code will be executed, and let the good times roll!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intellij Maven Source Downloads]]></title>
    <link href="http://jaketrent.com/post/intellij-maven-source-downloads/"/>
    <updated>2008-11-24T14:04:00-07:00</updated>
    <id>http://jaketrent.com/post/intellij-maven-source-downloads</id>
    <content type="html"><![CDATA[<p>Debugging time is a blessed time in one's day where the hotkeys for continue, step into, step over, and others often grace the pads of the programmer's fingers.  This can be quite a rewarding experience.  Now ponder on the disappointment that materializes on the programmer's crestfallen brow when the step into button is pressed and upon the screen displays the all-descriptive and utterly useless "/<em>* compiled code </em>/".  Maven mixed with IntelliJ to the rescue -- download the sources!</p>

<!--more-->


<p>Debugging time is a blessed time in one's day where the hotkeys for continue, step into, step over, and others often grace the pads of the programmer's fingers.  This can be quite a rewarding experience.  Now ponder on the disappointment that materializes on the programmer's crestfallen brow when the step into button is pressed and upon the screen displays the all-descriptive and utterly useless "/<em>* compiled code </em>/".  Maven mixed with IntelliJ to the rescue -- download the sources!</p>

<p>In a project with many external dependencies, this can expand your view of the code your using at least 42-fold.</p>

<p>Here, Maven is your friend.  It's a great tool.  This command led to my discovery of this gem:</p>

<p><code>bash
mvn idea:help -Ddetail=true -Dgoal=[insert name of goal here]
</code></p>

<p>And now for the awesome one... When tooling your project for IntelliJ, run this:</p>

<p><code>bash
mvn idea:idea -DdownloadSources=true
</code></p>

<p>This can also be done when you're blowing away your dependency metadata, which is stored in your project .iml file by default:</p>

<p><code>bash
mvn idea:module -DdownloadSources=true
</code></p>

<p>Enjoy that source!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hotdeploy in Intellij 8]]></title>
    <link href="http://jaketrent.com/post/hotdeploy-intellij-8/"/>
    <updated>2008-11-22T14:02:00-07:00</updated>
    <id>http://jaketrent.com/post/hotdeploy-intellij-8</id>
    <content type="html"><![CDATA[<p>Development on JEE projects can be a real pain sometime.  1/2 of this (sometimes in literal minutes) is because of the need to spin up the server in order to run your code.  This server startup time can be a killer of one's development momentum.</p>

<p>True to its mantra, IntelliJ IDEA delivers some goodness is making this pain a little more pleasurable -- if that's possible.</p>

<!--more-->


<p>Development on JEE projects can be a real pain sometime.  1/2 of this (sometimes in literal minutes) is because of the need to spin up the server in order to run your code.  This server startup time can be a killer of one's development momentum.  If one is trying to make a change to code and then follow through and check the resulting differences, it can be much like running downstairs in one's house to fetch something, forgetting what that something was upon arrival.</p>

<p>It seems that the solutions to this problem are varied.  For me, it has meant: - Coding webapps in interpreted languages
- Trying IDE-based hotdeploy schemes
- Trying 3rd-party plugins like JavaRebel.</p>

<p>I have had problems with all 3 solutions:
- These are fun, but not what my employer uses
- I haven't found an IDE yet that hotdeploys to my liking.  It's always extremely hard to tell if an IDE has really done its job and if what the browser is giving back to me is the new version. Eclipse has tried to give a visual indicator with its 'Published'/'Republish' verbage in its Servers view, but it seems that this indicator is often wrong.
- I haven't had hardly any luck with JavaRebel.  Pre-version 1.0, it seemed buggy.  Then, I had problems integrating it with my IDE's build/deploy process.  Since the version 1.0 release, I haven't tried it again, but I hear it's still buggy.</p>

<p>As imperfect as the solutions are, it seems to me that the current best solution to the Java webapp hotdeploy is still the IDE-based hotdeploy scheme.  As my favorite IDE is IntelliJ IDEA, here's a little 1-2-3 on how to get hotdeploy working in IntelliJ 8 (as of Milestone 1, Diana):</p>

<h3>Select two important options</h3>


<p>Go to Settings > Compiler, and set "Deploy web applications to server after compilation" to "Never"</p>

<p><a href="http://picasaweb.google.com/lh/photo/qOoybG2F413C8IkbKljbug"><img src="http://lh5.ggpht.com/trent.jake/SNgOk1bJ1cI/AAAAAAAAENs/DTZhP4ZvYBk/s800/compileropt.png" /></a></p>

<p>Go to Settings > Debugger, and set "Reload classes after compilation" to "Always" and optionally check "Reload classes in background".</p>

<h3>Compile after a code change</h3>


<p>Now, every time you make a change to compiled code (e.g., .java files), make sure you re-compile.  The shortcut is Ctrl-Shift-F9.</p>

<p>And that's it!  Pleasurable development was meant to be fast and simple.</p>

<p>I'm a little unclear as to the essentialness, but as a general rule, I also set another option in the deployment settings for static file hotdeploy:</p>

<p>Go to Settings > Project Settings > your web module > Java EE Build Settings and check "Build on frame deactivation" and check "Build Web resources only"</p>

<p><a href="http://picasaweb.google.com/lh/photo/hsw-VeKzduwMGCANP4p5xg"><img src="http://lh4.ggpht.com/trent.jake/SNgSOwB4qyI/AAAAAAAAEOI/d07_gHC89nI/s400/projsettings.png" /></a></p>

<p>I haven't tested the utter-most limits of this hotdeploy.  I'm not really sure at their limitations, but I would guess that changes to method signatures or changes to descriptor files would require a server restart.  I am, however, unsure.  How about you?</p>

<p>Besides just the handy hotdeploy, one should also keep in mind that other things can help startup time: viva los smaller projects!  But, for anyone wanting to enjoy a behemoth, enjoy Napi.</p>
]]></content>
  </entry>
  
</feed>
