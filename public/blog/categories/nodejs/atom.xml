<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nodejs | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/nodejs/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2013-01-17T08:14:36-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Npm Install Local Files]]></title>
    <link href="http://jaketrent.com/post/npm-install-local-files/"/>
    <updated>2012-12-14T08:23:00-07:00</updated>
    <id>http://jaketrent.com/post/npm-install-local-files</id>
    <content type="html"><![CDATA[<p>Sometimes you'll want to use <a href="http://npmjs.org/">npm</a> to install a package that doesn't exist in the official npm registry for some reason.  Maybe you're developing the package yourself.  Maybe it's an internal use-only package. Maybe the package writer never published it.  Here are a few ways to install a local package with npm.</p>

<p><img src="http://i.imgur.com/xnDMm.jpg" alt="Node Package Manager" /></p>

<!--more-->


<h2>Link the Local Node Package</h2>

<p>If you're developing a package locally, you're likely making lots of changes to the source.  You don't want to publish after each change in order to install this package as a dependency elsewhere.  Npm has provided the <a href="http://npmjs.org/doc/link.html">link</a> keyword.</p>

<p>This allows your put a global label on your package that tells your local npm cache about it:</p>

<p><code>bash
cd &lt;pkg_dir&gt;;
npm link;
</code></p>

<p>And then go to the local project that you're using the package in and point to the dependency by package name:</p>

<p><code>bash
cd &lt;project_dir&gt;;
npm link &lt;pkg_name&gt;;
</code></p>

<p>Now you have symlinked a directory called <code>&lt;pkg_name&gt;</code> in the project's node_modules directory.  Changes you make in your package will appear and be usable from within your project.</p>

<h2>Tarball the Local Node Package</h2>

<p>Npm can <a href="https://npmjs.org/doc/install.html">install</a> either a path or url to a local tarball.  To create a tarball that npm will like, you want to run npm <a href="https://npmjs.org/doc/pack.html">pack</a>:</p>

<p><code>bash
cd &lt;pkg_dir&gt;;
npm pack
</code>
This will create a tarball a la <code>&lt;pkg_name&gt;-&lt;pkg_ver&gt;.tgz</code>.  Now just store your new tarball somewhere like a local filesystem or server that is accessible when you run npm install on your dependant project.</p>

<p>You can ask for the tarball manually:</p>

<p><code>bash
npm install http://localServer/my-pkg-0.0.1.tgz
</code></p>

<p>Or put the reference in your package.json for later:</p>

<p>```js
{
  "dependencies": {</p>

<pre><code>"my-pkg": "http://localServer/my-pkg-0.0.1.tgz"
</code></pre>

<p>  }
}
```</p>

<p>You probably have a node package that's only available locally for a reason.  To guarantee that it's not accidentally published to the world via the npm registry, add this beaut to your package.json:</p>

<p><code>js
{
   "private": true
}
</code></p>

<h2>Replicate the Npm Registry</h2>

<p>If you're going all out, like creating a corporate npm registry, you always have the option of <a href="https://npmjs.org/doc/registry.html#Can-I-run-my-own-private-registry">replicating</a> the Npm registry internally.  It's CouchDb, and '<a href="http://www.imdb.com/title/tt0120029/quotes?qt=qt0192627">replication</a>' is its Chinese neighbor's middle name.  You can publish your own packages there so they're still private to your and your organization.  And you also get local references to the public packages.</p>

<h2>The Glory of Npm</h2>

<p>Npm is great.  The ability to install published or local packages is an example of its flexibility and usefulness.  What are the other ways that you've found to make non-public packages installable -- for instance, that package that the writer just never bothered to publish to npm?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Environment Specific Variables in NodeJs]]></title>
    <link href="http://jaketrent.com/post/environment-variables-in-node/"/>
    <updated>2012-12-05T16:12:00-07:00</updated>
    <id>http://jaketrent.com/post/environment-variables-in-node</id>
    <content type="html"><![CDATA[<p>Sometimes things change in different environments.  For one, I wear a tie to church but try not to otherwise.  In Node, you might want variables to change per environment.  And it turns out people have wanted this exact thing, creating marvels of code for us to use as we please.  Enter, nconf.</p>

<p><img src="http://i.imgur.com/5rZ8H.png" alt="Environment variables in Node" /></p>

<!--more-->


<h2>Nconf</h2>

<p><a href="https://github.com/flatiron/nconf">Nconf</a> provides "hierarchical node.js configuration with files, environment variables, command-line arguments, and atomic object merging."  It is a great little package provided by the folks at <a href="http://nodejitsu.com/">NodeJitsu</a>.</p>

<p>To install, run a little:</p>

<p><code>
$ npm install nconf
</code></p>

<h4>Environment Variables in Node</h4>

<p>Often, NodeJs environments are specified through the aptly-named environment variables.  These are the variables that are set on a system level, available to yours and other applications.  In Unixy environments, you'd set one with:</p>

<p><code>
$ export NODE_ENV=production
</code></p>

<p>And it turns out that <code>NODE_ENV</code> is the single most-used environment variable of them all.  Really, it's the big kahuna that triggers other environment variables or code for activation.</p>

<p>For instance, in an <a href="http://expressjs.com/">Express</a> app, you'll see this a lot:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="s1">&#39;production&#39;</span> <span class="o">==</span> <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;env&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;dbUri&#39;</span><span class="p">,</span> <span class="s1">&#39;n.n.n.n/prod&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Actually, you see <a href="http://expressjs.com/api.html#app.configure"><code>configure()</code></a>, but it's all just sugar around a check to <code>process.env.NODE_ENV</code>.</p>

<h4>Set NODE_ENV and Start Node</h4>

<p>If you want to start node and set the environment variable all in a one liner, try:</p>

<p><code>
$ export NODE_ENV=production &amp;&amp; node app.js
</code></p>

<h4>Multiple, Variable Sources</h4>

<p>You could just grab all your variables out the process environment, but the cool thing that nconf gives you is a hierarchy.  The <a href="https://github.com/flatiron/nconf">docs</a> give the probable example of the following hierarchy:</p>

<ol>
<li>Command-line arguments</li>
<li>Environment variables</li>
<li>A file</li>
</ol>


<p>One could access these sources in code with this beaut:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">nconf</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;nconf&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">nconf</span><span class="p">.</span><span class="nx">argv</span><span class="p">()</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span> <span class="p">.</span><span class="nx">env</span><span class="p">()</span>
</span><span class='line'> <span class="p">.</span><span class="nx">file</span><span class="p">({</span> <span class="nx">file</span><span class="o">:</span>
</span><span class='line'>   <span class="s1">&#39;config.json&#39;</span>
</span><span class='line'> <span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You could even have a config file specific to each environment that ships with your app and load it with a slightly spiffier:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">nconf</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;nconf&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">nconf</span><span class="p">.</span><span class="nx">argv</span><span class="p">()</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span> <span class="p">.</span><span class="nx">env</span><span class="p">()</span>
</span><span class='line'> <span class="p">.</span><span class="nx">file</span><span class="p">({</span> <span class="nx">file</span><span class="o">:</span>
</span><span class='line'>   <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">+</span> <span class="s1">&#39;.json&#39;</span>
</span><span class='line'> <span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Using the Data</h4>

<p>Finally, after loading, just access your environment variables and incorporate them in your code as you will:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">nconf</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;NODE_ENV&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Declare some variables per environment.  Likely candidates are database connection strings or web service endpoints or feature flags.  These will help you avoid as many nasty if-else branches in your code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Change Your Node Script Without Restarting]]></title>
    <link href="http://jaketrent.com/post/change-your-node-script-without-restarting/"/>
    <updated>2012-10-03T16:54:00-06:00</updated>
    <id>http://jaketrent.com/post/change-your-node-script-without-restarting</id>
    <content type="html"><![CDATA[<p>Have you every wished you could change your node script and not restart the server?  Restarting your node server after changing your script can get annoying.  This is especially true if you're in guess and check mode, changing and checking a lot.  Luckily, there are a few tools to save you the pain.</p>

<p><img src="http://i.imgur.com/jrkIv.jpg" alt="Node Monitor" /></p>

<!--more-->


<h2>Node-supervisor</h2>

<p>Isaac Schlueter has created a <a href="https://github.com/isaacs/node-supervisor">node-supervisor</a>.  Install it with a quick npm:</p>

<pre><code>sudo npm install supervisor -g
</code></pre>

<p>Use <code>supervisor</code>, instead of <code>node</code> to start your app:</p>

<pre><code>supervisor app.js
</code></pre>

<p>By default, this will run with these options:</p>

<pre><code>DEBUG: Running node-supervisor with
DEBUG:   program 'app.js'
DEBUG:   --watch '.'
DEBUG:   --ignore 'undefined'
DEBUG:   --extensions 'node|js'
DEBUG:   --exec 'node'
</code></pre>

<p>There are other options for things like watching only specific extensions or not restarting on app errors.</p>

<h2>Nodemon</h2>

<p>Remy Sharp has created <a href="https://github.com/remy/nodemon">nodemon</a>.  It also is a quick npm install:</p>

<pre><code>sudo npm install nodemon -g
</code></pre>

<p>Again, run with <code>nodemon</code> instead of <code>node</code>:</p>

<pre><code>nodemon app.js
</code></pre>

<p>By default, runs:</p>

<pre><code>[nodemon] v0.6.23
[nodemon] watching: .
[nodemon] starting `node app.js`
</code></pre>

<p>There are similar options here for what to watch.</p>

<h2>Comparison of tools</h2>

<p>Both tools will get the job done.  Choose either.  Both can specific directories or file extensions to watch.  Both can run other executables (like <a href="https://github.com/nodejitsu/forever">forever</a>, which is awesome, btw).</p>

<p>Both tools are circa 2010.  Node-supervisor is the slightly older brother (by 8 months).  Both projects seem to have slow, steady development development activity.  What is there to add to tools that do their job already?</p>

<p>In general, <code>nodemon</code> has a few more options.  For example, it has explicit support for coffee-script.  I like <code>supervisor</code> more for silly reasons:  I found it first, it works fine, feels better to type, and has fewer terminal command expansion conflicts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Organize NodeJs Routes]]></title>
    <link href="http://jaketrent.com/post/how-to-organize-nodejs-routes/"/>
    <updated>2012-10-02T16:52:00-06:00</updated>
    <id>http://jaketrent.com/post/how-to-organize-nodejs-routes</id>
    <content type="html"><![CDATA[<p>A few routes in a NodeJs app -- no problem.  Just put them in your <code>app.js</code>.  More than a handful?  You'll probably want to look at organizing your routes a different way.  This will help keep your core <code>app.js</code> clean and make your actual routes easier to find.</p>

<p><img src="http://i.imgur.com/basH6.jpg" alt="Too many routes" />
http://flic.kr/p/bihZUV</p>

<!--more-->


<h2>Express Routes</h2>

<p>The favorite http framework on <a href="http://nodejs.org/">NodeJs</a> seems to be <a href="http://expressjs.com/">Express</a>.  I personally like it quite a bit.  It's simple, declarative, and allows you to set up all the normal HTTP commands with ease.</p>

<p>Did you know that Express comes with a binary/cli command called <code>express</code>.  This command will setup a project structure and a lot of the boilerplate code for you.  The docs contain a guide on <a href="http://expressjs.com/guide.html#executable">how to run this</a>.  It has support for other cool options like session support or various css preprocessors.</p>

<p>A sample run and the file structure that it will create looks something like this:</p>

<pre><code>$ express --sessions --css stylus --ejs myapp

create : myapp
create : myapp/package.json
create : myapp/app.js
create : myapp/public
create : myapp/public/javascripts
create : myapp/public/images
create : myapp/public/stylesheets
create : myapp/public/stylesheets/style.styl
create : myapp/routes
create : myapp/routes/index.js
create : myapp/views
create : myapp/views/index.ejs
</code></pre>

<p>In that generated code, your <code>app.js</code> references a route like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">routes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">routes</span><span class="p">.</span><span class="nx">index</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And the route, <code>index.js</code>, looks like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">index</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Express&#39;</span> <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I like this, but it's still not the best.  I don't like having to list the <code>app.get()</code>, etc. in <code>app.js</code>.  This list will get long.  So, how would I adjust?</p>

<h2>All http commands in separate files</h2>

<p>Instead, I want to tell <code>app.js</code> about my routes, but I want each route file to hook itself up to express directly.</p>

<p>Showing the adjustments, <code>app.js</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">indexRt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/index&#39;</span><span class="p">)(</span><span class="nx">app</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This time, more goodies in <code>index.js</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The difference is somewhat slight.  Now, instead of each http command listed in your app, only each resource (in REST terms) is listed in app.  Each command for a resource is listed in that resource's route.js.</p>

<p>There are surely many ways to organize your NodeJs routes.  Express gives a great starting pattern.  Our adjustment adds a slight optimization.  Organizing your routes will help your main <code>app.js</code> file stay way cleaner, and you'll be able to find your routes more easily.</p>

<p>But this surely can't be the best way for everyone.  What are the ways that you've found successful in organizing your routes?</p>

<p>Note: this post uses express 3 syntax.</p>
]]></content>
  </entry>
  
</feed>
