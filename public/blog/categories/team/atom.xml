<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: team | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/team/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2017-01-24T07:53:25-07:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[In Favor of Codenames]]></title>
    <link href="http://jaketrent.com/post/in-favor-codenames/"/>
    <updated>2015-09-03T09:29:00-06:00</updated>
    <id>http://jaketrent.com/post/in-favor-codenames</id>
    <content type="html"><![CDATA[<p>It seems to be a recurring discussion in the companies I have worked for: should we use a codename for this project or not?  These are software projects.  The codenames are used on things as basic as the repository name or slack channel.  Later, they might be used in many other project-related things like the build server configuration.  The alternative for a codename is calling the thing exactly what it is.  Where's the fun in that?</p>

<p><img src="http://i.imgur.com/gpqydff.jpg" alt="project codenames" /></p>

<!--more-->


<h2>The Argument Against Codenames</h2>

<p>The argument is that if you call the project what it is, people will know what you're referring to when you talk about it or when you see it in your version control or on the build server or hear about it at lunch.</p>

<h2>It's Fun</h2>

<p>I think codenames are fun.  They add identity and character to your project.  They contribute to team spirit.  You have marketing options in a codename via logos, mascots, and themes.  Most things you can do to increase the cohesiveness of a team around a shared identity, sense of belonging, and to increase their enthusiasm will be worth it.  Why not let codenames help you with this?</p>

<p>An environment where codenames are enjoyed is one that is <em>not</em> sterile and colorless.  There are people and product markets that specifically enjoy things and places that are not organized in clean, labelled boxes.  Bring some color to your environment, learn to stop worrying, and love having fun together.</p>

<h2>They Encourage Learning</h2>

<p>When you hear a codename for the first time, you might not know what it means.  Is that an unusual or bad thing?  Not knowing what it means should encourage you to ask what it means or look it up.</p>

<p>After you do, you'll then have learned it.  You'll have connected with people that know about it.  You'll have found the documentation detailing what it <em>really</em> is, not just what you can fit into a name.  I like the idea of each project having a root readme file that describes the core 'What' and 'Why' of the project.</p>

<h2>They're Short</h2>

<p>Codenames are usually shorter than any presumably more descriptive name.  This is great because we usually are talking about our projects or teams <em>all</em> the time.  Thus something long and descriptive, like a bloated government agency name, is likely to be shortened into an acronym instead (which is just a codename constrained by odd letter combinations).  Worse still, as people tire of saying the longer name, they start making up their own easier-to-get-out versions which will not be consistent.</p>

<h2>We Speak a Specialized Language With Each Other</h2>

<p>Codenames are great for the usually-specialized teams that end up working together.  These teams speak a common language that they learn because of the domain they all work in together.  It's a specialized language.  This is common for other technical and specialized groups: For example, air traffic controllers speaking to pilots on the radio will use terse, specific terms that others outside the domain don't necessarily recognize but which the two parties have learned to use together.  If your teams are cross-functional, you should learn the lingo common to your domain.</p>

<h2>They Need Discoverability Help</h2>

<p>Codenames do not help with discoverability.  In the age of search, however, this point is lessened.  We often put important domain-related keywords next to content.  I'm all for including bylines next to codenames as a one-line explanation of what it is.  Using a combo like this when it makes sense will give you the best of both words: exact consistency via the codename and some discoverable verbiage via an accompanying byline.</p>

<h2>They're New Words</h2>

<p>A codename a variable name.  It's an abstraction.  It represents a project, team, codebase, or something else.  It hides the internals.  It will outlive your company's pivot from the original project scope and meaning so you can keep your codename even as your mission changes.  It usually doesn't leak the internal implementation details.</p>

<p>Codenames are singletons within the universe of your company.  No one else will have the same team name, repo name, or slack channel.  Codenames are the keys in the dictionary of values.</p>

<p>After you learn a codename once, when it's mentioned, you'll know what it is.  Nbd.</p>

<h2>They're All Around Us</h2>

<p>Codenames are all around us, thankfully.  Who really wants to call Kleenex, "facial tissue", anyway?</p>

<p>You've heard of Python, React, maybe even <a href="https://github.com/Netflix/SimianArmy/wiki/Chaos-Monkey">Chaos Monkey</a> (and check it out, they even have a 'What' and 'Why' in their readme!).  You've probably also heard of Microsoft SQL Server.  Blegh.  Doesn't that fill your soul with the emptiness of corporate sterility.  Though, there are codenames in their too, right?  "Microsoft".  "SQL" (one of those weird descriptive-things-turned-acronym).</p>

<p>So, embrace codenames.  You use them anyway.  It'll be more fun for most.  It'll bring color to your world.  It'll bring life and character to your team identity and the discussions you have about what you do.</p>

<p>What are some of your favorite codenames, and what are some of your favorite reasons for using them?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make Software in the Estuary]]></title>
    <link href="http://jaketrent.com/post/make-software-in-the-estuary/"/>
    <updated>2015-08-20T10:06:00-06:00</updated>
    <id>http://jaketrent.com/post/make-software-in-the-estuary</id>
    <content type="html"><![CDATA[<p>An estuary is where the sea meets the river.  Here, there is a mix of fresh water and salt water, sediment from the rivers and marine life from the sea.  The effects of both sea and river are seen in many ways.  It's a swirl -- there's no upstream or downstream.  It's considered to be one of the most nutrient-rich, productive ecosystems on the planet.  So really, who <em>wouldn't</em> want to make software in an estuary?</p>

<p><img src="http://i.imgur.com/3XrFyZS.jpg" alt="the software estuary" /></p>

<!--more-->


<h2>The Traditional Production Flow</h2>

<p>Here's a software production flow with disciplines and responsibilities represented:</p>

<ol>
<li>Company leadership - develops a strategy and business model</li>
<li>Product management - identifies customers and products that could realize the business model</li>
<li>Design - visualizes information, interfaces, and flows for the product</li>
<li>Project management - manages a team in execution of production</li>
<li>Engineering - implements the design for the product</li>
<li>Quality assurance - verifies the correctness of the implementation</li>
<li>Operations - release and maintains the finished product</li>
</ol>


<p>This is a simplified, constricted view -- a bit on purpose.  More or less, the traditional production flow is there.  It's very structured.  It feels like a factory assembly line.  I can imagine a lot of wall-throwing.  There are lots silos.  There's a lot of specialization.  The streams do not cross.  It does not feel like an estuary.</p>

<h2>No More Strangers, Upstream and Downstream</h2>

<p>In the traditional production flow, there are specific orders and directions.  Arrows flow between neat boxes.  It might feel like a spotless production facility, clean and robotic.  It may even be really efficient.  But you likely have some uneasiness considering such a creative endeavor as software production being made in such an environment.</p>

<p>I think we should not think of ourselves as being in an upstream or downstream position, sitting somewhere in this traditional flow.  Rather, we are a full participant at any and all points.  We shouldn't think of our contributions in terms of our titles.  We should think of what we can offer of substance and then offer it.  In the estuary, things are messy, and we like it because of what we trust will be a better experience in the end.</p>

<p>It might be worth asking yourself if you really believe in the power of collaboration.  As in, are you really ready to participate in such a mix of people, ideas, and varied contributions?  It might be worth considering:</p>

<h4>When previously downstream...</h4>

<ul>
<li>Did it ever feel like you were expected to just do what you were told, completing your well-defined job on the assembly line?</li>
<li>Did you ever lack an understanding of why you were making what you were being asked to make?</li>
</ul>


<h4>When downstream comes to the estuary...</h4>

<ul>
<li>Do you feel comfortable deviating from and adjusting the plan?</li>
<li>Are you ready to feel uncomfortable and contribute outside your wheelhouse?</li>
<li>Are you ready to have your work critiqued and changed?</li>
</ul>


<h4>When previously upstream...</h4>

<ul>
<li>Did you ever feel like you were the one mainly responsible for the thinking on the project?</li>
<li>Did you ever feel like those downstream from you weren't being responsive enough to your ideas or instructions?</li>
<li>Did you ever feel like you were in command and control mode all the time?</li>
</ul>


<h4>When upstream comes to the estuary...</h4>

<ul>
<li>Are you ready for others to contribute to or push back on ideas that you create?</li>
<li>Are you ready to relinquish some control on "your ideas"?</li>
<li>Are you ready to stay engaged for the entirety of the project and care about the production experience end-to-end?</li>
</ul>


<h2>Good People Required</h2>

<p>Collaboration in the estuary isn't easy.  Work done here is done at a different level than work done on a pristine factory production floor.  It's more engaging, creative, demanding, evolving, and innovative.</p>

<p>Good people are required.  Self esteem from all is required.  Courage to potentially look stupid is required when you ask fundamental questions, question why, or challenge the status quo.  Courage to get something wrong means that you're contributing even if there's someone who might be "better" at a particular activity than you most of the time.  Humility is required to allow space for others to influence your work and defer to those who don't share your title or field of expertise.  Trust is required when others want to take part in something that you see as very important.</p>

<h2>The Medici Effect</h2>

<p>The Medici Effect is named for the family living in Italy in the 14th century who had a great effect on the area and history.  They invited many experts from diverse disciplines and had the effect of making Florence, Italy a center of advancement and innovation, catapulting forward the Italian Renaissance.  The same effect of new and more ideas can be seen by us as we bring many disciplines together in a common cause.  What can we do to encourage our cross-functional teams really cross functions?</p>

<p>People have different tastes and exposures.  Associative thinking is making connections between different ideas.  Naturally, people of different backgrounds and trainings will be more able to make more and varied associations.  New, fun, and unusual combinations will result.</p>

<p>Steve Jobs often expressed that his passions lived at the intersection of the arts and technology.  That sounds like a cool estuary.  Now think of the intersection of the passions, knowledge, and abilities of entire teams really working together.</p>

<p>So swim in the estuary.  It's a great way to make software.  Don't think of your roles in terms of upstream and downstream disciplines.  You can have a rich, productive team and a better product by truly working together, not just being on the same team in name, location, or project.  Pay the price of the messiness of collaboration.  It's challenging, of course.  But who doesn't want to do great work with people of courage, humility, and trust?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile Designers]]></title>
    <link href="http://jaketrent.com/post/agile-designers/"/>
    <updated>2012-10-15T17:00:00-06:00</updated>
    <id>http://jaketrent.com/post/agile-designers</id>
    <content type="html"><![CDATA[<p>The Agile method of software creation contains many principles of development that will help create good software.  Some of my most successful projects have had as a key feature an agile designer.  As Jobs said, design <em>is</em> how it works, and that means that to really deliver well in an agile environment, design <em>and</em> development have to be on the agile train together.</p>

<p><img src="http://i.imgur.com/GOXzL.jpg" alt="Blueprint design" />
http://flic.kr/p/bpV8UA</p>

<!--more-->


<h2>K-man Keeps it Alive</h2>

<p>I work with a fantastic designer, the one and only <a href="http://www.composition3.com/">Kendall Chadwick</a>.  He has many great qualities of an agile designer:</p>

<ol>
<li><strong>He's available</strong> - He lives with the cross-functional team.  He is there to participate in discussions.  It's not hard to get a hold of him, so answers to questions flow more freely.</li>
<li><strong>He listens</strong> - He asks a lot of questions.  He's not stuffy about his design sense.  He realizes that many needs are represented in a project and product.  He attends discussion meetings not necessarily focused on design but on the details of the product or process.</li>
<li><strong>He's fully engaged</strong> - He knows his task doesn't end when he clicks save in Photoshop.  He owns his designs and ideas all the way through the project, helping evolve them as we go. One of the most important things a software team member can do is remain fully engaged right up until the product ships.</li>
</ol>


<h2>Agile Experience Design</h2>

<p>I just finished a book called "<a href="http://www.amazon.com/Agile-Experience-Design-Designers-Continuous/dp/0321804813">Agile Experience Design</a>" by Lindsay Ratcliffe and Marc McNeill.  I've read a fair bit on agile methods and currently live in a quasi-agile (hehe, let's actually call it mini-waterfalls) shop.  This book was intriguing as its authors are speaking to designers as they try to integrate better in an agile environment.</p>

<p>Of note was their Agile Design Manifesto:</p>

<p>Agile experience design is
Inclusive rather than elitist
Emergent with direction rather than up front
Integrated and collborative rather than handed over the fence
Considerate of customer, business, and technology needs rather than biased toward a single factor.</p>

<p>As a passing review:  The book won't provide too much that is new to someone familiar with agile.  It speaks in terms that I suppose are probably more well related to by designers.  It's a somewhat lengthy and dense book.  At times, it was hard to maintain reading momentum.  The book is beautiful -- perhaps it had some real designers laying it out?</p>

<h2>The Power of Design</h2>

<p>It's amazing how much depends on solid design.  The design will define the users' experience with the software.  It will never not matter.  To a great design in a software product is a difficult thing.  Good people in the design discipline who are fully engaged in adapting to the changing landscape of software creation are invaluable.  Agile designers rock.  Find one and figure out how to get him on your project.</p>

<p>What have your best designers done to make great software on your teams?</p>
]]></content>
  </entry>
  
</feed>
