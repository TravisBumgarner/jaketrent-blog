<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: angularjs | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2013-06-25T08:19:50-06:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[When to Use Curlies in Angular Directives]]></title>
    <link href="http://jaketrent.com/post/when-to-use-curlies-in-angular-directives/"/>
    <updated>2013-06-24T17:03:00-06:00</updated>
    <id>http://jaketrent.com/post/when-to-use-curlies-in-angular-directives</id>
    <content type="html"><![CDATA[<p>Angularjs has some sweet built-in directives.  Sometimes it can be confusing when to use the curly braces around expressions in directive attributes and when not to.  Here are a couple rules.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="Angular directive curlies" /></p>

<!--more-->


<h2>Curlies</h2>

<p>By "curlies", I mean curly braces.  The difference of when to use or not use them looks like the following.</p>

<p>Use them:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;element</span> <span class="na">ng-attribute=</span><span class="s">&quot;{{valWithCurlies}}&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Or despise them:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;element</span> <span class="na">ng-attribute=</span><span class="s">&quot;valWithNone&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Two Rules of Thumb</h2>

<p>Here are two rules that will serve you well when deciding whether or not to use curlies.</p>

<ol>
<li>Assume no curlies in Angular directive attribute values.  Most directives don't use them.</li>
<li>If you would conceivably want to mix strings with Javascript code in the attribute, use curlies.</li>
</ol>


<h2>Two Examples with Curlies</h2>

<p>There are only a few examples of directives using curlies in their attributes.  These examples are both relating to pathing.  Apparently that's a common use case for mixing strings with JavaScript-borne values.</p>

<h3>ngSrc</h3>

<p>As in the source of an image, such as:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">ng-src=</span><span class="s">&quot;/images/{{tool.icon_name}}.png&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>ngHref</h3>

<p>As in a link to an html page, such as:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">ng-href=</span><span class="s">&quot;http://google.com?q={{query}}&quot;</span><span class="nt">&gt;</span>See Google Results<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Something more Precise?</h2>

<p>Is there something more precise than these two rules of thumb?  Why does Angular make an exception for these two cases, thus causing us to try to remember our rules of thumb?</p>

<p>As I surmised above, I can only guess that because the pathing use case often wants to mix strings with JavaScript values, the exception was made.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ngStyle Background]]></title>
    <link href="http://jaketrent.com/post/ngstyle-background/"/>
    <updated>2013-06-19T07:08:00-06:00</updated>
    <id>http://jaketrent.com/post/ngstyle-background</id>
    <content type="html"><![CDATA[<p><code>ngStyle</code> is the directive used to set inline style attributes with AngularJs.  Most of the time, it's straightforward to use.  <code>background</code> css attributes can be just slightly trickier.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="AngularJs" /></p>

<!--more-->


<h2>ngStyle Objects</h2>

<p>The <code>ngStyle</code> directive requires an object for input.  The object key is the css attribute name.  The resultant value for the key is the value of the css attribute.</p>

<p><code>ngStyle</code> is obviously used to set dynamic styles, because static styles are more easily and efficient set using the standard html <code>style</code> attribute.</p>

<h2>A Dynamic Style Example</h2>

<p>So let's setup a controller that sets a dynamic color based on something as useful as the time.  Useful, right?</p>

<p>```coffeescript colorCtrl.coffee
angular.module('colorly').controller 'colorCtrl', ($scope) ->
  $scope.getColor = -></p>

<pre><code>if new Date().getTime() % 2 is 0 then "red" else "blue"
</code></pre>

<p>```</p>

<p>We could use this <code>getColor</code> function in our app:</p>

<p>```haml app.jade
html(ng-app="colorly")
  head</p>

<pre><code>//- ... include Angular, etc
</code></pre>

<p>  body(ng-controller="colorly")</p>

<pre><code>p(ng-style="{ color: getColor() }")
  | The text will be one of two colors
</code></pre>

<p>```</p>

<h2>A Background Example</h2>

<p>If we have a dynamic value that needs to go in a css <code>background</code> or <code>background-image</code> attribute, it can be just a bit more tricky to specify.</p>

<p>Let's say we have a <code>getImage()</code> function in our controller.  This function returns a string formatted similar to this: <code>url(icons/pen.png)</code>.  If we do, the <code>ngStyle</code> declaration is specified the exact same way as before:</p>

<p><code>haml
ng-style="{ 'background-image': getImage() }"
</code></p>

<p>Make sure to put quotes around the <code>background-image</code> key name.  Remember, this must be formatted as a valid Javascript object key.</p>

<h2>Another Background Example</h2>

<p>That example was easy.  Often, however, you don't have data stored in your models that's formatted like <code>url(icons/pen.png)</code>.  Instead you often have a field that represents the image path only.  In this case, you must do some JavaScript inside your <code>ngStyle</code> declaration:</p>

<p>```coffeescript colorCtrl.coffee
angular.module('colorly').controller 'colorCtrl', ($scope) ->
  $scope.tool =</p>

<pre><code>name: 'Pen'
icon: 'icons/pen.png'
</code></pre>

<p>```</p>

<p><code>haml
ng-style="{ 'background-image': 'url(' + tool.icon + ')' }"
</code></p>

<p>Remember that it's just Javascript, and you'll setup the string concatenation to work just fine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make Jsonp Requests with AngularJs]]></title>
    <link href="http://jaketrent.com/post/make-jsonp-requests-with-angularjs/"/>
    <updated>2013-03-20T07:08:00-06:00</updated>
    <id>http://jaketrent.com/post/make-jsonp-requests-with-angularjs</id>
    <content type="html"><![CDATA[<p>There are a couple ways to make cross domain requests from a client browser.  One method is called Jsonp or Json with padding.  The AngularJs library makes this really simple.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="AngularJs Jsonp" /></p>

<!--more-->


<h2>Web Server Support</h2>

<p>First of all, your Jsonp request will be worth nothing if the server you're requesting data from does not support it.  Jsonp requests require explicit support on the server side.  This is because the data that's returned is formatted differently.  The 'p' in Jsonp stands for padding.</p>

<p>But that's kind of a weird name.  Maybe Jsonf would be more analogous to reality.  This is because the Json data that you seek is really wrapped in a Javascript function.  This function is then evaluated as a script, passing the data into a callback to be saved by your client program.</p>

<p>This essentially is a browser hack to get around the security constraint of browsers not being able to request non-script items from different domains.  But since we request Javascript this way all the time, we'll just make our data look like Javascript.</p>

<h2>Angular Jsonp</h2>

<p>You're probably already used to using the <code>$http</code> service.  It provides the normal <code>get</code>, <code>post</code> and other functions mapped to http methods.  It also provides the function that we'll need: <code>jsonp</code>.</p>

<p>The client script also requires that we specify the callback to send data to.  AngularJs has its own callback pattern, so it would follow that it has a pattern to handle Jsonp callbacks.  It does.  The callback is always called <code>JSON_CALLBACK</code>.  What parameter that it's assigned to in the query string depends on the design of the web service you're calling.  Take a look at the documentation on what's required there.</p>

<p>All that jibber jabber for this simple example of a script asking for <a href="http://colorwheelie.tumblr.com">Tumblr</a> data:</p>

<p>```coffeescript
$http.jsonp 'http://api.tumblr.com/v2/blog/colorwheelie.tumblr.com/posts/photo?api_key=<mykey>&amp;callback=JSON_CALLBACK'
  .success (data) -></p>

<pre><code> $scope.colorwheelies = data.response.posts;
</code></pre>

<p>  .error (data) -></p>

<pre><code> console.log('ERROR');
</code></pre>

<p>```</p>

<p>The interesting line is line one.  We call the <code>jsonp</code> function.  We assign our callback like this: <code>callback=JSON_CALLBACK</code>.  And in our success callback, we can consume our data variable like it was pure Json.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pass Values From the Page to AngularJs]]></title>
    <link href="http://jaketrent.com/post/pass-values-from-page-to-angular/"/>
    <updated>2013-02-22T07:10:00-07:00</updated>
    <id>http://jaketrent.com/post/pass-values-from-page-to-angular</id>
    <content type="html"><![CDATA[<p>There are simple mechanisms for passing data from your web page to AngularJs.  One directive is called <code>ngInit</code>.  You may well need it.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="Angular data passing" /></p>

<!--more-->


<h2>The Use Cases</h2>

<p>The use cases don't make a ton of sense without a concrete example.  There are several ways to implement even the most simple example.  If the solution doesn't seem to fit the problem, try another way.</p>

<p>For our purposes, let's say that we're displaying a list of comments on the screen.</p>

<h4>Angular Requests Data</h4>

<p>It's easy to put data into scope for AngularJs to use if Angular is the one to request the data initially.  This often will look something like this:</p>

<p>```coffeescript
$http.get('/comments')
  .success((comments) -></p>

<pre><code>$scope.comments = comments
</code></pre>

<p>  )
```</p>

<p>Then your template will automatically have the data in scope.  And the template (<a href="http://slim-lang.org">Slim</a> syntax used below) can look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h1</span> <span class="no">Comments</span>
</span><span class='line'><span class="n">ul</span>
</span><span class='line'>  <span class="n">li</span> <span class="n">ng</span><span class="o">-</span><span class="n">repeat</span><span class="o">=</span><span class="s2">&quot;comment in comments&quot;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;| {{ comment }}</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now when we add a new comment via Ajax, we can push it right into the comment collection, and the page is updated by Angular with the appropriate data.  Or if we want to perform an operation on a pre-existing comment, it's easy to do via an AJAX operation and display the result.</p>

<h4>Server Renders Data Initially</h4>

<p>Sometimes it'll make sense for the server to render the data.  Often this kind of data will be the main content on the page.  When the client receives the page, we want the data display to be immediate.  We don't want them to load a page with a spinner for the main content, then wait and watch it spin while the real content is requested secondarily.</p>

<p>If the server was to initially print the comments, like so:</p>

<p>```ruby
h1 Comments
ul
  - comments.each do |comment|</p>

<pre><code>li 
  = comment
</code></pre>

<p>```</p>

<p>We still might want to do AJAX'y things with a comment, such as like it.  When I like it, I don't want the browser to have to refresh, so I want to make Angular do this for me.</p>

<h2>ngInit Passes Angular Server Data</h2>

<p>Angular provides a nice directive, <code>ngInit</code> for passing Angular data.  It's a mechanism by which you can bootstrap your scripts with the data they need to function.  A mixture of server rendering and client-side AJAX requests on the same data will probably mean that you're going to use this directive.</p>

<p>From the <code>ngInit</code> docs:</p>

<blockquote><p> The ngInit directive specifies initialization tasks to be executed before the template enters execution mode during bootstrap.</p></blockquote>

<p>Our server/client mixture code might look something like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h1</span> <span class="no">Comments</span>
</span><span class='line'><span class="n">ul</span>
</span><span class='line'>  <span class="o">-</span> <span class="n">comments</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">comment</span><span class="p">,</span> <span class="n">i</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;li ng-init=&quot;commentLikeCount[i]=</span><span class="si">#{</span><span class="n">comment</span><span class="o">.</span><span class="n">likeCount</span><span class="si">}</span><span class="sr">&quot;</span>
</span><span class='line'><span class="sr">  = comment</span>
</span><span class='line'><span class="sr">  | Likes for this comment: {{commentLikeCount[i]}}</span>
</span><span class='line'><span class="sr">  a ng-click=&quot;like(commentLikeCount[i])&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It's important to realize where data is coming from in this example.  The syntax <code>=</code> as in <code>= comment</code> and <code>#{}</code> as in <code>#{comment.likeCount}</code> are server-rendered bits.  As you know, the curlies and the ng attribute syntax is for Angular's client side rendering.</p>

<p>So how has this mixture bought us anything?</p>

<ol>
<li>The server renders the comments initially.  This makes the display immediate when the browser loads the page.</li>
<li>We init the value of <code>commentLikeCount</code>, making it available for Angular to display once the client compiles the template.</li>
<li>Since Angular has a count of the likes, it can easily update it and redisplay without a page reload after calling <code>like()</code> to increment the count.</li>
</ol>


<p>Frankly, the mixture feels a little bit odd to me.  I've seen it work.  I know there are different ways to get this done.  I think there are probably better ways.  What has worked well for you in similar use cases?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJs Find Element in Context]]></title>
    <link href="http://jaketrent.com/post/angularjs-find-element-in-context/"/>
    <updated>2013-02-21T17:35:00-07:00</updated>
    <id>http://jaketrent.com/post/angularjs-find-element-in-context</id>
    <content type="html"><![CDATA[<p>Finding an element in context means that I can select a node from the dom within a certain range -- specifically either a node or any of its children nodes.  Is there an "Angular way" to do this?</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="AngularJs find in context" /></p>

<!--more-->


<h2>Angular's Element() API</h2>

<p>Angular provides jqLite for doing basic CSS selections.  As far as I can tell, it does not give you the ability to specify a context node.  Sure, you can specify a more specific selector, but you can't pass a context programmatically.  The best you could do would look something like:</p>

<p><code>js
angular.element('.my-preknown-context .element-to-find')
</code></p>

<p>If that's sufficient for your use case, this would be the most "Angular way" to make an element selection.</p>

<h2>jQuery's API</h2>

<p>If you need to make CSS selections within a given context, you'll need to use jQuery.  jQuery's selector will be used in place of jqLite if it is loaded previous to the <code>DOMContentLoaded</code> event firing.  In other words, import jQuery in the <code>head</code> tag.</p>

<p>With jQuery, you can do things like this:</p>

<p><code>js
$('.element-to-find', $('.my-preknown-context'))
</code></p>

<p>But we could already do that with the above <code>angular.element</code> function.  If a constraint of our use case is that we don't yet know the selector of the context, then we need to  use this same jQuery API to do what we couldn't before.  For instance, if we want to find a child element of an element that was clicked, the inside of the click handler might look like this:</p>

<p><code>js
$('.element-to-find', $(event.currentTarget))
</code></p>

<p>We could also write it like this:</p>

<p><code>js
$(event.currentTarget).find('.element-to-find')
</code></p>

<p>Well, why not use <code>angular.element().find()</code>?  Because it is limited to querying children by tagName only.  Oh boy.  That's not all that useful.  Interesting/weird constraint.  Oh well, maybe someday.</p>

<h2>jQuery, Meet Angular</h2>

<p>So, using full jQuery is probably not the most "Angular way".  So, what's the best you can do?  Use Angular to get the context reference.  In a click handler, use the <code>$event</code> service which references the event object:</p>

<p><code>js
$('.element-to-find', $event.currentTarget)
</code></p>

<p>In a controller, use the <code>$element</code> service which references the dom node the controller is attached to:</p>

<p><code>js
$('.element-to-find', $element)
</code></p>

<p>This method uses jQuery to fill in for something it seems Angular can't do yet.  And it uses Angular where possible, since it has access to these dom references already.</p>

<p>What do you think?  Is there a more "Angular way" to do this?</p>
]]></content>
  </entry>
  
</feed>
