<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: angularjs | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2013-08-13T20:39:03-06:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Preload Route Data in Angular]]></title>
    <link href="http://jaketrent.com/post/preload-route-data-angular/"/>
    <updated>2013-08-13T08:10:00-06:00</updated>
    <id>http://jaketrent.com/post/preload-route-data-angular</id>
    <content type="html"><![CDATA[<p>It's sometimes useful to be able to preload or resolve data previous to an Angular view being displayed.  Such was the case recently for our current user object.  It simplified a lot of things in the app to have the guarantee of a loaded current user previous to displaying pages.  The Angular router has a great mechanism built in to do just this sort of thing, called <code>resolve</code>.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="Angularjs" /></p>

<!--more-->


<h2>Current User</h2>

<p>For the example, our current user object is super simple.  Just pretend that it holds all of the relevant details of a user.  These details are useful for displaying various things in the app that need the context of who the currently logged-in user is.</p>

<p>```coffeescript current-user.coffee
  angular.module('app.services').factory 'CurrentUser', ($http, User) -></p>

<pre><code>class CurrentUser extends User
  fetch: -&gt;
    # do $http things to request user data
  isLoaded: -&gt;
    # true if fetched and ready to go

new CurrentUser
</code></pre>

<p>```</p>

<p>Note that for our app there is just one <code>CurrentUser</code> object, a singleton, because we return a single instance from our factory, not a class.</p>

<h2>Router</h2>

<p>The Angular router is used for client-side routing of urls.  Our angular app is called <code>app</code>.  We setup some angular submodules to hold config, services, and controllers.</p>

<p>Let's say that we have a home page and a profile page for our example.</p>

<p>Each route can be configured with a <code>resolve</code> object.  The key of that object is the name of a local variable and the value is a function which returns a promise.  The resolution value of the promise is the data you want before the route executes.After all the promises are resolved, the route is free to switch and execute.  Until then, each unresolved promise will block the route from executing.</p>

<p>```coffeescript app.coffee
angular.module 'app.config', []
angular.module 'app.services', []
angular.module 'app.controllers', []</p>

<p>angular.module('app', ['app.config', 'app.services', 'app.controllers'])</p>

<p>angular.module('app').config ($routeProvider, $locationProvider, resolves) ->
  $locationProvider.html5Mode true</p>

<p>  $routeProvider</p>

<pre><code>.when '/',
  controller: 'HomeCtrl'
  templateUrl: '/templates/home.html'
.when '/profile',
  controller: 'ProfileCtrl'
  templateUrl: '/templates/profile.html'
</code></pre>

<p>angular.module('app').run ($route, resolves)->
  for r in $route.routes</p>

<pre><code>r.resolve ?= {}
r.resolve.CurrentUser = resolves.getCurrentUser
</code></pre>

<p>```</p>

<p>The <code>run</code> method is essentially the Angular app's main method, starting the program.  I want to ensure the current user is loaded for each route.  In this case, instead of putting a <code>resolve</code> config on each route, I'm looping through all routes after their initial definition and adding the <code>CurrentUser: resolves.getCurrentUser</code> config.</p>

<h2>Resolve Function</h2>

<p>In our resolve function we setup our own promise via the <code>$q</code> service.  We check to see if our singleton <code>CurrentUser</code> is already loaded.  If it's not, we fetch it.  If it has been fetched once already, we resolve the promise with the value that's already available.</p>

<p>```coffeescript resolves.coffee
angular.module('app.config').constant 'resolves',</p>

<p>  getCurrentUser: ($q, CurrentUser) -></p>

<pre><code>defer = $q.defer()

if not CurrentUser.isLoaded()
  req = CurrentUser.fetch()
  req.success -&gt; defer.resolve CurrentUser
  req.error -&gt; defer.reject()
else
  defer.resolve CurrentUser

defer.promise
</code></pre>

<p>```</p>

<h2>Application Controller</h2>

<p>Now that we have the <code>CurrentUser</code> guaranteed to be resolved (fetched and returned) by the time we enter all routes, we need to grab the value of <code>CurrentUser</code> and put it in <code>$scope</code> where our program would normally pick up and start using variables.</p>

<p>```coffeescript app-ctrl.coffee
angular.module('app.controllers').controller 'AppCtrl', ($scope) -></p>

<p>  $scope.$on '$routeChangeSuccess', (next, current) -></p>

<pre><code>if current.locals.CurrentUser?
  $scope.currentUser = current.locals.CurrentUser
</code></pre>

<p>```</p>

<p>We listen the Angular-provided event when a route is successfully entered: <code>$routeChangeSuccess</code>.  The value we care about is available on the <code>current</code> route's <code>locals</code> object, placed there magically by the resolve function.</p>

<h2>When to Use</h2>

<p>There are a few bits to piece together to make this happen.  It might be simpler than other solutions or make more sense for you in your app if you need something(s) loaded previous to executing on a route.</p>

<p>I would definitely use this feature judiciously, as it seems to eat away at one of the advantages of a client-side app in the first place: asynchronous loading.  We'8re blocking the whole app from going forward when we're in the process of resolving.  That boundary used to be on the edge of the server, building up the page before it was servable to the client.  Now, on a web client, we have multiple requests that can happen in parallel and we can render bits as they're available -- important bits first and so on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Namespacing Angular Controller Attributes]]></title>
    <link href="http://jaketrent.com/post/namespacing-angular-controller-attributes/"/>
    <updated>2013-07-10T18:17:00-06:00</updated>
    <id>http://jaketrent.com/post/namespacing-angular-controller-attributes</id>
    <content type="html"><![CDATA[<p>Usually attributes of your Angular controllers are not namespaced.  But you can namespace them.  But you might not want to.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="AngularJs controller namespacing" /></p>

<!--more-->


<h2>Angular Controllers Usually Attach Attributes to Scope</h2>

<p>Usually attributes in an Angular controller, such as functions and variables, are attached to the <code>$scope</code> object.  That looks like this:</p>

<p>```coffeescript my-ctrl.coffee
angular.module('myapp').controller 'MyCtrl', ($scope) ->
  $scope.myVar = 'myVal'
  $scope.myFn = -></p>

<pre><code>console.log 'does stuff'
</code></pre>

<p>```</p>

<p>Then in my template I don't know, nor do I need to know, where the attribute comes from.  I just reference it:</p>

<p>```haml my-app.jade
html(ng-app="myapp")
  body(ng-controller="MyCtrl")</p>

<pre><code>h1 My Var: 
button(ng-click="myFun()") Does Stuff
</code></pre>

<p>```</p>

<h2>Namespaced Angular Controller Attributes</h2>

<p>In this simple example, this is no big deal.  But as your app grows in complexity with many, nested controllers and templates, it can become difficult to read the code.  If you have common function names, it might be hard to tell which controller's function is referenced in your templates.  To make this less of a problem and the code more clear, you might namespace your controller attributes in the template.</p>

<p>To do this, you can write your controllers to attach attributes to the controller instead of scope and then put the controller itself on scope.  That looks like this:</p>

<p>```coffeescript my-ctrl.coffee
angular.module('myapp').controller 'MyCtrl', ($scope) ->
  @myVar = 'myVal'
  @myFn = -></p>

<pre><code>console.log 'does stuff'
</code></pre>

<p>  $scope.MyCtrl = @
```</p>

<p>Then your template changes to look like this:</p>

<p>```haml my-app.jade
html(ng-app="myapp")
  body(ng-controller="MyCtrl")</p>

<pre><code>h1 My Var: 
button(ng-click="MyCtrl.myFun()") Does Stuff
</code></pre>

<p>```</p>

<p>It's kind of nice for the reasons stated above.  I saw this strategy referenced on the Interwebs at one point and thought it seemed like a good idea.</p>

<h2>Why You Might Avoid This</h2>

<p>Maybe you love the idea.  Maybe you don't.  I thought I did.  I have been writing controllers this way for a while.  Now I don't.  Here's why:</p>

<h3>1. It Makes Templates Less Reusable</h3>

<p>It's quite probable that I'll have templates that I don't want permanently attached to a specific controller.  An example I ran into recently was on a profile page.  I had two pages to show profiles: one for my profile and one for an arbitrary person in the system.  They looked the same in the UI.  They had the same basic functions.  But the source of data for the variables and the implementation of the functions was different in the two scenarios.  Thus, I had to refactor to remove the namespacing to be able to reuse the template across pages.</p>

<h3>2. It's More Typing</h3>

<p>It's silly.  It adds up.  The less superfluous typing I can do, the more I consider that solution.</p>

<h3>3. The Creators Don't Do It</h3>

<p>I haven't seen this strategy featured in official tutorials, guides, or API examples.  Not that the Angular d00ds have all the ideas or do everything right -- it just isn't a pattern I see widely accepted or used.</p>

<p>These days, I don't namespace my controller attributes, and I don't recommend it.</p>

<p>So what do you think?  Do you write your controllers this way?  Good idea?  Bad idea?  What are some alternative methods you've found to balance template reuse with readability?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When to Use Curlies in Angular Directives]]></title>
    <link href="http://jaketrent.com/post/when-to-use-curlies-in-angular-directives/"/>
    <updated>2013-06-24T17:03:00-06:00</updated>
    <id>http://jaketrent.com/post/when-to-use-curlies-in-angular-directives</id>
    <content type="html"><![CDATA[<p>Angularjs has some sweet built-in directives.  Sometimes it can be confusing when to use the curly braces around expressions in directive attributes and when not to.  Here are a couple rules.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="Angular directive curlies" /></p>

<!--more-->


<h2>Curlies</h2>

<p>By "curlies", I mean curly braces.  The difference of when to use or not use them looks like the following.</p>

<p>Use them:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;element</span> <span class="na">ng-attribute=</span><span class="s">&quot;{{valWithCurlies}}&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Or despise them:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;element</span> <span class="na">ng-attribute=</span><span class="s">&quot;valWithNone&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Two Rules of Thumb</h2>

<p>Here are two rules that will serve you well when deciding whether or not to use curlies.</p>

<ol>
<li>Assume no curlies in Angular directive attribute values.  Most directives don't use them.</li>
<li>If you would conceivably want to mix strings with Javascript code in the attribute, use curlies.</li>
</ol>


<h2>Two Examples with Curlies</h2>

<p>There are only a few examples of directives using curlies in their attributes.  These examples are both relating to pathing.  Apparently that's a common use case for mixing strings with JavaScript-borne values.</p>

<h3>ngSrc</h3>

<p>As in the source of an image, such as:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">ng-src=</span><span class="s">&quot;/images/{{tool.icon_name}}.png&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>ngHref</h3>

<p>As in a link to an html page, such as:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">ng-href=</span><span class="s">&quot;http://google.com?q={{query}}&quot;</span><span class="nt">&gt;</span>See Google Results<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Something more Precise?</h2>

<p>Is there something more precise than these two rules of thumb?  Why does Angular make an exception for these two cases, thus causing us to try to remember our rules of thumb?</p>

<p>As I surmised above, I can only guess that because the pathing use case often wants to mix strings with JavaScript values, the exception was made.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ngStyle Background]]></title>
    <link href="http://jaketrent.com/post/ngstyle-background/"/>
    <updated>2013-06-19T07:08:00-06:00</updated>
    <id>http://jaketrent.com/post/ngstyle-background</id>
    <content type="html"><![CDATA[<p><code>ngStyle</code> is the directive used to set inline style attributes with AngularJs.  Most of the time, it's straightforward to use.  <code>background</code> css attributes can be just slightly trickier.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="AngularJs" /></p>

<!--more-->


<h2>ngStyle Objects</h2>

<p>The <code>ngStyle</code> directive requires an object for input.  The object key is the css attribute name.  The resultant value for the key is the value of the css attribute.</p>

<p><code>ngStyle</code> is obviously used to set dynamic styles, because static styles are more easily and efficient set using the standard html <code>style</code> attribute.</p>

<h2>A Dynamic Style Example</h2>

<p>So let's setup a controller that sets a dynamic color based on something as useful as the time.  Useful, right?</p>

<p>```coffeescript colorCtrl.coffee
angular.module('colorly').controller 'colorCtrl', ($scope) ->
  $scope.getColor = -></p>

<pre><code>if new Date().getTime() % 2 is 0 then "red" else "blue"
</code></pre>

<p>```</p>

<p>We could use this <code>getColor</code> function in our app:</p>

<p>```haml app.jade
html(ng-app="colorly")
  head</p>

<pre><code>//- ... include Angular, etc
</code></pre>

<p>  body(ng-controller="colorly")</p>

<pre><code>p(ng-style="{ color: getColor() }")
  | The text will be one of two colors
</code></pre>

<p>```</p>

<h2>A Background Example</h2>

<p>If we have a dynamic value that needs to go in a css <code>background</code> or <code>background-image</code> attribute, it can be just a bit more tricky to specify.</p>

<p>Let's say we have a <code>getImage()</code> function in our controller.  This function returns a string formatted similar to this: <code>url(icons/pen.png)</code>.  If we do, the <code>ngStyle</code> declaration is specified the exact same way as before:</p>

<p><code>haml
ng-style="{ 'background-image': getImage() }"
</code></p>

<p>Make sure to put quotes around the <code>background-image</code> key name.  Remember, this must be formatted as a valid Javascript object key.</p>

<h2>Another Background Example</h2>

<p>That example was easy.  Often, however, you don't have data stored in your models that's formatted like <code>url(icons/pen.png)</code>.  Instead you often have a field that represents the image path only.  In this case, you must do some JavaScript inside your <code>ngStyle</code> declaration:</p>

<p>```coffeescript colorCtrl.coffee
angular.module('colorly').controller 'colorCtrl', ($scope) ->
  $scope.tool =</p>

<pre><code>name: 'Pen'
icon: 'icons/pen.png'
</code></pre>

<p>```</p>

<p><code>haml
ng-style="{ 'background-image': 'url(' + tool.icon + ')' }"
</code></p>

<p>Remember that it's just Javascript, and you'll setup the string concatenation to work just fine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make Jsonp Requests with AngularJs]]></title>
    <link href="http://jaketrent.com/post/make-jsonp-requests-with-angularjs/"/>
    <updated>2013-03-20T07:08:00-06:00</updated>
    <id>http://jaketrent.com/post/make-jsonp-requests-with-angularjs</id>
    <content type="html"><![CDATA[<p>There are a couple ways to make cross domain requests from a client browser.  One method is called Jsonp or Json with padding.  The AngularJs library makes this really simple.</p>

<p><img src="http://i.imgur.com/wVBKD.png" alt="AngularJs Jsonp" /></p>

<!--more-->


<h2>Web Server Support</h2>

<p>First of all, your Jsonp request will be worth nothing if the server you're requesting data from does not support it.  Jsonp requests require explicit support on the server side.  This is because the data that's returned is formatted differently.  The 'p' in Jsonp stands for padding.</p>

<p>But that's kind of a weird name.  Maybe Jsonf would be more analogous to reality.  This is because the Json data that you seek is really wrapped in a Javascript function.  This function is then evaluated as a script, passing the data into a callback to be saved by your client program.</p>

<p>This essentially is a browser hack to get around the security constraint of browsers not being able to request non-script items from different domains.  But since we request Javascript this way all the time, we'll just make our data look like Javascript.</p>

<h2>Angular Jsonp</h2>

<p>You're probably already used to using the <code>$http</code> service.  It provides the normal <code>get</code>, <code>post</code> and other functions mapped to http methods.  It also provides the function that we'll need: <code>jsonp</code>.</p>

<p>The client script also requires that we specify the callback to send data to.  AngularJs has its own callback pattern, so it would follow that it has a pattern to handle Jsonp callbacks.  It does.  The callback is always called <code>JSON_CALLBACK</code>.  What parameter that it's assigned to in the query string depends on the design of the web service you're calling.  Take a look at the documentation on what's required there.</p>

<p>All that jibber jabber for this simple example of a script asking for <a href="http://colorwheelie.tumblr.com">Tumblr</a> data:</p>

<p>```coffeescript
$http.jsonp 'http://api.tumblr.com/v2/blog/colorwheelie.tumblr.com/posts/photo?api_key=<mykey>&amp;callback=JSON_CALLBACK'
  .success (data) -></p>

<pre><code> $scope.colorwheelies = data.response.posts;
</code></pre>

<p>  .error (data) -></p>

<pre><code> console.log('ERROR');
</code></pre>

<p>```</p>

<p>The interesting line is line one.  We call the <code>jsonp</code> function.  We assign our callback like this: <code>callback=JSON_CALLBACK</code>.  And in our success callback, we can consume our data variable like it was pure Json.</p>
]]></content>
  </entry>
  
</feed>
