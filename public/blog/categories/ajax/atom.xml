<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ajax | Jake Trent]]></title>
  <link href="http://jaketrent.com/blog/categories/ajax/atom.xml" rel="self"/>
  <link href="http://jaketrent.com/"/>
  <updated>2016-05-17T07:37:36-06:00</updated>
  <id>http://jaketrent.com/</id>
  <author>
    <name><![CDATA[Jake Trent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cross-Domain RequireJs Text]]></title>
    <link href="http://jaketrent.com/post/cross-domain-requirejs-text/"/>
    <updated>2012-06-07T13:11:00-06:00</updated>
    <id>http://jaketrent.com/post/cross-domain-requirejs-text</id>
    <content type="html"><![CDATA[<p>Through long-available browser quirks/features, javascript has been available for requests across disparate domains.  But, other resources, such as text files (eg, handlebars templates) have had more restrictions placed on them.  Recently, CORS support has enhanced the ability to make these requests.  Here's how you get your text files from another domain via requirejs.</p>

<!--more-->


<h2>CORS</h2>

<p><a href="https://developer.mozilla.org/en/http_access_control">CORS</a> is a great feature for modern browsers that allows a site on a domain A to request a resource from domain B without restriction, because domain B already said that it's willing to accept those requests. In an <a href="http://remysharp.com/2011/04/21/getting-cors-working/">article on CORS by Remy Sharp</a>, he outlines in more detail how to setup your server to be CORS ready.  Simply, it comes down to the server responding with an http header.  To allow all sites to request a server's resources:</p>

<p><code>http
Access-Control-Allow-Origin: *
</code></p>

<p>To allow a whitelist of sites to request resources, the server must give the same header with only certain sites listed:</p>

<p><code>http
Access-Control-Allow-Origin: http://rockycode.com http://builtbyjake.com
</code></p>

<p>What servers can <a href="http://html5please.com/#cors">support CORS</a>?  Firefox and Chrome have supported it for some time.  IE8 has its own Microsoft flavor.  iOS and Android also have strong support for a few version back.  Check out the <a href="http://caniuse.com/cors">detailed stats on caniuse.com</a>.</p>

<h2>RequireJs</h2>

<p><a href="http://requirejs.org/">RequireJs</a> Is a fantastic Javascript loader that allows for client-side async loading of js and other static assets.  For textual, non-code things, there is a <a href="http://requirejs.org/docs/download.html#text"><code>text</code> plugin</a>.</p>

<p>Because RequireJs knows about non-CORS-enabled browser restrictions, by default it functions differently for cross-domain requests.  In the current (2.0.0) implementation of the text plugin, line 163, the plugin decides whether to do a normal XHR (more lenient on text assets) request or to skip to the <code>else</code> statement to require what it will <a href="https://groups.google.com/group/requirejs/browse_thread/thread/bc0608ef5f8943e7/3a1cafaa93869c32">assume is javascript</a> because that's requestable across domains:</p>

<p>```js
//Load the text. Use XHR if possible and in a browser.
if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {
  text.get(url, function (content) {</p>

<pre><code>text.finishLoad(name, parsed.strip, content, onLoad);
</code></pre>

<p>  }, function (err) {</p>

<pre><code>if (onLoad.error) {
    onLoad.error(err);
}
</code></pre>

<p>  });
} else {
  //Need to fetch the resource across domains. Assume
  //the resource has been optimized into a JS module. Fetch
  //by the module name + extension, but do not include the
  //!strip part to avoid file system issues.
  req([nonStripName], function (content) {</p>

<pre><code>text.finishLoad(parsed.moduleName + '.' + parsed.ext,
                parsed.strip, content, onLoad);
</code></pre>

<p>  });
}
```</p>

<p>To allow CORS-enabled servers to get resources requested from them, we <a href="http://requirejs.org/docs/api.html#config">configure RequireJs</a> to override the <code>getXhr</code> function to return true:</p>

<p>(Note: 25 Oct 2012 - Syntax updated per Chris' comment below)</p>

<p>```js
require.config({
  config: {</p>

<pre><code>text: {
  useXhr: function (url, protocol, hostname, port) {
    // allow cross-domain requests
    // remote server allows CORS
    return true;
  }
}
</code></pre>

<p>  }
});
```</p>

<p>Now you should be able to ask for various and sundry things across domains and continue enjoy the RequireJs goodness -- now multiplied:</p>

<p><code>js
require('text!http://anotherDomain/my.html', function (my) {
  // have fun!
});
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serve a Directory]]></title>
    <link href="http://jaketrent.com/post/serve-directory/"/>
    <updated>2012-06-06T14:14:00-06:00</updated>
    <id>http://jaketrent.com/post/serve-directory</id>
    <content type="html"><![CDATA[<p>Don't you hate developing a blasted simple webpage that does some asynchronous requests that gets you into cross-origin policy trouble.  If you just read a <code>.html</code> file off the file system, this will bite you.  But, it's easy to get around.  Just host your .html file on a simple http server.  And it's easy to make that happen.  Here's one way.</p>

<!--more-->


<h2>Attacked by Snakes</h2>

<p>First, Verify you have python installed:</p>

<p>```bash</p>

<blockquote><p>python --version
Python 2.7.3
```</p></blockquote>

<h2>'Tis a Gift to Be Simple</h2>

<p>Then navigate to the directory that you'd like to serve up and type:</p>

<p><code>bash
python -m SimpleHTTPServer 5000
</code></p>

<p>Where "5000" is the port you'd like to serve it on.  (Defaults to 80.)  Then point your browser to:</p>

<pre><code>http://localhost:5000
</code></pre>

<p>And rock your local dev.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone and JAX-RS]]></title>
    <link href="http://jaketrent.com/post/backbone-and-jax-rs/"/>
    <updated>2011-12-28T13:23:00-07:00</updated>
    <id>http://jaketrent.com/post/backbone-and-jax-rs</id>
    <content type="html"><![CDATA[<p>BackboneJS is setup to do some pretty sweet single-page app action.  And of course, a single page app will probably be wanting to talk to web services on the server.  And if your server code is doing the Java jive, then a great way to expose your REST services is via JAX-RS.  It's as easy as Mikey singin' ABC-123!</p>

<!--more-->


<p>Note:  These examples use AMD-style modules in Javascript.  I personally use <a href="http://requirejs.org/">RequireJS</a> for my module loading fettish.</p>

<h2><a href="http://documentcloud.github.com/backbone/">BackboneJS</a> Model Url</h2>

<p>To tell a client-side <a href="http://documentcloud.github.com/backbone/#Model"><code>Backbone.Model</code></a> object where it syncs to on the server, it needs a <a href="http://documentcloud.github.com/backbone/#Model-url"><code>url</code></a> field like so (in <code>Cat.js</code>):</p>

<p>```javascript
define(function () {
  return Backbone.Model.extend({</p>

<pre><code>url: '/ws/cat'
</code></pre>

<p>  });
});
```</p>

<p>The <code>url</code> field can be a string literal or a function that has more meat to it.  The point is that it be awesome and point correctly to your REST endpoint exposed on the server.</p>

<p>If you want to fetch a model from the server, you can call <a href="http://documentcloud.github.com/backbone/#Model-fetch"><code>fetch()</code></a> directly on the model a la <code>myModelInstance.fetch()</code>, but in practice you won't know which specific model you want initially, and instead your model will be part of a <a href="http://documentcloud.github.com/backbone/#Collection-fetch">collection</a>.  But let's say that your model had an id of, say, 1334, and you wanted to get it off the server, you'd call <code>fetch()</code> and that call will delegate to <a href="http://documentcloud.github.com/backbone/#Sync"><code>Backbone.sync</code></a>, making an HTTP GET to:</p>

<p><code>bash
GET /ws/cat/1334
</code></p>

<p>When you save a model by calling <code>myModelInstance.save()</code>, it delegates to <code>Backbone.sync</code> in the same way.  If it's a new object (in Backbone, that means it doesn't yet have an <code>id</code> field) that was initially created on the client and thus doesn't appear on the server yet, it'll make an HTTP POST to:</p>

<p><code>bash
POST /ws/cat
</code></p>

<p>If it's already an object that was requested from the server (and has, say, and id of 1334) and is now being updated based on client action, it'll make an HTTP PUT to:</p>

<p><code>bash
PUT /ws/cat/1334
</code></p>

<p>(BTW, HTTP DELETE works the same way as PUT.)</p>

<h2>JAX-RS Endpoints</h2>

<p><a href="http://en.wikipedia.org/wiki/Java_API_for_RESTful_Web_Services">JAX-RS</a> endpoints are exceedingly easy to setup.  It's all annotation-based, so you're free to rejoice.  Here's an example (It's also a <a href="http://static.springsource.org/spring/docs/2.5.x/reference/beans.html">Spring <code>@Controller</code></a>):</p>

<p>```java</p>

<p>import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;</p>

<p>@Controller
@Scope("singleton")
@Path("/ws/cat")
public class CatRest {</p>

<p>  @GET
  @Produces("application/json")
  public List<CatDto> getCats() {</p>

<pre><code>return getCatsFromSomewhere();
</code></pre>

<p>  }</p>

<p>  @POST
  @Produces("application/json")
  @Consumes("application/json")
  public CatDto createCat(CatDto dto) {</p>

<pre><code>return saveCatAndReturnInstanceWithId();      
</code></pre>

<p>  }</p>

<p>  @PUT
  @Path("/{id}")
  @Produces("application/json")
  public CatDto updateCat(CatDto dto) {</p>

<pre><code>return updateCatReturnSameInstance();
</code></pre>

<p>  }</p>

<p>  @DELETE
  @Path("/{id}")
  @Produces("application/json")
  public void deleteCat(@PathParam("id") Long id) {</p>

<pre><code>removeTheBlastedCat();
</code></pre>

<p>  }</p>

<p>}
```</p>

<p>This should all be fairly self-descriptive.  It matches the HTTP actions that can be made from Backbone.sync.  So what is JAX-RS doing for you.  It's allowing your methods to be exposed as rest endpoints by the simple addition of the <code>@GET</code>, <code>@POST</code>, etc annotations.</p>

<p>Note that the <code>@Path</code> matches the <code>url</code> field on your Backbone model.  And <code>@PUT</code> and <code>@DELETE</code> append an <code>{id}</code> variable to the end of the path.  In the case of <code>@PUT</code>, the id gets set on the <code>CatDto</code>.  For HTTP DELETE, a body is not send, just the HTTP request, so a <code>@PathParam</code> is all you get.</p>

<p>If these operations are successful, they all <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">respond with</a> HTTP 200, except for DELETE which returns 204 NO CONTENT.</p>

<p>JAX-RS is also dealing with the marshalling and unmarshalling from, in this case, json into and out of <code>CatDto</code>.  The <code>CatDto</code>, but like most <a href="http://en.wikipedia.org/wiki/Data_Transfer_Object">DTOs</a> just provides a wrapper around your actually domain object that exposes only what you desire in your web service (ie, possibly not everything in domain objects).</p>

<p>And what does the DTO look like?  I'm glad you asked.</p>

<h2>DTOs -- The Backbone / JAX-RS Gophers</h2>

<p>Here's <code>CatDto.java</code>:</p>

<p>```java
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;</p>

<p>@SuppressWarnings("serial")
@XmlRootElement
public class CatDto implements Serializable {</p>

<p>  private Long id;</p>

<p>  private String name;</p>

<p>  // getters and setters...</p>

<p>}
```</p>

<p>There's not much to it  -- just like a DTO should be.</p>

<p>By default, when JAX-RS gets some JSON in the body of an HTTP request, it's going to try and bind fields in the JSON to the DTO fields.  So, a nice piece of JSON from the client that could be unmarshalled into a <code>CatDto</code> instance would look something like:</p>

<p><code>javascript
{
  id: 1334,
  name: 'Cotton-headed Ninnymuggins'
}
</code></p>

<p>It's as magical as <a href="http://www.youtube.com/watch?v=Fig956-MuVA">maple syrup</a>!</p>

<h2>Binding form fields to a Backbone Model</h2>

<p>By default, BackboneJS has no built-in ability to automatically bind the values that are entered in form fields in the UI to fields in the corresponding <code>Backbone.Model</code> object.  But, Derick Bailey has created a nice little Backbone plugin for this purpose called <a href="https://github.com/derickbailey/backbone.modelbinding">Backbone.ModelBinding</a>.  This is a <a href="http://knockoutjs.com/">KnockoutJS</a>-inspired dom to model (and vice versa) data transfer lib.</p>

<p>If you don't have <code>Backbone.ModelBinding</code> on your project, you'll have to do your own setting of fields when you save with the "set and save" idiom from Backbone that will look something like:</p>

<p><code>javascript
myModel.save({
  name: $("#name-form-field").val()
});
</code></p>

<p>If you do want to use <code>Backbone.ModelBinding</code>, make sure you make it globally available (as a dependency <a href="http://requirejs.org/docs/api.html#order">ordered</a> after Backbone itself) just put this snippet in your <code>Backbone.View</code> code:</p>

<p>```javascript
define(function () {
  return Backbone.View.extend({</p>

<pre><code>initialize: function () {
  // ...
  Backbone.ModelBinding.bind(this);
},
// more view goodness
</code></pre>

<p>  }
});
```</p>

<p>You should also be aware of some of the limitations of <code>Backbone.ModelBinding</code>.  For instance, it can only bind anything that a Backbone.Model can get() and set(), which doesn't include nested objects or arrays.  So, some stuff you'll have to set manually anyway if you have objects more interesting than cats.</p>

<p>Also note that any inputs on the form, that are sometimes fields you don't care about or necessarily want attached to your <code>Backbone.Model</code>, show up there anyway.  So now when you call <code>myModelInstance.save()</code>, the json that gets sent to the server will be laden with extra coconuts, potentially like this:</p>

<p><code>javascript
{
  id: 1334,
  name: 'Mittens',
  ladenWith: 'coconuts,
  africaan: true
}
</code></p>

<p>And just between you and me, that won't work with our currently-defined <code>CatDto</code>.  It's time for a season reboot:</p>

<h2>Backbone.ModelBinding and JAX-RS</h2>

<p>If we get these extra, albeit more exciting, fields in the json, when unmarshalling happens, we get a late Christmas present:</p>

<p><code>text
[12/26/12 00:00:0:001] 0000000e Wr WebApplicationExceptionMapper: WebApplicationException has been caught :
Unrecognized field "laden_with" (Class CatDto), not marked as ignorable
  at [Source: org.apache.cxf.transport.http.AbstractHTTPDestination$1@b98117; line: 1, column: 286] (through reference chain: CatDto["laden_with"])
</code></p>

<p>"Not marked as ignorable", eh?  A couple ways to fix this.  The one requiring more typing and creating a brittle dto first.  Back to <code>CatDto.java</code>:</p>

<p>```java
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;</p>

<p>@SuppressWarnings("serial")
@XmlRootElement
public class CatDto implements Serializable {</p>

<p>  private Long id;</p>

<p>  private String name;</p>

<p>  @XmlTransient
  private String ladeWith;</p>

<p>  @XmlTransient
  private Boolean africaan;</p>

<p>  // getters and setters...</p>

<p>}
```</p>

<p>We can label each of the undesirable fields with <code>@XmlTransient</code>, but oh the pain.</p>

<p>It's maybe not all that bad that this blows big chunks.  Perhaps more secure.  You want to validate input at the REST endpoints.  Maybe this is the way you personally do it.  I do it elsewhere -- in the converstion from DTOs to domain objects and with Hibernate validators on those objects.</p>

<p>So, for me the better option that allows me to not have to go back and mess with <code>CatDto.java</code> as much is:</p>

<p>```java
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import org.codehaus.jackson.annotate.JsonIgnoreProperties;</p>

<p>@SuppressWarnings("serial")
@XmlRootElement
@JsonIgnoreProperties(ignoreUnknown = true)
public class CatDto implements Serializable {</p>

<p>  private Long id;</p>

<p>  private String name;</p>

<p>  // getters and setters...</p>

<p>}
```</p>

<p>This is whitelisting instead of blacklisting.  Lots less maintenance when more fields show up as unrecognizable.  Either way, I just use what I want on the server, so just ignore <em>everything</em> else with the <a href="http://wiki.fasterxml.com/JacksonAnnotations"><code>@JsonIgnoreProperties</code></a> annotation.</p>

<h2>Lots of HTTP</h2>

<p>This kind of programming is really quite fun.  And it feels pretty clean.  There's lots of cool UI possibilities for single-page apps on the client.  BackboneJS and RequireJS makes handling the complexity there much more doable.  And data-handling REST endpoints on the backend are super simple.  The simplicity of the REST endpoints makes Java feel a little heavy-handed on ceremony (like it often seems these days), but JAX-RS is a great framework if Java is what you have on the backend.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jquery, Ajax, Json on Django]]></title>
    <link href="http://jaketrent.com/post/jquery-ajax-json-django/"/>
    <updated>2011-01-27T16:36:00-07:00</updated>
    <id>http://jaketrent.com/post/jquery-ajax-json-django</id>
    <content type="html"><![CDATA[<p>Jquery, Ajax, Json, Django -- this is quite a laundry list of technologies.  In fact, it's pretty much the whole stack: client tech, server requests, over-the-network data format, and a backend app server.  In the following slidedeck and example code, we're going to touch on the whole stack and not get too deep into any one area.  By the end, you should be able to at least have a grasp of what technologies one can use in an Ajax Django application, a little bit of what they're capable of, and then, hopefully, a list in your brain that you can go back, reference, and then drill into specific technologies when you want to go build something similar yourself.</p>

<!--more-->


<p>Here's the breakdown of the <a href="http://www.slideshare.net/rockycode/jquery-ajax-json-on-django">slideshare slidedeck</a>:</p>

<h2>Jquery</h2>

<ul>
<li>A Javascript framework</li>
<li>"Write less, do more"</li>
<li>Select the dom - $(".selection")</li>
<li>Traverse the dom - $(".my").parent()</li>
<li>Manipulate the dom - $(".my").append("dectomy")</li>
<li>Provides an Ajax API - $.ajax()</li>
<li>Framework for providing your own functionality (plugins) - $(".new").operate()</li>
</ul>


<h2>Ajax</h2>

<ul>
<li>Asynchronous Javascript and Xml</li>
<li>Jquery API - $.ajax(), $.get(), $.post(), $.getJSON()</li>
</ul>


<h2>Json</h2>

<ul>
<li>JavaScript Object Notation</li>
<li>Terse</li>
<li>Flexible, nestable</li>
<li>Native in Javascript</li>
</ul>


<h2>Django</h2>

<ul>
<li>Web framework built on Python</li>
<li>"encourages... clean, pragmatic design"</li>
<li>Django-piston - mini-framework to create RESTful APIs for your data</li>
</ul>


<p>Because this presentation was originally written for a Django-loving audience who wanted to know more about Jquery, Ajax, and Json, I decided to make the most basic Django app that could easily function with the other (mostly) client-based technologies.</p>

<h2>Sample App</h2>

<p>The result was the "ask" app (<a href="https://bitbucket.org/jtsnake/ask>">source here</a>).  In the app, we have what is basically an FAQ.  Previously on the Internetz somewhere, I saw a fun FAQ where two people answered every question and almost the most fun thing for me was comparing the answers of the two people to one another.  The difference in their answers was often humorous and entertaining in addition to answering the question.  The questions were also often ridiculous.  This seemed like a fun format, so I asked my friend, <a href="http://rockycode.com/blog/author/steveo/">Steve</a> to answer a few questions with me, and we created the app.  Techs:</p>

<ul>
<li><a href="http://jquery.com/">Jquery</a></li>
<li><a href="http://api.jquery.com/category/plugins/templates/">Jquery Templates</a></li>
<li><a href="http://code.quirkey.com/sammy/">Sammy.js</a></li>
<li><a href="https://bitbucket.org/jespern/django-piston/wiki/Home">django-piston</a></li>
<li><a href="http://www.djangoproject.com/">Django</a></li>
</ul>


<p>On the backend, django-piston allows us to easily define handlers for the data that we want to expose through a RESTful API.  We define the urls to get to the handlers at, and boom!, we have json-flavored data being queried by Django, and displayed to requesters at the defined urls.</p>

<p>From here, we're very client heavy.</p>

<h2>Jquery Templates</h2>

<p>Jquery gives us an easy api to $.get() the data that we want.  We use Jquery Templates to do what Django templates may normally do for us:  Apply markup to our dynamic data.  With Jquery Templates, the server can send almost-raw data and the client, which seems to be a naturally fitting place for presentation transformation anyway, can now be fully in charge of what markup data should be displayed within.</p>

<h2>Sammy.js</h2>

<p>We also used just a portion of Sammy.js, the routing feature, to take care of the controller logic.  I like the Sammy.js routing for the same reason that I like the Django urls.py routing: it's very imperative, which I feel is elegant:  "Here's my url pattern, and here's the logic that goes with that."</p>

<h2>Why SOUIT</h2>

<p><a href="http://souit.org/">SOUIT</a> = Service-oriented User Interface Technology.  Why would we want to create an app like this?  Doesn't Django have the ability to do this all for me -- url routing, templating?  It does.  But that doesn't mean that it wouldn't be more fitting to have this happen elsewhere, if only partially.  Since browsers are becoming beefier and more capable of handling client side transformations like templating and with tools like Jquery and Sammy that make request and response routing very clean, why not try it there?  Throw in the requirement of "asynchronous"ity, and you may just be happy you have the ability to do all this on the client.  And it's cool -- worth an additional 5 points.  Plus, now that our web client is essentially a single-page app with all the smarts it needs to function, we can consider different backend technologies too.  Hmmm, a database that exposes its data through mere REST APIs?  CouchDb, maybe?</p>

<p>What do you think?  This example 'ask' application is definitely not extremely compelling, but what are the best uses of this particular client-heavy technology stack that you can think of?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jquery Plugin: safesubmit]]></title>
    <link href="http://jaketrent.com/post/jquery-plugin-safesubmit/"/>
    <updated>2010-06-28T14:07:00-06:00</updated>
    <id>http://jaketrent.com/post/jquery-plugin-safesubmit</id>
    <content type="html"><![CDATA[<p>Jquery gives a great, easy-to-use mechanism for extending its API and creating your own plugins.  For stuff that looks like it could be useful generally, you should really try to put it into a nice little plugin package.  For submit buttons, there is a general thought that they shouldn't be clicked twice (especially for functions such as financial transactions), so I created a plugin that fits an app that I have been working on recently, where there are many, many submit buttons, saving very granual pieces of content through ajax requests.</p>

<!--more-->


<p>The "safesubmit" plugin is going to disable submit buttons when clicked and, in most cases, re-enable them when the ajax request has completed.  On your app, if you had a class called "safe" on all the submit buttons that you wanted to exhibit this behavior, you could enable the plugin functionality with one line:</p>

<p><code>javascript
$(".safe").safesubmit();
</code></p>

<p>And that's it.  It's simple and powerful.  It's likely, however, because this happened on my project as well that the client code is going to have more complicated business rules.  In our case, someone added extra form validation where the length of the submitted field was checked -- if it passed, it was submitted; otherwise, it was not.  In that case, the plugin never re-enabled the button to be again pressable.  So, I exposed the functions of the plugin to be public, allowing you to shortcircuit the normal flow, essentially notifying the plugin to the submit failure.  For example, here's a submit's onclick event snippet:</p>

<p><code>javascript
if (valid()) {
  $.ajax ({ ... });
} else {
  $.fn.safesubmit.failsubmit($(this));
}
</code></p>

<p>If you need, the "safe" and "unsafe" methods are also made public.  You can call them whenever needed.  "safe" is the state of having the click disabled.  "unsafe" means you can click the button.</p>

<p>You can also change default settings.  For instance, by default when you put the button in "safe" mode, it adds disabled="disabled" attribute to the button and adds a class of "disabled".  You have the option of changing all 3 opts.  For instance, maybe you have a different class:</p>

<p><code>css
.dead {
  background-color: #ababab;
}
</code></p>

<p>and want to apply that class instead.  Try this:</p>

<p><code>javascript
$.fn.safesubmit.defaults.disabled_class = "dead";
$(".safe").safesubmit();
</code></p>

<p>Download the script on <a href="https://github.com/jtsnake/jquery-safesubmit">Github</a>.</p>
]]></content>
  </entry>
  
</feed>
